-- Change Script Generated at 11/14/2016 11:01 PM by jim

DECLARE @currentDatabaseVersion INTEGER, @errMsg VARCHAR(max)
SELECT @currentDatabaseVersion = MAX(change_number) FROM dbo.changelog

IF (@currentDatabaseVersion <> 0)
BEGIN
    SET @errMsg = 'Error: current database version is not 0, but ' + CONVERT(VARCHAR, @currentDatabaseVersion)
    RAISERROR (@errMsg, 18, 1)
END
GO
--------------- Fragment begins: C:\Users\jimto\Projects\survey-platform\CheckboxDB\.\Scripts\Deployed Scripts\0001 CreateInitialDatabase.sql ---------------
PRINT 'Executing C:\Users\jimto\Projects\survey-platform\CheckboxDB\.\Scripts\Deployed Scripts\0001 CreateInitialDatabase.sql'
BEGIN TRANSACTION

USE [master]
GO

IF EXISTS(select * from sys.databases where name='checkbox')
DROP DATABASE checkbox
GO

/****** Object:  Database [checkbox]    Script Date: 11/10/2016 8:45:36 AM ******/
CREATE DATABASE [checkbox]
 CONTAINMENT = NONE
GO
BEGIN TRANSACTION

ALTER DATABASE [checkbox] SET COMPATIBILITY_LEVEL = 130
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [checkbox].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [checkbox] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [checkbox] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [checkbox] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [checkbox] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [checkbox] SET ARITHABORT OFF 
GO
ALTER DATABASE [checkbox] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [checkbox] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [checkbox] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [checkbox] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [checkbox] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [checkbox] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [checkbox] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [checkbox] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [checkbox] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [checkbox] SET  DISABLE_BROKER 
GO
ALTER DATABASE [checkbox] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [checkbox] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [checkbox] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [checkbox] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [checkbox] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [checkbox] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [checkbox] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [checkbox] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [checkbox] SET  MULTI_USER 
GO
ALTER DATABASE [checkbox] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [checkbox] SET DB_CHAINING OFF 
GO
ALTER DATABASE [checkbox] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [checkbox] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [checkbox] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [checkbox] SET QUERY_STORE = OFF
GO
USE [checkbox]
GO
ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
GO
ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
GO
ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
GO
ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
GO
USE [checkbox]
GO
/****** Object:  User [checkbox]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE USER [checkbox] FOR LOGIN [checkbox] WITH DEFAULT_SCHEMA=[dbo]
GO
ALTER ROLE [db_owner] ADD MEMBER [checkbox]
GO
ALTER ROLE [db_ddladmin] ADD MEMBER [checkbox]
GO
ALTER ROLE [db_datareader] ADD MEMBER [checkbox]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [checkbox]
GO
/****** Object:  Table [dbo].[ckbx_Credential]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Credential](
	[UserName] [nvarchar](255) NOT NULL,
	[Password] [nvarchar](611) NULL,
	[Domain] [nvarchar](255) NULL,
	[UniqueIdentifier] [nvarchar](611) NULL,
	[GUID] [uniqueidentifier] NULL,
	[Encrypted] [bit] NULL,
	[Email] [nvarchar](255) NULL,
	[Created] [datetime] NULL,
	[LastActivity] [datetime] NULL,
	[LastLogin] [datetime] NULL,
	[LastPasswordChange] [datetime] NULL,
	[LastLockedOut] [datetime] NULL,
	[FailedLogins] [int] NOT NULL,
	[LockedOut] [bit] NOT NULL,
	[CreatedBy] [nvarchar](611) NULL,
	[ModifiedDate] [datetime] NULL,
	[ModifiedBy] [nvarchar](611) NULL,
 CONSTRAINT [PK_ckbx_Credential] UNIQUE NONCLUSTERED 
(
	[UniqueIdentifier] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_CustomUserField]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_CustomUserField](
	[CustomUserFieldID] [int] IDENTITY(1,1) NOT NULL,
	[CustomUserFieldName] [nvarchar](510) NULL,
	[Position] [int] NULL,
	[IsDeletable] [bit] NULL,
	[Hidden] [bit] NULL,
	[ShowInUserManager] [bit] NULL,
 CONSTRAINT [PK_ckbx_CustomUserField] PRIMARY KEY NONCLUSTERED 
(
	[CustomUserFieldID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_CustomUserFieldName]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_CustomUserFieldName] ON [dbo].[ckbx_CustomUserField]
(
	[CustomUserFieldName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_CustomUserFieldMap]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_CustomUserFieldMap](
	[UniqueIdentifier] [nvarchar](611) NOT NULL,
	[CustomUserFieldID] [int] NOT NULL,
	[Value] [nvarchar](510) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_UserProperty]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_UserProperty] ON [dbo].[ckbx_CustomUserFieldMap]
(
	[UniqueIdentifier] ASC,
	[CustomUserFieldID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  View [dbo].[ckbx_IdentityProfile]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[ckbx_IdentityProfile] AS
SELECT DISTINCT ckbx_Credential.UniqueIdentifier,ckbx_Credential.UserName,ckbx_Credential.Domain,ckbx_Credential.GUID,ckbx_Credential.Password,(SELECT Value From ckbx_CustomUserFieldMap INNER JOIN ckbx_CustomUserField on ckbx_CustomUserField.CustomUserFieldID = ckbx_CustomUserFieldMap.CustomUserFieldID WHERE ckbx_CustomUserField.CustomUserFieldName = 'FirstName' AND ckbx_Credential.UniqueIdentifier = ckbx_CustomUserFieldMap.UniqueIdentifier) AS 'FirstName',(SELECT Value From ckbx_CustomUserFieldMap INNER JOIN ckbx_CustomUserField on ckbx_CustomUserField.CustomUserFieldID = ckbx_CustomUserFieldMap.CustomUserFieldID WHERE ckbx_CustomUserField.CustomUserFieldName = 'LastName' AND ckbx_Credential.UniqueIdentifier = ckbx_CustomUserFieldMap.UniqueIdentifier) AS 'LastName',(SELECT Value From ckbx_CustomUserFieldMap INNER JOIN ckbx_CustomUserField on ckbx_CustomUserField.CustomUserFieldID = ckbx_CustomUserFieldMap.CustomUserFieldID WHERE ckbx_CustomUserField.CustomUserFieldName = 'MiddleInitial' AND ckbx_Credential.UniqueIdentifier = ckbx_CustomUserFieldMap.UniqueIdentifier) AS 'MiddleInitial',(SELECT Value From ckbx_CustomUserFieldMap INNER JOIN ckbx_CustomUserField on ckbx_CustomUserField.CustomUserFieldID = ckbx_CustomUserFieldMap.CustomUserFieldID WHERE ckbx_CustomUserField.CustomUserFieldName = 'Company' AND ckbx_Credential.UniqueIdentifier = ckbx_CustomUserFieldMap.UniqueIdentifier) AS 'Company',(SELECT Value From ckbx_CustomUserFieldMap INNER JOIN ckbx_CustomUserField on ckbx_CustomUserField.CustomUserFieldID = ckbx_CustomUserFieldMap.CustomUserFieldID WHERE ckbx_CustomUserField.CustomUserFieldName = 'Email' AND ckbx_Credential.UniqueIdentifier = ckbx_CustomUserFieldMap.UniqueIdentifier) AS 'Email',(SELECT Value From ckbx_CustomUserFieldMap INNER JOIN ckbx_CustomUserField on ckbx_CustomUserField.CustomUserFieldID = ckbx_CustomUserFieldMap.CustomUserFieldID WHERE ckbx_CustomUserField.CustomUserFieldName = 'Group' AND ckbx_Credential.UniqueIdentifier = ckbx_CustomUserFieldMap.UniqueIdentifier) AS 'Group',(SELECT Value From ckbx_CustomUserFieldMap INNER JOIN ckbx_CustomUserField on ckbx_CustomUserField.CustomUserFieldID = ckbx_CustomUserFieldMap.CustomUserFieldID WHERE ckbx_CustomUserField.CustomUserFieldName = 'First And Last Name' AND ckbx_Credential.UniqueIdentifier = ckbx_CustomUserFieldMap.UniqueIdentifier) AS 'First And Last Name' FROM ckbx_Credential LEFT OUTER JOIN ckbx_CustomUserFieldMap ON ckbx_CustomUserFieldMap.UniqueIdentifier = ckbx_Credential.UniqueIdentifier LEFT OUTER JOIN ckbx_CustomUserField ON ckbx_CustomUserField.CustomUserFieldID = ckbx_CustomUserFieldMap.CustomUserFieldID


GO
/****** Object:  Table [dbo].[ckbx_ResponseTemplate]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ResponseTemplate](
	[ResponseTemplateID] [int] NOT NULL,
	[CreatedBy] [nvarchar](611) NULL,
	[TemplateName] [nvarchar](255) NULL,
	[NameTextID] [varchar](255) NULL,
	[TitleTextID] [varchar](255) NULL,
	[DescriptionTextID] [varchar](255) NULL,
	[IsActive] [bit] NULL,
	[ActivationStart] [datetime] NULL,
	[ActivationEnd] [datetime] NULL,
	[MaxTotalResponses] [int] NULL,
	[MaxResponsesPerUser] [int] NULL,
	[AllowContinue] [bit] NULL,
	[AllowEdit] [bit] NULL,
	[DisableBackButton] [bit] NULL,
	[StyleTemplateID] [int] NULL,
	[ShowPageNumbers] [bit] NULL,
	[ShowProgressBar] [bit] NULL,
	[ShowItemNumbers] [bit] NULL,
	[ShowTitle] [bit] NULL,
	[RandomizeItemsInPages] [bit] NULL,
	[MobileCompatible] [bit] NULL,
	[ButtonContinueTextID] [nvarchar](255) NULL,
	[ButtonBackTextID] [nvarchar](255) NULL,
	[CompletionType] [int] NULL,
	[SupportedLanguages] [nvarchar](1023) NULL,
	[DefaultLanguage] [nvarchar](5) NULL,
	[LanguageSourceToken] [nvarchar](100) NULL,
	[SecurityType] [int] NULL,
	[GuestPassword] [nvarchar](255) NULL,
	[LoginUrl] [nvarchar](500) NULL,
	[ReportSecurityType] [int] NULL,
	[EnableScoring] [bit] NULL,
	[GUID] [uniqueidentifier] NULL,
	[ShowValidationMessage] [bit] NULL,
	[RequiredFieldsAlert] [bit] NULL,
	[LanguageSource] [nvarchar](25) NULL,
	[EnableDynamicPageNumbers] [bit] NULL,
	[EnableDynamicItemNumbers] [bit] NULL,
	[ShowSaveAndQuit] [bit] NULL,
	[AllowSurveyEditWhileActive] [bit] NULL,
	[IsPoll] [bit] NULL,
	[ChartStyleID] [int] NULL,
	[Height] [int] NULL,
	[Width] [int] NULL,
	[BorderWidth] [int] NULL,
	[BorderColor] [varchar](63) NULL,
	[BorderStyle] [varchar](63) NULL,
	[AnonymizeResponses] [bit] NULL,
	[TabletStyleTemplateID] [int] NULL,
	[SmartPhoneStyleTemplateID] [int] NULL,
	[AllowFormReset] [bit] NULL,
	[ShowAsterisks] [bit] NULL,
	[HideFooterHeader] [bit] NULL,
	[MobileStyleId] [int] NULL,
	[ProgressBarOrientation] [int] NULL,
	[GoogleAnalyticsTrackingID] [varchar](32) NULL,
 CONSTRAINT [PK_ckbx_ResponseTemplate] PRIMARY KEY CLUSTERED 
(
	[ResponseTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Template]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Template](
	[TemplateID] [int] IDENTITY(1000,1) NOT NULL,
	[ModifiedDate] [datetime] NULL,
	[Deleted] [bit] NULL,
	[DefaultPolicy] [int] NULL,
	[AclID] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[CreatedBy] [nvarchar](611) NULL,
	[ModifiedBy] [nvarchar](611) NULL,
 CONSTRAINT [PK_ckbx_Template] PRIMARY KEY CLUSTERED 
(
	[TemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Folder]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Folder](
	[FolderID] [int] IDENTITY(1000,1) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
	[LastModified] [datetime] NOT NULL,
	[CreatedBy] [nvarchar](611) NOT NULL,
	[AclID] [int] NOT NULL,
	[DefaultPolicy] [int] NOT NULL,
	[Name] [nvarchar](255) NULL,
	[Description] [nvarchar](1000) NULL,
 CONSTRAINT [PK_ckbx_Folder] PRIMARY KEY CLUSTERED 
(
	[FolderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_FormFolders]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_FormFolders](
	[ItemID] [int] NOT NULL,
	[AncestorID] [int] NULL,
	[NumLevel] [int] NOT NULL,
	[Path] [nvarchar](510) NULL,
	[ItemType] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_ckbx_FormFolders] PRIMARY KEY CLUSTERED 
(
	[ItemID] ASC,
	[ItemType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Response]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Response](
	[ResponseID] [bigint] IDENTITY(1000,1) NOT NULL,
	[GUID] [uniqueidentifier] NULL,
	[ResponseTemplateID] [int] NULL,
	[IsComplete] [bit] NULL,
	[LastPageViewed] [int] NULL,
	[Started] [datetime] NOT NULL,
	[Ended] [datetime] NULL,
	[IP] [nvarchar](50) NULL,
	[LastEdit] [datetime] NULL,
	[NetworkUser] [nvarchar](510) NULL,
	[Language] [nvarchar](8) NULL,
	[UniqueIdentifier] [nvarchar](255) NULL,
	[Deleted] [bit] NULL,
	[RespondentGUID] [uniqueidentifier] NULL,
	[IsTest] [bit] NOT NULL,
	[Invitee] [nvarchar](1020) NULL,
	[ResumeKey] [char](32) NULL,
	[SessionId] [uniqueidentifier] NULL,
	[IsAnonymized] [bit] NULL,
 CONSTRAINT [PK_ckbx_Response] PRIMARY KEY CLUSTERED 
(
	[ResponseID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  View [dbo].[ckbx_TemplatesAndFoldersView]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE         VIEW [dbo].[ckbx_TemplatesAndFoldersView]
AS
SELECT     
    CASE WHEN ckbx_FormFolders.ItemType = 'Form' AND ckbx_ResponseTemplate.IsPoll = 1 THEN 'Poll' ELSE ckbx_FormFolders.ItemType END AS ItemType,
    ckbx_FormFolders.ItemID, 
    ckbx_ResponseTemplate.IsActive, 
	ckbx_ResponseTemplate.AllowSurveyEditWhileActive as AllowSurveyEditWhileActive,
    ckbx_Template.Deleted,
    CASE WHEN ckbx_FormFolders.ItemType = 'Form' THEN (SELECT COUNT(ResponseID) FROM ckbx_Response WHERE ckbx_Response.ResponseTemplateID = ckbx_FormFolders.ItemID AND ckbx_Response.IsComplete = 1 AND (ckbx_Response.Deleted IS NULL OR ckbx_Response.Deleted = 0)) ELSE 0 END AS CompleteResponseCount,
    CASE WHEN ckbx_FormFolders.ItemType = 'Form' THEN (SELECT COUNT(ResponseID) FROM ckbx_Response WHERE ckbx_Response.ResponseTemplateID = ckbx_FormFolders.ItemID AND ckbx_Response.IsComplete = 0 AND (ckbx_Response.Deleted IS NULL OR ckbx_Response.Deleted = 0)) ELSE 0 END AS InCompleteResponseCount,
    ckbx_FormFolders.AncestorID, 
    ckbx_FormFolders.NumLevel, 
    CASE WHEN ckbx_ResponseTemplate.TemplateName IS NULL THEN ckbx_Folder.[Name] ELSE ckbx_ResponseTemplate.TemplateName END AS ItemName, 
    CASE WHEN ckbx_ResponseTemplate.CreatedBy IS NULL THEN ckbx_Folder.CreatedBy ELSE ckbx_ResponseTemplate.CreatedBy END AS Owner,
    CASE WHEN ckbx_Template.CreatedDate IS NULL THEN ckbx_Folder.DateCreated ELSE ckbx_Template.CreatedDate END AS DateCreated, 
    CASE WHEN ckbx_Template.AclID IS NULL THEN ckbx_Folder.AclID ELSE ckbx_Template.AclID END AS AclID, 
    CASE WHEN ckbx_Template.DefaultPolicy IS NULL THEN ckbx_Folder.DefaultPolicy ELSE ckbx_Template.DefaultPolicy END AS DefaultPolicy,
	ckbx_ResponseTemplate.GUID AS ResponseTemplateGUID,
	ckbx_ResponseTemplate.LanguageSource,
	ckbx_ResponseTemplate.LanguageSourceToken,
	ckbx_ResponseTemplate.SupportedLanguages,
	ckbx_ResponseTemplate.ActivationStart,
	ckbx_ResponseTemplate.ActivationEnd,
	ckbx_ResponseTemplate.MaxTotalResponses,
	ckbx_ResponseTemplate.MaxResponsesPerUser,
	ckbx_ResponseTemplate.SecurityType,
	ckbx_ResponseTemplate.AnonymizeResponses
  FROM         
    ckbx_FormFolders 
    LEFT OUTER JOIN ckbx_Folder ON ckbx_Folder.FolderID = ckbx_FormFolders.ItemID AND ckbx_FormFolders.ItemType = 'Folder' 
    LEFT OUTER JOIN ckbx_ResponseTemplate ON ckbx_ResponseTemplate.ResponseTemplateID = ckbx_FormFolders.ItemID AND ckbx_FormFolders.ItemType = 'Form'
    LEFT OUTER JOIN ckbx_Template ON ckbx_Template.TemplateID = ckbx_ResponseTemplate.ResponseTemplateID
  WHERE
    ckbx_Template.Deleted IS NULL OR ckbx_Template.Deleted = 0





GO
/****** Object:  Table [dbo].[ckbx_AccessControlEntries]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_AccessControlEntries](
	[AclID] [int] NULL,
	[EntryID] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_AclID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_AclID] ON [dbo].[ckbx_AccessControlEntries]
(
	[AclID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_AccessControlEntry]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_AccessControlEntry](
	[EntryID] [int] IDENTITY(1000,1) NOT NULL,
	[EntryType] [varchar](255) NOT NULL,
	[EntryIdentifier] [nvarchar](255) NOT NULL,
	[PolicyID] [int] NOT NULL,
 CONSTRAINT [PK_ckbx_AccessControlEntry] PRIMARY KEY CLUSTERED 
(
	[EntryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_AccessControlList]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_AccessControlList](
	[AclID] [int] IDENTITY(1000,1) NOT NULL,
	[Created] [datetime] NULL,
	[LastModified] [datetime] NULL,
 CONSTRAINT [PK_ckbx_AccessControlList] PRIMARY KEY CLUSTERED 
(
	[AclID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Action]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Action](
	[ActionID] [int] IDENTITY(1000,1) NOT NULL,
	[ActionTypeName] [varchar](255) NOT NULL,
	[ActionAssembly] [varchar](255) NOT NULL,
 CONSTRAINT [PK_ckbx_Action] PRIMARY KEY CLUSTERED 
(
	[ActionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_AdHocEmailPanel]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_AdHocEmailPanel](
	[PanelID] [int] NOT NULL,
	[EmailAddress] [nvarchar](255) NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_PanelID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_PanelID] ON [dbo].[ckbx_AdHocEmailPanel]
(
	[PanelID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_AnalysisTemplate]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_AnalysisTemplate](
	[AnalysisTemplateID] [int] NOT NULL,
	[StyleTemplateID] [int] NULL,
	[ResponseTemplateID] [int] NULL,
	[AnalysisName] [nvarchar](255) NULL,
	[NameTextID] [nvarchar](255) NULL,
	[GUID] [uniqueidentifier] NULL,
	[DateFilterStart] [datetime] NULL,
	[DateFilterEnd] [datetime] NULL,
	[ChartStyleID] [int] NULL,
	[DisplaySurveyTitle] [bit] NOT NULL,
	[DisplayPdfExportButton] [bit] NOT NULL,
	[IncludeIncompleteResponses] [bit] NULL,
	[IncludeTestResponses] [bit] NULL,
 CONSTRAINT [PK_ckbx_AnalysisTemplate] PRIMARY KEY NONCLUSTERED 
(
	[AnalysisTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_AnalysisTemplateID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_AnalysisTemplateID] ON [dbo].[ckbx_AnalysisTemplate]
(
	[AnalysisTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_Appearance_AnalysisItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Appearance_AnalysisItem](
	[AppearanceID] [int] NOT NULL,
	[Precision] [int] NULL,
	[Explosion] [int] NULL,
	[ShowDataLabels] [bit] NULL,
	[ShowDLZeroValues] [bit] NULL,
	[ShowDLValues] [bit] NULL,
	[Separator] [varchar](10) NULL,
	[ShowXTitle] [bit] NULL,
	[Width] [int] NULL,
	[Height] [int] NULL,
	[ShowLegend] [bit] NULL,
	[LegendWidth] [int] NULL,
	[ShowTitle] [bit] NULL,
	[ShowResponseCount] [bit] NULL,
	[TitleColor] [varchar](50) NULL,
	[BGColor] [varchar](50) NULL,
	[BGGradient] [bit] NULL,
	[ShowHeader] [bit] NULL,
	[Spacing] [int] NULL,
	[ShowPercent] [bit] NULL,
	[ForeColor] [varchar](50) NULL,
	[Color] [varchar](50) NULL,
	[PieGraphColors] [varchar](255) NULL,
	[MaxColWidth] [int] NULL,
	[TitleFont] [varchar](255) NULL,
	[LegendFont] [varchar](255) NULL,
	[ShowAnswerCount] [bit] NULL,
 CONSTRAINT [PK_ckbx_Appearance_AnalysisItem] PRIMARY KEY CLUSTERED 
(
	[AppearanceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Appearance_Properties]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Appearance_Properties](
	[AppearanceId] [int] NULL,
	[PropertyName] [varchar](64) NULL,
	[ValueAsString] [nvarchar](1024) NULL,
	[ValueType] [varchar](255) NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_AppearanceId]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_AppearanceId] ON [dbo].[ckbx_Appearance_Properties]
(
	[AppearanceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_AppearancePreset]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_AppearancePreset](
	[PresetID] [int] IDENTITY(1000,1) NOT NULL,
	[AppearanceID] [int] NULL,
	[PresetName] [nvarchar](255) NULL,
	[CreatedBy] [nvarchar](611) NULL,
	[Public] [bit] NULL,
	[Editable] [bit] NULL,
 CONSTRAINT [PK_ckbx_AppearancePreset] PRIMARY KEY CLUSTERED 
(
	[PresetID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_AutocompleteList]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_AutocompleteList](
	[ListID] [int] IDENTITY(1000,1) NOT NULL,
	[Name] [nvarchar](32) NULL,
	[Data] [ntext] NULL,
	[IsDeleted] [bit] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_CompanyProfile]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_CompanyProfile](
	[ID] [int] IDENTITY(1000,1) NOT NULL,
	[IsDefault] [bit] NULL,
	[ProfileName] [nvarchar](64) NULL,
	[Address1] [nvarchar](512) NULL,
	[Address2] [nvarchar](512) NULL,
	[City] [nvarchar](64) NULL,
	[Company] [nvarchar](512) NULL,
	[Country] [nvarchar](64) NULL,
	[PostCode] [nvarchar](32) NULL,
	[State] [nvarchar](32) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Content_Folders]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Content_Folders](
	[FolderID] [int] IDENTITY(1000,1) NOT NULL,
	[ParentFolderID] [int] NULL,
	[FolderName] [nvarchar](63) NULL,
	[CreatedBy] [nvarchar](611) NULL,
	[FolderPath] [nvarchar](1024) NULL,
	[IsPublic] [bit] NULL,
 CONSTRAINT [PK_ckbx_Content_Folders] PRIMARY KEY CLUSTERED 
(
	[FolderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Content_Items]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Content_Items](
	[ItemID] [int] IDENTITY(1000,1) NOT NULL,
	[FolderID] [int] NULL,
	[ItemName] [nvarchar](255) NULL,
	[ItemUrl] [nvarchar](255) NULL,
	[CreatedBy] [nvarchar](611) NULL,
	[IsPublic] [bit] NULL,
	[MIMEContentType] [nvarchar](255) NULL,
	[LastUpdated] [datetime] NULL,
	[ItemData] [image] NULL,
 CONSTRAINT [PK_ckbx_Content_Items] PRIMARY KEY CLUSTERED 
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_CustomValidators]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_CustomValidators](
	[Id] [int] IDENTITY(1000,1) NOT NULL,
	[FormatId] [varchar](128) NOT NULL,
	[Expression] [nvarchar](1024) NOT NULL,
	[Position] [int] NOT NULL,
UNIQUE NONCLUSTERED 
(
	[FormatId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_EmailListPanel]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_EmailListPanel](
	[PanelID] [int] NOT NULL,
	[EmailAddress] [nvarchar](255) NOT NULL,
	[FName] [nvarchar](255) NULL,
	[LName] [nvarchar](255) NULL,
 CONSTRAINT [PK_ckbx_EmailListPanel] PRIMARY KEY NONCLUSTERED 
(
	[PanelID] ASC,
	[EmailAddress] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_PanelID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_PanelID] ON [dbo].[ckbx_EmailListPanel]
(
	[PanelID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ExceptionLog]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ExceptionLog](
	[EntryId] [int] IDENTITY(1,1) NOT NULL,
	[ContextID] [int] NOT NULL,
	[AppDomainName] [nvarchar](255) NULL,
	[Category] [nvarchar](255) NULL,
	[ErrorMessages] [nvarchar](255) NULL,
	[EventId] [int] NULL,
	[MachineName] [nvarchar](255) NULL,
	[ManagedThreadName] [nvarchar](255) NULL,
	[MessageText] [ntext] NULL,
	[Priority] [int] NULL,
	[ProcessId] [int] NULL,
	[ProcessName] [nvarchar](255) NULL,
	[Severity] [nvarchar](255) NULL,
	[Title] [nvarchar](255) NULL,
	[DateTimeStamp] [datetime] NULL,
	[ThreadId] [nvarchar](255) NULL,
 CONSTRAINT [PK_ckbx_ExceptionLog] PRIMARY KEY CLUSTERED 
(
	[EntryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Expression]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Expression](
	[ExpressionID] [int] IDENTITY(1000,1) NOT NULL,
	[Operator] [int] NOT NULL,
	[LeftOperand] [int] NULL,
	[RightOperand] [int] NULL,
	[Parent] [int] NULL,
	[Depth] [int] NULL,
	[Lineage] [varchar](255) NULL,
	[Root] [int] NULL,
	[ChildRelation] [varchar](3) NULL,
 CONSTRAINT [PK_ckbx_Expression] PRIMARY KEY CLUSTERED 
(
	[ExpressionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_FavoriteSurvey]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_FavoriteSurvey](
	[UserID] [nvarchar](255) NOT NULL,
	[ResponseTemplateID] [int] NOT NULL,
 CONSTRAINT [PK_ckbx_FavoriteSurvey_1] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[ResponseTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_FileUpload]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_FileUpload](
	[FileID] [int] IDENTITY(1000,1) NOT NULL,
	[FileData] [image] NULL,
	[FileName] [nvarchar](255) NOT NULL,
	[FileType] [nvarchar](10) NOT NULL,
	[FileSize] [int] NOT NULL,
	[FileGuid] [uniqueidentifier] NULL,
 CONSTRAINT [PK_ckbx_FileUpload] PRIMARY KEY CLUSTERED 
(
	[FileID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_FileUpload_AllowedFileType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_FileUpload_AllowedFileType](
	[TypeID] [int] IDENTITY(1000,1) NOT NULL,
	[TypeExtension] [nvarchar](10) NOT NULL,
	[TypeDescription] [nvarchar](255) NULL,
 CONSTRAINT [PK_ckbx_FileUpload_AllowedFileType] PRIMARY KEY CLUSTERED 
(
	[TypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Filter]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Filter](
	[FilterID] [int] IDENTITY(1000,1) NOT NULL,
	[Operator] [varchar](50) NULL,
	[Value] [nvarchar](255) NULL,
	[FilterTypeID] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_ckbx_Filter] PRIMARY KEY CLUSTERED 
(
	[FilterID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Filter_Item]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Filter_Item](
	[FilterID] [int] NULL,
	[ItemID] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_Filter_Item]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_Filter_Map]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Filter_Map](
	[FilterID] [int] NULL,
	[ParentID] [int] NULL,
	[ParentType] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Filter_Profile]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Filter_Profile](
	[FilterID] [int] NOT NULL,
	[ProfileField] [nvarchar](510) NULL,
 CONSTRAINT [PK_FilterID] PRIMARY KEY CLUSTERED 
(
	[FilterID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Filter_Response]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Filter_Response](
	[FilterID] [int] NOT NULL,
	[ResponseProperty] [nvarchar](510) NULL,
 CONSTRAINT [PK_FR_FilterID] PRIMARY KEY CLUSTERED 
(
	[FilterID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_FilterType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_FilterType](
	[FilterTypeID] [int] IDENTITY(1,1) NOT NULL,
	[FilterTypeName] [varchar](64) NULL,
	[DataTypeAssemblyName] [nvarchar](255) NULL,
	[DataTypeClassName] [nvarchar](255) NULL,
 CONSTRAINT [PK_FilterType] PRIMARY KEY CLUSTERED 
(
	[FilterTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Group]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Group](
	[GroupID] [int] IDENTITY(1000,1) NOT NULL,
	[GroupName] [nvarchar](510) NULL,
	[Description] [nvarchar](510) NULL,
	[DateCreated] [datetime] NULL,
	[CreatedBy] [nvarchar](611) NULL,
	[AclID] [int] NULL,
	[DefaultPolicy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
	[ModifiedBy] [nvarchar](611) NULL,
 CONSTRAINT [PK_ckbx_Group] PRIMARY KEY CLUSTERED 
(
	[GroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_GroupMembers]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_GroupMembers](
	[GroupID] [int] NOT NULL,
	[MemberUniqueIdentifier] [nvarchar](611) NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_GroupID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_GroupID] ON [dbo].[ckbx_GroupMembers]
(
	[GroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_GroupPanel]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_GroupPanel](
	[PanelID] [int] NOT NULL,
	[GroupID] [int] NOT NULL,
 CONSTRAINT [PK_ckbx_GroupPanel] PRIMARY KEY NONCLUSTERED 
(
	[PanelID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_GroupPanel]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_GroupPanel] ON [dbo].[ckbx_GroupPanel]
(
	[PanelID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_HelpContextMap]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_HelpContextMap](
	[SourceFilePath] [nvarchar](1024) NOT NULL,
	[HelpFileIdentifier] [nvarchar](255) NOT NULL,
	[HelpFileID] [int] NOT NULL,
	[HelpSkinName] [nvarchar](255) NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_IdentityRoles]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_IdentityRoles](
	[UniqueIdentifier] [nvarchar](255) NOT NULL,
	[RoleID] [int] NOT NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_UniqueIdentifier]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_UniqueIdentifier] ON [dbo].[ckbx_IdentityRoles]
(
	[UniqueIdentifier] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_Image]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Image](
	[ImageID] [int] IDENTITY(1,1) NOT NULL,
	[ImageData] [image] NULL,
	[ContentType] [nvarchar](100) NULL,
	[ImageUrl] [nvarchar](255) NULL,
	[ImageName] [nvarchar](255) NULL,
	[GUID] [varchar](50) NULL,
	[dateAdded] [datetime] NOT NULL,
	[isTemporary] [bit] NOT NULL,
 CONSTRAINT [PK_ckbx_Image] PRIMARY KEY CLUSTERED 
(
	[ImageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Invitation]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Invitation](
	[InvitationID] [int] IDENTITY(1000,1) NOT NULL,
	[GUID] [uniqueidentifier] NOT NULL,
	[ResponseTemplateID] [int] NOT NULL,
	[Name] [nvarchar](255) NULL,
	[EmailFormat] [varchar](4) NULL,
	[Subject] [nvarchar](510) NULL,
	[Body] [ntext] NULL,
	[FromAddress] [nvarchar](510) NULL,
	[FromName] [nvarchar](510) NULL,
	[LinkText] [nvarchar](510) NULL,
	[LoginOption] [varchar](100) NULL,
	[DateCreated] [datetime] NULL,
	[CreatedBy] [nvarchar](611) NULL,
	[FirstSentOn] [datetime] NULL,
	[LastSentOn] [datetime] NULL,
	[IncludeOptOutLink] [bit] NULL,
	[OptOutText] [ntext] NULL,
	[ReminderBody] [ntext] NULL,
	[ReminderSubject] [nvarchar](510) NULL,
	[CompanyProfileId] [int] NULL,
 CONSTRAINT [PK_ckbx_Invitation] PRIMARY KEY CLUSTERED 
(
	[InvitationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Invitation_OptedOutEmails]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Invitation_OptedOutEmails](
	[EmailAddress] [nvarchar](255) NOT NULL,
	[ResponseTemplateId] [int] NULL,
	[OptOutType] [int] NOT NULL,
	[UserComment] [nvarchar](1024) NULL,
	[DateOccur] [datetime] NULL,
	[InvitationId] [int] NULL,
	[OptedOutEmailID] [int] IDENTITY(1000,1) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[OptedOutEmailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Invitation_QueueBatches]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Invitation_QueueBatches](
	[InvitationId] [int] NOT NULL,
	[BatchId] [bigint] NOT NULL,
	[BatchDescription] [nvarchar](1023) NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Invitation_QueueMessages]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Invitation_QueueMessages](
	[InvitationId] [int] NOT NULL,
	[RecipientId] [bigint] NOT NULL,
	[MessageId] [bigint] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Invitation_Responses]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Invitation_Responses](
	[RecipientID] [bigint] NULL,
	[ResponseID] [bigint] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_InvitationPanels]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_InvitationPanels](
	[InvitationID] [int] NOT NULL,
	[PanelID] [int] NOT NULL,
 CONSTRAINT [PK_ckbx_InvitationPanels] PRIMARY KEY NONCLUSTERED 
(
	[InvitationID] ASC,
	[PanelID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_InvitationID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_InvitationID] ON [dbo].[ckbx_InvitationPanels]
(
	[InvitationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_InvitationRecipients]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_InvitationRecipients](
	[RecipientID] [bigint] IDENTITY(1000,1) NOT NULL,
	[InvitationID] [int] NOT NULL,
	[PanelID] [int] NOT NULL,
	[EmailAddress] [nvarchar](255) NULL,
	[UniqueIdentifier] [nvarchar](611) NULL,
	[GUID] [uniqueidentifier] NOT NULL,
	[HasResponded] [bit] NOT NULL,
	[TotalSent] [int] NOT NULL,
	[SuccessfullySent] [bit] NULL,
	[LastSent] [datetime] NULL,
	[ErrorMessage] [ntext] NULL,
	[Deleted] [bit] NULL,
	[OptOut] [bit] NULL,
	[LastBatchMessageId] [bigint] NULL,
	[ProcessingBatchId] [bigint] NULL,
 CONSTRAINT [PK_ckbx_InvitationRecipients] PRIMARY KEY CLUSTERED 
(
	[RecipientID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_InvitationSchedule]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_InvitationSchedule](
	[InvitationScheduleID] [bigint] IDENTITY(1,1) NOT NULL,
	[InvitationID] [int] NOT NULL,
	[InvitationActivityType] [varchar](50) NOT NULL,
	[DateScheduled] [datetime] NULL,
	[ProcessingStarted] [datetime] NULL,
	[ProcessingFinished] [datetime] NULL,
	[Creator] [nvarchar](611) NULL,
	[ErrorMessage] [ntext] NULL,
	[BatchID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[InvitationScheduleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Item]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Item](
	[ItemID] [int] IDENTITY(1000,1) NOT NULL,
	[ItemTypeID] [int] NOT NULL,
	[Alias] [nvarchar](255) NULL,
	[CreatedDate] [datetime] NOT NULL,
	[ModifiedDate] [datetime] NOT NULL,
	[Deleted] [int] NULL,
	[IsActive] [bit] NULL,
	[CreatedBy] [nvarchar](611) NULL,
	[ModifiedBy] [nvarchar](611) NULL,
 CONSTRAINT [PK_ckbx_Item] PRIMARY KEY CLUSTERED 
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemAppearance]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemAppearance](
	[AppearanceID] [int] IDENTITY(1000,1) NOT NULL,
	[AppearanceCode] [varchar](255) NOT NULL,
	[LayoutStyle] [varchar](50) NULL,
	[Columns] [int] NULL,
	[Width] [int] NULL,
	[Height] [int] NULL,
	[ShowNumberLabels] [int] NULL,
	[FontColor] [varchar](255) NULL,
	[FontSize] [varchar](10) NULL,
	[ItemPosition] [varchar](10) NULL,
	[Rows] [int] NULL,
	[LabelPosition] [varchar](10) NULL,
	[UseAliases] [bit] NULL,
	[GraphType] [varchar](50) NULL,
	[ShowGridLines] [bit] NULL,
	[GridLines] [varchar](32) NULL,
	[LastModified] [datetime] NULL,
 CONSTRAINT [PK_ckbx_Appearance] PRIMARY KEY CLUSTERED 
(
	[AppearanceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemAppearanceCode]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemAppearanceCode](
	[AppearanceCode] [varchar](255) NOT NULL,
	[DataTypeName] [varchar](255) NOT NULL,
	[DataTypeAssembly] [varchar](255) NOT NULL,
 CONSTRAINT [PK_ckbx_ItemAppearanceCode] PRIMARY KEY CLUSTERED 
(
	[AppearanceCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemAppearanceEditor]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemAppearanceEditor](
	[AppearanceCode] [varchar](255) NOT NULL,
	[EditorTypeName] [varchar](255) NOT NULL,
	[EditorTypeAssembly] [varchar](255) NOT NULL,
 CONSTRAINT [PK_ckbx_AppearanceCode_Editor_Assoc] PRIMARY KEY CLUSTERED 
(
	[AppearanceCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemAppearanceRenderer]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemAppearanceRenderer](
	[AppearanceCode] [varchar](255) NOT NULL,
	[RendererTypeName] [varchar](255) NOT NULL,
	[RendererAssemblyName] [varchar](255) NOT NULL,
 CONSTRAINT [PK_ckbx_ItemAppearanceRenderer] PRIMARY KEY CLUSTERED 
(
	[AppearanceCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemAppearances]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemAppearances](
	[ItemID] [int] NOT NULL,
	[AppearanceID] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemAppearances]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_Address]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_Address](
	[ItemID] [int] NOT NULL,
	[AddressID] [nvarchar](255) NULL,
	[SubTextID] [nvarchar](255) NULL,
	[IsRequired] [int] NULL,
	[DefaultTextID] [nvarchar](255) NULL,
	[Region] [nvarchar](255) NULL,
	[SearchType] [nvarchar](255) NULL,
	[Rule] [nvarchar](255) NULL,
	[Rural] [nvarchar](255) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemData_AI_ResponseTemplates]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_AI_ResponseTemplates](
	[AnalysisItemID] [int] NOT NULL,
	[ResponseTemplateID] [int] NULL,
 CONSTRAINT [PK_ckbx_ItemData_AI_ResponseTemplates] PRIMARY KEY NONCLUSTERED 
(
	[AnalysisItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_AnalysisItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_AnalysisItemID] ON [dbo].[ckbx_ItemData_AI_ResponseTemplates]
(
	[AnalysisItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_AI_SourceItems]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_AI_SourceItems](
	[AnalysisItemID] [int] NOT NULL,
	[SourceItemID] [int] NOT NULL,
 CONSTRAINT [PK_ckbx_ItemData_AI_SourceItems] PRIMARY KEY NONCLUSTERED 
(
	[AnalysisItemID] ASC,
	[SourceItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_AnalysisItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_AnalysisItemID] ON [dbo].[ckbx_ItemData_AI_SourceItems]
(
	[AnalysisItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_AI_SourcePages]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_AI_SourcePages](
	[AnalysisItemID] [int] NOT NULL,
	[SourcePageID] [int] NOT NULL,
 CONSTRAINT [PK_ckbx_ItemData_AI_SourcePages] PRIMARY KEY NONCLUSTERED 
(
	[AnalysisItemID] ASC,
	[SourcePageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_AnalysisItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_AnalysisItemID] ON [dbo].[ckbx_ItemData_AI_SourcePages]
(
	[AnalysisItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_AverageScore]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_AverageScore](
	[ItemID] [int] NULL,
	[ScoreOption] [nvarchar](50) NULL,
	[UseAliases] [bit] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemData_Captcha]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_Captcha](
	[ItemID] [int] NOT NULL,
	[MaxCodeLength] [int] NOT NULL,
	[MinCodeLength] [int] NOT NULL,
	[CodeType] [varchar](50) NULL,
	[ImageHeight] [int] NOT NULL,
	[ImageWidth] [int] NOT NULL,
	[ImageFormat] [varchar](50) NULL,
	[TextStyles] [varchar](4000) NULL,
	[EnableSound] [bit] NULL,
 CONSTRAINT [PK_ckbx_ItemData_Captcha] PRIMARY KEY CLUSTERED 
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemData_CrossTab]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_CrossTab](
	[ItemID] [int] NOT NULL,
	[UseAliases] [bit] NULL,
 CONSTRAINT [PK_ckbx_ItemData_CrossTab] PRIMARY KEY CLUSTERED 
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemData_CrossTab_Map]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_CrossTab_Map](
	[AnalysisItemID] [int] NOT NULL,
	[ItemID] [int] NOT NULL,
	[Axis] [nvarchar](1) NULL,
 CONSTRAINT [PK_ckbx_ItemData_CrossTab_Map] PRIMARY KEY NONCLUSTERED 
(
	[AnalysisItemID] ASC,
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_AnalysisItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_AnalysisItemID] ON [dbo].[ckbx_ItemData_CrossTab_Map]
(
	[AnalysisItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_CurrentScore]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_CurrentScore](
	[ItemId] [int] NOT NULL,
	[MessageTextId] [nvarchar](255) NULL,
	[PageId] [int] NULL,
 CONSTRAINT [PK_ckbx_ItemData_CurrentScore] PRIMARY KEY CLUSTERED 
(
	[ItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemData_DetailsItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_DetailsItem](
	[ItemID] [int] NOT NULL,
	[GroupAnswers] [bit] NULL,
	[LinkToResponseDetails] [bit] NULL,
	[UseAliases] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemData_DisplayAnalysis]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_DisplayAnalysis](
	[ItemID] [int] NOT NULL,
	[AnalysisGUID] [uniqueidentifier] NULL,
	[ShowInNewTab] [bit] NULL,
 CONSTRAINT [PK_ckbx_ItemData_DisplayAnalysis] PRIMARY KEY NONCLUSTERED 
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_DisplayAnalysis]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_DispResponse]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_DispResponse](
	[ItemID] [int] NOT NULL,
	[DisplayInline] [bit] NULL,
	[IncludeResponseDetails] [bit] NULL,
	[ShowPageNumbers] [bit] NULL,
	[IncludeMessageItems] [bit] NULL,
	[ShowHiddenItems] [bit] NULL,
	[ShowQuestionNumbers] [bit] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_DispResponse]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_Email]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_Email](
	[ItemID] [int] NOT NULL,
	[MessageFormat] [varchar](5) NOT NULL,
	[StyleTemplateID] [int] NULL,
	[FromAddress] [nvarchar](255) NOT NULL,
	[ToAddress] [nvarchar](1000) NOT NULL,
	[BCC] [nvarchar](1000) NULL,
	[SubjectTextID] [varchar](255) NULL,
	[BodyTextID] [varchar](255) NULL,
	[SendOnce] [bit] NULL,
 CONSTRAINT [PK_ckbx_ItemData_Email] PRIMARY KEY NONCLUSTERED 
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_Email]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_EmailResponse]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_EmailResponse](
	[ItemID] [int] NOT NULL,
	[MessageFormat] [varchar](5) NOT NULL,
	[FromAddress] [nvarchar](255) NULL,
	[ToAddress] [nvarchar](1000) NULL,
	[Bcc] [nvarchar](1000) NULL,
	[SubjectTextID] [nvarchar](255) NULL,
	[SendOnce] [bit] NULL,
	[IncludeResponseDetails] [bit] NULL,
	[ShowPageNumbers] [bit] NULL,
	[IncludeMessageItems] [bit] NULL,
	[ShowHiddenItems] [bit] NULL,
	[BodyTextID] [varchar](255) NULL,
	[ShowQuestionNumbers] [bit] NULL,
	[StyleTemplateID] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_EmailResponse]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_FileUpload]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_FileUpload](
	[ItemID] [int] NOT NULL,
	[TextID] [nvarchar](255) NULL,
	[SubTextID] [nvarchar](255) NULL,
	[IsRequired] [int] NULL,
	[AllowedFileTypes] [nvarchar](1024) NULL,
 CONSTRAINT [PK_ckbx_ItemData_FileUpload] PRIMARY KEY CLUSTERED 
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemData_FileUpload_Files]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_FileUpload_Files](
	[ItemID] [int] NOT NULL,
	[FileID] [int] NOT NULL,
	[AnswerID] [bigint] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemData_Frequency]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_Frequency](
	[ItemID] [int] NOT NULL,
	[OtherOption] [varchar](50) NULL,
	[UseAliases] [bit] NULL,
	[PrimarySourceItemID] [int] NULL,
	[DisplayStatistics] [bit] NOT NULL,
	[DisplayAnswers] [bit] NOT NULL,
 CONSTRAINT [PK_ckbx_ItemData_Frequency] PRIMARY KEY CLUSTERED 
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemData_Hidden]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_Hidden](
	[ItemID] [int] NOT NULL,
	[TextID] [varchar](255) NULL,
	[SubTextID] [varchar](255) NULL,
	[VariableName] [nvarchar](255) NULL,
	[VariableSource] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_Hidden]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_HR]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_HR](
	[ItemID] [int] NOT NULL,
	[Width] [int] NULL,
	[Unit] [varchar](10) NULL,
	[Color] [varchar](50) NULL,
	[Thickness] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_HR]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_Html]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_Html](
	[ItemID] [int] NOT NULL,
	[InlineCss] [ntext] NULL,
	[Html] [ntext] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_Html]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_Image]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_Image](
	[ItemID] [int] NOT NULL,
	[ImagePath] [nvarchar](1023) NULL,
	[ImageID] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_Image]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_Javascript]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_Javascript](
	[ItemID] [int] NOT NULL,
	[Script] [ntext] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_Javascript]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_Matrix]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_Matrix](
	[ItemID] [int] NOT NULL,
	[TextID] [nvarchar](255) NULL,
	[SubTextID] [nvarchar](255) NULL,
	[IsRequired] [bit] NULL,
	[PKIndex] [int] NULL,
 CONSTRAINT [PK_ckbx_ItemData_Matrix] PRIMARY KEY NONCLUSTERED 
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_Matrix]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_MatrixColumns]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_MatrixColumns](
	[MatrixID] [int] NULL,
	[Column] [int] NULL,
	[ColumnPrototypeID] [int] NULL,
	[UniqueAnswers] [bit] NULL,
	[Width] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_MatrixColumns]
(
	[MatrixID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_MatrixItems]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_MatrixItems](
	[MatrixID] [int] NULL,
	[Row] [int] NULL,
	[Column] [int] NULL,
	[ItemID] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_MatrixItems]
(
	[MatrixID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_MatrixRows]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_MatrixRows](
	[MatrixID] [int] NULL,
	[Row] [int] NULL,
	[IsSubheading] [bit] NULL,
	[IsOther] [bit] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_MatrixID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_MatrixID] ON [dbo].[ckbx_ItemData_MatrixRows]
(
	[MatrixID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_MatrixRowSelect]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_MatrixRowSelect](
	[ItemID] [int] NOT NULL,
	[TextID] [nvarchar](255) NULL,
	[SubTextID] [nvarchar](255) NULL,
	[AllowMultipleSelection] [bit] NULL,
	[IsRequired] [int] NULL,
	[MinToSelect] [int] NULL,
	[MaxToSelect] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_MatrixRowSelect]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_MatrixSummary]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_MatrixSummary](
	[ItemID] [int] NOT NULL,
	[MatrixSourceItem] [int] NULL,
	[UseAliases] [bit] NULL,
 CONSTRAINT [PK_ckbx_ItemData_MatrixSummary] PRIMARY KEY CLUSTERED 
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemData_MatrixSumTotal]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_MatrixSumTotal](
	[ItemID] [int] NOT NULL,
	[Operator] [varchar](64) NULL,
	[SumValue] [float] NULL,
 CONSTRAINT [PK_ckbx_ItemData_MatrixSumTotal] PRIMARY KEY NONCLUSTERED 
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_MatrixSumTotal]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_Message]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_Message](
	[ItemID] [int] NOT NULL,
	[TextID] [nvarchar](255) NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_Message]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_MLText]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_MLText](
	[ItemID] [int] NOT NULL,
	[TextID] [nvarchar](255) NULL,
	[SubTextID] [nvarchar](255) NULL,
	[IsRequired] [int] NULL,
	[DefaultTextID] [nvarchar](255) NULL,
	[IsHtmlFormattedData] [bit] NULL,
	[MaxLength] [int] NULL,
	[MinLength] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_MLText]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_NetPromoterScoreStatisticsTable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_NetPromoterScoreStatisticsTable](
	[ItemID] [int] NOT NULL,
	[UseAliases] [bit] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_NetPromoterScoreStatisticsTable]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_NetPromoterScoreTable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_NetPromoterScoreTable](
	[ItemID] [int] NOT NULL,
	[UseAliases] [bit] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_NetPromoterScoreTable]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_PUProps]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_PUProps](
	[ItemID] [int] NULL,
	[SourceItemID] [int] NULL,
	[ProviderName] [varchar](255) NULL,
	[PropertyName] [varchar](255) NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_PUProps]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_RankOrder]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_RankOrder](
	[ItemID] [int] NOT NULL,
	[TextID] [nvarchar](255) NULL,
	[SubTextID] [nvarchar](255) NULL,
	[RankOrderType] [varchar](25) NOT NULL,
	[RankOrderOptionType] [varchar](25) NOT NULL,
	[N] [int] NULL,
	[Randomize] [bit] NULL,
	[IsRequired] [bit] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_RankOrder]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_RankOrderSummary]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_RankOrderSummary](
	[ItemId] [int] NOT NULL,
	[UseAliases] [bit] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_RankOrderSummary]
(
	[ItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_RankOrderSummaryTable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_RankOrderSummaryTable](
	[ItemId] [int] NOT NULL,
	[UseAliases] [bit] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_RankOrderSummaryTable]
(
	[ItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_Redirect]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_Redirect](
	[ItemID] [int] NULL,
	[Url] [nvarchar](1023) NULL,
	[UrlTextID] [nvarchar](1023) NULL,
	[AutoRedirect] [bit] NULL,
	[RestartSurvey] [bit] NULL,
	[AutoRedirectDelayTime] [int] NULL,
	[OpenInNewWindow] [bit] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_Redirect]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_RS]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_RS](
	[ItemID] [int] NOT NULL,
	[StartValue] [int] NULL,
	[EndValue] [int] NULL,
	[TextID] [nvarchar](255) NULL,
	[SubTextID] [nvarchar](255) NULL,
	[IsRequired] [int] NULL,
	[StartTextID] [nvarchar](255) NULL,
	[MidTextID] [nvarchar](255) NULL,
	[EndTextID] [nvarchar](255) NULL,
	[NotApplicableTextID] [nvarchar](255) NULL,
	[DisplayNotApplicableText] [bit] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_RS]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_ScoreMessage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_ScoreMessage](
	[ItemID] [int] NOT NULL,
	[PageId] [int] NULL,
 CONSTRAINT [PK_ckbx_ItemData_ScoreMessage] PRIMARY KEY CLUSTERED 
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemData_ScoreMessages]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_ScoreMessages](
	[ScoreMessageID] [int] IDENTITY(1000,1) NOT NULL,
	[ItemID] [int] NULL,
	[LowScore] [float] NULL,
	[HighScore] [float] NULL,
	[MessageTextID] [nvarchar](255) NULL,
 CONSTRAINT [PK_ckbx_ItemData_ScoreMessages] PRIMARY KEY NONCLUSTERED 
(
	[ScoreMessageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_ScoreMessages]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_Select1]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_Select1](
	[ItemID] [int] NOT NULL,
	[TextID] [nvarchar](255) NULL,
	[SubTextID] [nvarchar](255) NULL,
	[IsRequired] [int] NULL,
	[AllowOther] [int] NULL,
	[OtherTextID] [nvarchar](255) NULL,
	[Randomize] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_Select1]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_SelectMany]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_SelectMany](
	[ItemID] [int] NOT NULL,
	[TextID] [nvarchar](255) NULL,
	[SubTextID] [nvarchar](255) NULL,
	[IsRequired] [int] NULL,
	[AllowOther] [int] NULL,
	[OtherTextID] [nvarchar](255) NULL,
	[Randomize] [int] NULL,
	[MinToSelect] [int] NULL,
	[MaxToSelect] [int] NULL,
	[AllowNoneOfAbove] [bit] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_SelectMany]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_Slider]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_Slider](
	[ItemID] [int] NOT NULL,
	[TextID] [nvarchar](255) NULL,
	[SubTextID] [nvarchar](255) NULL,
	[ValueType] [varchar](25) NOT NULL,
	[MinValue] [int] NULL,
	[MaxValue] [int] NULL,
	[StepSize] [int] NULL,
	[DefaultValue] [int] NULL,
	[ValueListOptionType] [varchar](25) NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_Slider]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_SLText]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_SLText](
	[ItemID] [int] NOT NULL,
	[TextID] [nvarchar](255) NULL,
	[SubTextID] [nvarchar](255) NULL,
	[IsRequired] [int] NULL,
	[DefaultTextID] [nvarchar](255) NULL,
	[TextFormat] [int] NULL,
	[MaxLength] [int] NULL,
	[MaxValue] [float] NULL,
	[MinValue] [float] NULL,
	[CustomFormatId] [varchar](128) NULL,
	[AutocompleteListId] [int] NULL,
	[AutocompleteRemote] [nvarchar](2048) NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_SLText]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_StatisticsTable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_StatisticsTable](
	[ItemId] [int] NULL,
	[ReportOption] [varchar](20) NULL,
	[UseAliases] [bit] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemData_StatisticsTable]
(
	[ItemId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemData_TotalScore]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemData_TotalScore](
	[ItemID] [int] NOT NULL,
	[UseAliases] [bit] NULL,
 CONSTRAINT [PK_ckbx_ItemData_TotalScore] PRIMARY KEY CLUSTERED 
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemEditors]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemEditors](
	[ItemTypeID] [int] NOT NULL,
	[EditorTypeName] [nvarchar](255) NOT NULL,
	[EditorTypeAssembly] [nvarchar](255) NOT NULL,
 CONSTRAINT [PK_ckbx_ItemEditors] PRIMARY KEY NONCLUSTERED 
(
	[ItemTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemEditors]
(
	[ItemTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemFormatters]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemFormatters](
	[ItemTypeId] [int] NOT NULL,
	[Format] [varchar](64) NOT NULL,
	[FormatterClassName] [varchar](255) NULL,
	[FormatterAssembly] [varchar](255) NULL,
 CONSTRAINT [PK_ckbx_ItemFormatters] PRIMARY KEY CLUSTERED 
(
	[ItemTypeId] ASC,
	[Format] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemImportHandlers]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemImportHandlers](
	[ItemTypeID] [int] NOT NULL,
	[HandlerTypeName] [varchar](255) NULL,
	[HandlerTypeAssembly] [varchar](255) NULL,
 CONSTRAINT [PK_ckbx_ItemImportHandlers] PRIMARY KEY CLUSTERED 
(
	[ItemTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ItemLists]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemLists](
	[ListID] [int] NULL,
	[ItemID] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemLists]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemOperand]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemOperand](
	[OperandID] [int] NOT NULL,
	[ItemID] [int] NOT NULL,
	[ParentItemID] [int] NULL,
	[ColumnNumber] [int] NULL,
	[Category] [nvarchar](255) NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_OperandID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_OperandID] ON [dbo].[ckbx_ItemOperand]
(
	[OperandID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemOptions]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemOptions](
	[OptionID] [int] IDENTITY(1000,1) NOT NULL,
	[ItemID] [int] NULL,
	[TextID] [varchar](255) NULL,
	[Alias] [nvarchar](255) NULL,
	[IsDefault] [bit] NULL,
	[Position] [int] NULL,
	[IsOther] [bit] NULL,
	[Points] [decimal](18, 4) NULL,
	[Deleted] [bit] NULL,
	[ListID] [int] NULL,
	[Category] [nvarchar](255) NULL,
	[ContentId] [int] NULL,
	[IsNoneOfAbove] [bit] NULL,
 CONSTRAINT [PK_ckbx_ItemOptions_OptionID] PRIMARY KEY NONCLUSTERED 
(
	[OptionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemOptions]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemOptionsList]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemOptionsList](
	[ListID] [int] IDENTITY(1000,1) NOT NULL,
	[NameTextID] [varchar](255) NULL,
	[DescriptionTextID] [varchar](255) NULL,
 CONSTRAINT [PK_ckbx_ItemOptionsList] PRIMARY KEY NONCLUSTERED 
(
	[ListID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ListID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ListID] ON [dbo].[ckbx_ItemOptionsList]
(
	[ListID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemRules]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemRules](
	[ItemID] [int] NOT NULL,
	[RuleID] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_ItemRules]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemType](
	[ItemTypeID] [int] IDENTITY(1,1) NOT NULL,
	[ItemDataAssemblyName] [nvarchar](255) NOT NULL,
	[ItemDataClassName] [nvarchar](255) NOT NULL,
	[DefaultAppearanceCode] [varchar](255) NULL,
	[ItemName] [varchar](50) NULL,
	[MobileCompatible] [bit] NOT NULL,
	[CategoryID] [int] NULL,
	[RTCompatible] [bit] NULL,
	[LibraryCompatible] [bit] NULL,
	[ReportCompatible] [bit] NULL,
	[Position] [int] NOT NULL,
	[TextIdPrefix] [nvarchar](255) NULL,
	[IsAnswerable] [bit] NULL,
 CONSTRAINT [PK_ckbx_ItemType] PRIMARY KEY NONCLUSTERED 
(
	[ItemTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ItemType]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ItemType] ON [dbo].[ckbx_ItemType]
(
	[ItemTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ItemType_Categories]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ItemType_Categories](
	[CategoryID] [int] IDENTITY(1000,1) NOT NULL,
	[CategoryName] [varchar](63) NULL,
	[CategoryTextID] [varchar](255) NULL,
	[CategoryDescriptionTextID] [varchar](255) NULL,
	[Position] [int] NULL,
 CONSTRAINT [PK_ckbx_ItemType_Categories] PRIMARY KEY CLUSTERED 
(
	[CategoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[Position] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[Position] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_LayoutTemplate]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_LayoutTemplate](
	[LayoutTemplateID] [int] IDENTITY(1000,1) NOT NULL,
	[LayoutTemplateTypeID] [int] NULL,
 CONSTRAINT [PK_ckbx_LayoutTemplate] PRIMARY KEY CLUSTERED 
(
	[LayoutTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_LayoutTemplate_AutoColumns]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_LayoutTemplate_AutoColumns](
	[LayoutTemplateID] [int] NOT NULL,
	[TemplateControlSource] [varchar](255) NULL,
	[Columns] [int] NULL,
	[RepeatDirection] [varchar](16) NULL,
	[RoundedCorners] [bit] NULL,
	[BorderWidth] [int] NULL,
	[BackgroundColor] [varchar](63) NULL,
	[BorderColor] [varchar](63) NULL,
 CONSTRAINT [PK_ckbx_LayoutTemplate_AutoColumns] PRIMARY KEY CLUSTERED 
(
	[LayoutTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_LayoutTemplate_ItemZones]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_LayoutTemplate_ItemZones](
	[LayoutTemplateID] [int] NULL,
	[ItemID] [int] NULL,
	[ZoneName] [varchar](64) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_LayoutTemplate_UserControl]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_LayoutTemplate_UserControl](
	[LayoutTemplateID] [int] NULL,
	[TemplateControlSource] [varchar](255) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_LayoutTemplateType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_LayoutTemplateType](
	[LayoutTemplateTypeID] [int] IDENTITY(1000,1) NOT NULL,
	[LayoutTemplateTypeName] [varchar](64) NULL,
	[TemplateAssembly] [varchar](1024) NULL,
	[TemplateClassName] [varchar](1024) NULL,
 CONSTRAINT [PK_ckbx_LayoutTemplateType] PRIMARY KEY CLUSTERED 
(
	[LayoutTemplateTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_LibraryTemplate]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_LibraryTemplate](
	[LibraryTemplateID] [int] NOT NULL,
	[NameTextID] [varchar](255) NULL,
	[DescriptionTextID] [varchar](255) NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_LibraryTemplateID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_LibraryTemplateID] ON [dbo].[ckbx_LibraryTemplate]
(
	[LibraryTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_Message_OptOut]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Message_OptOut](
	[ID] [int] IDENTITY(1000,1) NOT NULL,
	[UniqueIdentifier] [nvarchar](611) NOT NULL,
	[Page] [varchar](255) NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_MobileStyles]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_MobileStyles](
	[StyleID] [int] IDENTITY(1000,1) NOT NULL,
	[NameTextID] [nvarchar](255) NULL,
	[CssUrl] [nvarchar](255) NULL,
	[IsDefault] [bit] NULL,
 CONSTRAINT [PK_ckbx_MobileStyles] PRIMARY KEY CLUSTERED 
(
	[StyleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Operand]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Operand](
	[OperandID] [int] IDENTITY(1000,1) NOT NULL,
	[TypeName] [varchar](255) NOT NULL,
	[TypeAssembly] [varchar](255) NOT NULL,
 CONSTRAINT [PK_ckbx_Operand] PRIMARY KEY CLUSTERED 
(
	[OperandID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_PageBranchAction]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_PageBranchAction](
	[ActionID] [int] NOT NULL,
	[GoToPageID] [int] NOT NULL,
 CONSTRAINT [PK_ckbx_PageBranchAction] PRIMARY KEY NONCLUSTERED 
(
	[ActionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ActionID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ActionID] ON [dbo].[ckbx_PageBranchAction]
(
	[ActionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_PageId]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_PageId](
	[PageID] [int] IDENTITY(1000,1) NOT NULL,
	[PagePath] [varchar](255) NULL,
 CONSTRAINT [PK_ckbx_PageId] PRIMARY KEY CLUSTERED 
(
	[PageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_PageTextIds]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_PageTextIds](
	[PageId] [int] NOT NULL,
	[TextId] [varchar](255) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Panel]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Panel](
	[PanelID] [int] IDENTITY(1000,1) NOT NULL,
	[Name] [nvarchar](510) NOT NULL,
	[Description] [nvarchar](510) NULL,
	[DateCreated] [datetime] NOT NULL,
	[CreatedBy] [nvarchar](611) NOT NULL,
	[PanelTypeID] [int] NOT NULL,
	[Deleted] [bit] NULL,
	[AclID] [int] NULL,
	[DefaultPolicy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
	[ModifiedBy] [nvarchar](611) NULL,
 CONSTRAINT [PK_ckbx_Panel] PRIMARY KEY CLUSTERED 
(
	[PanelID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_PanelType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_PanelType](
	[PanelTypeID] [int] IDENTITY(1,1) NOT NULL,
	[TypeName] [nvarchar](500) NOT NULL,
	[TypeAssembly] [nvarchar](255) NOT NULL,
 CONSTRAINT [PK_ckbx_PanelType] PRIMARY KEY CLUSTERED 
(
	[PanelTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Permission]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Permission](
	[PermissionID] [int] IDENTITY(1000,1) NOT NULL,
	[PermissionName] [varchar](255) NOT NULL,
	[PermissionDisplayName] [nvarchar](500) NULL,
 CONSTRAINT [PK_ckbx_Permission] PRIMARY KEY CLUSTERED 
(
	[PermissionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_PermissionMask]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_PermissionMask](
	[MaskID] [int] IDENTITY(1000,1) NOT NULL,
	[MaskName] [nvarchar](255) NULL,
	[MaskDisplayName] [nvarchar](255) NULL,
 CONSTRAINT [PK_ckbx_PermissionMask] PRIMARY KEY CLUSTERED 
(
	[MaskID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_PermissionMaskPermissions]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_PermissionMaskPermissions](
	[MaskID] [int] NULL,
	[PermissionID] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_MaskID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_MaskID] ON [dbo].[ckbx_PermissionMaskPermissions]
(
	[MaskID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_Policy]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Policy](
	[PolicyID] [int] IDENTITY(1001,1) NOT NULL,
	[PolicyType] [varchar](255) NOT NULL,
	[PolicyAssemblyName] [varchar](255) NOT NULL,
 CONSTRAINT [PK_ckbx_Policy] PRIMARY KEY CLUSTERED 
(
	[PolicyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_PolicyPermissions]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_PolicyPermissions](
	[PolicyID] [int] NOT NULL,
	[PermissionID] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_PolicyID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_PolicyID] ON [dbo].[ckbx_PolicyPermissions]
(
	[PolicyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_Product_Info]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Product_Info](
	[ProductName] [varchar](255) NULL,
	[Version] [varchar](63) NULL,
	[InstallDate] [datetime] NULL,
	[ProductID] [int] IDENTITY(1000,1) NOT NULL,
 CONSTRAINT [PK_ckbx_Product_Info] PRIMARY KEY NONCLUSTERED 
(
	[ProductID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_ProductName]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ProductName] ON [dbo].[ckbx_Product_Info]
(
	[ProductName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_Product_Modules]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Product_Modules](
	[ProductID] [int] NULL,
	[ModuleName] [varchar](255) NULL,
	[Version] [varchar](63) NULL,
	[InstallDate] [datetime] NULL,
	[ModuleID] [int] IDENTITY(1000,1) NOT NULL,
 CONSTRAINT [PK_ckbx_Product_Modules] PRIMARY KEY CLUSTERED 
(
	[ModuleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Product_Patches]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Product_Patches](
	[ProductID] [int] NULL,
	[ModuleID] [int] NULL,
	[PatchName] [varchar](255) NULL,
	[Version] [varchar](63) NULL,
	[InstallDate] [datetime] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ProfileOperand]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ProfileOperand](
	[OperandID] [int] NOT NULL,
	[ProfileKey] [nvarchar](255) NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_OperandID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_OperandID] ON [dbo].[ckbx_ProfileOperand]
(
	[OperandID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_Progress]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Progress](
	[Key] [varchar](64) NOT NULL,
	[Message] [nvarchar](1024) NULL,
	[ErrorMessage] [nvarchar](1024) NULL,
	[CurrentItem] [int] NULL,
	[TotalItemCount] [int] NULL,
	[Status] [nvarchar](32) NULL,
PRIMARY KEY CLUSTERED 
(
	[Key] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Response_EmailSent]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Response_EmailSent](
	[ResponseID] [bigint] NOT NULL,
	[EmailItemID] [int] NOT NULL,
	[EmailDate] [datetime] NULL,
 CONSTRAINT [PK_ckbx_Response_EmailSent] PRIMARY KEY CLUSTERED 
(
	[ResponseID] ASC,
	[EmailItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Response_ItemOptionOrder]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Response_ItemOptionOrder](
	[ResponseID] [bigint] NOT NULL,
	[ItemID] [int] NULL,
	[OptionID] [int] NULL,
	[Position] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Response_PageItemOrder]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Response_PageItemOrder](
	[ResponseID] [bigint] NULL,
	[PageID] [int] NULL,
	[ItemID] [int] NULL,
	[Position] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Response_Sessions]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Response_Sessions](
	[SessionGuid] [uniqueidentifier] NOT NULL,
	[ResponseId] [bigint] NULL,
	[ResponseTemplateId] [int] NULL,
	[AuthenticatedRespondentUid] [nvarchar](511) NULL,
	[AnonymousRespondentUid] [uniqueidentifier] NULL,
	[EnteredPassword] [nvarchar](255) NULL,
	[SelectedLanguage] [nvarchar](5) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ResponseAnswers]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ResponseAnswers](
	[AnswerID] [bigint] IDENTITY(1000,1) NOT NULL,
	[ResponseID] [bigint] NOT NULL,
	[ItemID] [int] NOT NULL,
	[AnswerText] [ntext] NULL,
	[OptionID] [int] NULL,
	[DateCreated] [datetime] NULL,
	[Deleted] [bit] NULL,
	[ModifiedDate] [datetime] NULL,
	[Points] [decimal](18, 4) NULL,
 CONSTRAINT [PK_ckbx_ResponseAnswers] PRIMARY KEY CLUSTERED 
(
	[AnswerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ResponseLog]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ResponseLog](
	[PageLogID] [bigint] IDENTITY(1000,1) NOT NULL,
	[ResponseID] [bigint] NOT NULL,
	[PageID] [int] NOT NULL,
	[PageStartTime] [datetime] NULL,
	[PageEndTime] [datetime] NULL,
 CONSTRAINT [PK_ckbx_ResponseLog] PRIMARY KEY CLUSTERED 
(
	[PageLogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ResponseOperand]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ResponseOperand](
	[OperandID] [int] NOT NULL,
	[ResponseKey] [varchar](50) NOT NULL,
 CONSTRAINT [PK_ckbx_ResponseOperand] PRIMARY KEY CLUSTERED 
(
	[OperandID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ResponsePageSequence]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ResponsePageSequence](
	[SequenceID] [bigint] IDENTITY(1000,1) NOT NULL,
	[ResponseID] [bigint] NOT NULL,
	[PageID] [int] NOT NULL,
	[Sequence] [int] NOT NULL,
	[StartTime] [datetime] NULL,
	[EndTime] [datetime] NULL,
	[ServerName] [nvarchar](255) NULL,
 CONSTRAINT [PK_ckbx_ResponseSequence] PRIMARY KEY CLUSTERED 
(
	[SequenceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_ResponsePipe]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ResponsePipe](
	[ResponseTemplateID] [int] NULL,
	[PipeName] [nvarchar](64) NULL,
	[ItemID] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ResponseTemplateID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ResponseTemplateID] ON [dbo].[ckbx_ResponsePipe]
(
	[ResponseTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_Role]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Role](
	[RoleID] [int] IDENTITY(1,1) NOT NULL,
	[RoleName] [nvarchar](100) NULL,
	[RoleDescription] [nvarchar](500) NULL,
 CONSTRAINT [PK_ckbx_Role] PRIMARY KEY CLUSTERED 
(
	[RoleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_RolePermissions]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_RolePermissions](
	[RoleID] [int] NULL,
	[PermissionID] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_RTTableNames]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_RTTableNames](
	[TableName] [varchar](255) NOT NULL,
	[TablePosition] [int] NULL,
 CONSTRAINT [PK_ckbx_RTTableNames] PRIMARY KEY CLUSTERED 
(
	[TableName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Rule]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Rule](
	[RuleID] [int] IDENTITY(1000,1) NOT NULL,
	[ExpressionID] [int] NOT NULL,
 CONSTRAINT [PK_ckbx_Rule] PRIMARY KEY CLUSTERED 
(
	[RuleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_RuleActions]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_RuleActions](
	[RuleID] [int] NOT NULL,
	[ActionID] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_RuleID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_RuleID] ON [dbo].[ckbx_RuleActions]
(
	[RuleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_Search_Appearance]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Search_Appearance](
	[ObjectType] [varchar](100) NOT NULL,
	[Order] [int] NOT NULL,
	[Included] [bit] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Search_Available_Object]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Search_Available_Object](
	[SearchRequestID] [uniqueidentifier] NOT NULL,
	[ObjectType] [varchar](100) NOT NULL,
	[ObjectIDString] [nvarchar](611) NULL,
	[ObjectID] [bigint] NULL,
	[ObjectGUID] [uniqueidentifier] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Search_Completion]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Search_Completion](
	[SearchRequestID] [uniqueidentifier] NOT NULL,
	[ObjectType] [varchar](100) NOT NULL,
	[IsCompleted] [bit] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Search_Request]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Search_Request](
	[SearchRequestID] [uniqueidentifier] NOT NULL,
	[SearchTerm] [nvarchar](1024) NOT NULL,
	[Creator] [nvarchar](611) NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[Status] [varchar](50) NOT NULL,
	[CompletedDate] [datetime] NULL,
	[Message] [nvarchar](1024) NULL,
	[ObjectsCollectedDate] [datetime] NULL,
	[ObjectTypesCount] [int] NULL,
	[AvailableObjectsRequestID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_ckbx_Search_Request] PRIMARY KEY CLUSTERED 
(
	[SearchRequestID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Search_Result]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Search_Result](
	[SearchRequestID] [uniqueidentifier] NOT NULL,
	[ObjectType] [varchar](100) NOT NULL,
	[MatchedField] [varchar](100) NOT NULL,
	[MatchedText] [nvarchar](max) NOT NULL,
	[ObjectID] [bigint] NULL,
	[ObjectIDString] [nvarchar](611) NULL,
	[ObjectGUID] [uniqueidentifier] NULL,
	[Title] [nvarchar](1024) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Search_Settings]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Search_Settings](
	[RoleID] [int] NOT NULL,
	[ObjectType] [varchar](100) NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Security_TempResourceList]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Security_TempResourceList](
	[spid] [int] NULL,
	[DataKey] [varchar](64) NULL,
	[ResourceId] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Settings]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Settings](
	[SettingName] [varchar](100) NOT NULL,
	[SettingValue] [nvarchar](2000) NOT NULL,
 CONSTRAINT [PK_ckbx_Settings] PRIMARY KEY CLUSTERED 
(
	[SettingName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_StyleTemplate]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_StyleTemplate](
	[TemplateID] [int] IDENTITY(1000,1) NOT NULL,
	[Name] [nvarchar](255) NULL,
	[Header] [ntext] NULL,
	[Footer] [ntext] NULL,
	[DateCreated] [datetime] NULL,
	[CreatedBy] [nvarchar](511) NULL,
	[IsPublic] [bit] NULL,
	[IsEditable] [bit] NULL,
	[Type] [varchar](255) NULL,
 CONSTRAINT [PK_ckbx_StyleTemplate] PRIMARY KEY CLUSTERED 
(
	[TemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_StyleTemplate_Elements]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_StyleTemplate_Elements](
	[ElementID] [int] IDENTITY(1000,1) NOT NULL,
	[TemplateID] [int] NOT NULL,
	[ElementName] [varchar](127) NULL,
 CONSTRAINT [PK_ckbx_StyleTemplate_Elements] PRIMARY KEY NONCLUSTERED 
(
	[ElementID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_TemplateID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_TemplateID] ON [dbo].[ckbx_StyleTemplate_Elements]
(
	[TemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_StyleTemplate_Properties]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_StyleTemplate_Properties](
	[ElementID] [int] NULL,
	[PropertyName] [varchar](127) NULL,
	[PropertyValue] [varchar](255) NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_ElementID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_ElementID] ON [dbo].[ckbx_StyleTemplate_Properties]
(
	[ElementID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_Template_Items]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Template_Items](
	[TemplateID] [int] NOT NULL,
	[ItemID] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_TemplateID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_TemplateID] ON [dbo].[ckbx_Template_Items]
(
	[TemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_Template_Pages]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Template_Pages](
	[TemplateID] [int] NOT NULL,
	[PageID] [int] IDENTITY(1000,1) NOT NULL,
	[PagePosition] [int] NOT NULL,
	[RandomizeItems] [bit] NULL,
	[LayoutTemplateID] [int] NULL,
	[Title] [nvarchar](32) NULL,
	[PageType] [varchar](32) NULL,
 CONSTRAINT [PK_ckbx_Template_Pages] PRIMARY KEY NONCLUSTERED 
(
	[PageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Index [idx_TemplateID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_TemplateID] ON [dbo].[ckbx_Template_Pages]
(
	[TemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_TemplatePage_Items]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_TemplatePage_Items](
	[PageID] [int] NOT NULL,
	[ItemID] [int] NOT NULL,
	[Position] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_TemplatePage_Rules]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_TemplatePage_Rules](
	[PageID] [int] NOT NULL,
	[RuleID] [int] NOT NULL,
	[EventTrigger] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Text]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Text](
	[TextID] [varchar](255) NOT NULL,
	[LanguageCode] [varchar](5) NOT NULL,
	[TextValue] [ntext] NULL,
	[PageId] [varchar](255) NULL,
 CONSTRAINT [PK_ckbx_Text] PRIMARY KEY CLUSTERED 
(
	[TextID] ASC,
	[LanguageCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Tickets]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Tickets](
	[TicketGUID] [uniqueidentifier] NOT NULL,
	[Expiration] [datetime] NOT NULL,
 CONSTRAINT [PK_ckbx_Tickets] PRIMARY KEY CLUSTERED 
(
	[TicketGUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Timeline_Config]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Timeline_Config](
	[EventID] [int] NOT NULL,
	[PeriodID] [int] NOT NULL,
	[Image] [varchar](100) NULL,
	[URL] [varchar](1000) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Timeline_Events]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Timeline_Events](
	[EventID] [int] NOT NULL,
	[EventName] [nvarchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[EventID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[EventName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Timeline_Request]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Timeline_Request](
	[RequestID] [bigint] IDENTITY(1000,1) NOT NULL,
	[Created] [datetime] NULL,
	[Creator] [nvarchar](611) NULL,
	[Manager] [nvarchar](100) NULL,
	[RequestStatus] [nvarchar](100) NULL,
	[Message] [nvarchar](4000) NULL,
PRIMARY KEY CLUSTERED 
(
	[RequestID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Timeline_Result]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Timeline_Result](
	[TimelineResultID] [bigint] IDENTITY(1000,1) NOT NULL,
	[RequestID] [bigint] NOT NULL,
	[EventID] [int] NOT NULL,
	[Occured] [datetime] NOT NULL,
	[UserID] [nvarchar](611) NULL,
	[ObjectID] [nvarchar](611) NULL,
	[ObjectGUID] [uniqueidentifier] NULL,
	[ObjectParentID] [bigint] NULL,
	[Manager] [nvarchar](100) NULL,
	[Creator] [nvarchar](611) NULL,
	[ObjectParentType] [nvarchar](100) NULL,
	[EventCount] [bigint] NULL,
	[PeriodID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[TimelineResultID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_Timeline_Settings]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_Timeline_Settings](
	[Manager] [nvarchar](100) NULL,
	[EventID] [int] NOT NULL,
	[Single] [bit] NOT NULL,
	[Daily] [bit] NOT NULL,
	[Weekly] [bit] NOT NULL,
	[Monthly] [bit] NOT NULL,
	[EventOrder] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_UrlMappings]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_UrlMappings](
	[SourceUrl] [nvarchar](1000) NULL,
	[DestinationUrl] [nvarchar](1000) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ckbx_UserPanel]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_UserPanel](
	[PanelID] [int] NOT NULL,
	[UserIdentifier] [nvarchar](611) NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_PanelID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_PanelID] ON [dbo].[ckbx_UserPanel]
(
	[PanelID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ValueOperand]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ValueOperand](
	[OperandID] [int] NOT NULL,
	[ItemID] [int] NULL,
	[OptionID] [int] NULL,
	[AnswerValue] [nvarchar](1000) NULL
) ON [PRIMARY]

GO
/****** Object:  Index [idx_OperandID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE CLUSTERED INDEX [idx_OperandID] ON [dbo].[ckbx_ValueOperand]
(
	[OperandID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ckbx_ViewStateData]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ckbx_ViewStateData](
	[GUID] [char](128) NOT NULL,
	[SessionID] [varchar](255) NOT NULL,
	[ViewState] [text] NOT NULL,
	[Created] [datetime] NOT NULL,
PRIMARY KEY NONCLUSTERED 
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CompletedScope]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CompletedScope](
	[uidInstanceID] [uniqueidentifier] NOT NULL,
	[completedScopeID] [uniqueidentifier] NOT NULL,
	[state] [image] NOT NULL,
	[modified] [datetime] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[InstanceState]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[InstanceState](
	[uidInstanceID] [uniqueidentifier] NOT NULL,
	[state] [image] NULL,
	[status] [int] NULL,
	[unlocked] [int] NULL,
	[blocked] [int] NULL,
	[info] [ntext] NULL,
	[modified] [datetime] NOT NULL,
	[ownerID] [uniqueidentifier] NULL,
	[ownedUntil] [datetime] NULL,
	[nextTimer] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Index [IX_InstanceState]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE UNIQUE CLUSTERED INDEX [IX_InstanceState] ON [dbo].[InstanceState]
(
	[uidInstanceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_EntryID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_EntryID] ON [dbo].[ckbx_AccessControlEntry]
(
	[EntryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_EntryType_EntryIdentifier]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_EntryType_EntryIdentifier] ON [dbo].[ckbx_AccessControlEntry]
(
	[EntryType] ASC,
	[EntryIdentifier] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_GUID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_GUID] ON [dbo].[ckbx_AnalysisTemplate]
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ResponseTemplateID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ResponseTemplateID] ON [dbo].[ckbx_AnalysisTemplate]
(
	[ResponseTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_FolderID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_FolderID] ON [dbo].[ckbx_Content_Items]
(
	[FolderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_Email]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_Email] ON [dbo].[ckbx_Credential]
(
	[Email] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_Guid]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_Guid] ON [dbo].[ckbx_Credential]
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_UniqueIdentifier]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_UniqueIdentifier] ON [dbo].[ckbx_Credential]
(
	[UniqueIdentifier] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_CustomUserFieldID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_CustomUserFieldID] ON [dbo].[ckbx_CustomUserField]
(
	[CustomUserFieldID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_CustomUserFieldID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_CustomUserFieldID] ON [dbo].[ckbx_CustomUserFieldMap]
(
	[CustomUserFieldID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_UniqueIdentifier]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_UniqueIdentifier] ON [dbo].[ckbx_CustomUserFieldMap]
(
	[UniqueIdentifier] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_EmailAddress]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_EmailAddress] ON [dbo].[ckbx_EmailListPanel]
(
	[EmailAddress] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_Parent]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_Parent] ON [dbo].[ckbx_Expression]
(
	[Parent] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_FilterID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_FilterID] ON [dbo].[ckbx_Filter_Item]
(
	[FilterID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_FilterID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_FilterID] ON [dbo].[ckbx_Filter_Map]
(
	[FilterID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ParentID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ParentID] ON [dbo].[ckbx_Filter_Map]
(
	[ParentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_FilterTypeName]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_FilterTypeName] ON [dbo].[ckbx_FilterType]
(
	[FilterTypeName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_AncestorID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_AncestorID] ON [dbo].[ckbx_FormFolders]
(
	[AncestorID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_FormFolders]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_MemberUniqueIdentifier]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_MemberUniqueIdentifier] ON [dbo].[ckbx_GroupMembers]
(
	[MemberUniqueIdentifier] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_GroupID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_GroupID] ON [dbo].[ckbx_GroupPanel]
(
	[GroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ResponseTEmplateID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ResponseTEmplateID] ON [dbo].[ckbx_Invitation]
(
	[ResponseTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_EmailAddress]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_EmailAddress] ON [dbo].[ckbx_Invitation_OptedOutEmails]
(
	[EmailAddress] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ResponseTemplateId]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ResponseTemplateId] ON [dbo].[ckbx_Invitation_OptedOutEmails]
(
	[ResponseTemplateId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_UniqueIndex]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idx_UniqueIndex] ON [dbo].[ckbx_Invitation_OptedOutEmails]
(
	[EmailAddress] ASC,
	[ResponseTemplateId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_EmailAddress]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_EmailAddress] ON [dbo].[ckbx_InvitationRecipients]
(
	[EmailAddress] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_GUID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_GUID] ON [dbo].[ckbx_InvitationRecipients]
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_InvitationID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_InvitationID] ON [dbo].[ckbx_InvitationRecipients]
(
	[InvitationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_RecipientGuid]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_RecipientGuid] ON [dbo].[ckbx_InvitationRecipients]
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_UniqueIdentifier]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_UniqueIdentifier] ON [dbo].[ckbx_InvitationRecipients]
(
	[UniqueIdentifier] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_AppearanceCode]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_AppearanceCode] ON [dbo].[ckbx_ItemAppearanceCode]
(
	[AppearanceCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_AppearanceCode]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_AppearanceCode] ON [dbo].[ckbx_ItemAppearanceEditor]
(
	[AppearanceCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_AppearanceCode]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_AppearanceCode] ON [dbo].[ckbx_ItemAppearanceRenderer]
(
	[AppearanceCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_AppearanceID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_AppearanceID] ON [dbo].[ckbx_ItemAppearances]
(
	[AppearanceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ResponseTemplateID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ResponseTemplateID] ON [dbo].[ckbx_ItemData_AI_ResponseTemplates]
(
	[ResponseTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_SourceItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_SourceItemID] ON [dbo].[ckbx_ItemData_AI_SourceItems]
(
	[SourceItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_SourcePageID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_SourcePageID] ON [dbo].[ckbx_ItemData_AI_SourcePages]
(
	[SourcePageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ListID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ListID] ON [dbo].[ckbx_ItemLists]
(
	[ListID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ListID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ListID] ON [dbo].[ckbx_ItemOptions]
(
	[ListID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_ItemName]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ItemName] ON [dbo].[ckbx_ItemType]
(
	[ItemName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_PagePath]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_PagePath] ON [dbo].[ckbx_PageId]
(
	[PagePath] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_PageId]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_PageId] ON [dbo].[ckbx_PageTextIds]
(
	[PageId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_PanelTypeID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_PanelTypeID] ON [dbo].[ckbx_Panel]
(
	[PanelTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_PermissionID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_PermissionID] ON [dbo].[ckbx_PolicyPermissions]
(
	[PermissionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_Version]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_Version] ON [dbo].[ckbx_Product_Info]
(
	[Version] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_ModuleName]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ModuleName] ON [dbo].[ckbx_Product_Modules]
(
	[ModuleName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ProductID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ProductID] ON [dbo].[ckbx_Product_Modules]
(
	[ProductID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_Version]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_Version] ON [dbo].[ckbx_Product_Modules]
(
	[Version] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ModuleID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ModuleID] ON [dbo].[ckbx_Product_Patches]
(
	[ModuleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ProductID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ProductID] ON [dbo].[ckbx_Product_Patches]
(
	[ProductID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_Version]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_Version] ON [dbo].[ckbx_Product_Patches]
(
	[Version] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [ckbx_UserResponses]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [ckbx_UserResponses] ON [dbo].[ckbx_Response]
(
	[ResponseTemplateID] ASC,
	[UniqueIdentifier] ASC,
	[Deleted] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_GUID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_GUID] ON [dbo].[ckbx_Response]
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_NetworkUser]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_NetworkUser] ON [dbo].[ckbx_Response]
(
	[NetworkUser] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_RespondentGUID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_RespondentGUID] ON [dbo].[ckbx_Response]
(
	[RespondentGUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_Response_Deleted]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_Response_Deleted] ON [dbo].[ckbx_Response]
(
	[ResponseTemplateID] ASC,
	[Deleted] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ResponseCount]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ResponseCount] ON [dbo].[ckbx_Response]
(
	[ResponseTemplateID] ASC,
	[IsComplete] ASC,
	[Deleted] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ResponseEnded]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ResponseEnded] ON [dbo].[ckbx_Response]
(
	[ResponseTemplateID] ASC,
	[Deleted] ASC,
	[Ended] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ResponseLastEdit]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ResponseLastEdit] ON [dbo].[ckbx_Response]
(
	[ResponseTemplateID] ASC,
	[Deleted] ASC,
	[LastEdit] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ResponseStarted]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ResponseStarted] ON [dbo].[ckbx_Response]
(
	[ResponseTemplateID] ASC,
	[Deleted] ASC,
	[Started] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ResponseTemplate_Deleted]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ResponseTemplate_Deleted] ON [dbo].[ckbx_Response]
(
	[ResponseTemplateID] ASC,
	[Deleted] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_TestResponseCount]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_TestResponseCount] ON [dbo].[ckbx_Response]
(
	[ResponseTemplateID] ASC,
	[Deleted] ASC,
	[IsTest] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_UniqueIdentifier]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_UniqueIdentifier] ON [dbo].[ckbx_Response]
(
	[UniqueIdentifier] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_UserResponses]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_UserResponses] ON [dbo].[ckbx_Response]
(
	[ResponseTemplateID] ASC,
	[UniqueIdentifier] ASC,
	[Deleted] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ResponseID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ResponseID] ON [dbo].[ckbx_Response_ItemOptionOrder]
(
	[ResponseID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ResponseID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ResponseID] ON [dbo].[ckbx_Response_PageItemOrder]
(
	[ResponseID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ResponseSessionGuid]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ResponseSessionGuid] ON [dbo].[ckbx_Response_Sessions]
(
	[SessionGuid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ResponseID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ResponseID] ON [dbo].[ckbx_ResponseAnswers]
(
	[ResponseID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [_dta_index_ckbx_ResponseLog_10_1525580473__K2_1_3_4_5]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [_dta_index_ckbx_ResponseLog_10_1525580473__K2_1_3_4_5] ON [dbo].[ckbx_ResponseLog]
(
	[ResponseID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_PipeName]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_PipeName] ON [dbo].[ckbx_ResponsePipe]
(
	[PipeName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_GUID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_GUID] ON [dbo].[ckbx_ResponseTemplate]
(
	[GUID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_RoleID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_RoleID] ON [dbo].[ckbx_RolePermissions]
(
	[RoleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_TempResource_Spid]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_TempResource_Spid] ON [dbo].[ckbx_Security_TempResourceList]
(
	[spid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_TempResource_SpidDataKey]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_TempResource_SpidDataKey] ON [dbo].[ckbx_Security_TempResourceList]
(
	[spid] ASC,
	[DataKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ElementID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ElementID] ON [dbo].[ckbx_StyleTemplate_Elements]
(
	[ElementID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_AclID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_AclID] ON [dbo].[ckbx_Template]
(
	[AclID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_Template_Items]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_PageID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_PageID] ON [dbo].[ckbx_Template_Pages]
(
	[PageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_ItemID] ON [dbo].[ckbx_TemplatePage_Items]
(
	[ItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_PageID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_PageID] ON [dbo].[ckbx_TemplatePage_Items]
(
	[PageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_RuleID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [idx_RuleID] ON [dbo].[ckbx_TemplatePage_Rules]
(
	[RuleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CompletedScope]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [IX_CompletedScope] ON [dbo].[CompletedScope]
(
	[completedScopeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CompletedScope_InstanceID]    Script Date: 11/10/2016 8:45:37 AM ******/
CREATE NONCLUSTERED INDEX [IX_CompletedScope_InstanceID] ON [dbo].[CompletedScope]
(
	[uidInstanceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[ckbx_AnalysisTemplate] ADD  DEFAULT ((0)) FOR [DisplaySurveyTitle]
GO
ALTER TABLE [dbo].[ckbx_AnalysisTemplate] ADD  DEFAULT ((1)) FOR [DisplayPdfExportButton]
GO
ALTER TABLE [dbo].[ckbx_Credential] ADD  DEFAULT ((0)) FOR [FailedLogins]
GO
ALTER TABLE [dbo].[ckbx_Credential] ADD  DEFAULT ((0)) FOR [LockedOut]
GO
ALTER TABLE [dbo].[ckbx_CustomValidators] ADD  CONSTRAINT [ckbx_CustomValidators_Position]  DEFAULT ((0)) FOR [Position]
GO
ALTER TABLE [dbo].[ckbx_Image] ADD  CONSTRAINT [DF_ckbx_Image_dateAdded]  DEFAULT (getdate()) FOR [dateAdded]
GO
ALTER TABLE [dbo].[ckbx_Image] ADD  CONSTRAINT [DF_ckbx_Image_isTemporary]  DEFAULT ((0)) FOR [isTemporary]
GO
ALTER TABLE [dbo].[ckbx_ItemData_Frequency] ADD  DEFAULT ((0)) FOR [DisplayStatistics]
GO
ALTER TABLE [dbo].[ckbx_ItemData_Frequency] ADD  DEFAULT ((0)) FOR [DisplayAnswers]
GO
ALTER TABLE [dbo].[ckbx_ItemData_SelectMany] ADD  DEFAULT ((0)) FOR [AllowNoneOfAbove]
GO
ALTER TABLE [dbo].[ckbx_ItemType] ADD  CONSTRAINT [DF_ckbx_ItemType_MobileCompatible]  DEFAULT ((0)) FOR [MobileCompatible]
GO
ALTER TABLE [dbo].[ckbx_ItemType] ADD  CONSTRAINT [ckbx_ItemType_Position]  DEFAULT ((0)) FOR [Position]
GO
ALTER TABLE [dbo].[ckbx_Response] ADD  CONSTRAINT [ckbx_Response_IsTest_Default]  DEFAULT ((0)) FOR [IsTest]
GO
ALTER TABLE [dbo].[ckbx_ResponseTemplate] ADD  CONSTRAINT [DF_ckbx_ResponseTemplate_MobileCompatible]  DEFAULT ((0)) FOR [MobileCompatible]
GO
ALTER TABLE [dbo].[ckbx_ResponseTemplate] ADD  DEFAULT ((0)) FOR [AnonymizeResponses]
GO
ALTER TABLE [dbo].[ckbx_Search_Appearance] ADD  CONSTRAINT [DF_ckbx_Search_Appearance_Order]  DEFAULT ((0)) FOR [Order]
GO
ALTER TABLE [dbo].[ckbx_Search_Appearance] ADD  CONSTRAINT [DF_ckbx_Search_Appearance_Included]  DEFAULT ((1)) FOR [Included]
GO
ALTER TABLE [dbo].[ckbx_Timeline_Result] ADD  DEFAULT ((1)) FOR [EventCount]
GO
ALTER TABLE [dbo].[ckbx_Timeline_Result] ADD  DEFAULT ((1)) FOR [PeriodID]
GO
ALTER TABLE [dbo].[ckbx_Timeline_Settings] ADD  CONSTRAINT [DF__ckbx_Time__Singl__064DE20A]  DEFAULT ((0)) FOR [Single]
GO
ALTER TABLE [dbo].[ckbx_Timeline_Settings] ADD  CONSTRAINT [DF__ckbx_Time__Daily__07420643]  DEFAULT ((0)) FOR [Daily]
GO
ALTER TABLE [dbo].[ckbx_Timeline_Settings] ADD  CONSTRAINT [DF__ckbx_Time__Weekl__08362A7C]  DEFAULT ((0)) FOR [Weekly]
GO
ALTER TABLE [dbo].[ckbx_Timeline_Settings] ADD  CONSTRAINT [DF__ckbx_Time__Month__092A4EB5]  DEFAULT ((0)) FOR [Monthly]
GO
ALTER TABLE [dbo].[ckbx_AccessControlEntries]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_AccessControlEntries_ckbx_AccessControlEntry] FOREIGN KEY([EntryID])
REFERENCES [dbo].[ckbx_AccessControlEntry] ([EntryID])
GO
ALTER TABLE [dbo].[ckbx_AccessControlEntries] CHECK CONSTRAINT [FK_ckbx_AccessControlEntries_ckbx_AccessControlEntry]
GO
ALTER TABLE [dbo].[ckbx_AccessControlEntries]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_AccessControlEntries_ckbx_AccessControlList] FOREIGN KEY([AclID])
REFERENCES [dbo].[ckbx_AccessControlList] ([AclID])
GO
ALTER TABLE [dbo].[ckbx_AccessControlEntries] CHECK CONSTRAINT [FK_ckbx_AccessControlEntries_ckbx_AccessControlList]
GO
ALTER TABLE [dbo].[ckbx_AccessControlEntry]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_AccessControlEntry_ckbx_Policy] FOREIGN KEY([PolicyID])
REFERENCES [dbo].[ckbx_Policy] ([PolicyID])
GO
ALTER TABLE [dbo].[ckbx_AccessControlEntry] CHECK CONSTRAINT [FK_ckbx_AccessControlEntry_ckbx_Policy]
GO
ALTER TABLE [dbo].[ckbx_AdHocEmailPanel]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_AdHocEmailPanel_ckbx_Panel] FOREIGN KEY([PanelID])
REFERENCES [dbo].[ckbx_Panel] ([PanelID])
GO
ALTER TABLE [dbo].[ckbx_AdHocEmailPanel] CHECK CONSTRAINT [FK_ckbx_AdHocEmailPanel_ckbx_Panel]
GO
ALTER TABLE [dbo].[ckbx_AnalysisTemplate]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_AnalysisTemplate_ckbx_StyleTemplate] FOREIGN KEY([StyleTemplateID])
REFERENCES [dbo].[ckbx_StyleTemplate] ([TemplateID])
GO
ALTER TABLE [dbo].[ckbx_AnalysisTemplate] CHECK CONSTRAINT [FK_ckbx_AnalysisTemplate_ckbx_StyleTemplate]
GO
ALTER TABLE [dbo].[ckbx_AnalysisTemplate]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_AnalysisTemplate_ckbx_Template] FOREIGN KEY([AnalysisTemplateID])
REFERENCES [dbo].[ckbx_Template] ([TemplateID])
GO
ALTER TABLE [dbo].[ckbx_AnalysisTemplate] CHECK CONSTRAINT [FK_ckbx_AnalysisTemplate_ckbx_Template]
GO
ALTER TABLE [dbo].[ckbx_AnalysisTemplate]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_AnalysisTemplate_ckbx_Template1] FOREIGN KEY([ResponseTemplateID])
REFERENCES [dbo].[ckbx_ResponseTemplate] ([ResponseTemplateID])
GO
ALTER TABLE [dbo].[ckbx_AnalysisTemplate] CHECK CONSTRAINT [FK_ckbx_AnalysisTemplate_ckbx_Template1]
GO
ALTER TABLE [dbo].[ckbx_Appearance_AnalysisItem]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Appearance_AnalysisItem_ckbx_ItemAppearance] FOREIGN KEY([AppearanceID])
REFERENCES [dbo].[ckbx_ItemAppearance] ([AppearanceID])
GO
ALTER TABLE [dbo].[ckbx_Appearance_AnalysisItem] CHECK CONSTRAINT [FK_ckbx_Appearance_AnalysisItem_ckbx_ItemAppearance]
GO
ALTER TABLE [dbo].[ckbx_AppearancePreset]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_AppearancePreset_ckbx_ItemAppearance] FOREIGN KEY([AppearanceID])
REFERENCES [dbo].[ckbx_ItemAppearance] ([AppearanceID])
GO
ALTER TABLE [dbo].[ckbx_AppearancePreset] CHECK CONSTRAINT [FK_ckbx_AppearancePreset_ckbx_ItemAppearance]
GO
ALTER TABLE [dbo].[ckbx_Content_Items]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Content_Items_ckbx_Content_Folders] FOREIGN KEY([FolderID])
REFERENCES [dbo].[ckbx_Content_Folders] ([FolderID])
GO
ALTER TABLE [dbo].[ckbx_Content_Items] CHECK CONSTRAINT [FK_ckbx_Content_Items_ckbx_Content_Folders]
GO
ALTER TABLE [dbo].[ckbx_CustomUserFieldMap]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_CustomUserFieldMap_ckbx_CustomUserField] FOREIGN KEY([CustomUserFieldID])
REFERENCES [dbo].[ckbx_CustomUserField] ([CustomUserFieldID])
GO
ALTER TABLE [dbo].[ckbx_CustomUserFieldMap] CHECK CONSTRAINT [FK_ckbx_CustomUserFieldMap_ckbx_CustomUserField]
GO
ALTER TABLE [dbo].[ckbx_EmailListPanel]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_EmailListPanel_ckbx_Panel] FOREIGN KEY([PanelID])
REFERENCES [dbo].[ckbx_Panel] ([PanelID])
GO
ALTER TABLE [dbo].[ckbx_EmailListPanel] CHECK CONSTRAINT [FK_ckbx_EmailListPanel_ckbx_Panel]
GO
ALTER TABLE [dbo].[ckbx_Expression]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Expression_ckbx_Operand] FOREIGN KEY([LeftOperand])
REFERENCES [dbo].[ckbx_Operand] ([OperandID])
GO
ALTER TABLE [dbo].[ckbx_Expression] CHECK CONSTRAINT [FK_ckbx_Expression_ckbx_Operand]
GO
ALTER TABLE [dbo].[ckbx_Expression]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Expression_ckbx_Operand1] FOREIGN KEY([RightOperand])
REFERENCES [dbo].[ckbx_Operand] ([OperandID])
GO
ALTER TABLE [dbo].[ckbx_Expression] CHECK CONSTRAINT [FK_ckbx_Expression_ckbx_Operand1]
GO
ALTER TABLE [dbo].[ckbx_FavoriteSurvey]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_FavoriteSurvey_ckbx_ResponseTemplate] FOREIGN KEY([ResponseTemplateID])
REFERENCES [dbo].[ckbx_ResponseTemplate] ([ResponseTemplateID])
GO
ALTER TABLE [dbo].[ckbx_FavoriteSurvey] CHECK CONSTRAINT [FK_ckbx_FavoriteSurvey_ckbx_ResponseTemplate]
GO
ALTER TABLE [dbo].[ckbx_Filter]  WITH CHECK ADD  CONSTRAINT [FK_Filter_FilterType] FOREIGN KEY([FilterTypeID])
REFERENCES [dbo].[ckbx_FilterType] ([FilterTypeID])
GO
ALTER TABLE [dbo].[ckbx_Filter] CHECK CONSTRAINT [FK_Filter_FilterType]
GO
ALTER TABLE [dbo].[ckbx_Filter_Item]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Filter_Item_ckbx_Filter] FOREIGN KEY([FilterID])
REFERENCES [dbo].[ckbx_Filter] ([FilterID])
GO
ALTER TABLE [dbo].[ckbx_Filter_Item] CHECK CONSTRAINT [FK_ckbx_Filter_Item_ckbx_Filter]
GO
ALTER TABLE [dbo].[ckbx_Filter_Item]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Filter_Item_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_Filter_Item] CHECK CONSTRAINT [FK_ckbx_Filter_Item_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_Filter_Map]  WITH CHECK ADD  CONSTRAINT [FK_FilterID] FOREIGN KEY([FilterID])
REFERENCES [dbo].[ckbx_Filter] ([FilterID])
GO
ALTER TABLE [dbo].[ckbx_Filter_Map] CHECK CONSTRAINT [FK_FilterID]
GO
ALTER TABLE [dbo].[ckbx_Filter_Profile]  WITH CHECK ADD  CONSTRAINT [FK_Filter_Profile_FilterID] FOREIGN KEY([FilterID])
REFERENCES [dbo].[ckbx_Filter] ([FilterID])
GO
ALTER TABLE [dbo].[ckbx_Filter_Profile] CHECK CONSTRAINT [FK_Filter_Profile_FilterID]
GO
ALTER TABLE [dbo].[ckbx_Filter_Response]  WITH CHECK ADD  CONSTRAINT [FK_Filter_Response_FilterID] FOREIGN KEY([FilterID])
REFERENCES [dbo].[ckbx_Filter] ([FilterID])
GO
ALTER TABLE [dbo].[ckbx_Filter_Response] CHECK CONSTRAINT [FK_Filter_Response_FilterID]
GO
ALTER TABLE [dbo].[ckbx_Group]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Group_ckbx_AccessControlList] FOREIGN KEY([AclID])
REFERENCES [dbo].[ckbx_AccessControlList] ([AclID])
GO
ALTER TABLE [dbo].[ckbx_Group] CHECK CONSTRAINT [FK_ckbx_Group_ckbx_AccessControlList]
GO
ALTER TABLE [dbo].[ckbx_GroupMembers]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_GroupMembers_ckbx_Group] FOREIGN KEY([GroupID])
REFERENCES [dbo].[ckbx_Group] ([GroupID])
GO
ALTER TABLE [dbo].[ckbx_GroupMembers] CHECK CONSTRAINT [FK_ckbx_GroupMembers_ckbx_Group]
GO
ALTER TABLE [dbo].[ckbx_GroupPanel]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_GroupPanel_ckbx_Group] FOREIGN KEY([GroupID])
REFERENCES [dbo].[ckbx_Group] ([GroupID])
GO
ALTER TABLE [dbo].[ckbx_GroupPanel] CHECK CONSTRAINT [FK_ckbx_GroupPanel_ckbx_Group]
GO
ALTER TABLE [dbo].[ckbx_GroupPanel]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_GroupPanel_ckbx_Panel] FOREIGN KEY([PanelID])
REFERENCES [dbo].[ckbx_Panel] ([PanelID])
GO
ALTER TABLE [dbo].[ckbx_GroupPanel] CHECK CONSTRAINT [FK_ckbx_GroupPanel_ckbx_Panel]
GO
ALTER TABLE [dbo].[ckbx_IdentityRoles]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_IdentityRoles_ckbx_Role] FOREIGN KEY([RoleID])
REFERENCES [dbo].[ckbx_Role] ([RoleID])
GO
ALTER TABLE [dbo].[ckbx_IdentityRoles] CHECK CONSTRAINT [FK_ckbx_IdentityRoles_ckbx_Role]
GO
ALTER TABLE [dbo].[ckbx_Invitation]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Invitation_ckbx_ResponseTemplate] FOREIGN KEY([ResponseTemplateID])
REFERENCES [dbo].[ckbx_ResponseTemplate] ([ResponseTemplateID])
GO
ALTER TABLE [dbo].[ckbx_Invitation] CHECK CONSTRAINT [FK_ckbx_Invitation_ckbx_ResponseTemplate]
GO
ALTER TABLE [dbo].[ckbx_Invitation_Responses]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Invitation_Responses_ckbx_InvitationRecipients] FOREIGN KEY([RecipientID])
REFERENCES [dbo].[ckbx_InvitationRecipients] ([RecipientID])
GO
ALTER TABLE [dbo].[ckbx_Invitation_Responses] CHECK CONSTRAINT [FK_ckbx_Invitation_Responses_ckbx_InvitationRecipients]
GO
ALTER TABLE [dbo].[ckbx_Invitation_Responses]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Invitation_Responses_ckbx_Response] FOREIGN KEY([ResponseID])
REFERENCES [dbo].[ckbx_Response] ([ResponseID])
GO
ALTER TABLE [dbo].[ckbx_Invitation_Responses] CHECK CONSTRAINT [FK_ckbx_Invitation_Responses_ckbx_Response]
GO
ALTER TABLE [dbo].[ckbx_InvitationPanels]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_InvitationPanels_ckbx_Invitation] FOREIGN KEY([InvitationID])
REFERENCES [dbo].[ckbx_Invitation] ([InvitationID])
GO
ALTER TABLE [dbo].[ckbx_InvitationPanels] CHECK CONSTRAINT [FK_ckbx_InvitationPanels_ckbx_Invitation]
GO
ALTER TABLE [dbo].[ckbx_InvitationPanels]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_InvitationPanels_ckbx_Panel] FOREIGN KEY([PanelID])
REFERENCES [dbo].[ckbx_Panel] ([PanelID])
GO
ALTER TABLE [dbo].[ckbx_InvitationPanels] CHECK CONSTRAINT [FK_ckbx_InvitationPanels_ckbx_Panel]
GO
ALTER TABLE [dbo].[ckbx_InvitationRecipients]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_InvitationRecipients_ckbx_Invitation] FOREIGN KEY([InvitationID])
REFERENCES [dbo].[ckbx_Invitation] ([InvitationID])
GO
ALTER TABLE [dbo].[ckbx_InvitationRecipients] CHECK CONSTRAINT [FK_ckbx_InvitationRecipients_ckbx_Invitation]
GO
ALTER TABLE [dbo].[ckbx_InvitationRecipients]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_InvitationRecipients_ckbx_Panel] FOREIGN KEY([PanelID])
REFERENCES [dbo].[ckbx_Panel] ([PanelID])
GO
ALTER TABLE [dbo].[ckbx_InvitationRecipients] CHECK CONSTRAINT [FK_ckbx_InvitationRecipients_ckbx_Panel]
GO
ALTER TABLE [dbo].[ckbx_InvitationSchedule]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_InvitationSchedule_ckbx_Invitation] FOREIGN KEY([InvitationID])
REFERENCES [dbo].[ckbx_Invitation] ([InvitationID])
GO
ALTER TABLE [dbo].[ckbx_InvitationSchedule] CHECK CONSTRAINT [FK_ckbx_InvitationSchedule_ckbx_Invitation]
GO
ALTER TABLE [dbo].[ckbx_Item]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Item_ckbx_ItemType] FOREIGN KEY([ItemTypeID])
REFERENCES [dbo].[ckbx_ItemType] ([ItemTypeID])
GO
ALTER TABLE [dbo].[ckbx_Item] CHECK CONSTRAINT [FK_ckbx_Item_ckbx_ItemType]
GO
ALTER TABLE [dbo].[ckbx_ItemAppearance]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemAppearance_ckbx_ItemAppearance] FOREIGN KEY([AppearanceCode])
REFERENCES [dbo].[ckbx_ItemAppearanceCode] ([AppearanceCode])
GO
ALTER TABLE [dbo].[ckbx_ItemAppearance] CHECK CONSTRAINT [FK_ckbx_ItemAppearance_ckbx_ItemAppearance]
GO
ALTER TABLE [dbo].[ckbx_ItemAppearanceEditor]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemAppearanceEditor_ckbx_ItemAppearanceEditor] FOREIGN KEY([AppearanceCode])
REFERENCES [dbo].[ckbx_ItemAppearanceCode] ([AppearanceCode])
GO
ALTER TABLE [dbo].[ckbx_ItemAppearanceEditor] CHECK CONSTRAINT [FK_ckbx_ItemAppearanceEditor_ckbx_ItemAppearanceEditor]
GO
ALTER TABLE [dbo].[ckbx_ItemAppearanceRenderer]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemAppearanceRenderer_ckbx_ItemAppearanceRenderer] FOREIGN KEY([AppearanceCode])
REFERENCES [dbo].[ckbx_ItemAppearanceCode] ([AppearanceCode])
GO
ALTER TABLE [dbo].[ckbx_ItemAppearanceRenderer] CHECK CONSTRAINT [FK_ckbx_ItemAppearanceRenderer_ckbx_ItemAppearanceRenderer]
GO
ALTER TABLE [dbo].[ckbx_ItemAppearances]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemAppearances_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemAppearances] CHECK CONSTRAINT [FK_ckbx_ItemAppearances_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemAppearances]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemAppearances_ckbx_ItemAppearance] FOREIGN KEY([AppearanceID])
REFERENCES [dbo].[ckbx_ItemAppearance] ([AppearanceID])
GO
ALTER TABLE [dbo].[ckbx_ItemAppearances] CHECK CONSTRAINT [FK_ckbx_ItemAppearances_ckbx_ItemAppearance]
GO
ALTER TABLE [dbo].[ckbx_ItemData_Address]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_Address_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_Address] CHECK CONSTRAINT [FK_ckbx_ItemData_Address_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_AI_ResponseTemplates]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_AI_ResponseTemplates_ckbx_Item] FOREIGN KEY([AnalysisItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_AI_ResponseTemplates] CHECK CONSTRAINT [FK_ckbx_ItemData_AI_ResponseTemplates_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_AI_SourceItems]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_AI_SourceItems_ckbx_Item] FOREIGN KEY([AnalysisItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_AI_SourceItems] CHECK CONSTRAINT [FK_ckbx_ItemData_AI_SourceItems_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_AI_SourcePages]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_AI_SourcePages_ckbx_Item] FOREIGN KEY([AnalysisItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_AI_SourcePages] CHECK CONSTRAINT [FK_ckbx_ItemData_AI_SourcePages_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_AverageScore]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_AverageScore_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_AverageScore] CHECK CONSTRAINT [FK_ckbx_ItemData_AverageScore_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_Captcha]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_Captcha_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_Captcha] CHECK CONSTRAINT [FK_ckbx_ItemData_Captcha_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_CrossTab]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_CrossTab_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_CrossTab] CHECK CONSTRAINT [FK_ckbx_ItemData_CrossTab_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_CrossTab_Map]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_CrossTab_Map_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_CrossTab_Map] CHECK CONSTRAINT [FK_ckbx_ItemData_CrossTab_Map_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_CrossTab_Map]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_CrossTab_Map_ckbx_Item1] FOREIGN KEY([AnalysisItemID])
REFERENCES [dbo].[ckbx_ItemData_CrossTab] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_CrossTab_Map] CHECK CONSTRAINT [FK_ckbx_ItemData_CrossTab_Map_ckbx_Item1]
GO
ALTER TABLE [dbo].[ckbx_ItemData_DetailsItem]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_DetailsItem_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_DetailsItem] CHECK CONSTRAINT [FK_ckbx_ItemData_DetailsItem_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_DisplayAnalysis]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_DisplayAnalysis_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_DisplayAnalysis] CHECK CONSTRAINT [FK_ckbx_ItemData_DisplayAnalysis_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_DispResponse]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_DispResponse_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_DispResponse] CHECK CONSTRAINT [FK_ckbx_ItemData_DispResponse_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_Email]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_Email_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_Email] CHECK CONSTRAINT [FK_ckbx_ItemData_Email_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_Email]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_Email_ckbx_StyleTemplate] FOREIGN KEY([StyleTemplateID])
REFERENCES [dbo].[ckbx_StyleTemplate] ([TemplateID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_Email] CHECK CONSTRAINT [FK_ckbx_ItemData_Email_ckbx_StyleTemplate]
GO
ALTER TABLE [dbo].[ckbx_ItemData_EmailResponse]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_EmailResponse_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_EmailResponse] CHECK CONSTRAINT [FK_ckbx_ItemData_EmailResponse_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_EmailResponse]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_EmailResponse_ckbx_StyleTemplate] FOREIGN KEY([StyleTemplateID])
REFERENCES [dbo].[ckbx_StyleTemplate] ([TemplateID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_EmailResponse] CHECK CONSTRAINT [FK_ckbx_ItemData_EmailResponse_ckbx_StyleTemplate]
GO
ALTER TABLE [dbo].[ckbx_ItemData_FileUpload]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_FileUpload] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_FileUpload] CHECK CONSTRAINT [FK_ckbx_ItemData_FileUpload]
GO
ALTER TABLE [dbo].[ckbx_ItemData_Frequency]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_Frequency_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_Frequency] CHECK CONSTRAINT [FK_ckbx_ItemData_Frequency_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_Hidden]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_Hidden_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_Hidden] CHECK CONSTRAINT [FK_ckbx_ItemData_Hidden_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_HR]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_HR_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_HR] CHECK CONSTRAINT [FK_ckbx_ItemData_HR_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_Html]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_Html_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_Html] CHECK CONSTRAINT [FK_ckbx_ItemData_Html_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_Image]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_Image_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_Image] CHECK CONSTRAINT [FK_ckbx_ItemData_Image_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_Javascript]  WITH NOCHECK ADD  CONSTRAINT [FK_ckbx_ItemData_Javascript_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_Javascript] CHECK CONSTRAINT [FK_ckbx_ItemData_Javascript_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_Matrix]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_Matrix_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_Matrix] CHECK CONSTRAINT [FK_ckbx_ItemData_Matrix_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_MatrixColumns]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_MatrixColumns_ckbx_Item] FOREIGN KEY([MatrixID])
REFERENCES [dbo].[ckbx_ItemData_Matrix] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_MatrixColumns] CHECK CONSTRAINT [FK_ckbx_ItemData_MatrixColumns_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_MatrixItems]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_MatrixItems_ckbx_Item] FOREIGN KEY([MatrixID])
REFERENCES [dbo].[ckbx_ItemData_Matrix] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_MatrixItems] CHECK CONSTRAINT [FK_ckbx_ItemData_MatrixItems_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_MatrixRows]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_MatrixRows_ckbx_Item] FOREIGN KEY([MatrixID])
REFERENCES [dbo].[ckbx_ItemData_Matrix] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_MatrixRows] CHECK CONSTRAINT [FK_ckbx_ItemData_MatrixRows_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_MatrixRowSelect]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_MatrixRowSelect_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_MatrixRowSelect] CHECK CONSTRAINT [FK_ckbx_ItemData_MatrixRowSelect_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_MatrixSummary]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_MatrixSummary_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_MatrixSummary] CHECK CONSTRAINT [FK_ckbx_ItemData_MatrixSummary_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_MatrixSummary]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_MatrixSummary_ckbx_Item1] FOREIGN KEY([MatrixSourceItem])
REFERENCES [dbo].[ckbx_ItemData_Matrix] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_MatrixSummary] CHECK CONSTRAINT [FK_ckbx_ItemData_MatrixSummary_ckbx_Item1]
GO
ALTER TABLE [dbo].[ckbx_ItemData_MatrixSumTotal]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_MatrixSumTotal_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_MatrixSumTotal] CHECK CONSTRAINT [FK_ckbx_ItemData_MatrixSumTotal_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_Message]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_Message_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_Message] CHECK CONSTRAINT [FK_ckbx_ItemData_Message_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_MLText]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_MLText_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_MLText] CHECK CONSTRAINT [FK_ckbx_ItemData_MLText_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_PUProps]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_PUProps_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_PUProps] CHECK CONSTRAINT [FK_ckbx_ItemData_PUProps_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_PUProps]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_PUProps_ckbx_Item1] FOREIGN KEY([SourceItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_PUProps] CHECK CONSTRAINT [FK_ckbx_ItemData_PUProps_ckbx_Item1]
GO
ALTER TABLE [dbo].[ckbx_ItemData_RankOrder]  WITH NOCHECK ADD  CONSTRAINT [FK_ckbx_ItemData_RankOrder_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_RankOrder] CHECK CONSTRAINT [FK_ckbx_ItemData_RankOrder_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_RankOrderSummary]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_RankOrderSummary_ckbx_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_RankOrderSummary] CHECK CONSTRAINT [FK_ckbx_ItemData_RankOrderSummary_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_RankOrderSummaryTable]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_RankOrderSummaryTable_ckbx_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_RankOrderSummaryTable] CHECK CONSTRAINT [FK_ckbx_ItemData_RankOrderSummaryTable_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_Redirect]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_Redirect_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_Redirect] CHECK CONSTRAINT [FK_ckbx_ItemData_Redirect_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_RS]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_RS_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_RS] CHECK CONSTRAINT [FK_ckbx_ItemData_RS_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_ScoreMessage]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_ScoreMessage_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_ScoreMessage] CHECK CONSTRAINT [FK_ckbx_ItemData_ScoreMessage_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_ScoreMessages]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_ScoreMessages_ckbx_ItemData_ScoreMessages] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_ItemData_ScoreMessage] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_ScoreMessages] CHECK CONSTRAINT [FK_ckbx_ItemData_ScoreMessages_ckbx_ItemData_ScoreMessages]
GO
ALTER TABLE [dbo].[ckbx_ItemData_Select1]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_Select1_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_Select1] CHECK CONSTRAINT [FK_ckbx_ItemData_Select1_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_SelectMany]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_SelectMany_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_SelectMany] CHECK CONSTRAINT [FK_ckbx_ItemData_SelectMany_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_Slider]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_Slider_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_Slider] CHECK CONSTRAINT [FK_ckbx_ItemData_Slider_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_SLText]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_SLText_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_SLText] CHECK CONSTRAINT [FK_ckbx_ItemData_SLText_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_StatisticsTable]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_StatisticsTable_ckbx_Item] FOREIGN KEY([ItemId])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_StatisticsTable] CHECK CONSTRAINT [FK_ckbx_ItemData_StatisticsTable_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemData_TotalScore]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemData_TotalScore_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemData_TotalScore] CHECK CONSTRAINT [FK_ckbx_ItemData_TotalScore_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemEditors]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemEditors_ckbx_ItemType] FOREIGN KEY([ItemTypeID])
REFERENCES [dbo].[ckbx_ItemType] ([ItemTypeID])
GO
ALTER TABLE [dbo].[ckbx_ItemEditors] CHECK CONSTRAINT [FK_ckbx_ItemEditors_ckbx_ItemType]
GO
ALTER TABLE [dbo].[ckbx_ItemFormatters]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemFormatters_ckbx_ItemType] FOREIGN KEY([ItemTypeId])
REFERENCES [dbo].[ckbx_ItemType] ([ItemTypeID])
GO
ALTER TABLE [dbo].[ckbx_ItemFormatters] CHECK CONSTRAINT [FK_ckbx_ItemFormatters_ckbx_ItemType]
GO
ALTER TABLE [dbo].[ckbx_ItemImportHandlers]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemImportHandlers_ckbx_ItemType] FOREIGN KEY([ItemTypeID])
REFERENCES [dbo].[ckbx_ItemType] ([ItemTypeID])
GO
ALTER TABLE [dbo].[ckbx_ItemImportHandlers] CHECK CONSTRAINT [FK_ckbx_ItemImportHandlers_ckbx_ItemType]
GO
ALTER TABLE [dbo].[ckbx_ItemLists]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemLists_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemLists] CHECK CONSTRAINT [FK_ckbx_ItemLists_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemLists]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemLists_ckbx_ItemOptionsList] FOREIGN KEY([ListID])
REFERENCES [dbo].[ckbx_ItemOptionsList] ([ListID])
GO
ALTER TABLE [dbo].[ckbx_ItemLists] CHECK CONSTRAINT [FK_ckbx_ItemLists_ckbx_ItemOptionsList]
GO
ALTER TABLE [dbo].[ckbx_ItemOperand]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemOperand_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemOperand] CHECK CONSTRAINT [FK_ckbx_ItemOperand_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemOperand]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemOperand_ckbx_Item1] FOREIGN KEY([ParentItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemOperand] CHECK CONSTRAINT [FK_ckbx_ItemOperand_ckbx_Item1]
GO
ALTER TABLE [dbo].[ckbx_ItemOperand]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemOperand_ckbx_Operand] FOREIGN KEY([OperandID])
REFERENCES [dbo].[ckbx_Operand] ([OperandID])
GO
ALTER TABLE [dbo].[ckbx_ItemOperand] CHECK CONSTRAINT [FK_ckbx_ItemOperand_ckbx_Operand]
GO
ALTER TABLE [dbo].[ckbx_ItemOperand]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemOperand_ckbx_Operand1] FOREIGN KEY([OperandID])
REFERENCES [dbo].[ckbx_Operand] ([OperandID])
GO
ALTER TABLE [dbo].[ckbx_ItemOperand] CHECK CONSTRAINT [FK_ckbx_ItemOperand_ckbx_Operand1]
GO
ALTER TABLE [dbo].[ckbx_ItemOptions]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemOptions_ckbx_Content_Items] FOREIGN KEY([ContentId])
REFERENCES [dbo].[ckbx_Content_Items] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemOptions] CHECK CONSTRAINT [FK_ckbx_ItemOptions_ckbx_Content_Items]
GO
ALTER TABLE [dbo].[ckbx_ItemOptions]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemOptions_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemOptions] CHECK CONSTRAINT [FK_ckbx_ItemOptions_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemRules]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemRules_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ItemRules] CHECK CONSTRAINT [FK_ckbx_ItemRules_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ItemRules]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemRules_ckbx_Rule] FOREIGN KEY([RuleID])
REFERENCES [dbo].[ckbx_Rule] ([RuleID])
GO
ALTER TABLE [dbo].[ckbx_ItemRules] CHECK CONSTRAINT [FK_ckbx_ItemRules_ckbx_Rule]
GO
ALTER TABLE [dbo].[ckbx_ItemType]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ItemType_ckbx_ItemType_Categories] FOREIGN KEY([CategoryID])
REFERENCES [dbo].[ckbx_ItemType_Categories] ([CategoryID])
GO
ALTER TABLE [dbo].[ckbx_ItemType] CHECK CONSTRAINT [FK_ckbx_ItemType_ckbx_ItemType_Categories]
GO
ALTER TABLE [dbo].[ckbx_LayoutTemplate]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_LayoutTemplate_ckbx_LayoutTemplateType] FOREIGN KEY([LayoutTemplateTypeID])
REFERENCES [dbo].[ckbx_LayoutTemplateType] ([LayoutTemplateTypeID])
GO
ALTER TABLE [dbo].[ckbx_LayoutTemplate] CHECK CONSTRAINT [FK_ckbx_LayoutTemplate_ckbx_LayoutTemplateType]
GO
ALTER TABLE [dbo].[ckbx_LayoutTemplate_AutoColumns]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_LayoutTemplate_AutoColumns_ckbx_LayoutTemplate] FOREIGN KEY([LayoutTemplateID])
REFERENCES [dbo].[ckbx_LayoutTemplate] ([LayoutTemplateID])
GO
ALTER TABLE [dbo].[ckbx_LayoutTemplate_AutoColumns] CHECK CONSTRAINT [FK_ckbx_LayoutTemplate_AutoColumns_ckbx_LayoutTemplate]
GO
ALTER TABLE [dbo].[ckbx_LayoutTemplate_ItemZones]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_LayoutTemplate_ItemZones_ckbx_LayoutTemplate] FOREIGN KEY([LayoutTemplateID])
REFERENCES [dbo].[ckbx_LayoutTemplate] ([LayoutTemplateID])
GO
ALTER TABLE [dbo].[ckbx_LayoutTemplate_ItemZones] CHECK CONSTRAINT [FK_ckbx_LayoutTemplate_ItemZones_ckbx_LayoutTemplate]
GO
ALTER TABLE [dbo].[ckbx_LibraryTemplate]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_LibraryTemplate_ckbx_Template] FOREIGN KEY([LibraryTemplateID])
REFERENCES [dbo].[ckbx_Template] ([TemplateID])
GO
ALTER TABLE [dbo].[ckbx_LibraryTemplate] CHECK CONSTRAINT [FK_ckbx_LibraryTemplate_ckbx_Template]
GO
ALTER TABLE [dbo].[ckbx_PageBranchAction]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_PageBranchAction_ckbx_Action] FOREIGN KEY([ActionID])
REFERENCES [dbo].[ckbx_Action] ([ActionID])
GO
ALTER TABLE [dbo].[ckbx_PageBranchAction] CHECK CONSTRAINT [FK_ckbx_PageBranchAction_ckbx_Action]
GO
ALTER TABLE [dbo].[ckbx_PageBranchAction]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_PageBranchAction_ckbx_Template_Pages] FOREIGN KEY([GoToPageID])
REFERENCES [dbo].[ckbx_Template_Pages] ([PageID])
GO
ALTER TABLE [dbo].[ckbx_PageBranchAction] CHECK CONSTRAINT [FK_ckbx_PageBranchAction_ckbx_Template_Pages]
GO
ALTER TABLE [dbo].[ckbx_Panel]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Panel_ckbx_AccessControlList] FOREIGN KEY([AclID])
REFERENCES [dbo].[ckbx_AccessControlList] ([AclID])
GO
ALTER TABLE [dbo].[ckbx_Panel] CHECK CONSTRAINT [FK_ckbx_Panel_ckbx_AccessControlList]
GO
ALTER TABLE [dbo].[ckbx_Panel]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Panel_ckbx_PanelType] FOREIGN KEY([PanelTypeID])
REFERENCES [dbo].[ckbx_PanelType] ([PanelTypeID])
GO
ALTER TABLE [dbo].[ckbx_Panel] CHECK CONSTRAINT [FK_ckbx_Panel_ckbx_PanelType]
GO
ALTER TABLE [dbo].[ckbx_PermissionMaskPermissions]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_PermissionMaskPermissions_ckbx_Permission] FOREIGN KEY([PermissionID])
REFERENCES [dbo].[ckbx_Permission] ([PermissionID])
GO
ALTER TABLE [dbo].[ckbx_PermissionMaskPermissions] CHECK CONSTRAINT [FK_ckbx_PermissionMaskPermissions_ckbx_Permission]
GO
ALTER TABLE [dbo].[ckbx_PermissionMaskPermissions]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_PermissionMaskPermissions_ckbx_PermissionMask] FOREIGN KEY([MaskID])
REFERENCES [dbo].[ckbx_PermissionMask] ([MaskID])
GO
ALTER TABLE [dbo].[ckbx_PermissionMaskPermissions] CHECK CONSTRAINT [FK_ckbx_PermissionMaskPermissions_ckbx_PermissionMask]
GO
ALTER TABLE [dbo].[ckbx_PolicyPermissions]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_PolicyPermissions_ckbx_Permission] FOREIGN KEY([PermissionID])
REFERENCES [dbo].[ckbx_Permission] ([PermissionID])
GO
ALTER TABLE [dbo].[ckbx_PolicyPermissions] CHECK CONSTRAINT [FK_ckbx_PolicyPermissions_ckbx_Permission]
GO
ALTER TABLE [dbo].[ckbx_PolicyPermissions]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_PolicyPermissions_ckbx_Policy] FOREIGN KEY([PolicyID])
REFERENCES [dbo].[ckbx_Policy] ([PolicyID])
GO
ALTER TABLE [dbo].[ckbx_PolicyPermissions] CHECK CONSTRAINT [FK_ckbx_PolicyPermissions_ckbx_Policy]
GO
ALTER TABLE [dbo].[ckbx_Product_Modules]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Product_Modules_ckbx_Product_Info] FOREIGN KEY([ProductID])
REFERENCES [dbo].[ckbx_Product_Info] ([ProductID])
GO
ALTER TABLE [dbo].[ckbx_Product_Modules] CHECK CONSTRAINT [FK_ckbx_Product_Modules_ckbx_Product_Info]
GO
ALTER TABLE [dbo].[ckbx_Product_Patches]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Product_Patches_ckbx_Product_Info] FOREIGN KEY([ProductID])
REFERENCES [dbo].[ckbx_Product_Info] ([ProductID])
GO
ALTER TABLE [dbo].[ckbx_Product_Patches] CHECK CONSTRAINT [FK_ckbx_Product_Patches_ckbx_Product_Info]
GO
ALTER TABLE [dbo].[ckbx_Product_Patches]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Product_Patches_ckbx_Product_Modules] FOREIGN KEY([ModuleID])
REFERENCES [dbo].[ckbx_Product_Modules] ([ModuleID])
GO
ALTER TABLE [dbo].[ckbx_Product_Patches] CHECK CONSTRAINT [FK_ckbx_Product_Patches_ckbx_Product_Modules]
GO
ALTER TABLE [dbo].[ckbx_ProfileOperand]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ProfileOperand_ckbx_Operand] FOREIGN KEY([OperandID])
REFERENCES [dbo].[ckbx_Operand] ([OperandID])
GO
ALTER TABLE [dbo].[ckbx_ProfileOperand] CHECK CONSTRAINT [FK_ckbx_ProfileOperand_ckbx_Operand]
GO
ALTER TABLE [dbo].[ckbx_Response]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Response_ckbx_ResponseTemplate] FOREIGN KEY([ResponseTemplateID])
REFERENCES [dbo].[ckbx_ResponseTemplate] ([ResponseTemplateID])
GO
ALTER TABLE [dbo].[ckbx_Response] CHECK CONSTRAINT [FK_ckbx_Response_ckbx_ResponseTemplate]
GO
ALTER TABLE [dbo].[ckbx_Response_EmailSent]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Response_EmailSent_ckbx_Response_EmailSent] FOREIGN KEY([ResponseID])
REFERENCES [dbo].[ckbx_Response] ([ResponseID])
GO
ALTER TABLE [dbo].[ckbx_Response_EmailSent] CHECK CONSTRAINT [FK_ckbx_Response_EmailSent_ckbx_Response_EmailSent]
GO
ALTER TABLE [dbo].[ckbx_Response_EmailSent]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Response_EmailSent_ckbx_Response_EmailSent1] FOREIGN KEY([EmailItemID])
REFERENCES [dbo].[ckbx_ItemData_Email] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_Response_EmailSent] CHECK CONSTRAINT [FK_ckbx_Response_EmailSent_ckbx_Response_EmailSent1]
GO
ALTER TABLE [dbo].[ckbx_Response_ItemOptionOrder]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Response_ItemOptionOrder_ckbx_Response] FOREIGN KEY([ResponseID])
REFERENCES [dbo].[ckbx_Response] ([ResponseID])
GO
ALTER TABLE [dbo].[ckbx_Response_ItemOptionOrder] CHECK CONSTRAINT [FK_ckbx_Response_ItemOptionOrder_ckbx_Response]
GO
ALTER TABLE [dbo].[ckbx_Response_PageItemOrder]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Response_PageItemOrder_ckbx_Response] FOREIGN KEY([ResponseID])
REFERENCES [dbo].[ckbx_Response] ([ResponseID])
GO
ALTER TABLE [dbo].[ckbx_Response_PageItemOrder] CHECK CONSTRAINT [FK_ckbx_Response_PageItemOrder_ckbx_Response]
GO
ALTER TABLE [dbo].[ckbx_ResponseAnswers]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ResponseAnswers_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ResponseAnswers] CHECK CONSTRAINT [FK_ckbx_ResponseAnswers_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ResponseAnswers]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ResponseAnswers_ckbx_ItemOptions] FOREIGN KEY([OptionID])
REFERENCES [dbo].[ckbx_ItemOptions] ([OptionID])
GO
ALTER TABLE [dbo].[ckbx_ResponseAnswers] CHECK CONSTRAINT [FK_ckbx_ResponseAnswers_ckbx_ItemOptions]
GO
ALTER TABLE [dbo].[ckbx_ResponseAnswers]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ResponseAnswers_ckbx_Response] FOREIGN KEY([ResponseID])
REFERENCES [dbo].[ckbx_Response] ([ResponseID])
GO
ALTER TABLE [dbo].[ckbx_ResponseAnswers] CHECK CONSTRAINT [FK_ckbx_ResponseAnswers_ckbx_Response]
GO
ALTER TABLE [dbo].[ckbx_ResponseLog]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ResponseLog_ckbx_Response] FOREIGN KEY([ResponseID])
REFERENCES [dbo].[ckbx_Response] ([ResponseID])
GO
ALTER TABLE [dbo].[ckbx_ResponseLog] CHECK CONSTRAINT [FK_ckbx_ResponseLog_ckbx_Response]
GO
ALTER TABLE [dbo].[ckbx_ResponseOperand]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ResponseOperand_ckbx_Operand] FOREIGN KEY([OperandID])
REFERENCES [dbo].[ckbx_Operand] ([OperandID])
GO
ALTER TABLE [dbo].[ckbx_ResponseOperand] CHECK CONSTRAINT [FK_ckbx_ResponseOperand_ckbx_Operand]
GO
ALTER TABLE [dbo].[ckbx_ResponsePipe]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ResponsePipe_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ResponsePipe] CHECK CONSTRAINT [FK_ckbx_ResponsePipe_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ResponsePipe]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ResponsePipe_ckbx_ResponseTemplate] FOREIGN KEY([ResponseTemplateID])
REFERENCES [dbo].[ckbx_ResponseTemplate] ([ResponseTemplateID])
GO
ALTER TABLE [dbo].[ckbx_ResponsePipe] CHECK CONSTRAINT [FK_ckbx_ResponsePipe_ckbx_ResponseTemplate]
GO
ALTER TABLE [dbo].[ckbx_ResponseTemplate]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ResponseTemplate_ckbx_MobileStyles] FOREIGN KEY([MobileStyleId])
REFERENCES [dbo].[ckbx_MobileStyles] ([StyleID])
GO
ALTER TABLE [dbo].[ckbx_ResponseTemplate] CHECK CONSTRAINT [FK_ckbx_ResponseTemplate_ckbx_MobileStyles]
GO
ALTER TABLE [dbo].[ckbx_ResponseTemplate]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ResponseTemplate_ckbx_SmartPhoneStyleTemplate] FOREIGN KEY([SmartPhoneStyleTemplateID])
REFERENCES [dbo].[ckbx_StyleTemplate] ([TemplateID])
GO
ALTER TABLE [dbo].[ckbx_ResponseTemplate] CHECK CONSTRAINT [FK_ckbx_ResponseTemplate_ckbx_SmartPhoneStyleTemplate]
GO
ALTER TABLE [dbo].[ckbx_ResponseTemplate]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ResponseTemplate_ckbx_StyleTemplate] FOREIGN KEY([StyleTemplateID])
REFERENCES [dbo].[ckbx_StyleTemplate] ([TemplateID])
GO
ALTER TABLE [dbo].[ckbx_ResponseTemplate] CHECK CONSTRAINT [FK_ckbx_ResponseTemplate_ckbx_StyleTemplate]
GO
ALTER TABLE [dbo].[ckbx_ResponseTemplate]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ResponseTemplate_ckbx_TabletStyleTemplate] FOREIGN KEY([TabletStyleTemplateID])
REFERENCES [dbo].[ckbx_StyleTemplate] ([TemplateID])
GO
ALTER TABLE [dbo].[ckbx_ResponseTemplate] CHECK CONSTRAINT [FK_ckbx_ResponseTemplate_ckbx_TabletStyleTemplate]
GO
ALTER TABLE [dbo].[ckbx_ResponseTemplate]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ResponseTemplate_ckbx_Template] FOREIGN KEY([ResponseTemplateID])
REFERENCES [dbo].[ckbx_Template] ([TemplateID])
GO
ALTER TABLE [dbo].[ckbx_ResponseTemplate] CHECK CONSTRAINT [FK_ckbx_ResponseTemplate_ckbx_Template]
GO
ALTER TABLE [dbo].[ckbx_RolePermissions]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_RolePermissions_ckbx_Permission] FOREIGN KEY([PermissionID])
REFERENCES [dbo].[ckbx_Permission] ([PermissionID])
GO
ALTER TABLE [dbo].[ckbx_RolePermissions] CHECK CONSTRAINT [FK_ckbx_RolePermissions_ckbx_Permission]
GO
ALTER TABLE [dbo].[ckbx_RolePermissions]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_RolePermissions_ckbx_Role] FOREIGN KEY([RoleID])
REFERENCES [dbo].[ckbx_Role] ([RoleID])
GO
ALTER TABLE [dbo].[ckbx_RolePermissions] CHECK CONSTRAINT [FK_ckbx_RolePermissions_ckbx_Role]
GO
ALTER TABLE [dbo].[ckbx_Rule]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Rule_ckbx_Expression] FOREIGN KEY([ExpressionID])
REFERENCES [dbo].[ckbx_Expression] ([ExpressionID])
GO
ALTER TABLE [dbo].[ckbx_Rule] CHECK CONSTRAINT [FK_ckbx_Rule_ckbx_Expression]
GO
ALTER TABLE [dbo].[ckbx_RuleActions]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_RuleActions_ckbx_Action] FOREIGN KEY([ActionID])
REFERENCES [dbo].[ckbx_Action] ([ActionID])
GO
ALTER TABLE [dbo].[ckbx_RuleActions] CHECK CONSTRAINT [FK_ckbx_RuleActions_ckbx_Action]
GO
ALTER TABLE [dbo].[ckbx_RuleActions]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_RuleActions_ckbx_Rule] FOREIGN KEY([RuleID])
REFERENCES [dbo].[ckbx_Rule] ([RuleID])
GO
ALTER TABLE [dbo].[ckbx_RuleActions] CHECK CONSTRAINT [FK_ckbx_RuleActions_ckbx_Rule]
GO
ALTER TABLE [dbo].[ckbx_Search_Available_Object]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Search_Available_Object_ckbx_Search_Request] FOREIGN KEY([SearchRequestID])
REFERENCES [dbo].[ckbx_Search_Request] ([SearchRequestID])
GO
ALTER TABLE [dbo].[ckbx_Search_Available_Object] CHECK CONSTRAINT [FK_ckbx_Search_Available_Object_ckbx_Search_Request]
GO
ALTER TABLE [dbo].[ckbx_Search_Completion]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Search_Completion_ckbx_Search_Request] FOREIGN KEY([SearchRequestID])
REFERENCES [dbo].[ckbx_Search_Request] ([SearchRequestID])
GO
ALTER TABLE [dbo].[ckbx_Search_Completion] CHECK CONSTRAINT [FK_ckbx_Search_Completion_ckbx_Search_Request]
GO
ALTER TABLE [dbo].[ckbx_Search_Result]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Search_Result_ckbx_Search_Request] FOREIGN KEY([SearchRequestID])
REFERENCES [dbo].[ckbx_Search_Request] ([SearchRequestID])
GO
ALTER TABLE [dbo].[ckbx_Search_Result] CHECK CONSTRAINT [FK_ckbx_Search_Result_ckbx_Search_Request]
GO
ALTER TABLE [dbo].[ckbx_Search_Settings]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Search_Settings_ckbx_Role] FOREIGN KEY([RoleID])
REFERENCES [dbo].[ckbx_Role] ([RoleID])
GO
ALTER TABLE [dbo].[ckbx_Search_Settings] CHECK CONSTRAINT [FK_ckbx_Search_Settings_ckbx_Role]
GO
ALTER TABLE [dbo].[ckbx_StyleTemplate_Elements]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_StyleTemplate_Elements_ckbx_StyleTemplate] FOREIGN KEY([TemplateID])
REFERENCES [dbo].[ckbx_StyleTemplate] ([TemplateID])
GO
ALTER TABLE [dbo].[ckbx_StyleTemplate_Elements] CHECK CONSTRAINT [FK_ckbx_StyleTemplate_Elements_ckbx_StyleTemplate]
GO
ALTER TABLE [dbo].[ckbx_StyleTemplate_Properties]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_StyleTemplate_Properties_ckbx_StyleTemplate_Elements] FOREIGN KEY([ElementID])
REFERENCES [dbo].[ckbx_StyleTemplate_Elements] ([ElementID])
GO
ALTER TABLE [dbo].[ckbx_StyleTemplate_Properties] CHECK CONSTRAINT [FK_ckbx_StyleTemplate_Properties_ckbx_StyleTemplate_Elements]
GO
ALTER TABLE [dbo].[ckbx_Template]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Template_ckbx_AccessControlList] FOREIGN KEY([AclID])
REFERENCES [dbo].[ckbx_AccessControlList] ([AclID])
GO
ALTER TABLE [dbo].[ckbx_Template] CHECK CONSTRAINT [FK_ckbx_Template_ckbx_AccessControlList]
GO
ALTER TABLE [dbo].[ckbx_Template_Items]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Template_Items_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_Template_Items] CHECK CONSTRAINT [FK_ckbx_Template_Items_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_Template_Items]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Template_Items_ckbx_Template] FOREIGN KEY([TemplateID])
REFERENCES [dbo].[ckbx_Template] ([TemplateID])
GO
ALTER TABLE [dbo].[ckbx_Template_Items] CHECK CONSTRAINT [FK_ckbx_Template_Items_ckbx_Template]
GO
ALTER TABLE [dbo].[ckbx_Template_Pages]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Template_Pages_ckbx_LayoutTemplate] FOREIGN KEY([LayoutTemplateID])
REFERENCES [dbo].[ckbx_LayoutTemplate] ([LayoutTemplateID])
GO
ALTER TABLE [dbo].[ckbx_Template_Pages] CHECK CONSTRAINT [FK_ckbx_Template_Pages_ckbx_LayoutTemplate]
GO
ALTER TABLE [dbo].[ckbx_Template_Pages]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Template_Pages_ckbx_Template] FOREIGN KEY([TemplateID])
REFERENCES [dbo].[ckbx_Template] ([TemplateID])
GO
ALTER TABLE [dbo].[ckbx_Template_Pages] CHECK CONSTRAINT [FK_ckbx_Template_Pages_ckbx_Template]
GO
ALTER TABLE [dbo].[ckbx_TemplatePage_Items]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_TemplatePage_Items_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_TemplatePage_Items] CHECK CONSTRAINT [FK_ckbx_TemplatePage_Items_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_TemplatePage_Items]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_TemplatePage_Items_ckbx_Template_Pages] FOREIGN KEY([PageID])
REFERENCES [dbo].[ckbx_Template_Pages] ([PageID])
GO
ALTER TABLE [dbo].[ckbx_TemplatePage_Items] CHECK CONSTRAINT [FK_ckbx_TemplatePage_Items_ckbx_Template_Pages]
GO
ALTER TABLE [dbo].[ckbx_TemplatePage_Rules]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_TemplatePage_Rules_ckbx_Rule] FOREIGN KEY([RuleID])
REFERENCES [dbo].[ckbx_Rule] ([RuleID])
GO
ALTER TABLE [dbo].[ckbx_TemplatePage_Rules] CHECK CONSTRAINT [FK_ckbx_TemplatePage_Rules_ckbx_Rule]
GO
ALTER TABLE [dbo].[ckbx_TemplatePage_Rules]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_TemplatePage_Rules_ckbx_Template_Pages] FOREIGN KEY([PageID])
REFERENCES [dbo].[ckbx_Template_Pages] ([PageID])
GO
ALTER TABLE [dbo].[ckbx_TemplatePage_Rules] CHECK CONSTRAINT [FK_ckbx_TemplatePage_Rules_ckbx_Template_Pages]
GO
ALTER TABLE [dbo].[ckbx_Timeline_Config]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Timeline_Config_ckbx_Timeline_Events] FOREIGN KEY([EventID])
REFERENCES [dbo].[ckbx_Timeline_Events] ([EventID])
GO
ALTER TABLE [dbo].[ckbx_Timeline_Config] CHECK CONSTRAINT [FK_ckbx_Timeline_Config_ckbx_Timeline_Events]
GO
ALTER TABLE [dbo].[ckbx_Timeline_Settings]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_Timeline_Settings_ckbx_Timeline_Events] FOREIGN KEY([EventID])
REFERENCES [dbo].[ckbx_Timeline_Events] ([EventID])
GO
ALTER TABLE [dbo].[ckbx_Timeline_Settings] CHECK CONSTRAINT [FK_ckbx_Timeline_Settings_ckbx_Timeline_Events]
GO
ALTER TABLE [dbo].[ckbx_UserPanel]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_UserPanel_ckbx_Panel] FOREIGN KEY([PanelID])
REFERENCES [dbo].[ckbx_Panel] ([PanelID])
GO
ALTER TABLE [dbo].[ckbx_UserPanel] CHECK CONSTRAINT [FK_ckbx_UserPanel_ckbx_Panel]
GO
ALTER TABLE [dbo].[ckbx_ValueOperand]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ValueOperand_ckbx_Item] FOREIGN KEY([ItemID])
REFERENCES [dbo].[ckbx_Item] ([ItemID])
GO
ALTER TABLE [dbo].[ckbx_ValueOperand] CHECK CONSTRAINT [FK_ckbx_ValueOperand_ckbx_Item]
GO
ALTER TABLE [dbo].[ckbx_ValueOperand]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ValueOperand_ckbx_ItemOptions] FOREIGN KEY([OptionID])
REFERENCES [dbo].[ckbx_ItemOptions] ([OptionID])
GO
ALTER TABLE [dbo].[ckbx_ValueOperand] CHECK CONSTRAINT [FK_ckbx_ValueOperand_ckbx_ItemOptions]
GO
ALTER TABLE [dbo].[ckbx_ValueOperand]  WITH CHECK ADD  CONSTRAINT [FK_ckbx_ValueOperand_ckbx_Operand] FOREIGN KEY([OperandID])
REFERENCES [dbo].[ckbx_Operand] ([OperandID])
GO
ALTER TABLE [dbo].[ckbx_ValueOperand] CHECK CONSTRAINT [FK_ckbx_ValueOperand_ckbx_Operand]
GO
/****** Object:  StoredProcedure [dbo].[ckbx_Identity_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[ckbx_Identity_Get]
(
   @UniqueIdentifier nvarchar(611)
)
AS
  SELECT
	UserName,
	[Password],
	Domain,
	[UniqueIdentifier],
	[GUID],
	Encrypted,
	Email,
	Created,
	LastActivity,
	LastLogin,
	LastPasswordChange,
	LastLockedOut,
	FailedLogins,
	LockedOut
  FROM
    ckbx_Credential
  WHERE
    [UniqueIdentifier] = @UniqueIdentifier


GO
/****** Object:  StoredProcedure [dbo].[ckbx_Invitation_ResetProcessingBatchForRecipients]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_Invitation_ResetProcessingBatchForRecipients]
(
	@SheduleId int
)
AS
	DECLARE @InvitationID as INT

	SELECT @InvitationID = (SELECT [InvitationID]
		FROM ckbx_InvitationSchedule WHERE InvitationScheduleID = @SheduleId)

	UPDATE [ckbx_InvitationRecipients] 
	SET ProcessingBatchId = NULL WHERE InvitationID = @InvitationID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_Invitation_SetSuccessfulSentStatusForRecipients]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_Invitation_SetSuccessfulSentStatusForRecipients]
(
	@InvitationID int
)
AS
	UPDATE [ckbx_InvitationRecipients] 
	SET [SuccessfullySent] = 1, [LastSent] = GETDATE ()
	WHERE InvitationID = @InvitationID AND ([OptOut] IS NULL OR [OptOut] = 0)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ACL_AddEntry]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[ckbx_sp_ACL_AddEntry]
(
	@AclID int,
	@EntryType varchar (255),
	@EntryIdentifier nvarchar (100),
	@PolicyID int
)
AS
    --Create entry
    INSERT INTO ckbx_AccessControlEntry (EntryType, EntryIdentifier, PolicyID) VALUES (@EntryType, @EntryIdentifier, @PolicyID)
 
   --Create Acl/Policy reference
   INSERT INTO ckbx_AccessControlEntries (AclID, EntryID) VALUES (@AclID, @@IDENTITY)







GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ACL_AddPolicyPermission]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_ACL_AddPolicyPermission]
(
	@PolicyID int,
	@PermissionName varchar (255)
)
AS
	/* SET NOCOUNT ON */
	DECLARE @PermissionID int
	SELECT @PermissionID = PermissionID FROM ckbx_Permission WHERE PermissionName = @PermissionName
	INSERT INTO ckbx_PolicyPermissions (PolicyID, PermissionID) VALUES (@PolicyID, @PermissionID)
	RETURN 




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ACL_ChangeID]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ACL_ChangeID]
(
	@EntryType varchar(255),
	@OriginalEntryIdentifier nvarchar(511),
	@NewEntryIdentifier nvarchar(511)
)
AS

	UPDATE ckbx_AccessControlEntry SET EntryIdentifier = @NewEntryIdentifier WHERE EntryType = @EntryType AND EntryIdentifier = @OriginalEntryIdentifier

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ACL_Create]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ACL_Create]
	@AclID int out
AS
	INSERT INTO ckbx_AccessControlList (Created, LastModified) VALUES (GetDate(), GetDate())
	SET @AclID = @@IDENTITY




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ACL_CreatePolicy]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_ACL_CreatePolicy]
(
	@PolicyType varchar (255),
	@PolicyAssemblyName varchar (255),
	@PolicyID int output
)
AS
	/* SET NOCOUNT ON */
	INSERT INTO ckbx_Policy (PolicyType, PolicyAssemblyName) VALUES (@PolicyType, @PolicyAssemblyName)
	SELECT @PolicyID = SCOPE_IDENTITY()
	RETURN 



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ACL_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  procedure [dbo].[ckbx_sp_ACL_Delete]
(
	@AclID int
)
AS
	DELETE ckbx_PolicyPermissions where PolicyID in (Select PolicyID from ckbx_AccessControlEntry where EntryID in(
	SELECT EntryID from ckbx_AccessControlEntries WHERE AclID = @AclID))

	DECLARE aclCursor CURSOR LOCAL
	FOR
	SELECT
		EntryID
	FROM
		ckbx_AccessControlEntries
	WHERE
		AclID = @AclID

	OPEN aclCursor

	DECLARE @EntryID int

	FETCH NEXT

	FROM
		aclCursor INTO
		@EntryID
	WHILE @@FETCH_STATUS = 0
		BEGIN
			DELETE FROM ckbx_AccessControLEntries WHERE EntryID = @EntryID

			DECLARE @PolicyID int
			SELECT @PolicyID = PolicyID FROM ckbx_AccessControlEntry WHERE EntryID = @EntryID

			DELETE FROM ckbx_AccessControlEntry WHERE EntryID = @EntryID

			DELETE FROM ckbx_Policy WHERE PolicyID = @PolicyID

			FETCH NEXT
			FROM
				aclCursor INTO
				@EntryID
		END
	CLOSE aclCursor
	DEALLOCATE aclCursor
		
	DELETE FROM ckbx_AccessControlList WHERE AclID = @AclID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ACL_DeleteAllEntries]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[ckbx_sp_ACL_DeleteAllEntries]
(
	@AclID int
)
AS
	IF @AclID IS NOT NULL
	  BEGIN
            DECLARE @EntryType varchar(255)
            DECLARE @EntryIdentifier nvarchar(611)
		    DECLARE @MyCursor CURSOR
	
		    SET @MyCursor = CURSOR FAST_FORWARD 
			  FOR 
				SELECT EntryType, EntryIdentifier
				FROM ckbx_AccessControlEntries, ckbx_AccessControlEntry
				WHERE AclID = @AclID
				AND ckbx_AccessControlEntries.EntryID = ckbx_AccessControlEntry.EntryID
				GROUP BY EntryType, EntryIdentifier
	   
		       OPEN @MyCursor 
	           FETCH NEXT FROM @MyCursor INTO @EntryType, @EntryIdentifier
            
			   WHILE @@FETCH_STATUS = 0
			       BEGIN 
					 EXEC ckbx_sp_ACL_DeleteEntry @AclID, @EntryType, @EntryIdentifier
	                 FETCH NEXT FROM @MyCursor INTO @EntryType, @EntryIdentifier
		            END

			    CLOSE @MyCursor 
				DEALLOCATE @MyCursor 
	  END





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ACL_DeleteEntry]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ACL_DeleteEntry]
(
	@AclID int,
	@EntryType varchar ( 255 ),
	@EntryIdentifier nvarchar ( 611 )
)
AS
	DECLARE @EntryID int
	SELECT	
		@EntryID = ckbx_AccessControlEntry.EntryID
	FROM
		ckbx_AccessControlEntry JOIN
		ckbx_AccessControlEntries
		ON ckbx_AccessControlEntry.EntryID = ckbx_AccessControlEntries.EntryID
	WHERE
		ckbx_AccessControlEntries.ACLID = @AclID
		And
		(
			ckbx_AccessControlEntry.EntryType = @EntryType
			And ckbx_AccessControlEntry.EntryIdentifier = @EntryIdentifier
		)
	
	DECLARE @PolicyID int
	SELECT	@PolicyID = PolicyID FROM ckbx_AccessControlEntry WHERE	EntryID = @EntryID

	DELETE FROM	ckbx_PolicyPermissions WHERE PolicyID = @PolicyID

	DELETE FROM	ckbx_AccessControlEntries WHERE	EntryID = @EntryID

	DELETE FROM	ckbx_AccessControlEntry WHERE EntryID = @EntryID

	DELETE FROM	ckbx_Policy WHERE PolicyID = @PolicyID






GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ACL_DeletePolicy]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE  PROCEDURE [dbo].[ckbx_sp_ACL_DeletePolicy]
(
	@PolicyID int
)
AS
	DELETE ckbx_PolicyPermissions where PolicyID = @PolicyID
	
	DELETE ckbx_Policy WHERE PolicyID = @PolicyID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ACL_DeleteUserEntries]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[ckbx_sp_ACL_DeleteUserEntries]
(
      @UniqueIdentifier nvarchar(611)
)
AS
      IF NOT(@UniqueIdentifier IS NULL)
        BEGIN
		    DECLARE @AclID int
	        DECLARE @MyCursor CURSOR
			
			SET @MyCursor = CURSOR FAST_FORWARD 
            FOR 
	            SELECT AclID
	            FROM ckbx_AccessControlEntries, ckbx_AccessControlEntry
	            WHERE EntryType = 'Prezza.Framework.Security.ExtendedPrincipal' AND EntryIdentifier = @UniqueIdentifier
	            AND ckbx_AccessControlEntry.EntryID = ckbx_AccessControlEntries.EntryID
	            GROUP BY AclID

           OPEN @MyCursor 

           FETCH NEXT FROM @MyCursor INTO @AclID

           WHILE @@FETCH_STATUS = 0
	           BEGIN 
			       EXEC ckbx_sp_ACL_DeleteEntry @AclID, 'Prezza.Framework.Security.ExtendedPrincipal', @UniqueIdentifier
		           FETCH NEXT FROM @MyCursor INTO @AclID
	           END

           CLOSE @MyCursor 
           DEALLOCATE @MyCursor 
        END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ACL_DelPolicyPermissions]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[ckbx_sp_ACL_DelPolicyPermissions]
(
	@policyID int
)
AS
	DELETE FROM ckbx_PolicyPermissions WHERE PolicyID = @policyID




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ACL_GetAcl]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_ACL_GetAcl]
(
	@AclID int
)
AS
	SELECT * FROM ckbx_AccessControlList WHERE AclID = @AclID
	



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ACL_GetEntries]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_ACL_GetEntries]
(
	@AclID int
)
AS
	SELECT * FROM ckbx_AccessControlEntry WHERE EntryID IN (SELECT EntryID FROM ckbx_AccessControlEntries WHERE AclID = @AclID)



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ACL_GetPolicy]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_ACL_GetPolicy]
(
	@PolicyID int
)
AS
	/* SET NOCOUNT ON */
	SELECT * FROM ckbx_Policy WHERE PolicyID = @PolicyID
	SELECT pp.PermissionID, p.PermissionName FROM ckbx_PolicyPermissions pp 
	LEFT JOIN ckbx_Permission p ON pp.PermissionID = p.PermissionID 
	WHERE PolicyID = @PolicyID
	RETURN 




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_CountForRT]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_CountForRT]
	@ResponseTemplateId int,
	@TotalCount int output
AS
	SET NOCOUNT ON;

    SELECT @TotalCount = COUNT(at.AnalysisTemplateId)
    FROM 
		ckbx_AnalysisTemplate at
		INNER JOIN ckbx_Template t ON t.TemplateId = at.AnalysisTemplateId
	WHERE 
		(t.Deleted is NULL OR t.Deleted = 0)
		AND (at.ResponseTemplateID = @ResponseTemplateId)			

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_CrossItemParser]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_CrossItemParser]
(
    @Separator VARCHAR(1),
    @Source VARCHAR(MAX)
)
AS
    BEGIN
        CREATE TABLE #List ( item int)

	    DECLARE @sItem VARCHAR(128)
	    WHILE CHARINDEX(@Separator,@Source,0) <> 0
		    BEGIN
		    SELECT
		    @sItem=RTRIM(LTRIM(SUBSTRING(@Source,1,CHARINDEX(@Separator,@Source,0)-1))),
		    @Source=RTRIM(LTRIM(SUBSTRING(@Source,CHARINDEX(@Separator,@Source,0)+LEN(@Separator),LEN(@Source))))
		 
		    IF LEN(@sItem) > 0
		    INSERT INTO #List SELECT CAST(@sItem AS INT)
		    END

	    IF LEN(@Source) > 0
		    INSERT INTO #List SELECT @Source -- Put the last item in
		 
		    SELECT * FROM #List

            DROP TABLE #List
    END



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE    PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_Delete]
(
  @AnalysisTemplateID int,
  @ModifiedDate DATETIME
)
AS
  UPDATE ckbx_Template SET Deleted = 1, ModifiedDate = @ModifiedDate WHERE TemplateID = @AnalysisTemplateID
  UPDATE ckbx_AnalysisTemplate SET StyleTemplateID = NULL WHERE AnalysisTemplateID = @AnalysisTemplateID
  RETURN







GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_Get]
(
  @AnalysisTemplateID int
)
AS
--Analysis Data
SELECT
  template.*,
  AnalysisTemplateID,
  StyleTemplateID,
  ResponseTemplateID,
  AnalysisName,
  ModifiedDate,
  DefaultPolicy,
  AclID,
  GUID,
  DateFilterStart,
  DateFilterEnd,
  ChartStyleID,
  DisplaySurveyTitle,
  DisplayPdfExportButton,
  IncludeIncompleteResponses,
  IncludeTestResponses,
  CreatedDate
FROM
  ckbx_AnalysisTemplate atemp
  INNER JOIN ckbx_Template template ON template.TemplateID = atemp.AnalysisTemplateID
WHERE
  atemp.AnalysisTemplateID = @AnalysisTemplateID


--Items Data
SELECT 
  TemplateID, ti.ItemID, i.ModifiedDate, i.ItemTypeID, it.ItemName, i.CreatedDate, i.Alias, ItemDataClassName, ItemDataAssemblyName 
FROM 
  ckbx_Template_Items ti
  INNER JOIN ckbx_Item i ON i.ItemID = ti.ItemID
  INNER JOIN ckbx_ItemType it ON it.ItemTypeID = i.ItemTypeID
WHERE 
  TemplateID = @AnalysisTemplateID

--Pages
SELECT TemplateID, PageID, PagePosition, RandomizeItems, LayoutTemplateID FROM ckbx_Template_Pages WHERE TemplateID = @AnalysisTemplateID ORDER BY PagePosition ASC

--PageItems
SELECT PageID, ItemID, Position FROM ckbx_TemplatePage_Items WHERE PageID IN (Select PageID FROM ckbx_Template_Pages WHERE TemplateID = @AnalysisTemplateID) ORDER By PageID, Position

--Item Appearance Data
  SELECT 
    ia.ItemID, ia.AppearanceID 
  FROM 
    ckbx_ItemAppearances ia
    INNER JOIN ckbx_Template_Items ti ON ti.ItemID = ia.ItemID
    INNER JOIN ckbx_Item i ON i.ItemID = ti.ItemID
	INNER JOIN ckbx_ItemType it ON it.ItemTypeID = i.ItemTypeID
  WHERE
    ti.TemplateID = @AnalysisTemplateID
    AND (i.Deleted IS NULL OR i.Deleted = 0)

  --Item Appearance
  SELECT 
    a.*
  FROM 
    ckbx_ItemAppearance a
    INNER JOIN ckbx_ItemAppearances ia ON ia.AppearanceID = a.AppearanceID
    INNER JOIN ckbx_Template_Items ti ON ti.ItemID = ia.ItemID
    INNER JOIN ckbx_Item i ON i.ItemID = ti.ItemID
	INNER JOIN ckbx_ItemType it ON it.ItemTypeID = i.ItemTypeID
  WHERE
    ti.TemplateID = @AnalysisTemplateID
    AND (i.Deleted IS NULL OR i.Deleted = 0)


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_GetAccessControllableResource]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_GetAccessControllableResource]
(
	@TemplateID int
)
AS
	SELECT
		t.AclID,
		t.DefaultPolicy,
		t.CreatedDate as DateCreated,
		t.ModifiedDate as DateModified,
		t.CreatedBy as CreatedBy,
		at.GUID,
		at.AnalysisName as [Name],
		at.NameTextID,
		at.StyleTemplateId,
		at.ResponseTemplateId,
		at.ChartStyleId,
		at.DateFilterStart,
		at.DateFilterEnd
	FROM
		ckbx_AnalysisTemplate as at
		INNER JOIN ckbx_Template as t
		ON at.AnalysisTemplateID = t.TemplateID
	WHERE
		TemplateID = @TemplateID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_GetID]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_GetID]
(
  @Guid uniqueidentifier
)
AS
  SELECT AnalysisTemplateID FROM ckbx_AnalysisTemplate WHERE GUID = @Guid


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_GetIDFromName]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_GetIDFromName]
(
  @AnalysisName nvarchar(255),
  @ResponseTemplateID int,
  @AnalysisID int out
)
AS
  SELECT 
    @AnalysisID = ant.AnalysisTemplateID 
  FROM 
    ckbx_AnalysisTemplate ant
    INNER JOIN ckbx_Template t ON t.TemplateID = ant.AnalysisTemplateID
  WHERE 
    ant.AnalysisName = @AnalysisName 
    AND ant.ResponseTemplateID = @ResponseTemplateID
    AND (t.Deleted IS NULL OR t.Deleted = 0)



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_GetItemAnswerData]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_GetItemAnswerData]
(
  @ResponseTemplateID as int,
  @ItemIDString as VARCHAR(MAX),
  @IncludeIncompleteResponses as bit,
  @FilterString as VARCHAR(MAX) = null,
  @UserPropertiesFilterString as VARCHAR(MAX) = null,
  @StartDate as datetime,
  @EndDate as datetime,
  @IncludeOptionsWithoutAnswers as bit = 1,
  @IncludeTestResponses as bit = 0  
)
AS
    
declare @statement NVARCHAR(MAX)
set @statement = ''

if @UserPropertiesFilterString is not null
begin
	set @statement = N'      
		IF OBJECT_ID(''tempdb..#filteredUsers'') IS NOT NULL
		BEGIN
		   DROP TABLE #filteredUsers 
		END

		CREATE TABLE #filteredUsers 
		(
			uid NVARCHAR(255)
		)
		
		INSERT INTO #filteredUsers
 		select distinct [UniqueIdentifier] from ckbx_CustomUserFieldMap fm
		inner join ckbx_CustomUserField f on fm.CustomUserFieldID = f.CustomUserFieldID
		where 1 = 1 	
			' + @UserPropertiesFilterString
		
end

Declare @ItemId VARCHAR(MAX)
If (CHARINDEX(',', @ItemIDString)=0) 
begin
	Set @ItemId = @ItemIDString
	SET @statement = @statement + N'
			Declare @ResultValue nvarchar(100)
			Set @ResultValue = (Select ValueType from  ckbx_item		        
			LEFT OUTER JOIN  ckbx_ItemData_MatrixItems   
			ON ckbx_ItemData_MatrixItems.ItemID = ckbx_item.itemid
			LEFT OUTER JOIN  ckbx_ItemData_MatrixColumns   
			ON ckbx_ItemData_MatrixItems.MatrixID = ckbx_ItemData_MatrixColumns.MatrixID
			LEFT OUTER JOIN  ckbx_ItemData_Slider s  
			ON s.ItemID = ckbx_ItemData_MatrixColumns.ColumnPrototypeID 
			where ckbx_ItemData_MatrixItems.ItemID='+@ItemId+' 
			 and ckbx_ItemData_MatrixItems.[Column] = ckbx_ItemData_MatrixColumns.[Column]) 
	 '			
	end	
else
begin
	SET @statement = @statement + N'
			Declare @ResultValue nvarchar(100)'	
end	

SET @statement = @statement + N'      
	IF OBJECT_ID(''tempdb..#ExistingAnswers'') IS NOT NULL
    BEGIN
       DROP TABLE #ExistingAnswers 
    END

	CREATE TABLE #ExistingAnswers 
	(
		alias NVARCHAR(255),			
		isother BIT ,		
		points DECIMAL(18,4),		
		TextID NVARCHAR (255),		
		answerid BIGINT,		
		itemid INT NOT NULL,		
		optionid INT,		
		responseid BIGINT
	)
	IF OBJECT_ID(''tempdb..#ExistingOptions'') IS NOT NULL
    BEGIN
       DROP TABLE #ExistingOptions 
    END    	
	CREATE TABLE #ExistingOptions
	(
		optionid INT
	)	

	INSERT INTO #ExistingAnswers
	SELECT 
        ckbx_itemoptions.alias,			
        ckbx_itemoptions.isother,		
        points = case ValueType 
			when ''NumberRange'' then convert(decimal, cast (ckbx_responseanswers.answertext as varchar(100)))
			else coalesce(ckbx_responseanswers.points, ckbx_itemoptions.points, case @ResultValue when ''NumberRange'' then  
				case isnumeric(cast (ckbx_responseanswers.answertext as varchar(100))) when ''1'' then
				convert(decimal, cast (ckbx_responseanswers.answertext as varchar(100))) end else cast(null as decimal) end
			)
		end,		
        ckbx_itemoptions.TextID,		
        ckbx_responseanswers.answerid,		
        ckbx_responseanswers.itemid,		
        ckbx_responseanswers.optionid,		
        ckbx_response.responseid
    FROM ckbx_response'
    
    if @UserPropertiesFilterString is not null
	begin    
		SET @statement = @statement + N'
        INNER JOIN #filteredUsers u
        ON ckbx_response.[uniqueidentifier] = u.uid collate SQL_Latin1_General_CP1_CI_AS
		      '
	end
	
    SET @statement = @statement + '
        LEFT OUTER JOIN ckbx_responseanswers
        ON ckbx_responseanswers.responseid = ckbx_response.responseid
        LEFT OUTER JOIN ckbx_item
        ON ckbx_item.itemid = ckbx_responseanswers.itemid
        LEFT OUTER JOIN ckbx_itemoptions
        ON ckbx_itemoptions.optionid = ckbx_responseanswers.optionid
        LEFT OUTER JOIN ckbx_ItemData_Slider
        ON ckbx_ItemData_Slider.itemid = ckbx_item.itemid    
	
    WHERE (ckbx_ResponseAnswers.Deleted IS NULL OR ckbx_ResponseAnswers.Deleted = 0)
		AND (ckbx_ResponseAnswers.OptionID IS NOT NULL OR ckbx_ResponseAnswers.AnswerText IS NOT NULL)
        AND (ckbx_Response.Deleted IS NULL OR ckbx_Response.Deleted = 0)
        AND (ckbx_Item.Deleted IS NULL OR ckbx_Item.Deleted = 0)
        AND (ckbx_ResponseAnswers.OptionID IS NULL OR (ckbx_ItemOptions.Deleted IS NULL OR ckbx_ItemOptions.Deleted = 0)) 
        AND ckbx_Item.itemid is not null
	 '
	if  @FilterString is not null
		set @statement = @statement + @FilterString;

	IF (@ItemIDString IS NOT NULL)
	BEGIN
        SET @statement = @statement + N' AND ckbx_responseanswers.itemid IN ('+@ItemIDString+N') '
	END

    IF (@IncludeIncompleteResponses <> 1)
    BEGIN
        SET @statement = @statement + N' AND (ckbx_Response.IsComplete = 1) '
    END

    IF (@IncludeTestResponses = 0)
    BEGIN
        SET @statement = @statement + N' AND (ckbx_Response.IsTest = 0) '
    END

    IF (@StartDate IS NOT NULL AND @EndDate IS NOT NULL)
    BEGIN
        SET @statement = @statement + N' AND (ckbx_Response.Ended IS NULL OR ckbx_Response.Ended BETWEEN ''' + CAST(@StartDate as VARCHAR) + ''' AND ''' + CAST(@EndDate as VARCHAR) + ''')'
    END
    ELSE IF (@StartDate IS NOT NULL)
    BEGIN
        SET @statement = @statement + N' AND (ckbx_Response.Ended IS NULL OR ckbx_Response.Ended >= ''' + CAST(@StartDate as VARCHAR) + ''')'
    END
    ELSE IF (@EndDate IS NOT NULL)
    BEGIN
        SET @statement = @statement + N' AND (ckbx_Response.Ended IS NULL OR ckbx_Response.Ended <= ''' + CAST(@EndDate as VARCHAR) + ''')'
    END

    IF (@ResponseTemplateID > 0)
    BEGIN
        SET @statement = @statement + N' AND ckbx_Response.ResponseTemplateID = ' + CAST(@ResponseTemplateID as VARCHAR)
    END
        
    if @IncludeOptionsWithoutAnswers = 1 
    begin
		SET @statement = @statement + N'

		INSERT INTO #ExistingOptions
		select distinct optionid from #ExistingAnswers where optionid is not null

		INSERT INTO #ExistingAnswers
		SELECT 
			ckbx_itemoptions.alias,			
			ckbx_itemoptions.isother,		
			ckbx_itemoptions.points,
			ckbx_itemoptions.TextID,		
			NULL as answerid,		
			ckbx_item.itemid as itemid,		
			ckbx_itemoptions.optionid,		
			NULL as responseid
		FROM ckbx_item
			INNER JOIN ckbx_Template_Items on ckbx_item.ItemId = ckbx_Template_Items.ItemId
			INNER JOIN ckbx_itemlists on ckbx_item.itemid = ckbx_itemlists.itemid
			INNER JOIN ckbx_ItemOptions on ckbx_itemlists.listid = ckbx_ItemOptions.listid
		WHERE (ckbx_Item.Deleted IS NULL OR ckbx_Item.Deleted = 0)
			AND (ckbx_ItemOptions.Deleted IS NULL OR ckbx_ItemOptions.Deleted = 0)
			AND ckbx_itemoptions.optionid NOT IN (select OptionId from #ExistingOptions) '
	    
		IF (@ItemIDString IS NOT NULL)
		BEGIN
			SET @statement = @statement + N' AND ckbx_item.itemid IN ('+@ItemIDString+N') '
		END
	        
		IF (@ResponseTemplateID > 0)
		BEGIN
			SET @statement = @statement + N' AND ckbx_Template_Items.TemplateID = ' + CAST(@ResponseTemplateID as VARCHAR)
		END    
    end    
	SET @statement = @statement +
	N'
	select 
		#ExistingAnswers.alias,			
		#ExistingAnswers.isother,		
		#ExistingAnswers.points,		
		#ExistingAnswers.TextID,		
		#ExistingAnswers.answerid,		
		#ExistingAnswers.itemid,		
		ckbx_responseanswers.answertext,    
		#ExistingAnswers.optionid,		
        ckbx_response.[guid],		
		#ExistingAnswers.responseid,
		ckbx_response.[uniqueidentifier],			
        ckbx_response.[started],
        ckbx_response.ended,
        ckbx_response.lastedit,
        ckbx_response.ip,
        ckbx_response.[language],
        ckbx_response.invitee       	
	from #ExistingAnswers	
		LEFT OUTER JOIN ckbx_response ON #ExistingAnswers.responseid = ckbx_response.responseid
        LEFT OUTER JOIN ckbx_responseanswers ON #ExistingAnswers.answerid = ckbx_responseanswers.answerid
        	
	drop table #ExistingAnswers 
	
	IF OBJECT_ID(''tempdb..#filteredUsers'') IS NOT NULL
	BEGIN
	   DROP TABLE #filteredUsers 
	END	   
    '            
        
	print @statement
	execute (@statement)  


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_GetItemAnswerData_AverageScore]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*ckbx_sp_AnalysisTemplate_GetItemAnswerData_AverageScore*/
CREATE PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_GetItemAnswerData_AverageScore]
(
  @ResponseTemplateID as int,
  @ItemIDString as VARCHAR(MAX),
  @IncludeIncompleteResponses as bit,
  @IncludeTestResponses as bit,
  @FilterString as VARCHAR(MAX) = null,
  @UserPropertiesFilterString as VARCHAR(MAX) = null,
  @StartDate as datetime,
  @EndDate as datetime
)
AS
	CREATE TABLE #Answers 
	(
		alias NVARCHAR(255),			
		isother BIT NULL,		
		points DECIMAL(18,4) NULL,		
		TextID NVARCHAR (255),		
		answerid BIGINT NULL,		
		itemid INT NOT NULL,		
		answertext NTEXT,    
		optionid INT NULL,		
        [guid] UNIQUEIDENTIFIER NULL,		
		responseid INT NULL,
		[uniqueidentifier] NVARCHAR(255) NULL,			
        [started] datetime NULL,
        ended datetime NULL,
        lastedit datetime NULL,
        ip NVARCHAR (50) NULL,
        [language] NVARCHAR (8) NULL,
        invitee NVARCHAR (1020) NULL
	)

	INSERT INTO #Answers exec ckbx_sp_AnalysisTemplate_GetItemAnswerData @ResponseTemplateID, @ItemIDString,
		@IncludeIncompleteResponses, @FilterString, @UserPropertiesFilterString, @StartDate, @EndDate, 0, @IncludeTestResponses
	
	--select responses
    SELECT COUNT(DISTINCT responseid) as responsecount FROM #Answers 	    
    --select answers
    SELECT itemid, SUM(points) as points FROM #Answers WHERE isother <> 1 or isother is NULL  GROUP BY itemid

  	DROP TABLE #Answers

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_GetItemAnswerData_CrossTabItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*ckbx_sp_AnalysisTemplate_GetItemAnswerData_CrossTabItem*/
CREATE PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_GetItemAnswerData_CrossTabItem]
(
  @ResponseTemplateID as int,
  @HorizontalItemID as VARCHAR(MAX),
  @VerticalItemID as VARCHAR(MAX),
  @IncludeIncompleteResponses as bit,
  @IncludeTestResponses as bit,
  @FilterString as VARCHAR(MAX) = null,
  @UserPropertiesFilterString as VARCHAR(MAX) = null,
  @StartDate as datetime,
  @EndDate as datetime
)
AS
	DECLARE @allItems VARCHAR(MAX)
 	SET @allItems = @HorizontalItemID + N', ' + @VerticalItemID

	CREATE TABLE #Answers 
	(
		alias NVARCHAR(255),			
		isother BIT NULL,		
		points DECIMAL(18,4) NULL,		
		TextID NVARCHAR (255),		
		answerid BIGINT NULL,		
		itemid INT NOT NULL,		
		answertext NTEXT,    
		optionid INT NULL,		
        [guid] UNIQUEIDENTIFIER NULL,		
		responseid INT NULL,
		[uniqueidentifier] NVARCHAR(255) NULL,			
        [started] datetime NULL,
        ended datetime NULL,
        lastedit datetime NULL,
        ip NVARCHAR (50) NULL,
        [language] NVARCHAR (8) NULL,
        invitee NVARCHAR (1020) NULL
	)

	INSERT INTO #Answers exec ckbx_sp_AnalysisTemplate_GetItemAnswerData @ResponseTemplateID, @allItems,
		@IncludeIncompleteResponses, @FilterString, @UserPropertiesFilterString, @StartDate, @EndDate, 1, @IncludeTestResponses
	 
    CREATE TABLE #tempHorizontal (item int)
	CREATE TABLE #tempVertical (item int)    
	
    INSERT INTO #tempHorizontal exec ckbx_sp_AnalysisTemplate_CrossItemParser ',', @HorizontalItemID 
    INSERT INTO #tempVertical exec ckbx_sp_AnalysisTemplate_CrossItemParser ',', @VerticalItemID 

	CREATE TABLE #horizontal (id int IDENTITY(1,1), optionid int, itemid int)
	CREATE TABLE #vertical (id int IDENTITY(1,1), optionid int, itemid int)
        
    --horizontal options ids
    INSERT INTO #horizontal
    SELECT optionid, ckbx_ItemLists.itemid 
		FROM ckbx_ItemOptions
        LEFT OUTER JOIN ckbx_ItemLists
        ON ckbx_ItemLists.listid = ckbx_ItemOptions.listid
        WHERE ckbx_ItemLists.itemid IN (SELECT * from #tempHorizontal)
        
	--matrix items case
    INSERT INTO #horizontal
	select iop.optionid, ColumnPrototypeID as itemid from ckbx_ItemData_MatrixItems mi
		inner join ckbx_ItemData_MatrixColumns mc on mi.MatrixID = mc.MatrixID and mi.[Column] = mc.[Column]
		inner join ckbx_ItemLists il on il.ItemId = ColumnPrototypeID
		inner join ckbx_ItemOptions iop on iop.ListId = il.ListId        
        WHERE mi.itemid IN (SELECT * from #tempHorizontal)
               
    --vertical options ids
    INSERT INTO #vertical
    SELECT optionid, ckbx_ItemLists.itemid 
		FROM ckbx_ItemOptions
        LEFT OUTER JOIN ckbx_ItemLists
        ON ckbx_ItemLists.listid = ckbx_ItemOptions.listid
        WHERE ckbx_ItemLists.itemid IN (SELECT * from #tempVertical)

	--matrix items case
    INSERT INTO #vertical
	select iop.optionid, ColumnPrototypeID as itemid from ckbx_ItemData_MatrixItems mi
		inner join ckbx_ItemData_MatrixColumns mc on mi.MatrixID = mc.MatrixID and mi.[Column] = mc.[Column]
		inner join ckbx_ItemLists il on il.ItemId = ColumnPrototypeID
		inner join ckbx_ItemOptions iop on iop.ListId = il.ListId        
        WHERE mi.itemid IN (SELECT * from #tempVertical)

    DROP TABLE #tempHorizontal
    DROP TABLE #tempVertical

	DECLARE @MaxHor int
	DECLARE @MaxVer int

	SET @MaxHor = (SELECT MAX(id) FROM #horizontal)
	SET @MaxVer = (SELECT MAX(id) FROM #vertical)
	
	DECLARE @IteratorX int 
	DECLARE @IteratorY int 
	SET @IteratorX = 1
	SET @IteratorY = 1

    --result table
	CREATE TABLE #result (optionid int)
	WHILE @IteratorX <= @MaxHor
		BEGIN
			declare @sql nvarchar(100)
			set @sql = 'ALTER TABLE #result ADD col_'+ CAST((SELECT optionid FROM  #horizontal WHERE id = @IteratorX) as VARCHAR) +' int NULL'
			exec sp_executesql @sql			
			SET @IteratorX = @IteratorX + 1
		END
	
    --insert total response data
    SET @IteratorX = 1
	INSERT INTO #result  (optionid) VALUES (NULL)
	WHILE @IteratorX <= @MaxHor
		BEGIN				
			DECLARE @Count int
			DECLARE @optionX int
			SET @optionX = (SELECT optionid FROM #horizontal WHERE #horizontal.id = @IteratorX)
			
			SET @Count = ( SELECT COUNT(DISTINCT(responseid)) FROM #Answers 
			WHERE #Answers.optionid = @optionX )
							
			set @sql = 'UPDATE #result SET col_'+ CAST((SELECT optionid FROM  #horizontal WHERE id = @IteratorX) as VARCHAR) +' = ' + CAST(@Count AS VARCHAR)
			exec sp_executesql @sql			
			
			SET @IteratorX = @IteratorX + 1
		END

    --walking through the result table and insert data
	WHILE @IteratorY <= @MaxVer
		BEGIN
			SET @IteratorX = 1
			
			DECLARE @optionY int
			SET @optionY = (SELECT optionid FROM #vertical WHERE #vertical.id = @IteratorY)
			INSERT INTO #result (optionid) values (@optionY)
					
			WHILE @IteratorX <= @MaxHor
				BEGIN				
					SET @optionX = (SELECT optionid FROM #horizontal WHERE #horizontal.id = @IteratorX)
					
                --calculate crossing data
					SET @Count = ( SELECT COUNT(DISTINCT(responseid)) FROM #Answers 
					WHERE #Answers.optionid = @optionX AND responseid IN 
					(SELECT DISTINCT (responseid)  FROM #Answers WHERE #Answers.optionid = @optionY) )
									
					set @sql = 'UPDATE #result SET col_'+ CAST((SELECT optionid FROM  #horizontal WHERE id = @IteratorX) as VARCHAR) +' = ' + CAST(@Count AS VARCHAR) + ' WHERE optionid = ' + CAST(@optionY AS VARCHAR)
					exec sp_executesql @sql			
				
					SET @IteratorX = @IteratorX + 1
				END
						
			SET @IteratorY = @IteratorY + 1
		END

    --return result data
	SELECT * FROM #result

	DROP TABLE #horizontal
	DROP TABLE #vertical
	DROP TABLE #result
	DROP TABLE #Answers

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_GetItemAnswerData_Details]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*ckbx_sp_AnalysisTemplate_GetItemAnswerData_Details*/
CREATE PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_GetItemAnswerData_Details]
(
  @ResponseTemplateID as int,
  @ItemIDString as VARCHAR(MAX),
  @IncludeIncompleteResponses as bit,
  @IncludeTestResponses as bit,
  @FilterString as VARCHAR(MAX) = null,
  @UserPropertiesFilterString as VARCHAR(MAX) = null,
  @StartDate as datetime,
  @EndDate as datetime,
  @Separator as VARCHAR(8),
  @LanguageCode as VARCHAR(5),
  @UseAliases as bit
)
AS
	CREATE TABLE #Answers 
	(
		alias NVARCHAR(255),			
		isother BIT NULL,		
		points DECIMAL(18,4) NULL,		
		TextID NVARCHAR (255),		
		answerid BIGINT NULL,		
		itemid INT NOT NULL,		
		answertext NTEXT,    
		optionid INT NULL,		
        [guid] UNIQUEIDENTIFIER NULL,		
		responseid INT NULL,
		[uniqueidentifier] NVARCHAR(255) NULL,			
        [started] datetime NULL,
        ended datetime NULL,
        lastedit datetime NULL,
        ip NVARCHAR (50) NULL,
        [language] NVARCHAR (8) NULL,
        invitee NVARCHAR (1020) NULL
	)

	INSERT INTO #Answers exec ckbx_sp_AnalysisTemplate_GetItemAnswerData @ResponseTemplateID, @ItemIDString,
		@IncludeIncompleteResponses, @FilterString, @UserPropertiesFilterString, @StartDate, @EndDate, 1, @IncludeTestResponses
	
	--select responses
    SELECT COUNT(DISTINCT responseid) as responsecount FROM #Answers 	    
    --select answers
    SELECT responseid, answertext, alias, ckbx_Text.textvalue
	INTO #tempData
    FROM #Answers answers
    LEFT OUTER JOIN ckbx_Text 
    ON answers.TextID = ckbx_Text.TextID AND @LanguageCode = ckbx_Text.LanguageCode
    
    UPDATE #tempData
    SET answertext = ''
    WHERE answertext IS NULL
   
    UPDATE #tempData
    SET textvalue = ''
    WHERE textvalue IS NULL
    
    UPDATE #tempData
    SET alias = textvalue
    WHERE alias IS NULL OR alias = ''
 	
	ALTER TABLE #tempData ALTER COLUMN answertext nvarchar (max)
	ALTER TABLE #tempData ALTER COLUMN textvalue nvarchar (max)

	IF(@UseAliases = 1)
		BEGIN 
			SELECT 
			responseid,
			  STUFF((
			  SELECT @Separator +
						alias +
						answertext + @Separator
			  FROM #tempData
			  WHERE (responseid = t.responseid)
			  FOR XML PATH('')),1,2,'') AS details
			
			FROM #tempData t
			GROUP BY responseid
		END
	ELSE
		BEGIN
			SELECT 
			responseid,
			  STUFF((
			  SELECT @Separator +
						textvalue + @Separator + 
						answertext
			  FROM #tempData
			  WHERE (responseid = t.responseid)
			  FOR XML PATH('')),1,2,'') AS details
			
			FROM #tempData t
			GROUP BY responseid
		END
		
	DROP TABLE #tempData
	DROP TABLE #Answers

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_GetItemAnswerData_Frequency]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*ckbx_sp_AnalysisTemplate_GetItemAnswerData_Frequency*/
CREATE PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_GetItemAnswerData_Frequency]
(
  @ResponseTemplateID as int,
  @ItemIDString as VARCHAR(MAX),
  @IncludeIncompleteResponses as bit,
  @IncludeTestResponses as bit,
  @FilterString as VARCHAR(MAX) = null,
  @UserPropertiesFilterString as VARCHAR(MAX) = null,
  @StartDate as datetime,
  @EndDate as datetime
)
AS
	create TABLE #Answers 
	(
		alias NVARCHAR(255),			
		isother BIT NULL,		
		points DECIMAL(18,4) NULL,		
		TextID NVARCHAR (255),		
		answerid BIGINT NULL,		
		itemid INT NOT NULL,		
		answertext NTEXT,    
		optionid INT NULL,
        [guid] UNIQUEIDENTIFIER NULL,		
		responseid INT NULL,
		[uniqueidentifier] NVARCHAR(255) NULL,			
        [started] datetime NULL,
        ended datetime NULL,
        lastedit datetime NULL,
        ip NVARCHAR (50) NULL,
        [language] NVARCHAR (8) NULL,
        invitee NVARCHAR (1020) NULL
	)

	INSERT INTO #Answers exec ckbx_sp_AnalysisTemplate_GetItemAnswerData @ResponseTemplateID, @ItemIDString,
		@IncludeIncompleteResponses, @FilterString, @UserPropertiesFilterString, @StartDate, @EndDate, 1, @IncludeTestResponses
	
	--select responses
    SELECT COUNT(DISTINCT responseid) as responsecount FROM #Answers 
		where (optionid is not null) or (answertext is not null)	    
    --select answers
    SELECT itemid, COUNT(answerid) as answercount,optionid,isother FROM #Answers GROUP BY itemid, optionid, isother
	--select other options
	SELECT itemid, optionid, answertext FROM #Answers WHERE isother = 1
	--select non-option answers
	SELECT itemid, answertext FROM #Answers where  answertext not like '' and answertext is not null
	
	DROP TABLE #Answers

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_GetItemAnswerData_MatrixSummary]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*ckbx_sp_AnalysisTemplate_GetItemAnswerData_MatrixSummary*/
CREATE PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_GetItemAnswerData_MatrixSummary]
(
  @ResponseTemplateID as int,
  @ItemIDString as VARCHAR(MAX),
  @IncludeIncompleteResponses as bit,
  @IncludeTestResponses as bit,
  @FilterString as VARCHAR(MAX) = null,
  @UserPropertiesFilterString as VARCHAR(MAX) = null,
  @StartDate as datetime,
  @EndDate as datetime
)
AS
	CREATE TABLE #Answers 
	(
		alias NVARCHAR(255),			
		isother BIT NULL,		
		points DECIMAL(18,4) NULL,		
		TextID NVARCHAR (255),		
		answerid BIGINT NULL,		
		itemid INT NOT NULL,		
		answertext NTEXT,    
		optionid INT NULL,		
        [guid] UNIQUEIDENTIFIER NULL,		
		responseid INT NULL,
		[uniqueidentifier] NVARCHAR(255) NULL,			
        [started] datetime NULL,
        ended datetime NULL,
        lastedit datetime NULL,
        ip NVARCHAR (50) NULL,
        [language] NVARCHAR (8) NULL,
        invitee NVARCHAR (1020) NULL
	)

    CREATE TABLE #temp (id int IDENTITY(1,1), item int)

	INSERT INTO #Answers exec ckbx_sp_AnalysisTemplate_GetItemAnswerData @ResponseTemplateID, @ItemIDString,
		@IncludeIncompleteResponses, @FilterString, @UserPropertiesFilterString, @StartDate, @EndDate, 1, @IncludeTestResponses
	
	--select responses
    SELECT COUNT(DISTINCT responseid) as responsecount FROM #Answers 	    
	
	INSERT INTO #temp exec ckbx_sp_AnalysisTemplate_CrossItemParser ',', @ItemIDString
	
	DECLARE @iterator int
	DECLARE @itemCount int
	SET @iterator = 1
	SET @itemCount = (SELECT COUNT(*) FROM #temp)
	
	CREATE TABLE #result (itemid int, optionid int, answercount int, answersum int)
	
	WHILE @iterator <= @itemCount
		BEGIN
			DECLARE @itemId int
			SET @itemId = (SELECT item FROM #temp WHERE #temp.id = @iterator)
			
			IF OBJECT_ID('tempdb..#itemOptions') IS NOT NULL 
			BEGIN
				DROP TABLE #itemOptions
			END
			CREATE TABLE #itemOptions(id int IDENTITY (1,1), optionid int , answercount int)
			
			INSERT INTO #itemOptions SELECT optionid, COUNT(answerid) as answercount  FROM #Answers WHERE itemid = @itemId AND optionid is not NULL GROUP BY optionid 
			
			DECLARE @optionIterator int
			DECLARE @optionCount int
			SET @optionIterator = 1
			SET @optionCount = (SELECT COUNT(*) FROM #itemOptions)

			WHILE @optionIterator <= @optionCount
				BEGIN
					DECLARE @optionId int
					SET @optionId = (SELECT optionid FROM #itemOptions WHERE #itemOptions.id = @optionIterator)
					
			        DECLARE @answerCount int
			        SET @answerCount = (SELECT COUNT(*) FROM #Answers WHERE #Answers.optionid = @optionId AND #Answers.itemid = @itemId)
					
                    INSERT INTO #result(itemid, optionid, answercount) VALUES 
					( 
						@itemId,
						@optionId,
                        @answerCount
					)
					
					SET @optionIterator = @optionIterator + 1
				END
			
			--matrix slider item
			IF @optionCount = 0 
				BEGIN
					DECLARE @itemType int
					SET @itemType = (SELECT ItemTypeID FROM ckbx_Item WHERE ItemID = @itemId)

					IF @itemType = 7
						BEGIN
							DECLARE @sliderAnswerCount int
							SET @sliderAnswerCount = (SELECT COUNT(*) FROM #Answers WHERE #Answers.itemid = @itemId)
					
							DECLARE @answersum int
							SET @answersum = (SELECT SUM(CAST(convert(nvarchar(8),answertext) AS INT)) FROM #Answers WHERE #Answers.itemid = @itemId)

							INSERT INTO #result(itemid, optionid, answercount, answersum) VALUES 
							( 
								@itemId,
								-1,
								@sliderAnswerCount,
								@answersum
							)
						END
				END

			SET @iterator = @iterator + 1
		END
	    
	SELECT *  FROM #result
	
	DROP TABLE #temp
	DROP TABLE #itemOptions
	DROP TABLE #result
	DROP TABLE #Answers

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_GetItemAnswerData_RankOrderSummary]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*ckbx_sp_AnalysisTemplate_GetItemAnswerData_RankOrderSummary*/
CREATE PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_GetItemAnswerData_RankOrderSummary]
(
  @ResponseTemplateID as int,
  @ItemIDString as VARCHAR(MAX),
  @IncludeIncompleteResponses as bit,
  @IncludeTestResponses as bit,
  @FilterString as VARCHAR(MAX) = null,
  @UserPropertiesFilterString as VARCHAR(MAX) = null,
  @StartDate as datetime,
  @EndDate as datetime
)
AS
	create TABLE #Answers 
	(
		alias NVARCHAR(255),			
		isother BIT NULL,		
		points DECIMAL(18,4) NULL,		
		TextID NVARCHAR (255),		
		answerid BIGINT NULL,		
		itemid INT NOT NULL,		
		answertext NTEXT,    
		optionid INT NULL,
        [guid] UNIQUEIDENTIFIER NULL,		
		responseid INT NULL,
		[uniqueidentifier] NVARCHAR(255) NULL,			
        [started] datetime NULL,
        ended datetime NULL,
        lastedit datetime NULL,
        ip NVARCHAR (50) NULL,
        [language] NVARCHAR (8) NULL,
        invitee NVARCHAR (1020) NULL
	)

	INSERT INTO #Answers exec ckbx_sp_AnalysisTemplate_GetItemAnswerData @ResponseTemplateID, @ItemIDString,
		@IncludeIncompleteResponses, @FilterString, @UserPropertiesFilterString, @StartDate, @EndDate, 1, @IncludeTestResponses
	
	--select responses
    SELECT COUNT(DISTINCT responseid) as responsecount FROM #Answers 
		where (optionid is not null) or (answertext is not null)	    
    --select answers
    SELECT itemid, COUNT(answerid) as answercount,optionid,sum(points) as points FROM #Answers GROUP BY itemid, optionid, isother order by 4 desc
	
	DROP TABLE #Answers

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_GetItemAnswerData_StatisticsItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*ckbx_sp_AnalysisTemplate_GetItemAnswerData_StatisticsItem*/
CREATE PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_GetItemAnswerData_StatisticsItem]
(
  @ResponseTemplateID as int,
  @ItemIDString as VARCHAR(MAX),
  @IncludeIncompleteResponses as bit,
  @IncludeTestResponses as bit,
  @FilterString as VARCHAR(MAX) = null,
  @UserPropertiesFilterString as VARCHAR(MAX) = null,
  @StartDate as datetime,
  @EndDate as datetime
)
AS
	CREATE TABLE #Answers 
	(
		alias NVARCHAR(255),			
		isother BIT NULL,		
		points DECIMAL(18,4) NULL,		
		TextID NVARCHAR (255),		
		answerid BIGINT NULL,		
		itemid INT NOT NULL,		
		answertext NTEXT,    
		optionid INT NULL,		
        [guid] UNIQUEIDENTIFIER NULL,		
		responseid INT NULL,
		[uniqueidentifier] NVARCHAR(255) NULL,			
        [started] datetime NULL,
        ended datetime NULL,
        lastedit datetime NULL,
        ip NVARCHAR (50) NULL,
        [language] NVARCHAR (8) NULL,
        invitee NVARCHAR (1020) NULL
	)

	INSERT INTO #Answers exec ckbx_sp_AnalysisTemplate_GetItemAnswerData @ResponseTemplateID, @ItemIDString,
		@IncludeIncompleteResponses, @FilterString, @UserPropertiesFilterString, @StartDate, @EndDate, 1, @IncludeTestResponses
	
	--select responses
    SELECT COUNT(DISTINCT responseid) as responsecount FROM #Answers 	    
    --select answers
	SELECT optionid, COUNT(answerid) as answercount, points, isother FROM #Answers GROUP BY optionid, points, isother
	--select non-option answers
	SELECT itemid, answertext FROM #Answers

	DROP TABLE #Answers

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_Insert]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_Insert]
(
  @AnalysisTemplateID int,
  @ResponseTemplateID int,
  @StyleTemplateID int,
  @AnalysisName nvarchar(255),
  @NameTextID nvarchar(255),
  @GUID uniqueidentifier,
  @DateFilterStart datetime,
  @DateFilterEnd datetime,
  @ChartStyleID int,
  @DisplaySurveyTitle bit,
  @DisplayPdfExportButton bit,
  @IncludeIncompleteResponses bit,
  @IncludeTestResponses bit
)
AS
IF NOT EXISTS(Select AnalysisTemplateID FROM ckbx_AnalysisTemplate WHERE AnalysisTemplateID = @AnalysisTemplateID)
    BEGIN
      INSERT INTO ckbx_AnalysisTemplate
        (AnalysisTemplateID, ResponseTemplateID, StyleTemplateID, AnalysisName, NameTextID, [GUID], DateFilterStart, DateFilterEnd, ChartStyleID, DisplaySurveyTitle, DisplayPdfExportButton, IncludeIncompleteResponses, IncludeTestResponses)
      VALUES
        (@AnalysisTemplateID, @ResponseTemplateID, @StyleTemplateID, @AnalysisName, @NameTextID, @GUID, @DateFilterStart, @DateFilterEnd, @ChartStyleID, @DisplaySurveyTitle, @DisplayPdfExportButton, @IncludeIncompleteResponses, @IncludeTestResponses)
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_List]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_List]
(
	@PageNumber int, 
	@ResultsPerPage int,
	@SortField varchar(64),
	@SortAscending bit,
	@FilterField varchar(64),
	@FilterValue nvarchar(255),
	@ResponseTemplateId int
)
AS
	DECLARE @OrderBy varchar(64)
	SET @OrderBy = ' ORDER BY [AnalysisName] ASC '

	IF (@SortField is NOT NULL AND len(@SortField) > 0)
		BEGIN			
			IF @SortAscending = 1
				BEGIN
					SET @OrderBy = ' ORDER BY ['+@SortField+'] ASC '
				END
			ELSE
				BEGIN
					SET @OrderBy = ' ORDER BY ['+@SortField+'] DESC '
				END
		END
	
  	--If not paging, simply return the results
	DECLARE @Query nvarchar(4000)
	DECLARE @FilterClause nvarchar(2000)
	DECLARE @QueryParams nvarchar(2000)

	--build filter clause	
	set @FilterClause = ''
	IF (len(@FilterValue) > 0)
	BEGIN
		IF (@FilterField is not null and len(@FilterField) > 0)
		BEGIN
			IF (@FilterField = 'AnalysisName')
				BEGIN
					SET @FilterClause = ' AND AnalysisName like ''%'' + @FilterValue + ''%'''
				END
						
			IF (@FilterField = 'CreatedBy')
				BEGIN
					SET @FilterClause = ' AND t.CreatedBy like ''%'' + @FilterValue + ''%'''
				END
		END
		ELSE
		BEGIN
			SET @FilterClause = ' AND ((t.CreatedBy like ''%'' + @FilterValue + ''%'')
				OR (AnalysisName like ''%'' + @FilterValue + ''%'')
				OR (t.ModifiedBy like ''%'' + @FilterValue + ''%'')
			)
			'			
		END
	END
	
	
	SET @QueryParams = '@ResponseTemplateId int, @FilterValue nvarchar(255)'
	
		IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT
					at.*,
					t.*
				FROM
					ckbx_AnalysisTemplate at
					INNER JOIN ckbx_Template t ON t.TemplateId = at.AnalysisTemplateId
				WHERE 
					(t.Deleted is NULL OR t.Deleted = 0) ' + @FilterClause
					
				IF (@ResponseTemplateId IS NOT NULL)
					BEGIN
						SET @Query = @Query + ' AND at.ResponseTemplateID = @ResponseTemplateId'
					END

				SET @Query = @Query + @OrderBy
			
			--Select results
			exec sp_executesql @Query, @QueryParams, @ResponseTemplateId = @ResponseTemplateId, @FilterValue = @FilterValue
			
			--Select count
			SET @Query = '
				SELECT 
					COUNT(AnalysisTemplateID)  AS TotalItemCount
				FROM
					ckbx_AnalysisTemplate at
					INNER JOIN ckbx_Template t ON t.TemplateId = at.AnalysisTemplateId
				WHERE 
					(t.Deleted is NULL OR t.Deleted = 0) ' + @FilterClause

				IF (@ResponseTemplateId IS NOT NULL)
					BEGIN
						SET @Query = @Query + ' AND at.ResponseTemplateID = @ResponseTemplateId '
					END							
					

			--Select Count
			exec sp_executesql @Query, @QueryParams, @ResponseTemplateId = @ResponseTemplateId, @FilterValue = @FilterValue
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			
			SELECT @Query = '
			
				IF object_id(''tempdb..#orderedResults'') IS NOT NULL
					BEGIN
						DROP TABLE #orderedResults
					END
				
				CREATE TABLE #orderedResults(AnalysisTemplateID int);
			
				INSERT INTO #orderedResults	
				SELECT
					at.AnalysisTemplateID
				FROM
					ckbx_AnalysisTemplate at
					INNER JOIN ckbx_Template t ON t.TemplateId = at.AnalysisTemplateId
				WHERE 
					(t.Deleted is NULL OR t.Deleted = 0) ' + @FilterClause

				IF (@ResponseTemplateId IS NOT NULL)
					BEGIN
						SET @Query = @Query + ' AND at.ResponseTemplateID = @ResponseTemplateId '
					END										
										
				SET @Query = @Query + @OrderBy + '; 

				--Select Rows
				SELECT * FROM 
				(
					SELECT at.*, t.*, ROW_NUMBER() OVER ('+ @OrderBy+') AS NUM
					FROM #orderedResults results 
					INNER JOIN ckbx_AnalysisTemplate at
						on results.AnalysisTemplateID = at.AnalysisTemplateID
					INNER JOIN ckbx_Template t
						on t.TemplateId = at.AnalysisTemplateID
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';
				
				--Select Count
				SELECT COUNT(*) AS TotalItemCount FROM #orderedResults'

			exec sp_executesql @Query, @QueryParams, @ResponseTemplateId = @ResponseTemplateId, @FilterValue = @FilterValue
		END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AnalysisTemplate_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE  PROCEDURE [dbo].[ckbx_sp_AnalysisTemplate_Update]
(
   @AnalysisTemplateID int,
   @ResponseTemplateID int,
   @StyleTemplateID int,
   @AnalysisName nvarchar(255),
   @NameTextID nvarchar(255),
   @DateFilterStart datetime,
   @DateFilterEnd datetime,
   @ChartStyleID int,
   @DisplaySurveyTitle bit,
   @DisplayPdfExportButton bit,
   @IncludeIncompleteResponses bit,
   @IncludeTestResponses bit
)
AS
UPDATE ckbx_AnalysisTemplate
  SET
    ResponseTemplateID = @ResponseTemplateID,
    StyleTemplateID = @StyleTemplateID,
    AnalysisName = @AnalysisName,
    NameTextID = @NameTextID,
    DateFilterStart = @DateFilterStart,
    DateFilterEnd = @DateFilterEnd,
	ChartStyleID = @ChartStyleID,
	DisplaySurveyTitle = @DisplaySurveyTitle,
	DisplayPdfExportButton = @DisplayPdfExportButton,	
    IncludeIncompleteResponses = @IncludeIncompleteResponses,
    IncludeTestResponses = @IncludeTestResponses
  WHERE
    AnalysisTemplateID = @AnalysisTemplateID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_Create]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--Designed for creating appearances for items w/no associated appearance data
CREATE PROCEDURE [dbo].[ckbx_sp_Appearance_Create]
(
  @AppearanceCode varchar(50),
  @LastModified datetime,
  @AppearanceID int out
)
AS
  INSERT INTO ckbx_ItemAppearance (AppearanceCode, LastModified) VALUES (@AppearanceCode, @LastModified)
  SELECT @AppearanceID = @@Identity







GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_CreateAI]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_Appearance_CreateAI]
(
  @AppearanceCode varchar(50),
  @GraphType varchar(50),
  @ItemPosition varchar(10),
  @AppearanceID int out
)
AS
  INSERT INTO ckbx_ItemAppearance
    (AppearanceCode, GraphType, ItemPosition)
  VALUES
    (@AppearanceCode, @GraphType, @ItemPosition)

  SET @AppearanceID = @@IDENTITY

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_CreateAI_Spec]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Appearance_CreateAI_Spec]
(
  @AppearanceID int,
  @Precision int,  
  @Explosion int,
  @ShowDataLabels bit,
  @ShowDLZeroValues bit,
  @ShowDLValues bit,
  @Separator varchar(10),
  @ShowXTitle bit,
  @Width int,
  @Height int,
  @ShowLegend bit,
  @LegendWidth int,
  @ShowTitle bit,
  @ShowResponseCount bit,
  @TitleColor varchar(50),
  @BGColor varchar(50),
  @BGGradient bit,
  @ShowHeader bit,
  @Spacing int,
  @ShowPercent bit,
  @ForeColor varchar(50),
  @Color varchar(50),
  @PieGraphColors varchar(255),
  @MaxColWidth int,
  @TitleFont varchar(255),
  @LegendFont varchar(255),
  @ShowAnswerCount bit
)
AS
IF NOT EXISTS(Select AppearanceID FROM ckbx_Appearance_AnalysisItem WHERE AppearanceID = @AppearanceID)
    BEGIN
      INSERT INTO ckbx_Appearance_AnalysisItem
        (
	  AppearanceID,
	  [Precision],
	  Explosion,
	  ShowDataLabels,
	  ShowDLZeroValues,
	  ShowDLValues,
	  Separator,
	  ShowXTitle,
	  Width,
	  Height,
	  ShowLegend,
	  LegendWidth,
	  ShowTitle,
	  ShowResponseCount,
	  TitleColor,
	  BGColor,
	  BGGradient,
	  ShowHeader,
	  Spacing,
	  ShowPercent,
	  ForeColor,
	  Color,
	  PieGraphColors,
	  MaxColWidth,
      TitleFont,
      LegendFont,
	  ShowAnswerCount
        )
      VALUES
        (
	  @AppearanceID,
	  @Precision,
	  @Explosion,
	  @ShowDataLabels,
	  @ShowDLZeroValues,
	  @ShowDLValues,
	  @Separator,
	  @ShowXTitle,
	  @Width,
	  @Height,
	  @ShowLegend,
	  @LegendWidth,
	  @ShowTitle,
	  @ShowResponseCount,
	  @TitleColor,
	  @BGColor,
	  @BGGradient,
	  @ShowHeader,
	  @Spacing,
	  @ShowPercent,
	  @ForeColor,
	  @Color,
	  @PieGraphColors,
	  @MaxColWidth,
      @TitleFont,
      @LegendFont,
	  @ShowAnswerCount
        )
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_CreateMatrix]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE     PROCEDURE [dbo].[ckbx_sp_Appearance_CreateMatrix]
(
  @AppearanceCode varchar(50),
  @Width int,
  @ItemPosition varchar(10),
  @LabelPosition varchar(10),
  @GridLines varchar(32),
  @AppearanceID int out
)
AS
INSERT INTO ckbx_ItemAppearance 
	(AppearanceCode, Width, ItemPosition, LabelPosition, GridLines) 
VALUES (@AppearanceCode, @Width, @ItemPosition, @LabelPosition, @GridLines)
 
SELECT @AppearanceID = @@Identity

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_CreateMLText]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[ckbx_sp_Appearance_CreateMLText]
(
  @Rows int,
  @Columns int,
  @ItemPosition varchar(10),
  @LabelPosition varchar(10),
  @AppearanceID int out
)
AS 
  INSERT INTO ckbx_ItemAppearance
    (AppearanceCode, [Columns], ItemPosition, [Rows], LabelPosition)
  VALUES
    ('MULTI_LINE_TEXT', @Columns, @ItemPosition, @Rows, @LabelPosition)

  SELECT @AppearanceID = @@Identity



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_CreateMsg]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_Appearance_CreateMsg]
(
  @FontSize varchar(10),
  @FontColor varchar(255),
  @ItemPosition varchar(10),
  @AppearanceID int out
)
AS
  INSERT INTO ckbx_ItemAppearance (AppearanceCode, FontSize, FontColor, ItemPosition) VALUES ('MESSAGE', @FontSize, @FontColor, @ItemPosition)
  SELECT @AppearanceID = @@IDENTITY



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_CreateRedirect]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE  PROCEDURE [dbo].[ckbx_sp_Appearance_CreateRedirect]
(
  @FontSize varchar(10),
  @FontColor varchar(255),
  @ItemPosition varchar(10),
  @AppearanceID int out
)
AS
  INSERT INTO ckbx_ItemAppearance (AppearanceCode, FontSize, FontColor, ItemPosition) VALUES ('REDIRECT', @FontSize, @FontColor, @ItemPosition)
  SELECT @AppearanceID = @@IDENTITY




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_CreateRS]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--ALTER  Appearance
CREATE PROCEDURE [dbo].[ckbx_sp_Appearance_CreateRS]
(
  @AppearanceCode varchar(50),
  @LayoutStyle varchar(50),
  @ShowNumberLabels int,
  @ItemPosition varchar(10),
  @LabelPosition varchar(10),
  @AppearanceID int out
)
AS
  INSERT INTO ckbx_ItemAppearance 
   (AppearanceCode, LayoutStyle, ShowNumberLabels, ItemPosition, LabelPosition)
  VALUES
   (@AppearanceCode, @LayoutStyle, @ShowNumberLabels, @ItemPosition, @LabelPosition)

  SELECT @AppearanceID = @@IDENTITY




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_CreateSelect]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE     PROCEDURE [dbo].[ckbx_sp_Appearance_CreateSelect]
(
        @AppearanceCode varchar(50),
	@LayoutStyle varchar (50),
 	@Columns int,
	@ShowNumberLabels int,
	@ItemPosition varchar(10),
        @LabelPosition varchar(10),
        @AppearanceID int out
)
AS
   INSERT INTO ckbx_ItemAppearance 
	(AppearanceCode, LayoutStyle, [Columns], ShowNumberLabels, ItemPosition, LabelPosition)
   VALUES
	(@AppearanceCode, @LayoutStyle, @Columns, @ShowNumberLabels, @ItemPosition, @LabelPosition)

   SELECT @AppearanceID = @@IDENTITY




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_CreateSLText]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE     PROCEDURE [dbo].[ckbx_sp_Appearance_CreateSLText]
(
  @AppearanceCode varchar(50),
  @Width int,
  @ItemPosition varchar(10),
  @LabelPosition varchar(10),
  @AppearanceID int out
)
AS
  INSERT INTO ckbx_ItemAppearance (AppearanceCode, Width, ItemPosition, LabelPosition) VALUES (@AppearanceCode, @Width, @ItemPosition, @LabelPosition)
  SELECT @AppearanceID = @@Identity






GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_DeleteProperties]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Appearance_DeleteProperties]
(
  @AppearanceId int
)
AS
  DELETE FROM ckbx_Appearance_Properties WHERE AppearanceId = @AppearanceId

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_GetAI]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Appearance_GetAI]
(
  @AppearanceID int
)
AS
  SELECT * FROM ckbx_Appearance_AnalysisItem WHERE AppearanceID = @AppearanceID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_GetByCode]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Appearance_GetByCode]
(
  @AppearanceCode varchar(50)
)
AS
  SELECT
    AppearanceCode,
    DataTypeName,
    DataTypeAssembly
  FROM
    ckbx_ItemAppearanceCode
  WHERE
    AppearanceCode = @AppearanceCode


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_GetItemDefault]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[ckbx_sp_Appearance_GetItemDefault]
(
  @ItemTypeID int
)
AS
  SELECT 
    iac.DataTypeName,
    iac.DataTypeAssembly,
    it.DefaultAppearanceCode
  FROM 
    ckbx_ItemAppearanceCode iac
    INNER JOIN ckbx_ItemType it ON it.DefaultAppearanceCode = iac.AppearanceCode
  WHERE 
    it.ItemTypeID = @ItemTypeID
  RETURN;



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_InsertProperty]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Appearance_InsertProperty]
(
  @AppearanceId int,
  @Name varchar(64),
  @ValueAsString nvarchar(1024),
  @ValueType varchar(255)
)
AS
  INSERT INTO ckbx_Appearance_Properties
    (AppearanceId, PropertyName, ValueAsString, ValueType)
  VALUES
    (@AppearanceId, @Name, @ValueAsString, @ValueType)
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Appearance_Update]
(
  @AppearanceID int,
  @LastModified datetime
)
AS
  UPDATE 
	ckbx_ItemAppearance 
  SET 
	LastModified = @LastModified
  WHERE 
	AppearanceID = @AppearanceID




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_UpdateAI]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_Appearance_UpdateAI]
(
  @AppearanceID int,
  @AppearanceCode varchar(50),
  @GraphType varchar(50),
  @ItemPosition varchar(10)
  
)
AS
  UPDATE ckbx_ItemAppearance
  SET
    AppearanceCode = @AppearanceCode,
    GraphType = @GraphType,
    ItemPosition = @ItemPosition
  WHERE
    AppearanceID = @AppearanceID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_UpdateAI_Spec]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Appearance_UpdateAI_Spec]
(
  @AppearanceID int,
  @Precision int,
  @Explosion int,
  @ShowDataLabels bit,
  @ShowDLZeroValues bit,
  @ShowDLValues bit,
  @Separator varchar(10),
  @ShowXTitle bit,
  @Width int,
  @Height int,
  @ShowLegend bit,
  @LegendWidth int,
  @ShowTitle bit,
  @ShowResponseCount bit,
  @TitleColor varchar(50),
  @BGColor varchar(50),
  @BGGradient bit,
  @ShowHeader bit,
  @Spacing int,
  @ShowPercent bit,
  @ForeColor varchar(50),
  @Color varchar(50),
  @PieGraphColors varchar(255),
  @MaxColWidth int,
  @TitleFont varchar(255),
  @LegendFont varchar(255),
  @ShowAnswerCount bit
)
AS
UPDATE ckbx_Appearance_AnalysisItem
  SET
    [Precision] = @Precision, 
    Explosion = @Explosion,
    ShowDataLabels = @ShowDataLabels,
    ShowDLZeroValues = @ShowDLZeroValues,
    ShowDLValues = @ShowDLValues,
    Separator = @Separator,
    ShowXTitle = @ShowXTitle,
    Width = @Width,
    Height = @Height,
    ShowLegend = @ShowLegend,
    LegendWidth = @LegendWidth,
    ShowTitle = @ShowTitle,
    ShowResponseCount = @ShowResponseCount,
    TitleColor = @TitleColor,
    BGColor = @BGColor,
    BGGradient = @BGGradient,
    ShowHeader = @ShowHeader,
    Spacing = @Spacing,
    ShowPercent = @ShowPercent,
    ForeColor = @ForeColor,
    Color = @Color,
    PieGraphColors = @PieGraphColors,
    MaxColWidth = @MaxColWidth,
    TitleFont = @TitleFont,
    LegendFont = @LegendFont,
	ShowAnswerCount = @ShowAnswerCount
  WHERE
    AppearanceID = @AppearanceID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_UpdateCode]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Appearance_UpdateCode]
(
  @AppearanceID int,
  @NewAppearanceCode varchar(50)
)
AS
  UPDATE ckbx_ItemAppearance SET AppearanceCode = @NewAppearanceCode WHERE AppearanceID = @AppearanceID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_UpdateMatrix]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[ckbx_sp_Appearance_UpdateMatrix]
(
  @AppearanceID int,
  @Width int,
  @ItemPosition varchar(10),
  @LabelPosition varchar(10),
  @GridLines varchar(32)
  
)
AS
UPDATE 
	ckbx_ItemAppearance 
SET 
	Width = @Width, 
	ItemPosition = @ItemPosition, 
	LabelPosition = @LabelPosition,
	GridLines = @GridLines
WHERE 
	AppearanceID = @AppearanceID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_UpdateMLText]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_Appearance_UpdateMLText]
(
  @AppearanceID int,
  @Rows int,
  @Columns int,
  @LabelPosition varchar(10),
  @ItemPosition varchar(10)
)
AS 
  UPDATE ckbx_ItemAppearance
  SET
    [Rows] = @Rows,
    [Columns] = @Columns,
    ItemPosition = @ItemPosition,
    LabelPosition = @LabelPosition
  WHERE
    AppearanceID = @AppearanceID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_UpdateMsg]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_Appearance_UpdateMsg]
(
  @AppearanceID int,
  @FontSize varchar(10),
  @ItemPosition varchar(10),
  @FontColor varchar(255)
)
AS
  UPDATE ckbx_ItemAppearance SET FontSize = @FontSize, FontColor = @FontColor, ItemPosition = @ItemPosition WHERE AppearanceID = @AppearanceID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_UpdateRedirect]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE  PROCEDURE [dbo].[ckbx_sp_Appearance_UpdateRedirect]
(
  @AppearanceID int,
  @FontSize varchar(10),
  @ItemPosition varchar(10),
  @FontColor varchar(255)
)
AS
  UPDATE ckbx_ItemAppearance SET FontSize = @FontSize, FontColor = @FontColor, ItemPosition = @ItemPosition WHERE AppearanceID = @AppearanceID




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_UpdateRS]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_Appearance_UpdateRS]
(
  @AppearanceID int,
  @LayoutStyle varchar(50),
  @ShowNumberLabels int,
  @ItemPosition varchar(10),
  @LabelPosition varchar(10)
)
AS
  UPDATE 
    ckbx_ItemAppearance 
  SET
    LayoutStyle = @LayoutStyle,
    ShowNumberLabels = @ShowNumberLabels,
    ItemPosition = @ItemPosition,
    LabelPosition = @LabelPosition
  WHERE
    AppearanceID = @AppearanceID




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_UpdateSelect]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE    PROCEDURE [dbo].[ckbx_sp_Appearance_UpdateSelect]
(
	@AppearanceID int,
	@LayoutStyle varchar (50),
 	@Columns int,
	@ShowNumberLabels int,
	@ItemPosition varchar(10),
        @LabelPosition varchar(10)
)
AS

	UPDATE ckbx_ItemAppearance SET LayoutStyle = @LayoutStyle, [Columns] = @Columns, ShowNumberLabels = @ShowNumberLabels, ItemPosition = @ItemPosition, LabelPosition = @LabelPosition WHERE AppearanceID = @AppearanceID






GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Appearance_UpdateSLText]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE   PROCEDURE [dbo].[ckbx_sp_Appearance_UpdateSLText]
(
  @AppearanceID int,
  @Width int,
  @ItemPosition varchar(10),
  @LabelPosition varchar(10)
  
)
AS
  UPDATE ckbx_ItemAppearance SET Width = @Width, ItemPosition = @ItemPosition, LabelPosition = @LabelPosition WHERE AppearanceID = @AppearanceID




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AppearanceData_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_AppearanceData_Get]
(
  @AppearanceID int
)
AS
  SELECT
    AppearanceId,
    AppearanceCode,
    LastModified
  FROM
    ckbx_ItemAppearance
  WHERE
    AppearanceId = @AppearanceId
    
  SELECT
    AppearanceId,
    PropertyName,
    ValueAsString,
    ValueType
  FROM
    ckbx_Appearance_Properties
  WHERE
    AppearanceId = @AppearanceId
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AppearanceEditors_List]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_AppearanceEditors_List]
AS
	SELECT
		AppearanceCode,
		EditorTypeName,
		EditorTypeAssembly
	FROM
		ckbx_ItemAppearanceEditor
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AppearancePreset_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_AppearancePreset_Delete]
(
  @PresetID int
)
AS
  DELETE FROM ckbx_AppearancePreset WHERE PresetID = @PresetID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AppearancePreset_FindByName]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_AppearancePreset_FindByName]
(
  @PresetName nvarchar(255)
)
AS
  SELECT
	PresetID,
	AppearanceID,
	PresetName,
	CreatedBy,
	[Public],
	Editable
  FROM
	ckbx_AppearancePreset
  WHERE
	PresetName = @PresetName


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AppearancePreset_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_AppearancePreset_Get]
(
  @PresetID int
)
AS
  SELECT
    PresetID,
    AppearanceID,
    PresetName,
    CreatedBy,
    [Public],
    Editable
  FROM
    ckbx_AppearancePreset
  WHERE
    PresetID = @PresetID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AppearancePreset_Insert]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_AppearancePreset_Insert]
(
	@AppearanceID int,
	@PresetName nvarchar(255),
	@CreatedBy nvarchar(611),
	@Public bit,
	@Editable bit,
	@PresetID int out
)
AS
	INSERT INTO ckbx_AppearancePreset
		(AppearanceID, PresetName, CreatedBy, [Public], Editable)
	VALUES
		(@AppearanceID, @PresetName, @CreatedBy, @Public, @Editable)

	SET @PresetID = @@IDENTITY


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AppearancePreset_ListAll]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_AppearancePreset_ListAll]
AS
  SELECT
	PresetID,
	AppearanceID,
	PresetName,
	CreatedBy,
	[Public],
	Editable
  FROM
	ckbx_AppearancePreset
  ORDER BY
	PresetName ASC
 

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AppearancePreset_ListForUser]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_AppearancePreset_ListForUser]
(
	@UniqueIdentifier nvarchar(611),
    @OnlyEditable bit
)
AS
  IF @OnlyEditable = 1
    BEGIN
	  SELECT
		PresetID,
		AppearanceID,
		PresetName,
		CreatedBy,
		[Public],
		Editable
	  FROM
		ckbx_AppearancePreset
	  WHERE
		CreatedBy = @UniqueIdentifier
		OR Editable = 1
	  ORDER BY
		PresetName ASC
	END
  ELSE
	BEGIN
	  SELECT
		PresetID,
		AppearanceID,
		PresetName,
		CreatedBy,
		[Public],
		Editable
	  FROM
		ckbx_AppearancePreset
	  WHERE
		CreatedBy = @UniqueIdentifier
		OR [Public] = 1
		OR Editable = 1
	  ORDER BY
		PresetName ASC
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_AppearancePreset_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_AppearancePreset_Update]
(
    @PresetID int,
	@PresetName nvarchar(255),
	@Public bit,
	@Editable bit
)
AS
  UPDATE ckbx_AppearancePreset
  SET
	PresetName = @PresetName,
	[Public] = @Public,
    Editable = @Editable
  WHERE
	PresetID = @PresetID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Autocomplete_AddList]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Autocomplete_AddList]
(
    @Name nvarchar(32),
	@Data ntext,
	@ListId int out
)
AS
	INSERT INTO [ckbx_AutocompleteList] (Name, Data) VALUES (@Name, @Data)
	SET @ListId = @@IDENTITY

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Autocomplete_DeleteList]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Autocomplete_DeleteList]
(
	@ListId int
)
AS
	UPDATE [ckbx_AutocompleteList] SET IsDeleted = 1 WHERE ListId = @ListId

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Autocomplete_GetListData]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Autocomplete_GetListData]
(
	@ListId int
)
AS
	SELECT Data FROM [ckbx_AutocompleteList] WHERE ListId = @ListId

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Autocomplete_GetLists]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Autocomplete_GetLists]
AS
	SELECT ListId, Name FROM [ckbx_AutocompleteList] WHERE [IsDeleted] IS NULL OR [IsDeleted] = 0 

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Autocomplete_UpdateList]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Autocomplete_UpdateList]
(
	@ListId int,
    @Name nvarchar(32),
	@Data ntext
)
AS
	UPDATE [ckbx_AutocompleteList] SET Name = @Name, Data = @Data WHERE ListId = @ListId

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_BranchAction_Create]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_BranchAction_Create]
(
	@ActionID int,
	@GoToPageID int
)

AS

	INSERT INTO ckbx_PageBranchAction (ActionID, GoToPageID) VALUES (@ActionID, @GoToPageID)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_BranchAction_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_BranchAction_Delete]
(
	@ActionID int
)
AS
	
	DELETE ckbx_PageBranchAction WHERE ActionID = @ActionID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_BranchAction_GetAction]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_BranchAction_GetAction]
(
	@ActionID int
)
AS

SELECT * FROM ckbx_PageBranchAction WHERE ActionID = @ActionID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_BranchAction_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_BranchAction_Update]
(
	@ActionID int,
	@GoToPageID int
)

AS

	UPDATE ckbx_PageBranchAction SET GoToPageID = @GoToPageID WHERE ActionID = @ActionID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_CompanyProfile_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_CompanyProfile_Delete]
(
	@ID INT
)
AS
	DELETE FROM [ckbx_CompanyProfile] WHERE [ID] = @ID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_CompanyProfile_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_CompanyProfile_Get]
(
	@ID INT
)
AS
  SELECT [ProfileName]
	  ,[Address1]
      ,[Address2]
      ,[City]
      ,[Company]
      ,[Country]
      ,[PostCode]
      ,[State]
	  ,[IsDefault]
	  FROM [ckbx_CompanyProfile]
		WHERE [ID] = @ID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_CompanyProfile_GetDefault]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_CompanyProfile_GetDefault]
AS
  SELECT [ID]
	  FROM [ckbx_CompanyProfile]
		WHERE [IsDefault] = 1

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_CompanyProfile_Insert]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_CompanyProfile_Insert]
(
	@ProfileName NVARCHAR(64),
	@Address1 NVARCHAR(512),
	@Address2 NVARCHAR(512),
	@City NVARCHAR(64),
	@Company NVARCHAR(512),
	@Country NVARCHAR(64), 
	@PostCode NVARCHAR(32), 
	@State NVARCHAR(32),
	@IsDefault BIT,
	@ID int output
)
AS
	IF (@IsDefault = 1) 
		UPDATE [ckbx_CompanyProfile] SET [IsDefault] = 0

	INSERT INTO [ckbx_CompanyProfile] 
	([ProfileName],
		[Address1], 
		[Address2], 
		[City], 
		[Company], 
		[Country], 
		[PostCode], 
		[State],
		[IsDefault]) 
	VALUES (@ProfileName,
		@Address1, 
		@Address2, 
		@City, 
		@Company, 
		@Country, 
		@PostCode, 
		@State,
		@IsDefault)

	SELECT @ID = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_CompanyProfile_List]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_CompanyProfile_List]
AS
	SELECT [ID], [ProfileName]
		FROM [ckbx_CompanyProfile]

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_CompanyProfile_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_CompanyProfile_Update]
(
	@ID INT,
	@ProfileName NVARCHAR(64),
	@Address1 NVARCHAR(512),
	@Address2 NVARCHAR(512),
	@City NVARCHAR(64),
	@Company NVARCHAR(512),
	@Country NVARCHAR(64), 
	@PostCode NVARCHAR(32), 
	@State NVARCHAR(32),
	@IsDefault BIT
)
AS
	IF (@IsDefault = 1) 
		UPDATE [ckbx_CompanyProfile] SET [IsDefault] = 0

	UPDATE [ckbx_CompanyProfile] 
		SET [ProfileName] =  @ProfileName,
			[Address1] =  @Address1,
			[Address2] =  @Address2,
			[City] =  @City,
			[Company] =  @Company,
			[Country] =  @Country,
			[PostCode] =  @PostCode,
			[State] =  @State,
			[IsDefault] = @IsDefault
		WHERE [ID] = @ID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Content_CreateFolder]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****************************************************************************
 * Create Folder															*
 ****************************************************************************/
CREATE PROCEDURE [dbo].[ckbx_sp_Content_CreateFolder]
(
    @ParentFolderID int,
	@FolderName nvarchar(63),
    @CreatedBy nvarchar(611),
    @IsPublic bit,
	@FolderID int out
)
AS
	INSERT INTO ckbx_Content_Folders
		(ParentFolderID, FolderName, CreatedBy, IsPublic)
	VALUES
		(@ParentFolderID, @FolderName, @CreatedBy, @IsPublic)

    SET @FolderID = @@IDENTITY
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Content_CreateItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****************************************************************************
 * Create Item																*
 ****************************************************************************/
CREATE PROCEDURE [dbo].[ckbx_sp_Content_CreateItem]
(
	@FolderID int,
    @ItemName nvarchar(255),
	@ItemUrl nvarchar(255),
	@CreatedBy nvarchar(611),
    @IsPublic bit,
    @MIMEContentType nvarchar(255),
    @ItemData image,
	@LastUpdated datetime,
    @ItemID int out
)
AS
	INSERT INTO ckbx_Content_Items
		(FolderID, ItemName, ItemUrl, CreatedBy, IsPublic, MIMEContentType, LastUpdated, ItemData)
	VALUES
		(@FolderID, @ItemName, @ItemUrl, @CreatedBy, @IsPublic, @MIMEContentType, @LastUpdated, @ItemData)

	SELECT @ItemID = @@IDENTITY


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Content_DeleteFolder]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****************************************************************************
 * Delete Folder															*
 ****************************************************************************/
CREATE PROCEDURE [dbo].[ckbx_sp_Content_DeleteFolder]
(
  @FolderID int
)
AS
	IF @FolderID IS NULL
		BEGIN
			RETURN
		END
	ELSE
		BEGIN
			IF NOT EXISTS(SELECT FolderID FROM ckbx_Content_Folders WHERE ParentFolderID = @FolderID)
				BEGIN
					DELETE FROM ckbx_Content_Folders WHERE FolderID = @FolderID
				END
		END
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Content_DeleteItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****************************************************************************
 * Delete Item																*
 ****************************************************************************/
CREATE PROCEDURE [dbo].[ckbx_sp_Content_DeleteItem]
(
   @ItemID int
)
AS
  DELETE FROM ckbx_Content_Items WHERE ItemID = @ItemID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Content_FolderExists]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****************************************************************************
 * Folder Exists															*
 ****************************************************************************/
CREATE PROCEDURE [dbo].[ckbx_sp_Content_FolderExists]
(
  @ParentFolderID int,
  @FolderName nvarchar(63),
  @CreatedBy nvarchar(611),
  @ExistingFolderID bit out
)
AS
	SELECT @ExistingFolderID = FolderID
	FROM
		ckbx_Content_Folders
    WHERE
		(IsPublic = 1 OR CreatedBy = @CreatedBy)
		AND FolderName = @FolderName
		AND ((@ParentFolderID IS NULL AND ParentFolderID IS NULL) 
				OR (@ParentFolderID IS NOT NULL AND ParentFolderID = @ParentFolderID))
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Content_GetFolder]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Content_GetFolder]
(
  @FolderID int
)
AS
  SELECT
	FolderID,
	ParentFolderID,
	FolderName,
	CreatedBy,
	IsPublic,
    FolderPath
  FROM
	ckbx_Content_Folders
  WHERE
	FolderID = @FolderID
  ORDER BY
	FolderName ASC
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Content_GetFolderByPath]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Content_GetFolderByPath]
(
  @FolderPath nvarchar(1024)
)
AS
  SELECT
	FolderID,
	ParentFolderID,
	FolderName,
	CreatedBy,
	IsPublic,
    FolderPath
  FROM
	ckbx_Content_Folders
  WHERE
	FolderPath = @FolderPath
  ORDER BY
	FolderName ASC
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Content_GetItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****************************************************************************
 * Get Item Data															*
 ****************************************************************************/
CREATE PROCEDURE [dbo].[ckbx_sp_Content_GetItem]
(
  @ItemID int
)
AS
  SELECT
	ItemID,
    FolderID,
    ItemName,
    ItemUrl,
    CreatedBy,
    IsPublic,
    MimeContentType,
    LastUpdated
  FROM
    ckbx_Content_Items
  WHERE
   ItemID = @ItemID
  ORDER BY
   ItemName ASC


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Content_GetItemData]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****************************************************************************
 * Get Item Data															*
 ****************************************************************************/
CREATE PROCEDURE [dbo].[ckbx_sp_Content_GetItemData]
(
  @ItemID int
)
AS
  SELECT TOP 1 ItemData FROM ckbx_Content_Items WHERE ItemID = @ItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Content_ItemExists]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****************************************************************************
 * Item Exists																*
 ****************************************************************************/
CREATE PROCEDURE [dbo].[ckbx_sp_Content_ItemExists]
(
	@ParentFolderID int,
	@UniqueIdentifier nvarchar(611),
    @ItemName nvarchar(255),
	@MIMEContentType nvarchar(255),
    @ExistingItemID int out
)
AS
  SELECT @ExistingItemID = ItemID
  FROM
	ckbx_Content_Items
  WHERE
	(IsPublic = 1 OR CreatedBy = @UniqueIdentifier)
	AND ItemName = @ItemName
	AND MimeContentType = @MimeContentType


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Content_ListFolderContent]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****************************************************************************
 * List Folder Content														*
 ****************************************************************************/
CREATE PROCEDURE [dbo].[ckbx_sp_Content_ListFolderContent]
(
   @ParentFolderID int,
   @CreatedBy nvarchar(611),
   @MimeContentTypes nvarchar(255),
   @ForceListAll bit
)
AS
  IF @ForceListAll = 1
    BEGIN
		SELECT 
			ItemID, 
			FolderID,
			ItemName, 
			ItemUrl, 
			CreatedBy, 
			IsPublic,
			MIMEContentType,
			LastUpdated
		FROM 
			ckbx_Content_Items 
		WHERE 
			(@ParentFolderID IS NOT NULL AND FolderID = @ParentFolderID)
				OR (@ParentFolderID IS NULL AND FolderID IS NULL)

	END
  ELSE
	BEGIN
		IF @MimeContentTypes IS NULL OR @MimeContentTypes = ''
			BEGIN
				SELECT 
					ItemID, 
					FolderID,
					ItemName, 
					ItemUrl, 
					CreatedBy, 
					IsPublic,
					MIMEContentType,
					LastUpdated
				FROM 
					ckbx_Content_Items
				WHERE 
					((@ParentFolderID IS NOT NULL AND FolderID = @ParentFolderID)
						OR (@ParentFolderID IS NULL AND FolderID IS NULL))
					AND (IsPublic = 1 OR CreatedBy = @CreatedBy)
			END
		ELSE
			BEGIN
				SELECT 
					ItemID, 
					FolderID,
					ItemName, 
					ItemUrl, 
					CreatedBy, 
					IsPublic,
					MIMEContentType,
					LastUpdated
				FROM 
					ckbx_Content_Items 
				WHERE 
					((@ParentFolderID IS NOT NULL AND FolderID = @ParentFolderID)
						OR (@ParentFolderID IS NULL AND FolderID IS NULL))
					AND MIMEContentType IN (@MimeContentTypes)
					AND (IsPublic = 1 OR CreatedBy = @CreatedBy)
			END			
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Content_ListFolders]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Content_ListFolders]
(
   @ParentFolderID int,
   @CreatedBy nvarchar(611),
   @ForceListAll bit
)
AS
  IF @ForceListAll = 1
    BEGIN
		SELECT 
			FolderID, 
			ParentFolderID, 
			FolderName, 
			CreatedBy, 
			IsPublic,
            FolderPath
		FROM 
			ckbx_Content_Folders 
		WHERE 
			(@ParentFolderID IS NOT NULL AND ParentFolderID = @ParentFolderID)
			OR (@ParentFolderID IS NULL AND ParentFolderID IS NULL)
	END
  ELSE
	BEGIN
		SELECT 
			FolderID, 
			ParentFolderID, 
			FolderName, 
			CreatedBy, 
			IsPublic,
			FolderPath
		FROM 
			ckbx_Content_Folders 
		WHERE 
			((@ParentFolderID IS NOT NULL AND ParentFolderID = @ParentFolderID)
			OR (@ParentFolderID IS NULL AND ParentFolderID IS NULL))
			AND (IsPublic = 1 OR CreatedBy = @CreatedBy)
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Content_UpdateFolder]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****************************************************************************
 * Update Folder															*
 ****************************************************************************/
CREATE PROCEDURE [dbo].[ckbx_sp_Content_UpdateFolder]
(
	@FolderID int,
    @ParentFolderID int,
	@FolderName nvarchar(63),
    @CreatedBy nvarchar(611),
    @IsPublic bit
)
AS
	UPDATE ckbx_Content_Folders
	SET
		ParentFolderID = @ParentFolderID,
		FolderName = @FolderName,
		CreatedBy = @CreatedBy,
		IsPublic = @IsPublic
	WHERE
		FolderID = @FolderID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Content_UpdateItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****************************************************************************
 * Update Item																*
 ****************************************************************************/
CREATE PROCEDURE [dbo].[ckbx_sp_Content_UpdateItem]
(
	@ItemID int,
	@FolderID int,
    @ItemName nvarchar(255),
	@ItemUrl nvarchar(255),
	@CreatedBy nvarchar(611),
    @IsPublic bit,
    @MIMEContentType nvarchar(255),
    @LastUpdated datetime,
    @ItemData image
)
AS
  UPDATE ckbx_Content_Items
  SET
	FolderID = @FolderID,
	ItemName = @ItemName,
	ItemUrl = @ItemUrl,
	CreatedBy = @CreatedBy,
	IsPublic = @IsPublic,
	MimeContentType = @MimeContentType,
    LastUpdated = @LastUpdated,
	ItemData = @ItemData
  WHERE
	ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Credentials_SetModifier]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Credentials_SetModifier] 
(    
    @UniqueIdentifier nvarchar(611),    
    @ModifiedBy nvarchar(611)
)
AS
BEGIN
	UPDATE ckbx_Credential SET 
                [ModifiedBy] = @ModifiedBy,
                [ModifiedDate] = getDate()
                WHERE [UniqueIdentifier] = @UniqueIdentifier
END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_CustomUserField_GetHidden]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_CustomUserField_GetHidden]
(
	@CustomUserFieldName nvarchar(611)
)
AS
	/* SET NOCOUNT ON */
	SELECT Hidden FROM ckbx_CustomUserField WHERE CustomUserFieldName = @CustomUserFieldName

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_CustomUserField_GetIsDeletable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_CustomUserField_GetIsDeletable]
(
	@CustomUserFieldName nvarchar(611)
)
AS
	/* SET NOCOUNT ON */
	SELECT IsDeletable FROM ckbx_CustomUserField WHERE CustomUserFieldName = @CustomUserFieldName

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_CustomUserField_ListShowInUserManager]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_CustomUserField_ListShowInUserManager]

AS
	/* SET NOCOUNT ON */
	SELECT CustomUserFieldID, CustomUserFieldName, Position FROM ckbx_CustomUserField WHERE ShowInUserManager = 1

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_CustomUserField_UpdateHidden]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_CustomUserField_UpdateHidden]
(
	@CustomUserFieldName nvarchar(611),
	@Hidden bit
)
AS
	UPDATE
		ckbx_CustomUserField
	SET
		Hidden = @Hidden
	WHERE 
		CustomUserFieldName = @CustomUserFieldName

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_CustomValidators_GetExpression]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_CustomValidators_GetExpression]
(
  @FormatId [varchar](128)
)
AS
  SELECT 
    Expression
  FROM
    ckbx_CustomValidators
  WHERE
    FormatId = @FormatId

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_CustomValidators_GetFormats]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_CustomValidators_GetFormats]
AS
  SELECT 
    FormatId
  FROM
    ckbx_CustomValidators
ORDER BY Position ASC

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_EmailListPanel_GetEmailAddressCount]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_EmailListPanel_GetEmailAddressCount]
(
  @PanelID int
)
AS
SELECT 
	count(EmailAddress) 
FROM 
	ckbx_EmailListPanel
WHERE
	PanelID = @PanelID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ExceptionLog_DeleteAllEntries]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ExceptionLog_DeleteAllEntries]
AS
DELETE FROM ckbx_ExceptionLog
  

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ExceptionLog_DeleteEntry]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ExceptionLog_DeleteEntry]
(
	@EntryId int
)
AS
DELETE FROM ckbx_ExceptionLog WHERE EntryId = @EntryId
  

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ExceptionLog_GetEntry]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ExceptionLog_GetEntry]
(
  @EntryId int
)
AS
  SELECT * FROM ckbx_ExceptionLog WHERE EntryId = @EntryId
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ExceptionLog_InsertEntry]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ExceptionLog_InsertEntry]
(
    @AppDomainName nvarchar(255),
    @ApplicationContext nvarchar(255),
    @Category nvarchar(255),
    @ErrorMessages nvarchar(255),
    @EventId int,
    @MachineName nvarchar(255),
    @ManagedThreadName nvarchar(255),
    @Message ntext,
    @Priority int,
    @ProcessId int,
    @ProcessName nvarchar(255),
    @Severity nvarchar(255),
	@TimeStamp datetime,
    @Title nvarchar(255),
    @ThreadId nvarchar(255)    
)
AS

	DECLARE @ContextId int
	
	SET @ContextId = -1
	
	INSERT INTO ckbx_ExceptionLog
				(AppDomainName, ContextID, Category, ErrorMessages, EventId, 
					MachineName, ManagedThreadName, MessageText, Priority, ProcessId,
					ProcessName, Severity, Title, DateTimeStamp, ThreadId)
	VALUES
				(@AppDomainName,@contextid, @Category, @ErrorMessages, @EventId, 
					@MachineName, @ManagedThreadName, @Message, @Priority, @ProcessId,
					@ProcessName, @Severity, @Title, @TimeStamp, @ThreadId)
          

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ExceptionLog_ListEntries]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ExceptionLog_ListEntries]

AS
  SELECT * FROM ckbx_ExceptionLog ORDER BY DateTimeStamp DESC
  

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_FavoriteSurvey_Add]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****** Object:  StoredProcedure [ckbx_sp_FavoriteSurvey_Add]    Script Date: 11/28/2012 13:59:01 ******/

CREATE PROCEDURE  [dbo].[ckbx_sp_FavoriteSurvey_Add]
	@userID varchar(255),
	@responseTemplateID varchar(255),
	@FirstPermissionName varchar(32),		--Used for folder permission
	@SecondPermissionName varchar(32)       --Used for survey permission
    
AS
BEGIN
	IF(@FirstPermissionName <>'')
	begin		
		--Remove any temp data
		DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleFormsAndFolders_Folders'
		DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleFormsAndFolders_Forms'
	 
		EXEC ckbx_sp_Security_ListAccessibleFolders @userID, @FirstPermissionName, NULL, 0, NULL, -1, -1, NULL, 1, NULL, NULL, 'AccessibleFormsAndFolders_Folders'
	  
		EXEC ckbx_sp_Security_ListAccessibleSurveys @userID, @SecondPermissionName, NULL, 0, NULL, -1, -1, NULL, 1, NULL, NULL, 0, 'AccessibleFormsAndFolders_Forms'
		
		DECLARE @Count int
		SET @Count=
			(				
				SELECT
					COUNT(tmp.ResourceId)
				FROM
					ckbx_Security_TempResourceList tmp 
					INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
				WHERE
					spid = @@spid
					AND DataKey = 'AccessibleFormsAndFolders_Forms'
					AND tmp.ResourceId = @responseTemplateID
			)
			
			IF(@Count > 0)
			BEGIN
				INSERT INTO ckbx_FavoriteSurvey(userID,responseTemplateId) VALUES(@userID, @responseTemplateID)
			END
	END
	ELSE
	BEGIN
		INSERT INTO ckbx_FavoriteSurvey(userID,responseTemplateId) VALUES(@userID, @responseTemplateID)
	END
END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_FavoriteSurvey_GetList]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****** Object:  StoredProcedure [ckbx_sp_FavoriteSurvey_GetList]    Script Date: 11/28/2012 13:55:37 ******/

CREATE PROCEDURE [dbo].[ckbx_sp_FavoriteSurvey_GetList] 
(
   @UniqueIdentifier nvarchar(511),
   @FirstPermissionName varchar(32),		--Used for folder permission
   @SecondPermissionName varchar(32),		--Used for survey permission
   @RequireBothPermissions bit,			
   @UseAclExclusion bit,
   @PageNumber int, 
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(255),
   @DataKey varchar(64) = null  
 ) 
AS
BEGIN
	--Remove any temp data
	DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleFormsAndFolders_Folders'
	DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleFormsAndFolders_Forms'
 
	--Populate temp resource table with folders
	--Sorting is done in final select later, so don't bother passing sort parameters here
	EXEC ckbx_sp_Security_ListAccessibleFolders @UniqueIdentifier, @FirstPermissionName, NULL, 0, @UseAclExclusion, -1, -1, NULL, @SortAscending, NULL, NULL, 'AccessibleFormsAndFolders_Folders'
  
	--Populate temp resource table with surveys
	--Pass 0 as ancestor, which means list only surveys in root
	EXEC ckbx_sp_Security_ListAccessibleSurveys @UniqueIdentifier, @SecondPermissionName, NULL, 0, @UseAclExclusion, -1, -1, NULL, @SortAscending, NULL, NULL, 0, 'AccessibleFormsAndFolders_Forms'

    
	DECLARE @OrderBy varchar(64)
  	--Create the order-by clause, if any
	IF (@SortField IS NOT NULL AND LEN(@SortField) > 0)
		BEGIN
		IF @SortAscending = 1
			BEGIN
				SET @OrderBy = ' ASC'
			END
		ELSE
			BEGIN
				SET @OrderBy = ' DESC'
			END
	END
      
	--Modify sort field, if necessary
	IF @SortField = 'ItemName'
		BEGIN
			SET @SortField = 'TemplateName'
		END
		
	DECLARE @Query nvarchar(3000)
	DECLARE @QueryParams nvarchar(500)
	SET @QueryParams = '@FilterValue nvarchar(255), @UniqueIdentifier nvarchar(511)'
	SET @Query='SELECT
					tmp.ResourceId,
					''Form'' AS ResourceType,
					rt.TemplateName AS ItemName
				FROM
					ckbx_Security_TempResourceList tmp 
					INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
					INNER JOIN ckbx_FavoriteSurvey fs ON tmp.ResourceId = fs.ResponseTemplateID
				WHERE
					spid = @@spid
					AND DataKey = ''AccessibleFormsAndFolders_Forms''
					AND fs.UserID=@UniqueIdentifier'
	
	IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
				BEGIN
					IF (@FilterField = 'Name')
						BEGIN
							SET @Query = @Query + ' AND rt.TemplateName like ''%'' + @FilterValue + ''%'' '	
						END	
					ELSE IF (@FilterField = 'Id')
						BEGIN
							SET @Query = @Query + ' AND CAST(rt.ResponseTemplateID AS NVARCHAR) = @FilterValue '	
						END
					ELSE IF (@FilterField = 'Guid')
						BEGIN
						
							SET @Query = @Query + ' AND Replace (rt.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '	
						END
					ELSE IF (@FilterField = 'CreatedBy')
						BEGIN
							SET @Query = @Query + ' AND rt.CreatedBy like ''%'' + @FilterValue + ''%'' '	
						END
				END
				
				IF (@SortField IS NOT NULL AND LEN(@SortField) > 0)
					BEGIN
						SET @Query = @Query + ' ORDER BY ' + @SortField  + @OrderBy
					END
				
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue, @UniqueIdentifier=@UniqueIdentifier
			SET @Query='SELECT
							COUNT(tmp.ResourceId) AS TotalItemCount
						FROM
							ckbx_Security_TempResourceList tmp 
							INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
							INNER JOIN ckbx_FavoriteSurvey fs ON rt.ResponseTemplateId=fs.ResponseTemplateID
						WHERE
							spid = @@spid
							AND DataKey = ''AccessibleFormsAndFolders_Forms''
							AND fs.UserID=@UniqueIdentifier'
								
			--Select Count
			SET @QueryParams = '@UniqueIdentifier nvarchar(511)'
			exec sp_executesql @Query, @QueryParams, @UniqueIdentifier=@UniqueIdentifier
	RETURN
END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_FavoriteSurvey_GetListAdmin]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_FavoriteSurvey_GetListAdmin]
(
   @UniqueIdentifier nvarchar(511),
   @FirstPermissionName varchar(32),		--Used for folder permission
   @SecondPermissionName varchar(32),		--Used for survey permission
   @RequireBothPermissions bit,			
   @UseAclExclusion bit,
   @PageNumber int, 
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(255),
   @DataKey varchar(64) = null  
 ) 
AS
BEGIN
    
	DECLARE @OrderBy varchar(64)
  	--Create the order-by clause, if any
	IF (@SortField IS NOT NULL AND LEN(@SortField) > 0)
		BEGIN
		IF @SortAscending = 1
			BEGIN
				SET @OrderBy = ' ASC'
			END
		ELSE
			BEGIN
				SET @OrderBy = ' DESC'
			END
	END
      
	--Modify sort field, if necessary
	IF @SortField = 'ItemName'
		BEGIN
			SET @SortField = 'TemplateName'
		END
		
	DECLARE @Query nvarchar(3000)
	DECLARE @QueryParams nvarchar(500)
	SET @QueryParams = '@FilterValue nvarchar(255), @UniqueIdentifier nvarchar(511)'
	SET @Query = 'SELECT 
					 rt.ResponseTemplateId as ResourceId,
					 ff.ItemType as ResourceType,
					 rt.TemplateName as ItemName
				  FROM 
				  ckbx_ResponseTemplate rt INNER JOIN ckbx_FavoriteSurvey fs ON rt.ResponseTemplateId=fs.ResponseTemplateID
				  INNER JOIN ckbx_FormFolders ff on ff.ItemID=fs.ResponseTemplateID
				  INNER JOIN ckbx_Template t on rt.ResponseTemplateId=t.TemplateID'
				  
	SET @Query = @Query + ' WHERE fs.UserID = @UniqueIdentifier AND ff.ItemType = ''Form'''
	SET @Query = @Query + ' AND (t.Deleted IS NULL OR t.Deleted = 0) '
	
	IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
				BEGIN
					IF (@FilterField = 'Name')
						BEGIN
							SET @Query = @Query + ' AND rt.TemplateName like ''%'' + @FilterValue + ''%'' '	
						END	
					ELSE IF (@FilterField = 'Id')
						BEGIN
							SET @Query = @Query + ' AND CAST(rt.ResponseTemplateID AS NVARCHAR) = @FilterValue '	
						END
					ELSE IF (@FilterField = 'Guid')
						BEGIN
						
							SET @Query = @Query + ' AND Replace (rt.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '	
						END
					ELSE IF (@FilterField = 'CreatedBy')
						BEGIN
							SET @Query = @Query + ' AND rt.CreatedBy like ''%'' + @FilterValue + ''%'' '	
						END
				END
				
				IF (@SortField IS NOT NULL AND LEN(@SortField) > 0)
					BEGIN
						SET @Query = @Query + ' ORDER BY ' + @SortField  + @OrderBy
					END
				
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue, @UniqueIdentifier=@UniqueIdentifier
			SET @Query='SELECT COUNT(*) as TotalItemCount FROM ckbx_ResponseTemplate rt INNER JOIN ckbx_FavoriteSurvey fs ON rt.ResponseTemplateId=fs.ResponseTemplateID
				  INNER JOIN ckbx_FormFolders ff on ff.ItemID=fs.ResponseTemplateID WHERE fs.UserID=@UniqueIdentifier AND ff.ItemType=''Form'''
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue, @UniqueIdentifier=@UniqueIdentifier
	RETURN
END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_FavoriteSurvey_IsFavorite]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****** Object:  StoredProcedure [ckbx_sp_FavoriteSurvey_IsFavorite]    Script Date: 11/28/2012 14:02:32 ******/

CREATE PROCEDURE [dbo].[ckbx_sp_FavoriteSurvey_IsFavorite] 
(
   @UniqueIdentifier nvarchar(511),
   @responseTemplateID nvarchar(255)
 ) 
AS
BEGIN
	DECLARE @Query nvarchar(3000)
	DECLARE @QueryParams nvarchar(500)
	SET @QueryParams = '@UniqueIdentifier nvarchar(255), @responseTemplateID nvarchar(255)'
	SET @Query='Select Count(*) as isFavorite from ckbx_FavoriteSurvey where userID=@UniqueIdentifier and responseTemplateID=@responseTemplateID'
	EXEC sp_executesql @Query, @QueryParams, @responseTemplateID = @responseTemplateID, @UniqueIdentifier=@UniqueIdentifier
	RETURN
END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_FavoriteSurvey_Remove]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****** Object:  StoredProcedure [ckbx_sp_FavoriteSurvey_Remove]    Script Date: 11/28/2012 14:01:35 ******/

CREATE PROCEDURE [dbo].[ckbx_sp_FavoriteSurvey_Remove]
	@userID varchar(255),
	@responseTemplateID varchar(255)
AS
BEGIN
	DELETE FROM ckbx_FavoriteSurvey WHERE userID=@userID AND responseTemplateId=@responseTemplateID
END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_FileUpload_AddAllowedFileType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_FileUpload_AddAllowedFileType]
(
	@TypeExtension nvarchar(10),
	@TypeDescription nvarchar(255)
)
AS
IF NOT EXISTS(SELECT TypeID FROM ckbx_FileUpload_AllowedFileType WHERE TypeExtension = @TypeExtension)
   BEGIN
      INSERT INTO ckbx_FileUpload_AllowedFileType (TypeExtension, TypeDescription) VALUES (@TypeExtension, @TypeDescription)
   END
ELSE
   BEGIN
      UPDATE 
         ckbx_FileUpload_AllowedFileType 
      SET
         TypeExtension = @TypeExtension,
         TypeDescription = @TypeDescription
      WHERE 
         TypeExtension = @TypeExtension
	END
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_FileUpload_GetAllowedFileTypes]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_FileUpload_GetAllowedFileTypes]
AS
   SELECT
      TypeID,
      TypeExtension,
      TypeDescription
   FROM
       ckbx_FileUpload_AllowedFileType
   ORDER BY
       TypeExtension ASC
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_FileUpload_GetFileByAnswerID]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_FileUpload_GetFileByAnswerID]
(
   @AnswerID bigint
)
AS
   SELECT 
	fu.FileID,
      fu.FileData,
      fu.[FileName], 
      fu.FileType,
      fu.FileSize,
      fu.FileGuid,
      ra.ResponseID,
      ra.AnswerID
   FROM 
      ckbx_FileUpload AS fu
      INNER JOIN ckbx_ItemData_FileUpload_Files AS fuf
      INNER JOIN ckbx_ResponseAnswers ra ON ra.AnswerID = fuf.AnswerID
      ON fu.FileID = fuf.FileID
 
   WHERE 
      fuf.AnswerID = @AnswerID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_FileUpload_GetFileByGuid]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_FileUpload_GetFileByGuid]
(
	@FileGuid uniqueidentifier
)
AS
	SELECT * FROM 
		  ckbx_FileUpload 
	   WHERE 
		  FileGuid = @FileGuid

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_FileUpload_GetFileByResponseTemplateID]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_FileUpload_GetFileByResponseTemplateID]
(
   @ResponseTemplateID int
)
AS
	SELECT 
		--Listfu.FileData,
		fu.[FileName], 
		fu.FileType,
		fu.FileSize,
		ra.AnswerID
	FROM 
		ckbx_FileUpload AS fu
	INNER JOIN ckbx_ItemData_FileUpload_Files AS fuf
		ON fu.FileID = fuf.FileID
	INNER JOIN ckbx_ResponseAnswers AS ra
		ON fuf.AnswerID = ra.AnswerID
	INNER JOIN ckbx_Response AS r
		ON ra.ResponseID = r.ResponseID
	WHERE 
		r.ResponseTemplateID = @ResponseTemplateID
		AND (r.Deleted is null OR (r.Deleted is not null AND r.Deleted <> 1))
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_FileUpload_GetFileCountByResponseTemplateID]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_FileUpload_GetFileCountByResponseTemplateID]
(
   @ResponseTemplateID int
)
AS
	SELECT 
		count(fu.FileID)
	FROM 
		ckbx_FileUpload AS fu
	INNER JOIN ckbx_ItemData_FileUpload_Files AS fuf
		ON fu.FileID = fuf.FileID
	INNER JOIN ckbx_ResponseAnswers AS ra
		ON fuf.AnswerID = ra.AnswerID
	INNER JOIN ckbx_Response AS r
		ON ra.ResponseID = r.ResponseID
	WHERE 
		r.ResponseTemplateID = @ResponseTemplateID
		AND (r.Deleted is null OR (r.Deleted is not null AND r.Deleted <> 1))
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_FileUpload_InsertFile]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_FileUpload_InsertFile]
(
   @FileData image,
   @FileName nvarchar(255),
   @FileType nvarchar(10),
   @FileSize int,
   @FileGuid uniqueidentifier,
   @FileID int output
)
AS
INSERT INTO 
   ckbx_FileUpload (FileData, [FileName], FileType, FileSize, FileGuid)
   VALUES (@FileData, @FileName, @FileType, @FileSize, @FileGuid)
 
SELECT @FileID = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_FileUpload_RemoveAllowedFileType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_FileUpload_RemoveAllowedFileType]
(
   @TypeExtension nvarchar(10)
)
AS
   DELETE FROM
       ckbx_FileUpload_AllowedFileType
   WHERE
       TypeExtension = @TypeExtension
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_ClearMap]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Filter_ClearMap]
(
  @ParentID int,
  @ParentType varchar(50)
)
AS
  DELETE FROM ckbx_Filter_Map WHERE ParentID = @ParentID AND ParentType = @ParentType


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_CreateItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_Filter_CreateItem]
(
  @FilterID int,
  @ItemID int
)
AS
  IF NOT EXISTS(SELECT FilterID FROM ckbx_Filter_Item WHERE FilterID = @FilterID)
    BEGIN
      INSERT INTO ckbx_Filter_Item
        (FilterID, ItemID)
      VALUES
        (@FilterID, @ItemID)
    END



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_Filter_Delete]
(
  @FilterID int
)
AS
   DELETE FROM ckbx_Filter_Map WHERE FilterID = @FilterID
   DELETE FROM ckbx_Filter WHERE FilterID = @FilterID




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_DeleteItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Filter_DeleteItem]
(
  @FilterID int
)
AS
  DELETE FROM ckbx_Filter_Item WHERE FilterID = @FilterID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_DeleteMap]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Filter_DeleteMap]
(
  @FilterID int,
  @ParentID int,
  @ParentType varchar(50)
)
AS
  DELETE FROM ckbx_Filter_Map WHERE FilterID = @FilterID AND ParentID = @ParentID AND ParentType = @ParentType


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_DeleteProfile]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Filter_DeleteProfile]
(
  @FilterID int
)
AS
	DELETE FROM ckbx_Filter_Profile WHERE FilterID = @FilterID
	DELETE FROM ckbx_Filter WHERE FilterID = @FilterID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_DeleteResponse]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Filter_DeleteResponse]
(
  @FilterID int
)
AS
	DELETE FROM ckbx_Filter_Response WHERE FilterID = @FilterID
	DELETE FROM ckbx_Filter WHERE FilterID = @FilterID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_GetItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Filter_GetItem]
(
  @FilterID int
)
AS
  SELECT 
    f.FilterID, f.Operator, f.Value, f.ModifiedDate, itf.ItemID, ft.FilterTypeName
  FROM
    ckbx_Filter f
    INNER JOIN ckbx_Filter_Item itf ON itf.FilterID = f.FilterID
	INNER JOIN ckbx_FilterType ft ON ft.FilterTypeID = f.FilterTypeId
  WHERE
    f.FilterID = @FilterID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_GetProfile]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Filter_GetProfile]
(
	@FilterID int
)
AS
  SELECT
	f.FilterID,
    f.Operator,
    f.Value,
    f.FilterTypeID,
	ft.FilterTypeName,
    fp.ProfileField
  FROM
	ckbx_Filter f
	INNER JOIN ckbx_FilterType ft ON ft.FilterTypeID = f.FilterTypeID
	INNER JOIN ckbx_Filter_Profile fp ON fp.FilterID = f.FilterID
  WHERE
	f.FilterID = @FilterID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_GetResponse]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Filter_GetResponse]
(
	@FilterID int
)
AS
  SELECT
	f.FilterID,
    f.Operator,
    f.Value,
    f.FilterTypeID,
	ft.FilterTypeName,
    fr.ResponseProperty
  FROM
	ckbx_Filter f
	INNER JOIN ckbx_FilterType ft ON ft.FilterTypeID = f.FilterTypeID
	INNER JOIN ckbx_Filter_Response fr ON fr.FilterID = f.FilterID
  WHERE
	f.FilterID = @FilterID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_GetTypeInfo]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Filter_GetTypeInfo]
(
   @FilterTypeName varchar(64)
)
AS
  SELECT FilterTypeID, FilterTypeName, DataTypeAssemblyName, DataTypeClassName FROM ckbx_FilterType WHERE FilterTypeName = @FilterTypeName


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_GetTypeName]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Filter_GetTypeName]
(
   @FilterID int
)
AS
  SELECT 
	f.FilterID, ft.FilterTypeID, ft.FilterTypeName, ft.DataTypeAssemblyName, ft.DataTypeClassName 
  FROM 
	ckbx_Filter f
	INNER JOIN ckbx_FilterType ft ON ft.FilterTypeID = f.FilterTypeID
  WHERE 
	f.FilterID = @FilterID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_Insert]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Filter_Insert]
(
  @Operator varchar(50),
  @Value nvarchar(255),
  @FilterTypeName varchar(64),
  @ModifiedDate datetime,
  @FilterID int out
)
AS
  DECLARE @FilterTypeID int

  SELECT @FilterTypeID = FilterTypeID FROM ckbx_FilterType WHERE FilterTypeName = @FilterTypeName
  
INSERT INTO ckbx_Filter
    (Operator, [Value], FilterTypeID, ModifiedDate)
  VALUES
    (@Operator, @Value, @FilterTypeID, @ModifiedDate)

  SELECT @FilterID = @@IDENTITY


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_InsertMap]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Filter_InsertMap]
(
  @FilterID int,
  @ParentID int,
  @ParentType varchar(50)
)
AS
  IF NOT EXISTS(Select FilterID FROM ckbx_Filter_Map WHERE FilterID = @FilterID AND ParentID = @ParentID AND ParentType = @ParentType)
    BEGIN
      INSERT INTO ckbx_Filter_Map
        (FilterID, ParentID, ParentType)
      VALUES
        (@FilterID, @ParentID, @ParentType)
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_InsertProfile]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Filter_InsertProfile]
(
	@FilterID int,
	@ProfileField nvarchar(510) 
)
AS
	IF NOT EXISTS(Select FilterID FROM ckbx_Filter_Profile WHERE FilterID = @FilterID)
		BEGIN
			INSERT INTO ckbx_Filter_Profile (FilterID, ProfileField) VALUES (@FilterID, @ProfileField)
		END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_InsertResponse]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Filter_InsertResponse]
(
	@FilterID int,
	@ResponseProperty nvarchar(510) 
)
AS
	IF NOT EXISTS(Select FilterID FROM ckbx_Filter_Response WHERE FilterID = @FilterID)
		BEGIN
			INSERT INTO ckbx_Filter_Response (FilterID, ResponseProperty) VALUES (@FilterID, @ResponseProperty)
		END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Filter_Update]
(
  @FilterID int,
  @Operator varchar(50),
  @Value nvarchar(255),
  @ModifiedDate datetime
)
AS
  UPDATE ckbx_Filter
  SET
    Operator = @Operator,
    Value = @Value,
    ModifiedDate = @ModifiedDate
  WHERE
    FilterID = @FilterID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filter_UpdateItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Filter_UpdateItem]
(
  @FilterID int,
  @ItemID int
)
AS
  UPDATE ckbx_Filter_Item
  SET
    ItemID = @ItemID
  WHERE
   FilterID = @FilterID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Filters_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Filters_Get]
(
  @ParentID int,
  @ParentType varchar(50)
)
AS
  SELECT 
    f.FilterID, f.Operator, f.Value, f.ModifiedDate, fm.ParentID, fm.ParentType
  FROM
    ckbx_Filter_Map fm
    INNER JOIN ckbx_Filter f ON f.FilterID = fm.FilterID
  WHERE
    fm.ParentID = @ParentID
    AND fm.ParentType = @ParentType

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Folder_Create]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Folder_Create]
(
  @FolderName nvarchar(255),
  @FolderDescription nvarchar(1000),
  @CreatedBy nvarchar(511),
  @AclID int,
  @DefaultPolicyID int,
  @FolderID int out
)
AS
  INSERT INTO ckbx_Folder
    (DateCreated, LastModified, CreatedBy, AclID, DefaultPolicy, [Name], [Description])
  VALUES
    (getDate(), getDate(), @CreatedBy, @AclID, @DefaultPolicyID, @FolderName, @FolderDescription)

  SELECT @FolderID = @@Identity





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Folder_CreateFormFolder]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Folder_CreateFormFolder]
(
	@FolderID int
)
AS

INSERT INTO ckbx_FormFolders  (ItemID, NumLevel, ItemType)  VALUES  (@FolderID, 0, 'Folder')

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Folder_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Folder_Delete]
(
	@FolderID int
)
AS

	DECLARE @AclID int, @DefaultPolicy int
	SELECT @AclID = AclID, @DefaultPolicy = DefaultPolicy FROM ckbx_Folder WHERE FolderID = @FolderID

	DELETE FROM ckbx_FormFolders where ItemID = @FolderID AND ItemType = 'Folder'

	DELETE FROM ckbx_Folder WHERE FolderID = @FolderID
	
	exec ckbx_sp_ACL_DeletePolicy @DefaultPolicy

	exec ckbx_sp_ACL_Delete @AclID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Folder_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE  PROCEDURE [dbo].[ckbx_sp_Folder_Get]
(
  @FolderID int
)
AS
  SELECT 
	FolderID, 
	DateCreated, 
	LastModified, 
	CreatedBy, 
	AclID, 
	DefaultPolicy, 
	[Name], 
	[Description],
	(
		SELECT 
			COUNT(ff.ItemId) 
		FROM 
			ckbx_FormFolders ff
			INNER JOIN ckbx_Template t ON t.TemplateID = ff.ItemID
		WHERE 
			ff.ItemType = 'Form' 
			AND ff.AncestorID = ckbx_Folder.FolderID
			AND (t.Deleted IS NULL OR t.Deleted = 0)
	) AS ChildrenCount
  FROM ckbx_Folder WHERE FolderID = @FolderID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Folder_GetTemplates]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Folder_GetTemplates]
(
	@FolderID int
)
AS
	SELECT ItemID FROM ckbx_TemplatesAndFoldersView WHERE AncestorID = @FolderID ORDER BY ItemType, ItemName

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Folder_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Folder_Update]
(
	@FolderID int,
	@FolderName nvarchar (255),
	@FolderDescription nvarchar (1000),
	@CreatedBy nvarchar(611)
)
AS
	UPDATE ckbx_Folder SET Name = @FolderName, [Description] = @FolderDescription, CreatedBy = @CreatedBy,  LastModified = GetDate() WHERE
	FolderID = @FolderID 
	RETURN


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_GetCheckboxInstallationDate]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[ckbx_sp_GetCheckboxInstallationDate]
as
begin
select InstallDate from ckbx_Product_Info
where ProductName = 'CheckboxWeb Survey' and [Version] like '6%'
end	


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Group_AddMember]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_Group_AddMember]
(
	@GroupID int,
	@MemberID nvarchar (611)
)
AS
	IF NOT EXISTS(Select MemberUniqueIdentifier FROM ckbx_GroupMembers WHERE MemberUniqueIdentifier = @MemberID AND GroupID = @GroupID)
		BEGIN
			INSERT INTO ckbx_GroupMembers 
				(GroupID, MemberUniqueIdentifier)
			VALUES 
				(@GroupID, @MemberID)
		END
	



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Group_Create]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Group_Create]
(
	@GroupName nvarchar (510),
	@Description nvarchar (510) = null,
	@CreatedBy nvarchar (611),
	@GroupID int output,
	@GroupACLID int output,
    @GroupDefaultPolicyID int output
)
AS
	/* SET NOCOUNT ON */
	INSERT INTO ckbx_Group (GroupName, Description, DateCreated, CreatedBy) 
	VALUES (@GroupName, @Description, GetDate(), @CreatedBy)
	SELECT @GroupID = @@Identity
	
	-- Create an AccessControlList entry for the CreatedBy user
	-- create a new Acl
	DECLARE @AclID int
	EXEC ckbx_sp_ACL_Create @AclID out

	UPDATE ckbx_Group set AclID = @aclID WHERE GroupID = @GroupID
	SELECT @GroupACLID = @AclID

	-- Create the Policy for the first Entry
	DECLARE @PolicyID int
	exec ckbx_sp_ACL_CreatePolicy 'Checkbox.Users.Security.GroupPolicy', 'Checkbox', @PolicyID out
	
	exec ckbx_sp_ACL_AddPolicyPermission @PolicyID, 'Group.Delete'
	exec ckbx_sp_ACL_AddPolicyPermission @PolicyID, 'Group.Edit'
	exec ckbx_sp_ACL_AddPolicyPermission @PolicyID, 'Group.View'
	exec ckbx_sp_ACL_AddPolicyPermission @PolicyID, 'Group.ManageUsers'
	exec ckbx_sp_ACL_AddEntry @AclID, 'Prezza.Framework.Security.ExtendedPrincipal', @CreatedBy, @PolicyID

	--Create the default policy
	exec ckbx_sp_ACL_CreatePolicy 'Checkbox.Users.Security.GroupPolicy', 'Checkbox', @GroupDefaultPolicyID out
	UPDATE ckbx_Group set DefaultPolicy = @GroupDefaultPolicyID WHERE GroupID = @GroupID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Group_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Group_Delete]
(
	@GroupID int
)
AS
        /* GROUP ID = 1 is RESERVED for the Everyone Group, which can't be deleted */
        IF @GroupID = 1
        BEGIN
			RETURN
        END

	/* Get Default Policy ID */
	DECLARE @DefaultPolicyID int
	SELECT @DefaultPolicyID = DefaultPolicy FROM ckbx_Group WHERE GroupID = @GroupID

	/* Delete Default Policy */
	IF NOT(@DefaultPolicyID IS NULL)
  	  BEGIN
	    EXEC ckbx_sp_ACL_DeletePolicy @DefaultPolicyID
      END

	/* Delete ACL Entries */
	DECLARE @AclID int
	SELECT @AclID = AclID FROM ckbx_Group WHERE GroupID = @GroupID

	EXEC ckbx_sp_ACL_DeleteAllEntries @AclID

	/* Delete User Map */
	DELETE FROM ckbx_GroupMembers WHERE GroupID = @GroupID

	/* Delete Panels */
    SELECT PanelID INTO #tmpPanelIdsToDelete FROM ckbx_GroupPanel WHERE GroupID = @GroupId

	DELETE FROM ckbx_Invitation_Responses WHERE RecipientId IN (Select RecipientId FROM ckbx_InvitationRecipients WHERE PanelId IN (Select PanelID from #tmpPanelIdsToDelete))
	DELETE FROM ckbx_InvitationRecipients WHERE PanelId IN (Select PanelID from #tmpPanelIdsToDelete)
	DELETE FROM ckbx_InvitationPanels WHERE PanelId IN (Select PanelID from #tmpPanelIdsToDelete)
    DELETE FROM ckbx_GroupPanel WHERE PanelID IN (Select PanelID from #tmpPanelIdsToDelete)
	DELETE FROM ckbx_Panel WHERE PanelID IN (Select PanelID from #tmpPanelIdsToDelete)

	/* Delete Group */
	DELETE ckbx_Group WHERE GroupID = @GroupID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Group_GetGroup]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Group_GetGroup]
(
	@GroupID int
)
AS
	/* SET NOCOUNT ON */
	SELECT 
		*,
		(SELECT COUNT(MemberUniqueIdentifier) FROM ckbx_GroupMembers WHERE ckbx_GroupMembers.GroupID = ckbx_Group.GroupId) As MemberCount
	FROM ckbx_Group WHERE GroupID = @GroupID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Group_GetIdFromName]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Group_GetIdFromName]
(
  @GroupName nvarchar(510),
  @GroupId int out
)
AS
  SELECT @GroupID = GroupID FROM ckbx_Group WHERE GroupName = @GroupName
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Group_GetIdMemberships]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_Group_GetIdMemberships]
(
	@UniqueIdentifier nvarchar(611)
)
AS
  SELECT
    ckbx_Group.GroupID as GroupID,
    ckbx_Group.GroupName as GroupName,
    ckbx_Group.Description as GroupDescription
  FROM
    ckbx_GroupMembers
    INNER JOIN ckbx_Group ON ckbx_Group.GroupID = ckbx_GroupMembers.GroupID
  WHERE
    ckbx_GroupMembers.MemberUniqueIdentifier = @UniqueIdentifier





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Group_GetMemberCount]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_Group_GetMemberCount]
(
	@GroupID int
)
AS
	/* SET NOCOUNT ON */
	SELECT COUNT(MemberUniqueIdentifier) FROM ckbx_GroupMembers WHERE GroupID = @GroupID 
	RETURN 




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Group_GetMembers]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_Group_GetMembers]
(
	@GroupID int
)
AS
	/* SET NOCOUNT ON */
	SELECT MemberUniqueIdentifier FROM ckbx_GroupMembers WHERE GroupID = @GroupID ORDER BY MemberUniqueIdentifier
	RETURN 




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Group_IsAMember]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Group_IsAMember]
(
@GroupID int,
@MemberID nvarchar (611)
)
AS
SELECT
count(MemberUniqueIdentifier)
FROM
ckbx_GroupMembers
WHERE
GroupID = @GroupID
AND lower(MemberUniqueIdentifier) = lower(@MemberID)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Group_IsNameUnique]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Group_IsNameUnique]
(
	@GroupName nvarchar (510),
	@GroupId int
)
AS

--Verify that a new group has a unique name
if (@GroupId < 0)
	BEGIN
		SELECT 
			count(GroupID) as groupCount
		FROM 
			ckbx_Group as g
		WHERE
			LOWER(g.GroupName) = LOWER(@GroupName)
	END
--Verify that an update has not produced a name conflict
ELSE
	BEGIN
		SELECT 
			count(GroupID) as groupCount
		FROM 
			ckbx_Group as g
		WHERE
			g.GroupID != @GroupId
			AND LOWER(g.GroupName) = LOWER(@GroupName)
	END
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Group_RemoveMember]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_Group_RemoveMember]
(
	@GroupID int,
	@MemberID nvarchar (611)
)
AS
	DELETE ckbx_GroupMembers WHERE GroupID = @GroupID AND MemberUniqueIdentifier = @MemberID
	RETURN 





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Group_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Group_Update]
(
	@GroupID int,
	@GroupName nvarchar (510),
	@Description nvarchar (510) = null,
	@Modifier nvarchar(611) = null
	
)
AS
	/* GROUP ID = 1 is RESERVED for the Everyone Group, which can't be updated */
	IF @GroupID = 1
	BEGIN
		RETURN
	END

	UPDATE	ckbx_Group
	SET		GroupName = @GroupName,
			[Description] = @Description,
			ModifiedBy = @Modifier,
			ModifiedDate = getdate()						
	WHERE	GroupID = @GroupID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Help_GetContextLink]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Help_GetContextLink]
(
	@SourceFilePath nvarchar(1024),
	@SkinName nvarchar(255)
)
AS
	
	SELECT HelpFileID FROM ckbx_HelpContextMap WHERE SourceFilePath = @SourceFilePath AND HelpSkinName = @SkinName
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Identity_AddToRole]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






/*******************************************************************************
*  This procedure adds a user and a role to the UserRoles mapping table.  If the user already belongs to the role,
*  it just returns.  If not, it adds the user to that role.
*******************************************************************************/
CREATE PROCEDURE [dbo].[ckbx_sp_Identity_AddToRole]
(
  @UniqueIdentifier nvarchar(611),
  @RoleName nvarchar(100)
)
AS
BEGIN

	SET NOCOUNT ON

	DECLARE @Count int
	DECLARE @RoleID int

	SELECT	@RoleID = RoleID
	FROM	ckbx_Role
	WHERE	RoleName = @RoleName

	IF @RoleID IS NOT NULL
	BEGIN

		SELECT @Count = Count(UniqueIdentifier) FROM ckbx_IdentityRoles WHERE UniqueIdentifier = @UniqueIdentifier AND RoleID = @RoleID

		IF @Count = 0
		BEGIN 
		INSERT INTO ckbx_IdentityRoles (UniqueIdentifier, RoleID) Values (@UniqueIdentifier, @RoleID)
		END

	END
END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Identity_ChangeOwnership]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Identity_ChangeOwnership]
(
	@OldUniqueIdentifier nvarchar(511),
	@NewUniqueIdentifier nvarchar(511)
)
AS

	UPDATE ckbx_Template SET CreatedBy = @NewUniqueIdentifier WHERE CreatedBy = @OldUniqueIdentifier
	UPDATE ckbx_ResponseTemplate SET CreatedBy = @NewUniqueIdentifier WHERE CreatedBy = @OldUniqueIdentifier
	UPDATE ckbx_StyleTemplate SET CreatedBy = @NewUniqueIdentifier WHERE CreatedBy = @OldUniqueIdentifier
	UPDATE ckbx_Group SET CreatedBy = @NewUniqueIdentifier WHERE CreatedBy = @OldUniqueIdentifier
	UPDATE ckbx_Panel SET CreatedBy = @NewUniqueIdentifier WHERE CreatedBy = @OldUniqueIdentifier
	UPDATE ckbx_Folder SET CreatedBy = @NewUniqueIdentifier WHERE CreatedBy = @OldUniqueIdentifier
	UPDATE ckbx_Invitation SET CreatedBy = @NewUniqueIdentifier WHERE CreatedBy = @OldUniqueIdentifier
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Identity_CountUnencrypted]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Identity_CountUnencrypted]
AS
	SELECT 
		COUNT(*) AS IdentityCount
	FROM 
		ckbx_Credential 
	WHERE 
		([Encrypted] is null
		OR [Encrypted] = 0)
		AND 
		(Domain IS NULL OR Domain = '' OR Domain = ' ')
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Identity_Create]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Identity_Create]
(
  @UserName nvarchar(611),
  @Domain nvarchar(611),
  @Password nvarchar(611),
  @Email nvarchar(611),
  @GUID uniqueidentifier,
  @Encrypted bit,
  @CreatedBy nvarchar(611),
  @UniqueIdentifier nvarchar(611) OUTPUT,
  @StatusMessage nvarchar(611) output
)
AS
  SET @StatusMessage = ''

  IF @Password IS NULL
  BEGIN
    SET @Password = left(newid(),8)
  END

  IF @Domain IS NULL OR @Domain = ''
  BEGIN
    SET @UniqueIdentifier = @UserName
    SET @Domain = NULL
  END
  ELSE
  BEGIN
    SET @UniqueIdentifier = @Domain + '/' + @UserName
  END

  --Verify the user does not exist
  DECLARE @existingCount int
  SELECT @existingCount = COUNT(*) FROM ckbx_Credential WHERE UniqueIdentifier = @UniqueIdentifier
  
  IF @existingCount > 0
    BEGIN 
      SET @StatusMessage = 'User already exists.'
      SET @UniqueIdentifier = ''
      RETURN
    END
  

  INSERT INTO ckbx_Credential
  (
    UserName, 
    [Password],
    Domain,
    [UniqueIdentifier],
    [GUID],
    Encrypted,
	Email,
	Created,
	CreatedBy 
  )
  VALUES
  (
    @UserName,  
    @Password,
    @Domain,
    @UniqueIdentifier,
    @GUID,
    @Encrypted,
	@Email,
	getDate(),
	@CreatedBy 
   )



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Identity_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_Identity_Delete]
(
    @UniqueIdentifier nvarchar(611),
    @DeleteResponses bit,
    @StatusMessage nvarchar(255) output
)
AS
	--check to make sure that the last admin account is not deleted
	DECLARE @AdminRoleID int
	SELECT @AdminRoleID = RoleID FROM [ckbx_Role] WHERE RoleName = 'System Administrator'
	
	DECLARE @UserRoleID int
	SELECT @UserRoleID = RoleID FROM [ckbx_IdentityRoles] WHERE [UniqueIdentifier] = @UniqueIdentifier

	IF @UserRoleID = @AdminRoleID
		BEGIN
			DECLARE @AdminCount int
			SELECT @AdminCount = count([ckbx_IdentityProfile].[UserName])
			FROM
				[ckbx_IdentityRoles]
			INNER JOIN
				[ckbx_IdentityProfile]
				ON [ckbx_IdentityRoles].UniqueIdentifier = [ckbx_IdentityProfile].UniqueIdentifier
			WHERE RoleID = @AdminRoleID

			IF @AdminCount = 1
				BEGIN
					SET @StatusMessage = 'You can not delete the only System Administrator account.'
					RETURN
				END
		END


    --ckbx_AccessControlEntry, ckbx_AccessControlEntries, ckbx_Policy, ckbx_PolicyPermissions
    EXEC ckbx_sp_ACL_DeleteUserEntries @UniqueIdentifier

    --ckbx_Credential
    DELETE FROM ckbx_Credential WHERE UniqueIdentifier = @UniqueIdentifier

   --Remove from groups
   DELETE FROM ckbx_GroupMembers WHERE MemberUniqueIdentifier = @UniqueIdentifier

   --Remove from Identity Roles -- SPECIAL CHECK!!  Do not allow removing of only system administrator!!!
   DELETE FROM ckbx_IdentityRoles WHERE UniqueIdentifier  = @UniqueIdentifier
  
   --Invitation recipients & responses
   DELETE FROM ckbx_Invitation_Responses WHERE RecipientID IN (SELECT RecipientID FROM ckbx_InvitationRecipients WHERE [UniqueIdentifier] = @UniqueIdentifier)

   DELETE FROM ckbx_InvitationRecipients WHERE UniqueIdentifier  = @UniqueIdentifier
    
   --Custom user fields
   DELETE FROM ckbx_CustomUserFieldMap WHERE [UniqueIdentifier] = @UniqueIdentifier
    
    IF @DeleteResponses = 1
      BEGIN
        --Delete Responses
        EXEC ckbx_sp_Response_DeleteForUser @UniqueIdentifier
      END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Identity_Exists]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Identity_Exists]
(
	@UniqueIdentifier nvarchar(611)
)
AS
	SELECT COUNT([UniqueIdentifier]) FROM ckbx_Credential WHERE [UniqueIdentifier] = @UniqueIdentifier

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Identity_FindByEmail]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create PROCEDURE [dbo].[ckbx_sp_Identity_FindByEmail]
(
	@Email nvarchar(255),
    @PageNumber int,
    @ResultsPerPage int
)
AS

	IF object_id('tempdb..#results') IS NOT NULL
		BEGIN
			DROP TABLE #results
		END
	
	CREATE TABLE #results
	(
		[UniqueIdentifier] nvarchar(511)
	)

	--Insert into results
	INSERT INTO #results
		SELECT
			[UniqueIdentifier]
		FROM
			ckbx_Credential WHERE Email LIKE '%' + REPLACE(@Email, '', '''') + '%'



	IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			--Select all results
			SELECT [UniqueIdentifier] FROM #results
		END
	ELSE
		BEGIN
			--Select a page of results
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10
								
			--Add column for ordering
			ALTER TABLE #results ADD ItemIndex INT IDENTITY(1, 1);

			--Select Rows
			SELECT * FROM #results WHERE ItemIndex BETWEEN @StartRow AND @EndRow
		END

	
	--Select total count
	SELECT COUNT(*) AS TotalRecords FROM  #results
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Identity_GetByGuid]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Identity_GetByGuid]
(
  @Guid uniqueidentifier
)
AS
  SELECT * FROM ckbx_Credential WHERE [GUID] = @Guid


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Identity_GetPassword]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Identity_GetPassword]
(
	@UniqueIdentifier nvarchar(511),
	@Password nvarchar(255) out
)
AS
  SELECT @Password = [Password] FROM ckbx_Credential WHERE [UniqueIdentifier] = @UniqueIdentifier
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Identity_GetRoles]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_Identity_GetRoles]
(
	@UniqueIdentifier nvarchar (255)
)
AS
	/* SET NOCOUNT ON */
	SELECT r.RoleName FROM ckbx_IdentityRoles ir 
	JOIN ckbx_Role r ON ir.RoleID = r.RoleID
	WHERE ir.UniqueIdentifier = @UniqueIdentifier
	
	RETURN 




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Identity_List]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Identity_List]
(
  @PageIndex int,
  @PageSize int,
  @SortField varchar(64),
  @SortAscending bit,
  @FilterField varchar(64),
  @FilterValue nvarchar(255),
  @StartDate datetime,
  @DateFieldName varchar(100)
)
AS
	DECLARE @OrderBy varchar(64)
		
  	--Create the order-by clause, if any
	IF (@SortField IS NOT NULL AND LEN(@SortField) > 0)
		BEGIN
			IF @SortAscending = 1
				BEGIN
					SET @OrderBy = 'ORDER BY ckbx_Credential.' + @SortField + ' ASC'
				END
			ELSE
				BEGIN
					SET @OrderBy = 'ORDER BY ckbx_Credential.' + @SortField + ' DESC'
				END
		END
	ELSE
		BEGIN
			SET @OrderBy = 'ORDER BY ckbx_Credential.UniqueIdentifier ASC'
		END
		
	DECLARE @Query NVARCHAR(max)
	DECLARE @QueryParams NVARCHAR(500)
	SET @QueryParams = '@FilterValue nvarchar(255)'
	DECLARE @CountQuery NVARCHAR(max)
	DECLARE @DateFilterClause NVARCHAR(500)
	SET @DateFilterClause = ''
	DECLARE @ValueFilterClause NVARCHAR(1000)
	SET @ValueFilterClause = ''
	declare @joinProfileProperties bit 
	SET @joinProfileProperties = 0
	
	if @DateFieldName is not null and @DateFieldName <> ''
	begin
		set @DateFilterClause = ' 
			AND ' + @DateFieldName + ' > ''' + cast (@StartDate as varchar(100)) + ''' '
	end
	
	if @FilterValue IS NOT NULL AND LEN(@FilterValue) > 0
	begin
		if @FilterField IS NOT NULL AND LEN(@FilterField) > 0
		begin
			set @ValueFilterClause = ' AND ckbx_Credential.' + @FilterField + ' LIKE ''%'' + @FilterValue + ''%'' '
		end
		else
		begin
			set @ValueFilterClause = ' AND (ckbx_Credential.[UniqueIdentifier] LIKE ''%'' + @FilterValue + ''%'' 
				OR Email LIKE ''%'' + @FilterValue + ''%''
				OR (cufm.Value like ''%'' + @FilterValue + ''%'') and (cuf.Hidden is null or cuf.Hidden = 0))
			'
			set @joinProfileProperties = 1
		end
	end
	
	set @ValueFilterClause = @ValueFilterClause + @DateFilterClause

	
	SET @CountQuery = 'SELECT COUNT(distinct ckbx_Credential.UniqueIdentifier) AS TotalRecords FROM ckbx_Credential '
	
	IF @PageIndex <= 0 OR @PageSize <=0
		BEGIN
			DECLARE @BaseQuery NVARCHAR(max)
		
			SET @BaseQuery = '
				SELECT distinct
					ckbx_Credential.UserName,
					ckbx_Credential.[Password],
					ckbx_Credential.Domain,
					ckbx_Credential.[UniqueIdentifier],
					ckbx_Credential.[GUID],
					ckbx_Credential.Encrypted,
					ckbx_Credential.Email,
					ckbx_Credential.Created,
					ckbx_Credential.LastActivity,
					ckbx_Credential.LastLogin,
					ckbx_Credential.LastPasswordChange,
					ckbx_Credential.LastLockedOut,
					ckbx_Credential.FailedLogins,
					ckbx_Credential.LockedOut
					
				FROM
					ckbx_Credential '
			if @joinProfileProperties = 1 
			begin
				set @BaseQuery = @BaseQuery + '		
					left outer join ckbx_CustomUserFieldMap cufm on ckbx_Credential.[UniqueIdentifier] = cufm.[UniqueIdentifier]
					left outer join ckbx_CustomUserField cuf on cufm.CustomUserFieldID = cuf.CustomUserFieldID
					 '
				set @CountQuery = @CountQuery + '		
					left outer join ckbx_CustomUserFieldMap cufm on ckbx_Credential.[UniqueIdentifier] = cufm.[UniqueIdentifier]
					left outer join ckbx_CustomUserField cuf on cufm.CustomUserFieldID = cuf.CustomUserFieldID
					 '
			end 

					
		
			SET @Query = @BaseQuery + ' WHERE 1 = 1 ' +  @ValueFilterClause + ' ' + @OrderBy
			SET @CountQuery = @CountQuery + ' WHERE 1 = 1 ' + @ValueFilterClause
		
			print @Query	
			--Results
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			print @CountQuery
			--Count
			exec sp_executesql @CountQuery, @QueryParams, @FilterValue = @FilterValue

		END
	ELSE
		BEGIN
			DECLARE @PageQuery NVARCHAR(max)
			
			DECLARE @RowStart int
			DECLARE @RowEnd int
			
			SET @RowStart = @PageSize * (@PageIndex - 1) + 1;
			SET @RowEnd = @RowStart + @PageSize - 1;
			
			DECLARE @SelectQuery NVARCHAR(max)
			SET @SelectQuery = 
			' 
			With CredentialTemp AS
				( 
				select ckbx_Credential.*, ROW_NUMBER() 
 						OVER 
						(' + @OrderBy + ') AS RowNumber 
				from (
					SELECT distinct
						ckbx_Credential.UserName,
						ckbx_Credential.[Password],
						ckbx_Credential.Domain,
						ckbx_Credential.[UniqueIdentifier],
						ckbx_Credential.[GUID],
						ckbx_Credential.Encrypted,
						ckbx_Credential.Email,
						ckbx_Credential.Created,
						ckbx_Credential.LastActivity,
						ckbx_Credential.LastLogin,
						ckbx_Credential.LastPasswordChange,
						ckbx_Credential.LastLockedOut,
						ckbx_Credential.FailedLogins,
						ckbx_Credential.LockedOut
					FROM 
						ckbx_Credential '

			if @joinProfileProperties = 1 
			begin
				set @SelectQuery = @SelectQuery + '		
					left outer join ckbx_CustomUserFieldMap cufm on ckbx_Credential.[UniqueIdentifier] = cufm.[UniqueIdentifier]
					left outer join ckbx_CustomUserField cuf on cufm.CustomUserFieldID = cuf.CustomUserFieldID
					 '
				set @CountQuery = @CountQuery + '		
					left outer join ckbx_CustomUserFieldMap cufm on ckbx_Credential.[UniqueIdentifier] = cufm.[UniqueIdentifier]
					left outer join ckbx_CustomUserField cuf on cufm.CustomUserFieldID = cuf.CustomUserFieldID
					 '
			end 						
			
			SET @PageQuery =	
				' SELECT 
					*
				FROM 
					CredentialTemp
				WHERE 
					RowNumber BETWEEN ' + CAST(@RowStart AS VARCHAR(10)) + ' AND ' + CAST(@RowEnd AS VARCHAR(10))

			SET @Query = @SelectQuery + ' WHERE 1 = 1 ' + @ValueFilterClause + ') ckbx_Credential )' + @PageQuery
			SET @CountQuery = @CountQuery + ' WHERE 1 = 1 ' + @ValueFilterClause
			
			PRINT @Query
			--Results
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			
			--Count
			PRINT @CountQuery
			exec sp_executesql @CountQuery, @QueryParams,@FilterValue = @FilterValue
	END







GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Identity_ListUnencrypted]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Identity_ListUnencrypted]
AS
		SELECT 
		[UniqueIdentifier],
		[Password],
		[Domain],
		[Email]
	FROM 
		ckbx_Credential 
	WHERE 
		([Encrypted] is null
		OR [Encrypted] = 0)
		AND 
		(Domain IS NULL OR Domain = '' OR Domain = ' ')

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Identity_RemoveFromRole]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[ckbx_sp_Identity_RemoveFromRole]
(
  @UniqueIdentifier nvarchar(611),
  @RoleName nvarchar(100)
)
AS
	SET NOCOUNT ON
	DECLARE @RoleID int

	SELECT	@RoleID = RoleID
	FROM	ckbx_Role
	WHERE	RoleName = @RoleName

	IF @RoleID IS NOT NULL
		BEGIN
			DELETE FROM ckbx_IdentityRoles WHERE RoleID = @RoleID AND UniqueIdentifier = @UniqueIdentifier
		END





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Identity_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [dbo].[ckbx_sp_Identity_Update]
(
    @OldUniqueIdentifier nvarchar(611),
    @NewUniqueIdentifier nvarchar(611),
    @UserName nvarchar(611) = null,
    @Domain nvarchar(611) = null,
    @Password nvarchar(611) = null,
    @Email nvarchar(611) = null,
    @ModifiedBy nvarchar(611) = null,
    @Encrypted int = 0
)
AS
--Length is intentionally not checked on email address in to allow a blank address to be set
IF ( (@Password IS NOT NULL) AND (@Email IS NOT NULL) )
  BEGIN
    UPDATE ckbx_Credential SET UserName = @UserName, 
                Domain = @Domain, 
                [Password] = @Password,
                [UniqueIdentifier] = @NewUniqueIdentifier,
                [Encrypted] = @Encrypted,
                [Email] = @Email,
                [ModifiedBy] = @ModifiedBy,
                [ModifiedDate] = getDate()
                WHERE [UniqueIdentifier] = @OldUniqueIdentifier
  END
ELSE IF ( (@Password IS NOT NULL) AND (@Email IS NULL) )
  BEGIN
    UPDATE ckbx_Credential SET UserName = @UserName, 
                Domain = @Domain, 
                [Password] = @Password,
                [UniqueIdentifier] = @NewUniqueIdentifier,
                [Encrypted] = @Encrypted,
                [ModifiedBy] = @ModifiedBy,
                [ModifiedDate] = getDate()
                WHERE [UniqueIdentifier] = @OldUniqueIdentifier
  END		
ELSE IF ( (@Password IS NULL) AND (@Email IS NOT NULL) )
  BEGIN
    UPDATE ckbx_Credential SET UserName = @UserName, 
                Domain = @Domain, 
                [UniqueIdentifier] = @NewUniqueIdentifier,
                [Encrypted] = @Encrypted,
                [Email] = @Email,
                [ModifiedBy] = @ModifiedBy,
                [ModifiedDate] = getDate()
                WHERE [UniqueIdentifier] = @OldUniqueIdentifier
  END
ELSE IF ( (@Password IS NULL) AND (@Email IS NULL) )
  BEGIN
    UPDATE ckbx_Credential SET UserName = @UserName, 
                Domain = @Domain, 
                [UniqueIdentifier] = @NewUniqueIdentifier,
                [Encrypted] = @Encrypted,
                [ModifiedBy] = @ModifiedBy,
                [ModifiedDate] = getDate()
                WHERE [UniqueIdentifier] = @OldUniqueIdentifier
  END
  
IF @NewUniqueIdentifier IS NOT NULL AND @NewUniqueIdentifier <> @OldUniqueIdentifier
  BEGIN  
	update ckbx_GroupMembers SET MemberUniqueIdentifier = @NewUniqueIdentifier WHERE MemberUniqueIdentifier = @OldUniqueIdentifier
	update ckbx_AccessControlEntry SET EntryIdentifier = @NewUniqueIdentifier WHERE EntryIdentifier = @OldUniqueIdentifier
	update ckbx_CustomUserFieldMap SET [UniqueIdentifier] = @NewUniqueIdentifier WHERE [UniqueIdentifier] = @OldUniqueIdentifier
	update ckbx_IdentityRoles SET [UniqueIdentifier] = @NewUniqueIdentifier WHERE [UniqueIdentifier] = @OldUniqueIdentifier
	update ckbx_InvitationRecipients SET [UniqueIdentifier] = @NewUniqueIdentifier WHERE [UniqueIdentifier] = @OldUniqueIdentifier
	update ckbx_Response SET [UniqueIdentifier] = @NewUniqueIdentifier WHERE [UniqueIdentifier] = @OldUniqueIdentifier
	update ckbx_FavoriteSurvey SET [UserID] = @NewUniqueIdentifier WHERE [UserID] = @OldUniqueIdentifier
	
	EXEC ckbx_sp_Identity_ChangeOwnership @OldUniqueIdentifier, @NewUniqueIdentifier
  END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Identity_UpdateLockOut]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


Create PROCEDURE [dbo].[ckbx_sp_Identity_UpdateLockOut]
(
    @UserName nvarchar(255),
    @FailedLogins int,
    @LockedOut bit
)
AS
	if @LockedOut = 1
		update ckbx_Credential set 
			FailedLogins = @FailedLogins, 
			LockedOut = @LockedOut, 
			LastLockedOut = getdate()
		where UserName = @UserName
	else
		update ckbx_Credential set 
			FailedLogins = @FailedLogins, 
			LockedOut = @LockedOut
			where UserName = @UserName

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Image_DeleteImage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Image_DeleteImage]
(
  @ImageID int
)
AS
  DELETE FROM ckbx_Image WHERE ImageID = @ImageID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Image_DeleteTempImages]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Image_DeleteTempImages]
(
  @MaxDate DateTime
)
AS
DELETE FROM 
	ckbx_Image
WHERE
	IsTemporary = 1
	AND DateAdded < @MaxDate
	
			
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Image_Find]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Image_Find]
(
  @ImageName nvarchar(255),
  @ExcludeFiles bit
)
AS
  IF @ExcludeFiles = 1
    BEGIN
      SELECT ImageID FROM ckbx_Image WHERE ImageName = @ImageName AND ImageData IS NOT NULL
    END
  ELSE
    BEGIN
	  SELECT ImageID FROM ckbx_Image WHERE ImageName = @ImageName
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Image_GetImage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_Image_GetImage]
(
	@ImageID int
)
AS
	SELECT ImageData,ContentType, ImageUrl, ImageName FROM ckbx_Image WHERE ImageID = @ImageID
	

	RETURN





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Image_InsertImage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Image_InsertImage]
(
	@File image = null,
	@ContentType nvarchar(50),
	@ImageUrl varchar(255) = null,
	@ImageName nvarchar(255) = null,
	@Guid varchar(50),
    @CreatedDate datetime,
    @IsTemporary bit,
	@ImageID int output
)
AS
INSERT INTO ckbx_Image (ImageData, ContentType, ImageUrl, ImageName, Guid, dateAdded, isTemporary) 
	VALUES (@File, @ContentType, @ImageUrl, @ImageName, @Guid, @CreatedDate, @IsTemporary)
	SELECT @ImageID = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddFileUploadAllowedFileType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Install_AddFileUploadAllowedFileType]
(
  @TypeExtension nvarchar(10),
  @TypeDescription nvarchar(255)
)
AS
  IF NOT EXISTS(SELECT TypeExtension FROM ckbx_FileUpload_AllowedFileType WHERE TypeExtension = @TypeExtension)
    BEGIN
      INSERT INTO ckbx_FileUpload_AllowedFileType
        (TypeExtension, TypeDescription)
      VALUES
        (@TypeExtension, @TypeDescription)
    END
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddFilterType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Install_AddFilterType]
(
  @FilterTypeName varchar(64),
  @DataTypeAssemblyName nvarchar(255),
  @DataTypeClassName nvarchar(255)
)
AS
  IF NOT EXISTS (SELECT FilterTypeName FROM ckbx_FilterType WHERE FilterTypeName = @FilterTypeName)
    BEGIN
		INSERT INTO ckbx_FilterType
			(FilterTypeName, DataTypeAssemblyName, DataTypeClassName)
		VALUES
			(@FilterTypeName, @DataTypeAssemblyName, @DataTypeClassName)
    END
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddHelpLink]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[ckbx_sp_Install_AddHelpLink]
(
  @SourceFilePath nvarchar(1024),
  @HelpIdentifier nvarchar(255),
  @HelpFileID int,
  @HelpSkinName nvarchar(255)
)
AS
IF NOT EXISTS(SELECT HelpFileIdentifier FROM ckbx_HelpContextMap WHERE HelpFileIdentifier = @HelpIdentifier)
	BEGIN
		INSERT INTO ckbx_HelpContextMap 
			(SourceFilePath, HelpFileIdentifier, HelpFileID, HelpSkinName)
		VALUES
			(@SourceFilePath, @HelpIdentifier,  @HelpFileID, @HelpSkinName)
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddItemAppearanceCode]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Install_AddItemAppearanceCode]
(
  @AppearanceCode nvarchar(255),
  @DataTypeName nvarchar(255),
  @DataTypeAssembly nvarchar(255)
)
AS
  IF NOT EXISTS(Select AppearanceCode FROM ckbx_ItemAppearanceCode WHERE AppearanceCode = @AppearanceCode)
    BEGIN
      INSERT INTO ckbx_ItemAppearanceCode
        (AppearanceCode, DataTypeName, DataTypeAssembly)
      VALUES
        (@AppearanceCode, @DataTypeName, @DataTypeAssembly)
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddItemAppearanceEditor]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Install_AddItemAppearanceEditor]
(
  @AppearanceCode nvarchar(255),
  @EditorTypeName nvarchar(255),
  @EditorTypeAssembly nvarchar(255)
)
AS
  IF NOT EXISTS(Select AppearanceCode FROM ckbx_ItemAppearanceEditor WHERE AppearanceCode = @AppearanceCode)
    BEGIN
      INSERT INTO ckbx_ItemAppearanceEditor
        (AppearanceCode, EditorTypeName, EditorTypeAssembly)
      VALUES
        (@AppearanceCode, @EditorTypeName, @EditorTypeAssembly)
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddItemAppearanceRenderer]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Install_AddItemAppearanceRenderer]
(
  @AppearanceCode nvarchar(255),
  @RendererTypeName nvarchar(255),
  @RendererAssemblyName nvarchar(255)
)
AS
  IF NOT EXISTS(Select AppearanceCode FROM ckbx_ItemAppearanceRenderer WHERE AppearanceCode = @AppearanceCode)
    BEGIN
      INSERT INTO ckbx_ItemAppearanceRenderer
        (AppearanceCode, RendererTypeName, RendererAssemblyName)
      VALUES
        (@AppearanceCode, @RendererTypeName, @RendererAssemblyName)
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddItemEditor]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[ckbx_sp_Install_AddItemEditor]
(
  @ItemName nvarchar(255),
  @EditorTypeName nvarchar(255),
  @EditorTypeAssembly nvarchar(255)
)
AS
  DECLARE @ItemTypeID int
  
  SELECT @ItemTypeID = ItemTypeID FROM ckbx_ItemType WHERE ItemName = @ItemName

  IF @ItemTypeID IS NOT NULL
    BEGIN
      IF NOT EXISTS(Select ItemTypeID FROM ckbx_ItemEditors WHERE ItemTypeID = @ItemTypeID)
        BEGIN
          INSERT INTO ckbx_ItemEditors
            (ItemTypeID, EditorTypeName, EditorTypeAssembly)
          VALUES
            (@ItemTypeID, @EditorTypeName, @EditorTypeAssembly)
        END
    END



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddItemFormatter]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Install_AddItemFormatter]
(
   @ItemTypeName nvarchar(255),
   @Format varchar(64),
   @FormatterClassName varchar(255),
   @FormatterAssembly varchar(255)
)
AS
  DECLARE @ItemTypeId int

  SELECT @ItemTypeId = ItemTypeID FROM ckbx_ItemType WHERE ItemName = @ItemTypeName

  IF @ItemTypeId IS NOT NULL
    BEGIN
	  IF NOT EXISTS(Select ItemTypeID FROM ckbx_ItemFormatters WHERE ItemTypeID = @ItemTypeID AND Format = @Format)
        BEGIN
			INSERT INTO ckbx_ItemFormatters 
				(ItemTypeId, Format, FormatterClassName, FormatterAssembly)
			VALUES
				(@ItemTypeId, @Format, @FormatterClassName, @FormatterAssembly)
        END
      ELSE
        BEGIN
			UPDATE ckbx_ItemFormatters
			SET
				FormatterClassName = @FormatterClassName,
				FormatterAssembly = @FormatterAssembly
			WHERE
				ItemTypeId = @ItemTypeID
				AND Format = @Format
        END
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddItemImportHandler]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Install_AddItemImportHandler]
(
  @ItemTypeName varchar(255),
  @HandlerTypeName varchar(255),
  @HandlerTypeAssembly varchar(255)
)
AS
  DECLARE @ItemTypeID int

  SELECT @ItemTypeID = ItemTypeID FROM ckbx_ItemType WHERE ItemName = @ItemTypeName

  IF @ItemTypeID IS NOT NULL
    BEGIN
      IF NOT EXISTS(Select ItemTypeID FROM ckbx_ItemImportHandlers WHERE ItemTypeID = @ItemTypeID)
        BEGIN
          INSERT INTO ckbx_ItemImportHandlers 
           (ItemTypeID, HandlerTypeName, HandlerTypeAssembly)
          VALUES
           (@ItemTypeID, @HandlerTypeName, @HandlerTypeAssembly)
        END
      ELSE
        BEGIN
          UPDATE ckbx_ItemImportHandlers
          SET
            HandlerTypeName = @HandlerTypeName,
            HandlerTypeAssembly = @HandlerTypeAssembly
          WHERE
            ItemTypeID = @ItemTypeID
        END
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddItemType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[ckbx_sp_Install_AddItemType]
(
  @ItemDataAssemblyName nvarchar(255),
  @ItemDataClassName nvarchar(255),
  @DefaultAppearanceCode varchar(255),
  @ItemName varchar(255),
  @CategoryName varchar(63),
  @MobileCompatible bit,
  @RTCompatible bit,
  @LibraryCompatible bit,
  @ReportCompatible bit,
  @TextIdPrefix NVARCHAR(255) = NULL,
  @IsAnswerable bit = NULL
)
AS

DECLARE @CategoryID INT
SELECT @CategoryID = CategoryID FROM ckbx_ItemType_Categories WHERE CategoryName = @CategoryName

IF NOT EXISTS(Select ItemName FROM ckbx_ItemType WHERE ItemName = @ItemName)
    BEGIN

      INSERT INTO ckbx_ItemType
        (ItemDataAssemblyName, ItemDataClassName, DefaultAppearanceCode, ItemName, CategoryID, MobileCompatible, RTCompatible, LibraryCompatible, ReportCompatible, TextIdPrefix, IsAnswerable)
      VALUES
        (@ItemDataAssemblyName, @ItemDataClassName, @DefaultAppearanceCode, @ItemName, @CategoryID, @MobileCompatible, @RTCompatible, @LibraryCompatible, @ReportCompatible, @TextIdPrefix, @IsAnswerable)
    END
 ELSE
   BEGIN
		UPDATE 
			ckbx_ItemType 
		SET
			CategoryID = @CategoryID,
			MobileCompatible = @MobileCompatible,
			RTCompatible = @RTCompatible,
			LibraryCompatible = @LibraryCompatible,
			ReportCompatible = @ReportCompatible,
			DefaultAppearanceCode = @DefaultAppearanceCode,
			TextIdPrefix = @TextIdPrefix, 
			IsAnswerable = @IsAnswerable
		WHERE
			ItemName = @ItemName  
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddItemTypeCategory]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Install_AddItemTypeCategory]
(
  @CategoryName varchar(63),
  @Position int
)
AS

IF NOT EXISTS(Select CategoryName FROM ckbx_ItemType_Categories WHERE CategoryName = @CategoryName)
    BEGIN
      INSERT INTO ckbx_ItemType_Categories 
		(CategoryName, CategoryTextID, CategoryDescriptionTextID, Position)
	  VALUES
		(@CategoryName, '/itemTypeCategory/' + @CategoryName + '/name', '/itemTypeCategory/' + @CategoryName + '/description', @Position)
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddPanelType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Install_AddPanelType]
(
   @TypeName nvarchar(255),
   @TypeAssembly nvarchar(255)
)
AS
  IF NOT EXISTS(Select PanelTypeID FROM ckbx_PanelType WHERE TypeName = @TypeName AND TypeAssembly = @TypeAssembly)
    BEGIN
      INSERT INTO ckbx_PanelType 
        (TypeName, TypeAssembly)
      VALUES
        (@TypeName, @TypeAssembly)
    END




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddPermission]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Install_AddPermission]
(
  @PermissionName nvarchar(255),
  @PermissionDisplayName nvarchar(255)
)
AS
  IF NOT EXISTS(Select PermissionName FROM ckbx_Permission WHERE PermissionName = @PermissionName)
    BEGIN
      INSERT INTO ckbx_Permission 
        (PermissionName, PermissionDisplayName)
      VALUES
        (@PermissionName, @PermissionDisplayName)    
    END



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddPermissionMask]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Install_AddPermissionMask]
(
  @MaskName nvarchar(255),
  @MaskDisplayName nvarchar(255)
)
AS
  IF NOT EXISTS(Select MaskName FROM ckbx_PermissionMask WHERE MaskName = @MaskName)
    BEGIN
      INSERT INTO ckbx_PermissionMask 
        (MaskName, MaskDisplayName)
      VALUES
        (@MaskName, @MaskDisplayName)    
    END



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddPermissionMaskPermission]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Install_AddPermissionMaskPermission]
(
  @MaskName nvarchar(255),
  @PermissionName nvarchar(255)
)
AS
  DECLARE @MaskID int
  DECLARE @PermissionID int

  SELECT @MaskID = MaskID FROM ckbx_PermissionMask WHERE MaskName = @MaskName
  SELECT @PermissionID = PermissionID FROM ckbx_Permission WHERE PermissionName = @PermissionName

  IF(@MaskID IS NOT NULL AND @PermissionID IS NOT NULL)
    BEGIN
      IF NOT EXISTS(Select MaskID FROM ckbx_PermissionMaskPermissions WHERE MaskID = @MaskID AND PermissionID = @PermissionID)
        BEGIN
          INSERT INTO ckbx_PermissionMaskPermissions
            (MaskID, PermissionID)
          VALUES
            (@MaskID, @PermissionID)
        END
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddRole]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Install_AddRole]
(
  @RoleName nvarchar(255),
  @RoleDescription nvarchar(255)
)
AS
  IF NOT EXISTS(Select RoleName FROM ckbx_Role WHERE RoleName = @RoleName)
    BEGIN
      INSERT INTO ckbx_Role
        (RoleName, RoleDescription)
      VALUES
        (@RoleName, @RoleDescription)
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddRolePermission]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE  PROCEDURE [dbo].[ckbx_sp_Install_AddRolePermission]
(
  @RoleName nvarchar(255),
  @PermissionName nvarchar(255)
)
AS
  DECLARE @RoleID int
  DECLARE @PermissionID int

  SELECT @RoleID = RoleID FROM ckbx_Role WHERE RoleName = @RoleName
  SELECT @PermissionID = PermissionID FROM ckbx_Permission WHERE PermissionName = @PermissionName

  IF(@RoleID IS NOT NULL AND @PermissionID IS NOT NULL)
    BEGIN
      IF NOT EXISTS(Select RoleID FROM ckbx_RolePermissions WHERE RoleID = @RoleID AND PermissionID = @PermissionID)
        BEGIN
          INSERT INTO ckbx_RolePermissions 
           (RoleID, PermissionID)
          VALUES
           (@RoleID, @PermissionID)          
        END
    END



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_AddRTTableName]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Install_AddRTTableName]
(
  @TableName nvarchar(255),
  @TablePosition int
)
AS
  IF NOT EXISTS(Select TableName FROM ckbx_RTTableNames WHERE TableName = @TableName)
    BEGIN
      INSERT INTO ckbx_RTTableNames
        (TableName, TablePosition)
      VALUES
        (@TableName, @TablePosition)
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_DropFKConstraints]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[ckbx_sp_Install_DropFKConstraints]
AS
	DECLARE @TableName nvarchar(255)
	DECLARE @sql nvarchar(500)
	DECLARE @ConstraintName nvarchar(256)

	DECLARE TableCursor CURSOR LOCAL FOR SELECT TABLE_NAME, CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_NAME LIKE 'ckbx_%' AND CONSTRAINT_TYPE = 'FOREIGN KEY'
	OPEN TableCursor
	FETCH NEXT FROM TableCursor INTO @TableName, @ConstraintName

	WHILE @@FETCH_STATUS = 0
	BEGIN
		SELECT 
			@sql = 'ALTER TABLE ' + @TableName + ' DROP CONSTRAINT ' + @ConstraintName 
		FROM    
			INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
		WHERE table_name = @TableName

		--Drop constraint

		PRINT @sql
		EXEC sp_executesql @sql

		FETCH NEXT FROM TableCursor INTO @TableName, @ConstraintName

	END
	CLOSE TableCursor
	DEALLOCATE TableCursor


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_UpsertPagePath]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Install_UpsertPagePath]
(
	@PagePath varchar(255)
)
AS
  IF NOT EXISTS(Select PagePath FROM ckbx_PageId WHERE PagePath = @PagePath)
  BEGIN
	INSERT INTO ckbx_PageId (PagePath) VALUES (@PagePath)
  END
  

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_UpsertPageTextId]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Install_UpsertPageTextId]
(
	@PagePath varchar(255),
	@TextId varchar(255)
)
AS
  DECLARE @PageId int
  
  SELECT @PageId = PageID FROM ckbx_PageId WHERE PagePath = @PagePath
  
  IF NOT EXISTS(Select PageID FROM ckbx_PageTextIds WHERE PageId = @PageId AND TextId = @TextId)
  BEGIN
	INSERT INTO ckbx_PageTextIds (PageId, TextId) VALUES (@PageId, @TextId)
  END
  

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_UpSertSetting]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Install_UpSertSetting]
(
  @SettingName varchar(100),
  @SettingValue nvarchar(4000)
)
AS
  IF NOT EXISTS(Select SettingName FROM ckbx_Settings WHERE SettingName = @SettingName)
    BEGIN
      INSERT INTO ckbx_Settings (SettingName, SettingValue) VALUES (@SettingName, @SettingValue)
    END
  ELSE
    BEGIN
      UPDATE ckbx_Settings SET SettingValue = @SettingValue WHERE SettingName = @SettingName
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Install_WasUpgradedFromUS]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Install_WasUpgradedFromUS]
(
   @WasUpgraded bit out
)
AS
   IF EXISTS(SELECT * FROM ckbx_Product_Info WHERE ProductName LIKE 'Checkbox Upgrade from Ultimate Survey%')
     BEGIN
       SET @WasUpgraded = 1
     END
   ELSE
     BEGIN
       SET @WasUpgraded = 0
     END
  

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_AddPanel]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_AddPanel]
(
	@InvitationID int,
	@PanelID int
)
AS

	IF NOT EXISTS ( SELECT InvitationID FROM ckbx_InvitationPanels WHERE InvitationID = @InvitationID AND PanelID = @PanelID )
	BEGIN
		INSERT INTO ckbx_InvitationPanels ( InvitationID, PanelID ) VALUES ( @InvitationID, @PanelID )
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_CountForRT]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_CountForRT]
(
	@ResponseTemplateId int,
	@TotalCount int output
)
AS
	SET NOCOUNT ON;
	
	SELECT 
		@TotalCount = COUNT(InvitationID) 
	FROM ckbx_Invitation 
	WHERE ResponseTemplateID = @ResponseTemplateId
	

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_CountForRTByType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_CountForRTByType]
(
	@ResponseTemplateId int,
	@isSent bit,
	@TotalCount int output
)
AS
	if @isSent = 1 
		SELECT 
			@TotalCount = COUNT(*) 
		FROM ckbx_Invitation inv
		  LEFT OUTER JOIN ckbx_InvitationSchedule isch on inv.InvitationID = isch.InvitationID and (isch.InvitationActivityType is null or isch.InvitationActivityType <> 4)
		WHERE ResponseTemplateID = @ResponseTemplateId and (LastSentOn is not NULL or isch.ProcessingStarted is not NULL)
			
	else
		SELECT 
			@TotalCount = COUNT(*) 
		FROM ckbx_Invitation inv
		  LEFT OUTER JOIN ckbx_InvitationSchedule isch on (inv.InvitationID = isch.InvitationID) and (isch.InvitationActivityType is null or isch.InvitationActivityType <> 4)
		WHERE ResponseTemplateID = @ResponseTemplateId
			and (LastSentOn is NULL or isch.DateScheduled is not null and isch.ProcessingStarted is NULL) 
			



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_Create]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_Create]
(
	@GUID uniqueidentifier,
	@ResponseTemplateID int,
	@Name nvarchar(255),
	@EmailFormat varchar (4),
	@CreatedBy nvarchar(611),
	@IsPublic int,
	@DateCreated datetime,
	@Subject nvarchar (510),
	@Body ntext,
	@FromAddress nvarchar (510),
	@FromName nvarchar (510),
	@LinkText nvarchar (510),
	@LoginOption varchar,	
    @IncludeOptOutLink bit,
    @OptOutText ntext,
	@CompanyProfileId int,
	@InvitationID int output	
)
AS
	INSERT INTO ckbx_Invitation  (
				GUID, 
				ResponseTemplateID, 
				[Name],
				EmailFormat, 
				CreatedBy, 
				DateCreated, 
				[Subject], 
				Body, 
				ReminderSubject,
				ReminderBody,
				FromAddress, 
				FromName, 
				LinkText, 
				LoginOption,
				IncludeOptOutLink,
				OptOutText,
				CompanyProfileId)
			VALUES ( 
				@GUID, 
				@ResponseTemplateID, 
				@Name,
				@EmailFormat, 
				@CreatedBy,
				@DateCreated, 
				@Subject, 
				@Body, 
				@Subject,			--Default reminder subject/body to initial subject/body
				@Body,
				@FromAddress, 
				@FromName, 
				@LinkText, 
				@LoginOption,
                @IncludeOptOutLink, 
                @OptOutText,
				@CompanyProfileId )
	SET @InvitationID = SCOPE_IDENTITY() 

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE   PROCEDURE [dbo].[ckbx_sp_Invitation_Delete]
(
	@InvitationID int
)
AS
	DELETE FROM ckbx_InvitationSchedule WHERE InvitationID = @InvitationID

	DELETE FROM ckbx_Invitation_Responses WHERE RecipientID IN (SELECT RecipientID FROM ckbx_InvitationRecipients WHERE InvitationID = @InvitationID)

	DELETE FROM ckbx_InvitationRecipients WHERE InvitationID = @InvitationID

	DELETE FROM ckbx_InvitationPanels WHERE InvitationID = @InvitationID

	DELETE FROM ckbx_Invitation WHERE InvitationID = @InvitationID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_Get_Lightweight]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_Get_Lightweight]
(
   @InvitationID int
)
AS
	select InvitationID, Name, CreatedBy, LastSentOn, ResponseTemplateID from 
		ckbx_Invitation where InvitationID = @InvitationID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_Get_Schedule]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_Get_Schedule]
(
	@InvitationID int = NULL
)
AS
	select * from ckbx_InvitationSchedule where @InvitationID is null or InvitationID = @InvitationID 
	

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetID]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetID]
(
  @RecipientID int
)
AS
  Select InvitationID from ckbx_InvitationRecipients WHERE RecipientID = @RecipientID




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetIdFromPartialRecipientGuid]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetIdFromPartialRecipientGuid]
(
  @PartialRecipientGuid varchar(63)
)
AS
  SELECT DISTINCT InvitationID FROM ckbx_InvitationRecipients WHERE [GUID] LIKE '%' + @PartialRecipientGuid + '%'
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetIdFromRecipientGuid]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetIdFromRecipientGuid]
(
  @RecipientGuid uniqueidentifier
)
AS
  SELECT InvitationID FROM ckbx_InvitationRecipients WHERE [GUID] = @RecipientGuid

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetInvitation]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetInvitation]
(
	@InvitationID int
)

AS
	SELECT InvitationID, 
		[GUID], 
		ResponseTemplateID, 
		[Name],
		EmailFormat, 
		FirstSentOn, 
		LastSentOn,  
		[Subject], 
		Body, 
		ReminderSubject,
		ReminderBody,
		FromAddress, 
		FromName, 
		LinkText, 
		LoginOption, 
        IncludeOptOutLink,
 	    OptOutText,
		DateCreated, 
		CreatedBy,
		CompanyProfileId
	FROM ckbx_Invitation WHERE InvitationID = @InvitationID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetInvitationBatchId]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetInvitationBatchId]
(
  @ScheduleId int
)
AS
  BEGIN
	  DECLARE @InvitationId INT
	  SET @InvitationId = (SELECT InvitationID FROM [ckbx_InvitationSchedule] WHERE InvitationScheduleID = @ScheduleId)

	  SELECT TOP 1 InvitationScheduleID, BatchID FROM [ckbx_InvitationSchedule]
	  WHERE InvitationID = @InvitationId AND InvitationActivityType = 1 AND InvitationScheduleID != @ScheduleId
	  ORDER BY InvitationScheduleID ASC 
  END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetInvitationData]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[ckbx_sp_Invitation_GetInvitationData]
(
	@InvitationID int
)
AS
	SELECT InvitationID ,[GUID], ResponseTemplateID, EmailFormat, [Subject], Body, FromAddress, FromName, LinkText, LoginOption, DateCreated, CreatedBy,
	 FirstSentOn, LastSentOn, IncludeOptOutLink, OptOutText, Name 
    FROM ckbx_Invitation
    WHERE InvitationID = @InvitationID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetInvitationResponseCounts]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetInvitationResponseCounts]
(
	@InvitationID int
)

AS
	CREATE TABLE #ResponseCounts (SentCount int, FailedCount int, ResponseCount int)

	INSERT INTO #ResponseCounts(SentCount)
	SELECT	COUNT(RecipientID)
	FROM	ckbx_InvitationRecipients
	WHERE	SuccessfullySent = 1

	UPDATE #ResponseCounts
	SET FailedCount = (SELECT COUNT(RecipientID)
	FROM	ckbx_InvitationRecipients
	WHERE	SuccessfullySent = 0)

	UPDATE #ResponseCounts
	SET ResponseCount = (SELECT	COUNT(RecipientID)
	FROM	ckbx_InvitationRecipients
	WHERE	HasResponded = 1)


	SELECT * FROM #ResponseCounts


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetInvitedDomainRecipients]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetInvitedDomainRecipients]
(
	@InvitationId int 
)
AS 
	BEGIN
		SELECT [UniqueIdentifier] FROM [ckbx_InvitationRecipients]
		WHERE InvitationID = @InvitationId AND (SuccessfullySent = 1 OR OptOut = 1) AND [UniqueIdentifier] LIKE '%\%'
	END





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetOptedOutEmailData]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetOptedOutEmailData]
(
  @ResponseTemplateId int,
  @EmailAddress nvarchar(255), 
  @InvitationId int
)
AS
	if @InvitationId > 0
	begin
		SELECT UserComment, DateOccur, OptOutType FROM [ckbx_Invitation_OptedOutEmails] ooe
			inner join ckbx_Invitation inv on ooe.InvitationId = inv.InvitationId		
			inner join ckbx_Invitation parentInv on parentInv.FromAddress = inv.FromAddress and parentInv.InvitationId = @InvitationId	
		WHERE
			OptOutType = 1 and EmailAddress = @EmailAddress
		union
		SELECT UserComment, DateOccur, OptOutType FROM [ckbx_Invitation_OptedOutEmails] WHERE
			EmailAddress = @EmailAddress AND			
			(ResponseTemplateId = @ResponseTemplateId OR ResponseTemplateId IS NULL OR OptOutType = 2)			
		
	end
	else
	begin
		SELECT o.UserComment, o.DateOccur, o.OptOutType, rt.TemplateName FROM [ckbx_Invitation_OptedOutEmails] o
		INNER JOIN [ckbx_ResponseTemplate] rt ON o.ResponseTemplateId = rt.ResponseTemplateId
		 WHERE
			EmailAddress = @EmailAddress AND			
			(o.ResponseTemplateId = @ResponseTemplateId OR o.ResponseTemplateId IS NULL OR o.OptOutType = 2)
	end
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetOptedOutEmails]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetOptedOutEmails]
(
  @ResponseTemplateId int
)
AS
	SELECT DISTINCT EmailAddress FROM [ckbx_Invitation_OptedOutEmails] WHERE
		ResponseTemplateId = @ResponseTemplateId OR ResponseTemplateId IS NULL OR OptOutType = 1 OR OptOutType = 2

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetOptedOutSurveyListByEmail]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetOptedOutSurveyListByEmail]
(
	@EmailAddress NVARCHAR(255)
)
AS
	BEGIN
		SELECT o.ResponseTemplateId, rt.TemplateName, o.OptOutType, o.UserComment
			FROM [ckbx_Invitation_OptedOutEmails] o INNER JOIN [ckbx_ResponseTemplate] rt
			ON o.ResponseTemplateId = rt.ResponseTemplateId
			WHERE o.EmailAddress = @EmailAddress
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetPanels]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetPanels]
(
	@InvitationID int
)
AS
	SELECT p.PanelID, p.PanelTypeID FROM ckbx_InvitationPanels ip
	INNER JOIN ckbx_Panel p ON ip.PanelID = p.PanelID
	WHERE ip.InvitationID = @InvitationID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetPendingRecipients]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[ckbx_sp_Invitation_GetPendingRecipients]
(
	@InvitationID int,
	@BatchSize int
)
AS
BEGIN
	--temporary table for existing recipients 
    CREATE TABLE #existingRecipients
	(
		EmailAddress NVARCHAR(255) NULL		
	)

	IF @BatchSize IS NULL
	 BEGIN
		SET @BatchSize = 2147483647
	 END

	--fill the table
	INSERT INTO #existingRecipients 
	SELECT ir.EmailAddress  
	FROM ckbx_InvitationRecipients ir 
	INNER JOIN ckbx_Panel p ON p.PanelID = ir.PanelID
	WHERE ir.InvitationID = @InvitationID
	and ir.[UniqueIdentifier] <> 'Test recipient ' + ir.EmailAddress

	--temporary table for pending recipients 
	CREATE TABLE #pendingRecipients
	(
		PanelID int not null,		
		PanelTypeID int not null,		
		EmailAddress NVARCHAR(255) NULL,
		[UniqueIdentifier] NVARCHAR(611) NULL
	)

	DECLARE @PanelID int, @PanelTypeID int
	DECLARE @RemainRecipientsCount int

	--set init rest value
	SET @RemainRecipientsCount = @BatchSize

	--create a cursor
	DECLARE panel_cursor CURSOR LOCAL FOR
	SELECT p.PanelID, p.PanelTypeID FROM ckbx_InvitationPanels ip 
	INNER JOIN ckbx_Panel p ON p.PanelID = ip.PanelID
	WHERE ip.InvitationID = @InvitationID

	OPEN panel_cursor

	FETCH NEXT FROM panel_cursor
	INTO @PanelID, @PanelTypeID

	WHILE @@FETCH_STATUS = 0
		BEGIN
			--user panel type
			IF @PanelTypeID = 1
				BEGIN
					INSERT INTO #pendingRecipients
					SELECT TOP (@RemainRecipientsCount) @PanelID, @PanelTypeID, c.Email, MAX([UniqueIdentifier])
					FROM ckbx_UserPanel up INNER JOIN ckbx_Credential c
					ON up.UserIdentifier = c.[UniqueIdentifier] 
					WHERE up.PanelID = @PanelID AND c.Email COLLATE Latin1_General_CS_AS_KS_WS NOT IN
					(SELECT EmailAddress COLLATE Latin1_General_CS_AS_KS_WS FROM #existingRecipients) 
					AND c.Email COLLATE Latin1_General_CS_AS_KS_WS NOT IN
					(SELECT EmailAddress COLLATE Latin1_General_CS_AS_KS_WS FROM #pendingRecipients) 
					GROUP BY c.Email
				END
			--group panel type
			ELSE IF @PanelTypeID = 2
				BEGIN
					INSERT INTO #pendingRecipients
					SELECT TOP (@RemainRecipientsCount) @PanelID, @PanelTypeID, c.Email, max(c.[UniqueIdentifier])
					FROM ckbx_GroupPanel gp INNER JOIN ckbx_GroupMembers gm
					ON gp.GroupID = gm.GroupID INNER JOIN ckbx_Credential c 
					ON gm.MemberUniqueIdentifier = c.[UniqueIdentifier]
					WHERE gp.PanelID = @PanelID AND c.Email COLLATE Latin1_General_CS_AS_KS_WS NOT IN
					(SELECT EmailAddress COLLATE Latin1_General_CS_AS_KS_WS FROM #existingRecipients) 
					AND c.Email COLLATE Latin1_General_CS_AS_KS_WS NOT IN
					(SELECT EmailAddress COLLATE Latin1_General_CS_AS_KS_WS FROM #pendingRecipients) 
					GROUP BY c.Email
				END
			--email list panel type
			ELSE IF @PanelTypeID = 3
				BEGIN
					INSERT INTO #pendingRecipients
					SELECT TOP (@RemainRecipientsCount) @PanelID, @PanelTypeID, elp.EmailAddress, ''
					FROM ckbx_EmailListPanel elp 
					WHERE elp.PanelID = @PanelID AND elp.EmailAddress COLLATE Latin1_General_CS_AS_KS_WS NOT IN
					(SELECT EmailAddress COLLATE Latin1_General_CS_AS_KS_WS FROM #existingRecipients) 
					AND elp.EmailAddress COLLATE Latin1_General_CS_AS_KS_WS NOT IN
					(SELECT EmailAddress COLLATE Latin1_General_CS_AS_KS_WS FROM #pendingRecipients) 
					GROUP BY elp.EmailAddress
				END
			--ad hoc email list panel type
			ELSE IF @PanelTypeID = 4
				BEGIN
					INSERT INTO #pendingRecipients
					SELECT TOP (@RemainRecipientsCount) @PanelID, @PanelTypeID, ahep.EmailAddress, ''
					FROM ckbx_AdHocEmailPanel ahep 
					WHERE ahep.PanelID = @PanelID AND ahep.EmailAddress  COLLATE Latin1_General_CS_AS_KS_WS NOT IN
					(SELECT EmailAddress COLLATE Latin1_General_CS_AS_KS_WS FROM #existingRecipients) 
					AND ahep.EmailAddress COLLATE Latin1_General_CS_AS_KS_WS NOT IN
					(SELECT EmailAddress COLLATE Latin1_General_CS_AS_KS_WS FROM #pendingRecipients) 
					GROUP BY ahep.EmailAddress
					
					
				END
			
			DECLARE @PendingRecipientsCount int
			SET @PendingRecipientsCount = (SELECT COUNT(EmailAddress) FROM #pendingRecipients)

			--end query or update remaining rest of batch
			IF @PendingRecipientsCount >= @BatchSize
				BREAK
			ELSE 
				SET	@RemainRecipientsCount = @BatchSize - @PendingRecipientsCount

			FETCH NEXT FROM panel_cursor
			INTO @PanelID, @PanelTypeID
		END

		SELECT TOP (@BatchSize) * FROM #pendingRecipients

		DROP TABLE #pendingRecipients
		DROP TABLE #existingRecipients

		CLOSE panel_cursor
		DEALLOCATE panel_cursor
END
        


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetProcessedRecipientsCount]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetProcessedRecipientsCount]
(
  @ProcessingBatchId bigint
)
AS
  SELECT COUNT(RecipientID) as RecipientCount FROM ckbx_InvitationRecipients WHERE ProcessingBatchId = @ProcessingBatchId


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetRecipientByGuid]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetRecipientByGuid]
(
	@RecipientGuid uniqueidentifier
)
AS
	SELECT * FROM [ckbx_InvitationRecipients] WHERE
		[GUID] = @RecipientGuid

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetRecipientEmail]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetRecipientEmail]
(
  @RecipientGuid uniqueidentifier
)
AS
  SELECT [EmailAddress] FROM ckbx_InvitationRecipients WHERE [GUID] = @RecipientGuid

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetRecipientGuid]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetRecipientGuid]
(
  @RecipientID bigint
)
AS
  SELECT [GUID] FROM ckbx_InvitationRecipients WHERE RecipientID = @RecipientID AND (Deleted IS NULL OR Deleted = 0)
 

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetRecipientGuidIDForAuthenticatedRespondent]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetRecipientGuidIDForAuthenticatedRespondent]
(
  @UserUid nvarchar(255),
  @ResponseTemplateId int
)
AS
begin
	select top 1 ir.GUID as RecipientGUID from ckbx_InvitationRecipients ir
	inner join ckbx_Credential c on lower(ir.EmailAddress) = lower(c.Email) and lower(ir.[UniqueIdentifier]) = lower(@UserUid)	
	inner join ckbx_Invitation i on ir.InvitationID = i.InvitationID 
	where UserName = @UserUid and i.ResponseTemplateID = @ResponseTemplateId 
	order by HasResponded	
end

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetRecipientID]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetRecipientID]
(
  @RecipientGuid uniqueidentifier
)
AS
  SELECT RecipientId FROM ckbx_InvitationRecipients WHERE [GUID] = @RecipientGuid AND (Deleted IS NULL OR Deleted = 0)
 
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetRecipientResponseCount]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetRecipientResponseCount]
  @RecipientGuid uniqueidentifier
AS
  SELECT
    COUNT(*) AS ResponseCount
  FROM
    ckbx_Invitation_Responses ir
    INNER JOIN ckbx_InvitationRecipients ir2 ON ir2.RecipientID = ir.RecipientID
    INNER JOIN ckbx_Response r ON r.ResponseID = ir.ResponseID
  WHERE
    (r.Deleted IS NULL OR r.Deleted = 0)
     AND ir2.GUID = @RecipientGuid

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetRecipients]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_Invitation_GetRecipients]
(
	@InvitationID int,
	@Filter varchar(20) = null,
	@ProcessingBatchId bigint = null,
	@BatchSize int = null
)
AS
	BEGIN
		IF object_id('tempdb..#optOutData') IS NOT NULL
		    DROP TABLE #optOutData
		
		CREATE TABLE #optOutData
		(
			EmailAddress nvarchar(255),
			OptOutType int
		)
				
		--JOIN on ckbx_Invitation makes troubles here, so it was replaced with SELECT 
		INSERT INTO #optOutData 
		SELECT ir.EmailAddress, o.OptOutType
		FROM ckbx_InvitationRecipients ir
		INNER JOIN ckbx_Invitation_OptedOutEmails o ON ir.EmailAddress = o.EmailAddress COLLATE DATABASE_DEFAULT
			AND (o.OptOutType = 1 OR o.OptOutType = 2 
			OR ((o.OptOutType = 0 OR o.OptOutType = 3) AND 
				(
					SELECT i.ResponseTemplateID 
					FROM ckbx_Invitation i
					WHERE i.InvitationID = ir.InvitationID 
				) = o.ResponseTemplateId))
		WHERE ir.OptOut = 1 AND ir.InvitationID = @InvitationID

		IF (@ProcessingBatchId IS NOT NULL AND @BatchSize IS NOT NULL)
			BEGIN
				IF (@Filter = 'All' OR @Filter IS NULL)
				BEGIN
					SELECT TOP (@BatchSize) ir.RecipientID, ir.InvitationID, ir.PanelID, p.PanelTypeID, ir.EmailAddress, ir.[UniqueIdentifier], ir.GUID, ir.HasResponded, ir.TotalSent, ir.SuccessfullySent, ir.LastSent, ir.ErrorMessage, ir.Deleted, ir.OptOut, ir.LastBatchMessageId, ir.ProcessingBatchId, o.OptOutType
					FROM ckbx_InvitationRecipients ir 
					INNER JOIN ckbx_Panel p ON p.PanelID = ir.PanelID 
					LEFT JOIN #optOutData o ON o.EmailAddress = ir.EmailAddress COLLATE DATABASE_DEFAULT
					WHERE ir.InvitationID = @InvitationID AND (ir.ProcessingBatchId IS NULL OR ir.ProcessingBatchId != @ProcessingBatchId) 
				END
        
				IF (@Filter = 'Current')
				  BEGIN
					SELECT TOP (@BatchSize) ir.RecipientID, ir.InvitationID, ir.PanelID, p.PanelTypeID, ir.EmailAddress, ir.[UniqueIdentifier], ir.GUID, ir.HasResponded, ir.TotalSent, ir.SuccessfullySent, ir.LastSent, ir.ErrorMessage, ir.Deleted, ir.OptOut, ir.LastBatchMessageId, ir.ProcessingBatchId, o.OptOutType
					FROM ckbx_InvitationRecipients ir 
					INNER JOIN ckbx_Panel p ON p.PanelID = ir.PanelID 
					LEFT JOIN #optOutData o ON o.EmailAddress = ir.EmailAddress COLLATE DATABASE_DEFAULT
					WHERE (ir.Deleted IS NULL OR ir.Deleted = 0) AND (ir.OptOut IS NULL OR ir.OptOut = 0)
					AND (ir.ProcessingBatchId IS NULL OR ir.ProcessingBatchId != @ProcessingBatchId) 
				  END

				IF (@Filter = 'OptOut')
				  BEGIN
					SELECT TOP (@BatchSize) ir.RecipientID, ir.InvitationID, ir.PanelID, p.PanelTypeID, ir.EmailAddress, ir.[UniqueIdentifier], ir.GUID, ir.HasResponded, ir.TotalSent, ir.SuccessfullySent, ir.LastSent, ir.ErrorMessage, ir.Deleted, ir.OptOut, ir.LastBatchMessageId, ir.ProcessingBatchId, o.OptOutType
					FROM ckbx_InvitationRecipients ir 
					INNER JOIN ckbx_Panel p ON p.PanelID = ir.PanelID 
					LEFT JOIN #optOutData o ON o.EmailAddress = ir.EmailAddress COLLATE DATABASE_DEFAULT
					WHERE ir.OptOut = 1 AND (ir.ProcessingBatchId IS NULL OR ir.ProcessingBatchId != @ProcessingBatchId) 
				  END
 
				IF(@Filter = 'Responded')
				BEGIN
					SELECT TOP (@BatchSize) ir.RecipientID, ir.InvitationID, ir.PanelID, p.PanelTypeID, ir.EmailAddress, ir.[UniqueIdentifier], ir.GUID, ir.HasResponded, ir.TotalSent, ir.SuccessfullySent, ir.LastSent, ir.ErrorMessage, ir.Deleted, ir.OptOut, ir.LastBatchMessageId, ir.ProcessingBatchId, o.OptOutType
					FROM ckbx_InvitationRecipients ir 
					INNER JOIN ckbx_Panel p ON p.PanelID = ir.PanelID 
					LEFT JOIN #optOutData o ON o.EmailAddress = ir.EmailAddress COLLATE DATABASE_DEFAULT
					WHERE ir.InvitationID = @InvitationID AND HasResponded = 1  AND (ir.ProcessingBatchId IS NULL OR ir.ProcessingBatchId != @ProcessingBatchId) 
				END
				IF(@Filter = 'NotResponded')
				BEGIN
					SELECT TOP (@BatchSize) ir.RecipientID, ir.InvitationID, ir.PanelID, p.PanelTypeID, ir.EmailAddress, ir.[UniqueIdentifier], ir.GUID, ir.HasResponded, ir.TotalSent, ir.SuccessfullySent, ir.LastSent, ir.ErrorMessage, ir.Deleted, ir.OptOut, ir.LastBatchMessageId, ir.ProcessingBatchId, o.OptOutType
					FROM ckbx_InvitationRecipients ir 
					INNER JOIN ckbx_Panel p ON p.PanelID = ir.PanelID 
					LEFT JOIN #optOutData o ON o.EmailAddress = ir.EmailAddress COLLATE DATABASE_DEFAULT
					WHERE ir.InvitationID = @InvitationID AND HasResponded = 0  AND (ir.ProcessingBatchId IS NULL OR ir.ProcessingBatchId != @ProcessingBatchId) 
				END
			END
		ELSE
			BEGIN
				IF (@Filter = 'All' OR @Filter IS NULL)
				BEGIN
					SELECT ir.RecipientID, ir.InvitationID, ir.PanelID, p.PanelTypeID, ir.EmailAddress, ir.[UniqueIdentifier], ir.GUID, ir.HasResponded, ir.TotalSent, ir.SuccessfullySent, ir.LastSent, ir.ErrorMessage, ir.Deleted, ir.OptOut, ir.LastBatchMessageId, o.OptOutType
					FROM ckbx_InvitationRecipients ir 
					INNER JOIN ckbx_Panel p ON p.PanelID = ir.PanelID 
					LEFT JOIN #optOutData o ON o.EmailAddress = ir.EmailAddress COLLATE DATABASE_DEFAULT
					WHERE ir.InvitationID = @InvitationID
				END
        
				IF (@Filter = 'Current')
				  BEGIN
					SELECT ir.RecipientID, ir.InvitationID, ir.PanelID, p.PanelTypeID, ir.EmailAddress, ir.[UniqueIdentifier], ir.GUID, ir.HasResponded, ir.TotalSent, ir.SuccessfullySent, ir.LastSent, ir.ErrorMessage, ir.Deleted, ir.OptOut, ir.LastBatchMessageId, o.OptOutType
					FROM ckbx_InvitationRecipients ir 
					INNER JOIN ckbx_Panel p ON p.PanelID = ir.PanelID 
					LEFT JOIN #optOutData o ON o.EmailAddress = ir.EmailAddress COLLATE DATABASE_DEFAULT
					WHERE (ir.Deleted IS NULL OR ir.Deleted = 0) AND (ir.OptOut IS NULL OR ir.OptOut = 0)
				  END

				IF (@Filter = 'OptOut')
				  BEGIN
					SELECT ir.RecipientID, ir.InvitationID, ir.PanelID, p.PanelTypeID, ir.EmailAddress, ir.[UniqueIdentifier], ir.GUID, ir.HasResponded, ir.TotalSent, ir.SuccessfullySent, ir.LastSent, ir.ErrorMessage, ir.Deleted, ir.OptOut, ir.LastBatchMessageId, o.OptOutType
					FROM ckbx_InvitationRecipients ir 
					INNER JOIN ckbx_Panel p ON p.PanelID = ir.PanelID 
					LEFT JOIN #optOutData o ON o.EmailAddress = ir.EmailAddress COLLATE DATABASE_DEFAULT
					WHERE ir.OptOut = 1
				  END
 
				IF(@Filter = 'Responded')
				BEGIN
					SELECT ir.RecipientID, ir.InvitationID, ir.PanelID, p.PanelTypeID, ir.EmailAddress, ir.[UniqueIdentifier], ir.GUID, ir.HasResponded, ir.TotalSent, ir.SuccessfullySent, ir.LastSent, ir.ErrorMessage, ir.Deleted, ir.OptOut, ir.LastBatchMessageId, o.OptOutType
					FROM ckbx_InvitationRecipients ir 
					INNER JOIN ckbx_Panel p ON p.PanelID = ir.PanelID 
					LEFT JOIN #optOutData o ON o.EmailAddress = ir.EmailAddress COLLATE DATABASE_DEFAULT
					WHERE ir.InvitationID = @InvitationID AND HasResponded = 1	
				END
				IF(@Filter = 'NotResponded')
				BEGIN
					SELECT ir.RecipientID, ir.InvitationID, ir.PanelID, p.PanelTypeID, ir.EmailAddress, ir.[UniqueIdentifier], ir.GUID, ir.HasResponded, ir.TotalSent, ir.SuccessfullySent, ir.LastSent, ir.ErrorMessage, ir.Deleted, ir.OptOut, ir.LastBatchMessageId, o.OptOutType
					FROM ckbx_InvitationRecipients ir 
					INNER JOIN ckbx_Panel p ON p.PanelID = ir.PanelID 
					LEFT JOIN #optOutData o ON o.EmailAddress = ir.EmailAddress COLLATE DATABASE_DEFAULT
					WHERE ir.InvitationID = @InvitationID AND HasResponded = 0
				END
			END

	  	DROP TABLE #optOutData

	END
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetRecipientsCount]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create  PROCEDURE  [dbo].[ckbx_sp_Invitation_GetRecipientsCount]
(
	@InvitationID int,
	@Filter varchar(20) = null
)
AS
IF (@Filter = 'All' OR @Filter IS NULL)
	BEGIN
		SELECT count(RecipientID) as 'RecipientsNumber' FROM ckbx_InvitationRecipients
		WHERE InvitationID = @InvitationID
	END
        
    IF (@Filter = 'Current')
      BEGIN
		SELECT count(RecipientID)  as 'RecipientsNumber'
		FROM ckbx_InvitationRecipients 
		WHERE (Deleted IS NULL OR Deleted = 0) AND (OptOut IS NULL OR OptOut = 0)
      END

	IF (@Filter = 'OptOut')
      BEGIN
		SELECT count(RecipientID) as 'RecipientsNumber'
		FROM ckbx_InvitationRecipients 
		WHERE OptOut = 1 and InvitationID = @InvitationID
      END
 
	IF(@Filter = 'Responded')
	BEGIN
		SELECT count(RecipientID) as 'RecipientsNumber'
		FROM ckbx_InvitationRecipients 
		WHERE InvitationID = @InvitationID AND HasResponded = 1	
	END
	IF(@Filter = 'NotResponded')
	BEGIN
		SELECT count(RecipientID) as 'RecipientsNumber'
		FROM ckbx_InvitationRecipients 
		WHERE InvitationID = @InvitationID AND HasResponded = 0
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetRecipientUniqueIdentifier]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetRecipientUniqueIdentifier]
(
  @RecipientGuid uniqueidentifier
)
AS
  SELECT [UniqueIdentifier] FROM ckbx_InvitationRecipients WHERE [GUID] = @RecipientGuid AND (Deleted IS NULL OR Deleted = 0)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_GetResponseTemplateGuid]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_GetResponseTemplateGuid]
(
  @RecipientGuid uniqueidentifier
)
AS
  SELECT 
	rt.Guid
  FROM 
	ckbx_InvitationRecipients ir
	INNER JOIN ckbx_Invitation i ON i.InvitationID = ir.InvitationID
	INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateID = i.ResponseTemplateID
	INNER JOIN ckbx_Template t ON t.TemplateID = rt.ResponseTemplateID
 WHERE 
	ir.[GUID] = @RecipientGuid 
	AND (ir.Deleted IS NULL OR ir.Deleted = 0 OR (ir.[UniqueIdentifier] = 'Test recipient ' + ir.EmailAddress))
	AND (t.Deleted IS NULL OR t.Deleted = 0)
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_InsertRecipient]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_InsertRecipient]
(
	@InvitationID int,
	@PanelID int,
	@EmailToAddress nvarchar (255),
	@UniqueIdentifier nvarchar (611) = null,
	@GUID uniqueidentifier,
	@LastSent datetime,
	@Success bit,
	@OptOut bit,
	@Error ntext = null,
    @LastBatchMessageId bigint,
	@ProcessingBatchId bigint,
	@RecipientID int out	
)
AS
 --Duplicate checking should be handled in code
    /*Default values for HasResponded and TotalSent are false and 1, respectively.  Assumes that an email was sent but not whether it succeeded. */
    INSERT INTO ckbx_InvitationRecipients 
     (InvitationID, PanelID, EmailAddress, [UniqueIdentifier], GUID, HasResponded, TotalSent, SuccessfullySent, LastSent, ErrorMessage, OptOut, LastBatchMessageId, ProcessingBatchId)
	VALUES
     (@InvitationID, @PanelID, @EmailToAddress, @UniqueIdentifier, @GUID, 0, 0, @Success, @LastSent, @Error, @OptOut, @LastBatchMessageId, @ProcessingBatchId)
                        
    SELECT @RecipientID = @@IDENTITY

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_InsertResponse]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_InsertResponse]
(
  @RecipientID bigint,
  @ResponseID bigint
)
AS
	--Make sure a) not entering duplicate response and b) that the recipient still exists (which it won't
	-- if the invitation has been deleted)
  IF 
	NOT EXISTS(Select RecipientID FROM ckbx_Invitation_Responses WHERE RecipientID = @RecipientID AND ResponseID = @ResponseID)
	AND EXISTS(Select RecipientID FROM ckbx_InvitationRecipients WHERE RecipientID = @RecipientID)
    BEGIN
      INSERT INTO ckbx_Invitation_Responses
        (RecipientID, ResponseID)
      VALUES
        (@RecipientID, @ResponseID)
    END

    UPDATE ckbx_InvitationRecipients SET HasResponded = 1 WHERE RecipientID = @RecipientID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_ListBatches]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

		CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_ListBatches]
		(
			@InvitationId int
		)
		AS
			SELECT InvitationId, BatchId FROM ckbx_Invitation_QueueBatches WHERE InvitationId = @InvitationId
		
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_ListForSurvey]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_ListForSurvey]
(
	@ResponseTemplateId int,
    @PageNumber int,
    @ResultsPerPage int,
    @SortField varchar(64),
    @SortAscending bit,
    @FilterField varchar(64),
    @FilterValue nvarchar(255)
)
AS

	SET NOCOUNT ON

	--Create the order-by clause, if any
    DECLARE @OrderBy varchar(255);
    DECLARE @WhereCondition nvarchar(250);

	SET @WhereCondition = '';
    SET @OrderBy = ''

	IF len(@SortField) > 0
      BEGIN
        SET @OrderBy = ' ORDER BY ' + @SortField

		IF @SortAscending = 1
			BEGIN
				SET @OrderBy = @OrderBy + ' ASC'
			END
		ELSE
			BEGIN
				SET @OrderBy = @OrderBy + ' DESC'
			END
      END
      
	--If not paging, simply return the results
	DECLARE @Query nvarchar(1000)
	DECLARE @QueryParams nvarchar(500)
	
	SET @QueryParams = '@ResponseTemplateId int, @FilterValue nvarchar(255)'
	
	--Otherwise, perform any necessary paging and return result set
	IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT
					*					
				FROM
					ckbx_invitation
				WHERE
					(ResponseTemplateId = @ResponseTemplateId) '
			
			IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
			BEGIN
				IF (@FilterField = 'Name')
				BEGIN
					  SET @WhereCondition = ' AND ([Name] like ''%'' + @FilterValue + ''%'') '   
				END 

				IF (@FilterField = 'Subject')
				BEGIN
					  SET @WhereCondition = ' AND ([Subject] like ''%'' + @FilterValue + ''%'') '   
				END 
			    
				IF (@FilterField = 'InvitationID')
				BEGIN
					  SET @WhereCondition = ' AND (CAST(InvitationID AS NVARCHAR) = @FilterValue) '   
				END
				
				IF (@FilterField = 'RecipientGUID')
				BEGIN
					  SET @WhereCondition = 
					  ' AND ([InvitationID] IN 
						((select InvitationID 
						  from ckbx_InvitationRecipients 
						  where Replace([GUID], ''-'', '''') like ''%'' + cast(Replace(@FilterValue, ''-'', '''') as NVARCHAR) + ''%'' )) )'
				END
				
			END
			
			SET @Query = @Query + @WhereCondition + @OrderBy; 
			
			exec sp_executesql @Query, @QueryParams, @ResponseTemplateId = @ResponseTemplateId, @FilterValue = @FilterValue
			
			--Now select count
			SET @Query = 'SELECT COUNT(InvitationId) AS TotalItemCount FROM ckbx_Invitation WHERE ResponseTemplateId = @ResponseTemplateId '
			SET @Query = @Query + @WhereCondition
			
			exec sp_executesql @Query, @QueryParams, @ResponseTemplateId = @ResponseTemplateId, @FilterValue = @FilterValue
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			IF object_id('tempdb..#orderedResults') IS NOT NULL
				BEGIN
					DROP TABLE #orderedResults
										
					

				END
			
			IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
			BEGIN
				IF (@FilterField = 'Name')
				BEGIN
					  SET @WhereCondition = ' AND ([Name] like ''%'' + @FilterValue + ''%'' ) '   
				END 

				IF (@FilterField = 'Subject')
				BEGIN
					  SET @WhereCondition = ' AND ([Subject] like ''%'' + @FilterValue + ''%'' ) '   
				END 
			    
				IF (@FilterField = 'InvitationID')
				BEGIN
					  SET @WhereCondition = ' AND ([InvitationID] like ''%'' + @FilterValue + ''%'') '   
				END
				
				IF (@FilterField = 'RecipientGUID')
				BEGIN
					  SET @WhereCondition = 
					  ' AND ([InvitationID] IN
						((select InvitationID 
						  from ckbx_InvitationRecipients 
						  where Replace([GUID], ''-'', '''') like ''%'' + cast(Replace(@FilterValue, ''-'', '''') as NVARCHAR) + ''%'' )) )'
				END
				
			END

			SELECT @Query = '


					CREATE TABLE #orderedResults
					(
						ItemIndex INT IDENTITY(1, 1),
						InvitationID INT
					)

				INSERT INTO #orderedResults
				SELECT InvitationID
				FROM
					ckbx_invitation
				WHERE
					(ResponseTemplateId = @ResponseTemplateId)
				' + @WhereCondition + @OrderBy + '
		
				--Select Rows
				SELECT i.* FROM ckbx_Invitation i JOIN #orderedResults r on r.InvitationID = i.InvitationID WHERE r.ItemIndex BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';
				
				--Select count
				SELECT COUNT(InvitationId) AS TotalItemCount FROM #orderedResults'
			
			exec sp_executesql @Query, @QueryParams, @ResponseTemplateId = @ResponseTemplateId, @FilterValue = @FilterValue
		END




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_ListMessages]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

		CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_ListMessages]
		(
			@InvitationId int
		)
		AS
			SELECT InvitationId, RecipientId, MessageId FROM ckbx_Invitation_QueueMessages WHERE InvitationId = @InvitationId
		
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_ListRecipientMessages]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

		CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_ListRecipientMessages]
		(
			@RecipientId bigint
		)
		AS
			SELECT InvitationId, RecipientId, MessageId FROM ckbx_Invitation_QueueMessages WHERE RecipientId = @RecipientId
		
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_MarkRecipientAsProcessed]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_MarkRecipientAsProcessed]
(
    @RecipientIDs VARCHAR(MAX),
    @BatchID BIGINT
)
AS
BEGIN
    CREATE TABLE #recipientIDs (item int)
    INSERT INTO #recipientIDs exec ckbx_sp_AnalysisTemplate_CrossItemParser ',', @RecipientIDs 

    update ckbx_InvitationRecipients  set ckbx_InvitationRecipients.ProcessingBatchId = @BatchID
		from ckbx_InvitationRecipients inner join #recipientIDs 
		on #recipientIDs.item = ckbx_InvitationRecipients.RecipientID
END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_MarkRecipientResponded]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_MarkRecipientResponded]
(
  @RecipientID bigint
)
AS
  UPDATE ckbx_InvitationRecipients SET HasResponded = 1 WHERE RecipientID = @RecipientID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_OptOut]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_OptOut]
(
	@RecipientGuid uniqueidentifier
)
AS
	UPDATE [ckbx_InvitationRecipients]
	SET OptOut = 1
	WHERE [GUID] = @RecipientGuid
 
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_OptOutEmailAddress]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE  [dbo].[ckbx_sp_Invitation_OptOutEmailAddress]
(
  @EmailAddress nvarchar(255),
  @ResponseTemplateId int,
  @OptOutType int,
  @UserComment nvarchar(1024),
  @InvitationId int
)
AS
	IF @ResponseTemplateId = NULL
		BEGIN
			DELETE FROM [ckbx_Invitation_OptedOutEmails] WHERE EmailAddress = @EmailAddress
		END

	IF (SELECT COUNT(*) FROM [ckbx_Invitation_OptedOutEmails] WHERE
		EmailAddress = @EmailAddress AND ResponseTemplateId = @ResponseTemplateId) > 0
		BEGIN
			DELETE FROM [ckbx_Invitation_OptedOutEmails] 
			WHERE EmailAddress = @EmailAddress AND ResponseTemplateId = @ResponseTemplateId
		END

	INSERT [ckbx_Invitation_OptedOutEmails](EmailAddress, ResponseTemplateId, OptOutType, UserComment, DateOccur, InvitationId)
	VALUES (@EmailAddress, @ResponseTemplateId, @OptOutType, @UserComment, getDate(), @InvitationId)


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_RecordBatch]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

		CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_RecordBatch]
		(
			@InvitationId int,
			@BatchId bigint,
			@BatchDescription nvarchar(1023)
		)
		AS
			IF @BatchId IS NOT NULL
				BEGIN
					INSERT INTO ckbx_Invitation_QueueBatches
						(InvitationId, BatchId, BatchDescription)
					VALUES
						(@InvitationId, @BatchId, @BatchDescription)
				END
		
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_RecordMessage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

		CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_RecordMessage]
		(
			@InvitationId int,
			@RecipientId bigint,
			@MessageId bigint
		)
		AS
			IF @MessageId IS NOT NULL
				BEGIN
					INSERT INTO ckbx_Invitation_QueueMessages
						(InvitationId, RecipientId, MessageId)
					VALUES
						(@InvitationId, @RecipientId, @MessageId)
				END
		
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_RemoveBatch]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

		CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_RemoveBatch]
		(
			@BatchId bigint,
			@InvitationId int
		)
		AS
			IF @BatchId IS NOT NULL
				BEGIN
					DELETE FROM ckbx_Invitation_QueueBatches WHERE BatchId = @BatchId
				END

			IF @InvitationId IS NOT NULL
				BEGIN
					DELETE FROM ckbx_Invitation_QueueBatches WHERE InvitationId = @InvitationId
				END
		
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_RemoveMessage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

		CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_RemoveMessage]
		(
			@InvitationId int,
			@RecipientId bigint,
			@MessageId bigint
		)
		AS
			IF @InvitationId IS NOT NULL
				BEGIN
					DELETE FROM ckbx_Invitation_QueueMessages WHERE InvitationId = @InvitationId
				END

			IF @RecipientId IS NOT NULL
				BEGIN
					DELETE FROM ckbx_Invitation_QueueMessages WHERE RecipientId = @RecipientId
				END

			IF @MessageId IS NOT NULL
				BEGIN
					DELETE FROM ckbx_Invitation_QueueMessages WHERE MessageId = @MessageId
				END
		
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_RemovePanel]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_RemovePanel]
(
	@InvitationID int,
	@PanelID int
)
AS
	DELETE ckbx_InvitationPanels WHERE InvitationID = @InvitationID AND PanelID = @PanelID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_Schedule_Create]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_Schedule_Create]
(
	@InvitationScheduleID int out,
	@InvitationID int,
	@InvitationActivityType varchar(50),
	@DateScheduled datetime,
	@Creator nvarchar(611),
	@BatchID bigint
)
AS
	INSERT INTO ckbx_InvitationSchedule
			   (InvitationID
			   ,InvitationActivityType
			   ,DateScheduled
			   ,ProcessingStarted
			   ,Creator
			   ,ErrorMessage
                           ,BatchID)
		 VALUES
			   (@InvitationID
			   ,@InvitationActivityType
			   ,@DateScheduled
			   ,null
			   ,@Creator
			   ,null
                           ,@BatchID)
			   
	select @InvitationScheduleID = @@IDENTITY



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_Schedule_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_Schedule_Delete]
(
	@InvitationScheduleID int
)
AS
	delete from ckbx_InvitationSchedule
	where InvitationScheduleID = @InvitationScheduleID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_Schedule_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_Schedule_Get]
(
	@InvitationScheduleID int
)
AS
	select * from ckbx_InvitationSchedule
		where InvitationScheduleID = @InvitationScheduleID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_Schedule_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_Schedule_Update]
(
	@InvitationScheduleID int,
	@InvitationActivityType varchar(50),
	@DateScheduled datetime,
	@ProcessingStarted datetime,
	@ProcessingFinished datetime,
	@ErrorMessage ntext,
	@BatchID bigint
)
AS
	update ckbx_InvitationSchedule
		set 		   
			   InvitationActivityType = @InvitationActivityType
			   ,DateScheduled = @DateScheduled
			   ,ProcessingStarted = @ProcessingStarted
                           ,ProcessingFinished = @ProcessingFinished			
			   ,ErrorMessage = @ErrorMessage
                           ,BatchID = @BatchID 
		
	where InvitationScheduleID = @InvitationScheduleID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_Send2Recipient]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_Send2Recipient]
(
  @RecipientID int,
  @InvitationId int,
  @LastSent DateTime,
  @Success bit,
  @OptOut bit,
  @Error ntext,
  @LastBatchMessageId bigint,
  @ProcessingBatchId bigint
)
AS
 UPDATE ckbx_InvitationRecipients 
 SET 
   TotalSent = (TotalSent + 1) , 
   LastSent = @LastSent, 
   SuccessfullySent = @Success, 
   ErrorMessage = @Error,
   LastBatchMessageId = @LastBatchMessageId,
   ProcessingBatchId = @ProcessingBatchId,
   OptOut = @OptOut
 WHERE
   RecipientID = @RecipientID

   IF @LastBatchMessageId IS NOT NULL AND @OptOut = 0
     BEGIN
       EXEC ckbx_sp_Invitation_RecordMessage @InvitationId, @RecipientId, @LastBatchMessageId
     END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_Update]
(
	@InvitationID int,
	@Name nvarchar(255),
	@EmailFormat varchar (4),
	@Subject nvarchar (255),
	@Body ntext,
	@ReminderSubject nvarchar(255),
	@ReminderBody ntext,
	@FromAddress nvarchar (255),
	@FromName nvarchar (255),
	@LinkText nvarchar (255) = null,
	@LoginOption varchar (4),
    @IncludeOptOutLink bit,
    @OptOutText ntext,
	@CompanyProfileId int
)
AS

	UPDATE 
		ckbx_Invitation 
	SET 
		[Name] = @Name, 
		EmailFormat = @EmailFormat, 
		[Subject] = @Subject, 
		Body = @Body, 
		ReminderSubject = @ReminderSubject,
		ReminderBody = @ReminderBody,
		FromAddress = @FromAddress, 
		FromName = @FromName, 
		LinkText = @LinkText, 
		LoginOption = @LoginOption, 
		IncludeOptOutLink = @IncludeOptOutLink, 
		OptOutText = @OptOutText,
		CompanyProfileId = @CompanyProfileId
	WHERE 
		InvitationID = @InvitationID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_UpdateLastSent]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_UpdateLastSent]
(
	@InvitationID int
)
AS
	UPDATE ckbx_Invitation
	SET LastSentOn = GetDate()
	WHERE InvitationID = @InvitationID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Invitation_UpdateRecipient]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Invitation_UpdateRecipient]
(
  @RecipientID int,
  @Deleted bit,
  @OptOut bit
)
AS
BEGIN
  UPDATE ckbx_InvitationRecipients
  SET
    Deleted = @Deleted, 
    OptOut = @OptOut
  WHERE
    RecipientID = @RecipientID

  if @Deleted = 1
  begin
	delete from ckbx_Invitation_QueueMessages where RecipientId = @RecipientID 
  end
END



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Item_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[ckbx_sp_Item_Delete]
(
  @ItemID int,
  @ModifiedDate DATETIME
)
AS
  UPDATE ckbx_Item SET Deleted = 1, ModifiedDate = @ModifiedDate WHERE ItemID = @ItemID
  DELETE FROM ckbx_ItemData_AI_SourceItems WHERE SourceItemID = @ItemID
  
  --Remove all order information for pages containing the item, just to be safe
  DELETE FROM ckbx_Response_PageItemOrder WHERE PageID IN (Select PageID FROM ckbx_Response_PageItemOrder WHERE ItemID =  @ItemID)

  DELETE FROM ckbx_Response_ItemOptionOrder WHERE ItemID = @ItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Item_GetAppearance]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[ckbx_sp_Item_GetAppearance]
(
  @ItemID int
)
AS
  SELECT 
    ia.AppearanceID,
    iac.DataTypeName,
    iac.DataTypeAssembly
  FROM 
    ckbx_ItemAppearances ia
    INNER JOIN ckbx_ItemAppearance ia2 ON ia2.AppearanceID = ia.AppearanceID
    INNER JOIN ckbx_ItemAppearanceCode iac ON iac.AppearanceCode = ia2.AppearanceCode 
  WHERE 
    ia.ItemID = @ItemID
  RETURN;



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Item_GetItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Item_GetItem]
(
	@ItemID int
)
AS
	SELECT 
		i.ItemID, i.ItemTypeID, it.ItemName, i.Alias, i.CreatedDate, i.ModifiedDate, i.Deleted, i.IsActive, it.ItemDataClassName, it.ItemDataAssemblyName, m.MatrixID as ParentItemID
	  FROM 
		ckbx_Item i
		INNER JOIN ckbx_ItemType it ON it.ItemTypeID = i.ItemTypeID
		LEFT OUTER JOIN ckbx_ItemData_MatrixItems m ON i.ItemID = m.ItemId
	  WHERE 
		i.ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Item_GetNumberOfItems]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Item_GetNumberOfItems]
(
	@ItemIDString as VARCHAR(MAX)
)
AS
  declare @statement NVARCHAR(MAX)
    
	set @statement = '
	SELECT
        i.ItemID, i.ItemTypeID, it.ItemName, i.Alias, i.CreatedDate, i.ModifiedDate, i.Deleted, i.IsActive, it.ItemDataClassName, it.ItemDataAssemblyName, m.MatrixID as ParentItemID
    FROM
        ckbx_Item i
        INNER JOIN ckbx_ItemType it ON it.ItemTypeID = i.ItemTypeID
		LEFT OUTER JOIN ckbx_ItemData_MatrixItems m ON i.ItemID = m.ItemId
    WHERE
        i.ItemID IN (' + @ItemIDString + ')'

	execute (@statement)  

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Item_GetPrototype]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[ckbx_sp_Item_GetPrototype]
(
  @ItemID int
)
AS
	--Item text
	select ColumnPrototypeID from ckbx_ItemData_MatrixColumns mc inner join
	ckbx_ItemData_MatrixItems mi on mc.[Column] = mi.[Column] and mc.MatrixID = mi.MatrixID 
	where mi.ItemID = @ItemID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Item_GetTypeInfo]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Item_GetTypeInfo]
(
	@ItemID int
)
AS
	DECLARE @ItemTypeID int

        SELECT
          it.ItemName, it.ItemTypeID, it.ItemDataClassName, it.ItemDataAssemblyName, it.TextIdPrefix
        FROM
          ckbx_Item i
          INNER JOIN ckbx_ItemType it ON it.ItemTypeID = i.ItemTypeID
        WHERE
          i.ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Item_GetTypeInfoForNumberOfItems]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Item_GetTypeInfoForNumberOfItems]
(
	@ItemIDString as VARCHAR(MAX)
)
AS
  declare @statement NVARCHAR(MAX)
    
	set @statement = '
	SELECT
        i.ItemID, it.ItemName, it.ItemTypeID, it.ItemDataClassName, it.ItemDataAssemblyName, it.TextIdPrefix
    FROM
        ckbx_Item i
        INNER JOIN ckbx_ItemType it ON it.ItemTypeID = i.ItemTypeID
    WHERE
        i.ItemID IN (' + @ItemIDString + ')'

	execute (@statement)  

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Item_Insert]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--Alter procedure


CREATE PROCEDURE [dbo].[ckbx_sp_Item_Insert]
(
  @ItemTypeID int,
  @Alias nvarchar(255),
  @CreatedDate DATETIME,
  @IsActive bit,
  @CreatedBy nvarchar(611),
  @ItemID int out
)
AS
begin
  INSERT INTO ckbx_Item (ItemTypeID, Alias, CreatedDate, ModifiedDate, Deleted, IsActive, CreatedBy) VALUES (@ItemTypeID, @Alias, @CreatedDate, @CreatedDate, 0, @IsActive, @CreatedBy)
  SELECT @ItemID = @@IDENTITY
end


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Item_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[ckbx_sp_Item_Update]
(
  @ItemID int,
  @Alias nvarchar(255),
  @ModifiedDate DATETIME,
  @IsActive bit,
  @ModifiedBy nvarchar(611)
)
AS
begin
  UPDATE ckbx_Item SET Alias = @Alias, ModifiedDate = @ModifiedDate, IsActive = @IsActive, ModifiedBy=@ModifiedBy WHERE ItemID = @ItemID
end



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Item_UpdateType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Item_UpdateType]
(
  @ItemID int,
  @ItemTypeID int,
  @ModifiedDate datetime
)
AS
  SET NOCOUNT ON;

  UPDATE ckbx_Item SET ItemTypeID = @ItemTypeID, ModifiedDate = @ModifiedDate WHERE ItemId = @ItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemAppearances_Add]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE   PROCEDURE [dbo].[ckbx_sp_ItemAppearances_Add]
(
  @AppearanceID int,
  @ItemID int
)
AS
IF NOT EXISTS(SELECT AppearanceID FROM ckbx_ItemAppearances WHERE ItemID = @ItemID)
  BEGIN
    INSERT INTO ckbx_ItemAppearances (AppearanceID, ItemID) VALUES (@AppearanceID, @ItemID)
  END
ELSE
  BEGIN
    UPDATE ckbx_ItemAppearances SET AppearanceID = @AppearanceID WHERE ItemID = @ItemID
  END




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_AddListData]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE   PROCEDURE [dbo].[ckbx_sp_ItemData_AddListData]
(
  @ListID int,
  @ItemID int
)
AS
IF NOT EXISTS(SELECT ListID FROM ckbx_ItemLists WHERE ListID = @ListID AND ItemID = @ItemID)
  BEGIN
    INSERT INTO ckbx_ItemLists (ListID, ItemID) VALUES (@ListID, @ItemID)
  END

  --TEMPORARY FOR NOW
--  UPDATE ckbx_ItemOptions SET ItemID = @ItemID WHERE ListID = @ListID






GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_AddRule]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_AddRule]
(
	@ItemID int,
	@RuleID int
)
AS
	IF NOT EXISTS (SELECT ItemID FROM ckbx_ItemRules WHERE ItemID = @ItemID AND RuleID = @RuleID)
	BEGIN
		INSERT INTO ckbx_ItemRules (ItemID, RuleID) VALUES (@ItemID, @RuleID)
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_CheckUpdated]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_CheckUpdated]
(
	@ItemId int,
	@ReferenceDate datetime,
	@Updated bit out
)
AS
	SET @Updated = 0
	DECLARE @LastUpdated datetime

	SELECT @LastUpdated = ModifiedDate FROM ckbx_Item WHERE ItemId = @ItemID
		
	IF @LastUpdated IS NULL OR @ReferenceDate IS NULL OR @LastUpdated > @ReferenceDate
		BEGIN
			SET @Updated = 1
		END



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_CrossTab_DeleteMap]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_CrossTab_DeleteMap]
(
  @AnalysisItemID int
)
AS
  DELETE FROM ckbx_ItemData_CrossTab_Map WHERE AnalysisItemID = @AnalysisItemID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_CrossTab_InsertMap]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_CrossTab_InsertMap]
(
  @AnalysisItemID int,
  @ItemID int,
  @Axis nvarchar(1)
)
AS
  IF NOT EXISTS(Select AnalysisItemID From ckbx_ItemData_CrossTab_Map WHERE AnalysisItemID = @AnalysisItemID AND ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_CrossTab_Map
        (AnalysisItemID, ItemID, Axis)
      VALUES
        (@AnalysisItemID, @ItemID, @Axis)
    END

 


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_CrossTab_UpdateMap]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_CrossTab_UpdateMap]
(
  @AnalysisItemID int,
  @ItemID int,
  @Axis nvarchar(1)
)
AS
  UPDATE ckbx_ItemData_CrossTab_MAP
  SET
    Axis = @Axis
  WHERE
    AnalysisItemID = @AnalysisItemID
    AND ItemID = @ItemID
 


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_DeleteAIPageSource]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_DeleteAIPageSource]
(
  @AnalysisItemID int
)
AS
  DELETE FROM ckbx_ItemData_AI_SourcePages WHERE AnalysisItemID = @AnalysisItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_DeleteAIRT]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_DeleteAIRT]
(
  @AnalysisItemID int
)
AS
  DELETE FROM ckbx_ItemData_AI_ResponseTemplates WHERE AnalysisItemID = @AnalysisItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_DeleteAISource]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_DeleteAISource]
(
  @AnalysisItemID int
)
AS
  DELETE FROM ckbx_ItemData_AI_SourceItems WHERE AnalysisItemID = @AnalysisItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_DeleteMItems]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_DeleteMItems]
(
  @MatrixID int
)
AS
  DELETE FROM ckbx_ItemData_MatrixItems WHERE MatrixID = @MatrixID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_DeleteMRows]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_DeleteMRows]
(
  @MatrixID int
)
AS
  DELETE FROM ckbx_ItemData_MatrixRows WHERE MatrixID = @MatrixID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_DeletePUProps]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_DeletePUProps]
(
  @ItemID int
)
AS
  DELETE FROM ckbx_ItemData_PUProps
  WHERE
    ItemID = @ItemID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetAddress]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetAddress]
(
  @ItemID int
)
AS
-- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
  SELECT
    ItemID,
    AddressID,
    SubTextID,
    IsRequired,
    DefaultTextID,
    Region,
    SearchType,
    [Rule],
    Rural
  FROM
    ckbx_ItemData_Address
  WHERE
    ItemID = @ItemID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetAIPageSourceIds]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetAIPageSourceIds]
(
  @AnalysisItemID int
)
AS
  SELECT AnalysisItemID, SourcePageID FROM ckbx_ItemData_AI_SourcePages WHERE AnalysisItemID = @AnalysisItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetAlias]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetAlias]
(
  @ItemId int
)
AS
	--Item text
	SELECT
		Alias
	FROM
		ckbx_Item
	WHERE
		@ItemId = ItemId

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetAverageScore]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE    PROCEDURE [dbo].[ckbx_sp_ItemData_GetAverageScore]
( 
  @ItemID int
)
AS

-- Get base Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId

  --Average score item data
  SELECT 
	avgScore.ItemID, 
	avgScore.ScoreOption, 
	'' as [OtherOption],
	avgScore.UseAliases
  FROM 
	ckbx_ItemData_AverageScore avgScore 
  WHERE 
	ItemID = @ItemID

  --Source Items
  SELECT AnalysisItemID, SourceItemID FROM ckbx_ItemData_AI_SourceItems WHERE AnalysisItemID = @ItemID

  --Response Templates
  SELECT AnalysisItemID, ResponseTemplateID FROM ckbx_ItemDATA_AI_ResponseTemplates WHERE AnalysisItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetCaptcha]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetCaptcha]
(
   @ItemID int
)
AS
 -- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId


   SELECT
     ItemID,
     MinCodeLength,
     MaxCodeLength,
     CodeType,
     ImageHeight,
     ImageWidth,
     ImageFormat,
     TextStyles,
     EnableSound
   FROM
     ckbx_ItemData_Captcha
   WHERE
     ItemID = @ItemID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetCrossTab]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_GetCrossTab]
(
  @ItemID int
)
AS

-- Get base Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId

  --Crosstab data
  SELECT ItemID, 'Aggregate' AS OtherOption, UseAliases FROM ckbx_ItemData_CrossTab WHERE ItemID = @ItemID

  --Source Items
  SELECT AnalysisItemID, SourceItemID FROM ckbx_ItemData_AI_SourceItems WHERE AnalysisItemID = @ItemID

  --Response Templates
  SELECT AnalysisItemID, ResponseTemplateID FROM ckbx_ItemDATA_AI_ResponseTemplates WHERE AnalysisItemID = @ItemID

  --Crosstab items
  SELECT AnalysisItemID, ItemID, Axis FROM ckbx_ItemData_CrossTab_Map WHERE AnalysisItemID = @ItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetCurrentScore]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetCurrentScore]
(
  @ItemId int
)
AS

 -- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
  --Current score data
  SELECT ItemID, MessageTextId, PageId FROM ckbx_ItemData_CurrentScore WHERE ItemId = @ItemId
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetDetailsItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetDetailsItem]
(
  @ItemID int
)
AS
BEGIN
-- Get base Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId

  --Analysis Item Data
  SELECT
    ItemID,
    GroupAnswers, 
    LinkToResponseDetails,
	UseAliases
  FROM
    ckbx_ItemData_DetailsItem
  WHERE
    ItemID = @ItemID

  --Source Items
  SELECT 
    AnalysisItemID, 
    SourceItemID 
  FROM 
    ckbx_ItemData_AI_SourceItems 
  WHERE 
    AnalysisItemID = @ItemID

  --Response Templates
  SELECT 
    AnalysisItemID, 
    ResponseTemplateID 
  FROM 
    ckbx_ItemDATA_AI_ResponseTemplates 
  WHERE 
    AnalysisItemID = @ItemID
END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetDisplayAnalysis]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_GetDisplayAnalysis]
(
  @ItemID int
)
AS
	--Get base item data
	  SELECT
		ItemId,
		ItemTypeId,
		Alias,
		CreatedDate,
		ModifiedDate,
		IsActive
	  FROM
		ckbx_Item
	  WHERE
		ItemId = @ItemId
		
	--Get disp analysis configuration data
	SELECT 
	    da.ItemID, da.AnalysisGUID, da.ShowInNewTab,
		r.Url, r.UrlTextID, r.AutoRedirect, r.AutoRedirectDelayTime, r.RestartSurvey
	FROM 
		ckbx_ItemData_DisplayAnalysis da
		INNER JOIN ckbx_ItemData_Redirect r on r.ItemID = da.ItemID
	WHERE 
	    r.ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetDR]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--Alter procedure
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetDR]
(
  @ItemID int
)
AS
	--Get Item data
	 SELECT
		ItemId,
		ItemTypeId,
		Alias,
		CreatedDate,
		ModifiedDate,
		IsActive
	  FROM
		ckbx_Item
	  WHERE
		ItemId = @ItemId
		
	
	--Get disp response specific data
	SELECT 
		ItemID, 
		DisplayInline,
		IncludeResponseDetails,
		ShowPageNumbers,
		ShowQuestionNumbers,
		IncludeMessageItems,
		ShowHiddenItems 
	FROM 
		ckbx_ItemData_DispResponse 
	WHERE 
		ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetEmail]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE   PROCEDURE [dbo].[ckbx_sp_ItemData_GetEmail]
(
   @ItemID int
)
AS

 -- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
  --Get email item specific data
   SELECT
     ItemID,
     MessageFormat,
     StyleTemplateID,
     FromAddress,
     ToAddress,
     Bcc,
     SubjectTextID,
     BodyTextID,
     SendOnce
   FROM ckbx_ItemData_Email
   WHERE ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetEmailResponse]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetEmailResponse]
(
   @ItemID int
)
AS
BEGIN
 -- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
  --Get email item specific data
  SELECT
	ItemID,
	MessageFormat,
	StyleTemplateID,
	FromAddress,
	ToAddress,
	Bcc,
	SubjectTextID,
	BodyTextID,
	SendOnce,
	IncludeResponseDetails,
	ShowPageNumbers,
	ShowQuestionNumbers,
	IncludeMessageItems,
	ShowHiddenItems 
   FROM ckbx_ItemData_EmailResponse
   WHERE ItemID = @ItemID
END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetFileUpload]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetFileUpload]
(
   @ItemID int
)
AS

	-- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
	--Get file upload specific data
   SELECT
      ItemID,
      TextID,
      SubTextID,
      IsRequired,
      AllowedFileTypes
   FROM
      ckbx_ItemData_FileUpload
   WHERE
      ItemID = @ItemID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetFrequency]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_GetFrequency]
(
  @ItemID int
)
AS
 -- Get base Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId

  --Analysis Item Data
  SELECT ItemID, OtherOption, UseAliases, PrimarySourceItemID, DisplayStatistics, DisplayAnswers FROM ckbx_ItemData_Frequency WHERE ItemID = @ItemID

  --Source Items
  SELECT AnalysisItemID, SourceItemID FROM ckbx_ItemData_AI_SourceItems WHERE AnalysisItemID = @ItemID

  --Response Templates
  SELECT AnalysisItemID, ResponseTemplateID FROM ckbx_ItemDATA_AI_ResponseTemplates WHERE AnalysisItemID = @ItemID




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetHidden]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetHidden]
(
  @ItemID int
)
AS

 -- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
   --Hidden item specific
  SELECT
    ItemID, TextID, SubTextID, VariableName, VariableSource
  FROM
    [ckbx_ItemData_Hidden]
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetHR]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetHR]
(
  @ItemID int
)
AS
 -- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
   --
  SELECT * FROM ckbx_ItemData_HR WHERE ItemID = @ItemID





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetHtml]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_GetHtml]
    @ItemID int
AS


 -- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
  --Html item specific data   
    SELECT ItemID, Html, InlineCss FROM ckbx_ItemData_Html WHERE ItemID = @ItemID





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetImage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_GetImage]
(
  @ItemID int
)
AS

 -- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
  --Get image item data
	SELECT
	  idi.ItemID,
	  idi.ImagePath,
	  idi.ImageID,
	  i.ImageData,
      i.ContentType,
      i.ImageUrl,
      i.ImageName,
      i.Guid
	FROM
	  ckbx_ItemData_Image idi
	  LEFT OUTER JOIN ckbx_Image i ON i.ImageID = idi.ImageID
	WHERE
	  idi.ItemID = @ItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetImportHandlerForType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetImportHandlerForType]
(
  @ItemTypeName varchar(255)
)
AS
  SELECT
    HandlerTypeName,
    HandlerTypeAssembly
  FROM
    ckbx_ItemImportHandlers iih
    INNER JOIN ckbx_ItemType it ON it.ItemTypeID = iih.ItemTypeID
  WHERE
    it.ItemName = @ItemTypeName
 


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetJavascriptItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetJavascriptItem]
(
	@ItemID int
)
AS
  -- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
  
  --Get Base Javascript Data
  SELECT
	[ItemID],
	[Script]
  FROM
    ckbx_ItemData_Javascript
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetMatrix]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[ckbx_sp_ItemData_GetMatrix]
(
  @ItemID int
)
AS
/* Matrix Item Data */
  SELECT ItemID, TextID, SubTextID, PKIndex, IsRequired FROM ckbx_ItemData_Matrix WHERE ItemID = @ItemID

  /* Matrix Item Data */
  SELECT
    mi.MatrixID,
    mi.Row,
    mi.[Column],
    mi.ItemID,
    it.ItemName as ItemTypeName
  FROM
    ckbx_ItemData_MatrixItems mi
    INNER JOIN ckbx_Item i ON i.ItemID = mi.ItemID
    INNER JOIN ckbx_ItemType it ON it.ItemTypeID = i.ItemTypeID
  WHERE
    mi.MatrixID = @ItemID


  /* Matrix Column Data */
  SELECT
    mc.MatrixID,
    mc.[Column],
    mc.ColumnPrototypeID,
    mc.UniqueAnswers,
	mc.Width,
	it.ItemName as ItemTypeName
  FROM
    ckbx_ItemData_MatrixColumns mc
    INNER JOIN ckbx_Item i ON i.ItemID = mc.ColumnPrototypeID
    INNER JOIN ckbx_ItemType it ON it.ItemTypeID = i.ItemTypeID
  WHERE
    mc.MatrixID = @ItemID

  /* Matrix Row Data */
  SELECT
    mr.MatrixID,
    mr.Row,
    mr.IsSubheading,
    mr.IsOther,
    i.Alias
  FROM
    ckbx_ItemData_MatrixRows mr
	INNER JOIN ckbx_ItemData_Matrix m ON m.ItemID = mr.MatrixID
    LEFT OUTER JOIN ckbx_ItemData_MatrixItems mi ON mi.MatrixID = mr.MatrixID AND mi.Row = mr.Row AND mi.[Column] = m.PKIndex
	LEFT OUTER JOIN ckbx_Item i ON i.ItemID = mi.ItemID
  WHERE
    mr.MatrixID = @ItemID

	/* Matrix Column Prototypes */
	SELECT	
		i.ItemID,
		i.ItemTypeID,
		i.Alias,
		i.CreatedDate,
		i.ModifiedDate,
		i.Deleted,
		it.ItemDataClassName,
		it.ItemDataAssemblyName,
		it.DefaultAppearanceCode,
		it.ItemName,
		it.MobileCompatible
	FROM
		ckbx_ItemData_MatrixColumns mc
		INNER JOIN ckbx_Item i ON i.ItemID = mc.ColumnPrototypeID
		INNER JOIN ckbx_ItemType it ON it.ItemTypeID = i.ItemTypeID
	WHERE
		mc.MatrixID = @ItemID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetMatrixParentId]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetMatrixParentId]
(
   @ChildItemId int
)
AS
  SELECT MatrixID, [Row], [Column] FROM ckbx_ItemData_MatrixItems WHERE ItemId = @ChildItemId


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetMatrixRowSelect]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	
CREATE   PROCEDURE [dbo].[ckbx_sp_ItemData_GetMatrixRowSelect]
(
  @ItemID int
)
AS
  -- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
  
  --Get MatrixRowSelect Data
  SELECT
    ItemID,
    TextID,
    SubTextID,
    AllowMultipleSelection,
    IsRequired,    
    MinToSelect,
    MaxToSelect
  FROM
    ckbx_ItemData_MatrixRowSelect
  WHERE
    ItemID = @ItemID

   --Get Item Options Lists
  SELECT
    ItemID,
    ListID
  FROM
    ckbx_ItemLists
  WHERE
    ItemID = @ItemID

  --Get item options data
  SELECT
    OptionID,
    @ItemID as ItemID,
    TextID,
    Alias,
    Category,    
    IsDefault,
    Position,
    IsOther,
    Points,
    Deleted,
--    il.ListID
     ListID
  FROM
    ckbx_ItemOptions [io]
--    INNER join ckbx_ItemLists il ON il.ListID = io.ListID
  WHERE
--    il.ItemID = @ItemID
    ItemID = @ItemID
    AND ([io].Deleted IS NULL OR [io].Deleted = 0)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetMatrixSumTotal]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetMatrixSumTotal]
(
  @ItemID int
)
AS
-- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
    
  SELECT 
    st.ItemID, 
    st.Operator, 
    st.SumValue,
    slt.*,
    i.Alias,
    i.CreatedDate,
    i.ModifiedDate
  FROM 
    ckbx_ItemData_MatrixSumTotal st
    INNER JOIN ckbx_ItemData_SLText slt ON slt.ItemID = st.ItemID
    INNER JOIN ckbx_Item i ON i.ItemID = st.ItemID
  WHERE 
    st.ItemID = @ItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetMatSummary]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[ckbx_sp_ItemData_GetMatSummary]
(
  @ItemID int
)
AS
-- Get base Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
      
  --Crosstab data
  SELECT ItemID, MatrixSourceItem, 'Aggregate' AS OtherOption, UseAliases  FROM 
  ckbx_ItemData_MatrixSummary WHERE ItemID = @ItemID

  --Source Items
  SELECT AnalysisItemID, SourceItemID FROM ckbx_ItemData_AI_SourceItems WHERE AnalysisItemID = @ItemID

  --Response Templates
  SELECT AnalysisItemID, ResponseTemplateID FROM ckbx_ItemDATA_AI_ResponseTemplates WHERE AnalysisItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetMessage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetMessage]
(
  @ItemID int
)
AS
  SELECT ItemID, TextID FROM ckbx_ItemData_Message WHERE ItemID = @ItemID




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetMLText]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetMLText]
(
  @ItemID int
)
AS
-- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
    
  SELECT
    ItemID,
    TextID,
    SubTextID,
    IsRequired,
    DefaultTextID,
	IsHtmlFormattedData,
	[MaxLength],
	MinLength
  FROM
    ckbx_ItemData_MLText
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetNetPromoterScoreStatisticsTable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetNetPromoterScoreStatisticsTable]
( 
  @ItemID int
)
AS

-- Get base Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId

  --Average score item data
  SELECT 
    npss.ItemID,
	npss.UseAliases
  FROM 
	ckbx_ItemData_NetPromoterScoreStatisticsTable npss 
  WHERE 
	ItemID = @ItemID

	--Source Items
  SELECT AnalysisItemID, SourceItemID FROM ckbx_ItemData_AI_SourceItems WHERE AnalysisItemID = @ItemID

--Response Templates
  SELECT AnalysisItemID, ResponseTemplateID FROM ckbx_ItemDATA_AI_ResponseTemplates WHERE AnalysisItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetNetPromoterScoreTable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetNetPromoterScoreTable]
( 
  @ItemID int
)
AS

-- Get base Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId

  --Average score item data
  SELECT 
    nps.ItemID,
	nps.UseAliases
  FROM 
	ckbx_ItemData_NetPromoterScoreTable nps 
  WHERE 
	ItemID = @ItemID

	--Source Items
  SELECT AnalysisItemID, SourceItemID FROM ckbx_ItemData_AI_SourceItems WHERE AnalysisItemID = @ItemID

--Response Templates
  SELECT AnalysisItemID, ResponseTemplateID FROM ckbx_ItemDATA_AI_ResponseTemplates WHERE AnalysisItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetOptionData]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_GetOptionData]
(
  @OptionID int
)
AS 
  SELECT
	OptionID, 
	TextID, 
	Alias, 
	Category, 
	IsDefault, 
	Position, 
	IsOther, 
	IsNoneOfAbove, 
	Points, 
	Deleted, 	
	ListID,
	ContentID
  FROM
    ckbx_ItemOptions

  WHERE
    OptionID = @OptionID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetPosition]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetPosition]
(
  @ItemId int
)
AS
	SELECT
	  tp.PagePosition AS PagePosition,
	  tpi.Position AS ItemPosition,
	  NULL AS MatrixRowPosition,
	  NULL AS MatrixColumnPosition
	FROM
	  ckbx_TemplatePage_Items tpi
	  INNER JOIN ckbx_Template_Pages tp ON tp.PageId = tpi.PageId
	WHERE
	  tpi.ItemId = @ItemId
	  
	UNION
	    
	SELECT
	  tp.PagePosition AS PagePosition,
	  tpi.Position AS ItemPosition,
	  mi.[Row] AS MatrixRowPosition,
	  mi.[Column] AS MatrixColumnPosition
	FROM
	  ckbx_TemplatePage_Items tpi
	  INNER JOIN ckbx_Template_Pages tp ON tp.PageId = tpi.PageId
	  INNER JOIN ckbx_ItemData_MatrixItems mi ON mi.MatrixId = tpi.ItemId
	WHERE
		mi.ItemId = @ItemId

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetProfileUpdater]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetProfileUpdater]
(
  @ItemID int
)
AS
	--Get Item data
	  SELECT
		ItemId,
		ItemTypeId,
		Alias,
		CreatedDate,
		ModifiedDate,
		IsActive
	  FROM
		ckbx_Item
	  WHERE
		ItemId = @ItemId
		
	--Get question to property mappings
	SELECT ItemID, SourceItemID, ProviderName, PropertyName FROM ckbx_ItemData_PUProps WHERE ItemID = @ItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetRankOrder]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetRankOrder]
(
  @ItemID int
)
AS
  -- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
  
  --Get Base RankOrder Data
  SELECT
	[ItemID],
	[TextID],
	[SubTextID],
	[RankOrderType],
	[RankOrderOptionType],
	[N],
	[Randomize],
	[IsRequired]
  FROM
    ckbx_ItemData_RankOrder
  WHERE
    ItemID = @ItemID

   --Get Item Options Lists
  SELECT
    ItemID,
    ListID
  FROM
    ckbx_ItemLists
  WHERE
    ItemID = @ItemID

  --Get item options data
  SELECT
    OptionID,
    @ItemID as ItemID,
    TextID,
    Alias,
    Category,    
    IsDefault,
    Position,
    IsOther,
    Points,
    Deleted,
--    il.ListID
    ListID,
    ContentID
  FROM
    ckbx_ItemOptions [io]
--    INNER join ckbx_ItemLists il ON il.ListID = io.ListID
  WHERE
--    il.ItemID = @ItemID
    ItemID = @ItemID
    AND ([io].Deleted IS NULL OR [io].Deleted = 0)



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetRankOrderSummary]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetRankOrderSummary]
(
  @ItemID int
)
AS
-- Get base item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
--Item Data
  SELECT ItemID, UseAliases FROM ckbx_ItemData_RankOrderSummary WHERE ItemID = @ItemID

--Source Items
  SELECT AnalysisItemID, SourceItemID FROM ckbx_ItemData_AI_SourceItems WHERE AnalysisItemID = @ItemID

--Response Templates
  SELECT AnalysisItemID, ResponseTemplateID FROM ckbx_ItemDATA_AI_ResponseTemplates WHERE AnalysisItemID = @ItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetRankOrderSummaryTable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetRankOrderSummaryTable]
(
  @ItemID int
)
AS
-- Get base item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
--Item Data
  SELECT ItemID, UseAliases FROM ckbx_ItemData_RankOrderSummaryTable WHERE ItemID = @ItemID

--Source Items
  SELECT AnalysisItemID, SourceItemID FROM ckbx_ItemData_AI_SourceItems WHERE AnalysisItemID = @ItemID

--Response Templates
  SELECT AnalysisItemID, ResponseTemplateID FROM ckbx_ItemDATA_AI_ResponseTemplates WHERE AnalysisItemID = @ItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetRedirect]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_GetRedirect]
	(
	  @ItemID int
	)
	AS

	 -- Get Item data
	  SELECT
		ItemId,
		ItemTypeId,
		Alias,
		CreatedDate,
		ModifiedDate,
		IsActive
	  FROM
		ckbx_Item
	  WHERE
		ItemId = @ItemId
    
	  --Get redirect item data
	  SELECT ItemID, Url, UrlTextID, AutoRedirect, AutoRedirectDelayTime, RestartSurvey, OpenInNewWindow FROM ckbx_ItemData_Redirect WHERE ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetRS]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_GetRS]
(
  @ItemID int
)
AS
 -- Get base Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
  --Get Item Data
  SELECT 
    ItemID,
    StartValue,
    EndValue,
    TextID,
    SubTextID,
    IsRequired,
    DisplayNotApplicableText,
    StartTextID,
    MidTextID,
	NotApplicableTextID
FROM 
    ckbx_ItemData_RS 
WHERE 
    ItemID = @ItemID

--Get Item Options Lists
  SELECT
    ItemID,
    ListID
  FROM
    ckbx_ItemLists
  WHERE
    ItemID = @ItemID

  --Get item options data
  SELECT
    OptionID,
    @ItemID as ItemID,
    TextID,
    Alias,
    IsDefault,
    Position,
    IsOther,
    Points,
    Deleted,
--    [io].ListID
    ListID
  FROM
    ckbx_ItemOptions [io]
    --INNER join ckbx_ItemLists il ON il.ListID = [io].ListID
  WHERE
    --il.ItemID = @ItemID
    [io].ItemID = @ItemID
    AND ([io].Deleted IS NULL OR [io].Deleted = 0)
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetScoreMessage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_GetScoreMessage]
(
  @ItemID int
)
AS
 -- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
  --Score message item data
  SELECT ItemID, PageId FROM ckbx_ItemData_ScoreMessage WHERE ItemID = @ItemID
  
  --Score messages
  SELECT ScoreMessageID, ItemID, LowScore, HighScore FROM ckbx_ItemData_ScoreMessages WHERE ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetSelect1]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetSelect1]
(
  @ItemID int
)
AS
  -- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId

  --Get Base Select1 Data
  SELECT
    ItemID,
    TextID,
    SubTextID,
    IsRequired,
    AllowOther,
    OtherTextID,
    Randomize
  FROM
    ckbx_ItemData_Select1
  WHERE
    ItemID = @ItemID

  --Get Item Options Lists
  SELECT
    ItemID,
    ListID
  FROM
    ckbx_ItemLists
  WHERE
    ItemID = @ItemID

  --Get item options data
  SELECT
    OptionID,
    @ItemID as ItemID,
    TextID,
    Alias,
    Category,
    IsDefault,
    Position,
    IsOther,
    Points,
    Deleted,
--    [io].ListID
    ListID
  FROM
    ckbx_ItemOptions [io]
    --INNER join ckbx_ItemLists il ON il.ListID = [io].ListID
  WHERE
    --il.ItemID = @ItemID
    [io].ItemID = @ItemID
    AND ([io].Deleted IS NULL OR [io].Deleted = 0)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetSelectMany]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[ckbx_sp_ItemData_GetSelectMany]
(
  @ItemID int
)
AS
  -- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
  
  --Get Base SelectMany Data
  SELECT
    ItemID,
    TextID,
    SubTextID,
    IsRequired,
    AllowOther,
    OtherTextID,
    Randomize,
    MinToSelect,
    MaxToSelect,
	AllowNoneOfAbove
  FROM
    ckbx_ItemData_SelectMany
  WHERE
    ItemID = @ItemID

   --Get Item Options Lists
  SELECT
    ItemID,
    ListID
  FROM
    ckbx_ItemLists
  WHERE
    ItemID = @ItemID

  --Get item options data
  SELECT
    OptionID,
    @ItemID as ItemID,
    TextID,
    Alias,
    Category,    
    IsDefault,
    Position,
    IsOther,
    Points,
    Deleted,
--    il.ListID
     ListID
  FROM
    ckbx_ItemOptions [io]
--    INNER join ckbx_ItemLists il ON il.ListID = io.ListID
  WHERE
--    il.ItemID = @ItemID
    ItemID = @ItemID
    AND ([io].Deleted IS NULL OR [io].Deleted = 0)


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetSlider]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[ckbx_sp_ItemData_GetSlider]
(
  @ItemID int
)
AS
  -- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
  
  --Get Base Slider Data
  SELECT
    ItemID,
    TextID,
    SubTextID,
    ValueType,
	MinValue,
	MaxValue,
	StepSize,
	DefaultValue,
	ValueListOptionType
  FROM
    ckbx_ItemData_Slider
  WHERE
    ItemID = @ItemID

   --Get Item Options Lists
  SELECT
    ItemID,
    ListID
  FROM
    ckbx_ItemLists
  WHERE
    ItemID = @ItemID

  --Get item options data
  SELECT
    OptionID,
    @ItemID as ItemID,
    TextID,
    Alias,
    Category,    
    IsDefault,
    Position,
    IsOther,
    Points,
    Deleted,
--    il.ListID
    ListID,
    ContentId
  FROM
    ckbx_ItemOptions [io]
--    INNER join ckbx_ItemLists il ON il.ListID = io.ListID
  WHERE
--    il.ItemID = @ItemID
    ItemID = @ItemID
    AND ([io].Deleted IS NULL OR [io].Deleted = 0)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetSLText]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetSLText]
(
  @ItemID int
)
AS
-- Get Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
  SELECT
    ItemID,
    TextID,
    SubTextID,
    IsRequired,
    DefaultTextID,
    TextFormat,
    MaxLength,
    MaxValue,
    MinValue,
	AutocompleteListId,
	AutocompleteRemote
  FROM
    ckbx_ItemData_SLText
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetStatisticsTable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetStatisticsTable]
(
  @ItemID int
)
AS
-- Get base item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
--Item Data
  SELECT ItemID, ReportOption, UseAliases, 'Aggregate' AS OtherOption FROM ckbx_ItemData_StatisticsTable WHERE ItemID = @ItemID

--Source Items
  SELECT AnalysisItemID, SourceItemID FROM ckbx_ItemData_AI_SourceItems WHERE AnalysisItemID = @ItemID

--Response Templates
  SELECT AnalysisItemID, ResponseTemplateID FROM ckbx_ItemDATA_AI_ResponseTemplates WHERE AnalysisItemID = @ItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetText]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_GetText]
(
  @ItemId int,
  @LanguageCode varchar(5)
)
AS
	DECLARE @TextPrefix NVARCHAR (255)
	SET @TextPrefix = (SELECT it.TextIdPrefix 
						FROM ckbx_ItemType it 
						INNER JOIN ckbx_Item i ON it.ItemTypeID = i.ItemTypeID
						 WHERE i.ItemID = @ItemID)

	--Item text
	SELECT
		TextId,
		TextValue
	FROM
		ckbx_Text t
	WHERE
		TextID = '/' + @TextPrefix + '/' + CAST(@ItemID AS VARCHAR) + '/text'
		AND LanguageCode = @LanguageCode
		
		
	--Sub text
	SELECT
		TextId,
		TextValue
	FROM
		ckbx_Text
	WHERE
		TextID = '/' + @TextPrefix + '/'  + CAST(@ItemID AS VARCHAR) + '/subText'
		AND LanguageCode = @LanguageCode
		
	--Option text		
	SELECT
	  opt.OptionID,
	  opt.Position,
	  opt.TextId,
	  txt.TextValue
	FROM
	  ckbx_ItemLists il
	  INNER JOIN ckbx_ItemOptions opt ON opt.ListID = il.ListID
	  LEFT OUTER JOIN ckbx_Text txt ON txt.TextID = opt.TextID AND LanguageCode = @LanguageCode
	WHERE
	  il.ItemID = @ItemId
	  AND (opt.Deleted IS NULL OR opt.Deleted = 0)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_GetTotalScore]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_GetTotalScore]
(
  @ItemID int
)
AS
  -- Get base Item data
  SELECT
    ItemId,
    ItemTypeId,
    Alias,
    CreatedDate,
    ModifiedDate,
    IsActive
  FROM
    ckbx_Item
  WHERE
    ItemId = @ItemId
    
  --Item Data
  SELECT ItemID, 'Aggregate' AS OtherOption, UseAliases FROM ckbx_ItemData_TotalScore WHERE ItemID = @ItemID

  --Source Items
  SELECT AnalysisItemID, SourceItemID FROM ckbx_ItemData_AI_SourceItems WHERE AnalysisItemID = @ItemID

  --Response Templates
  SELECT AnalysisItemID, ResponseTemplateID FROM ckbx_ItemDATA_AI_ResponseTemplates WHERE AnalysisItemID = @ItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertAddress]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_InsertAddress]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @IsRequired int,
  @DefaultTextID nvarchar(255),
  @Region nvarchar(255),
  @SearchType nvarchar(255),
  @Rule nvarchar(255),
  @Rural nvarchar(255)
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_Address WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_Address
        (ItemID, AddressID, SubTextID, IsRequired, DefaultTextID, Region, SearchType, [Rule], Rural)
      VALUES
        (@ItemID, @TextID, @SubTextID, @IsRequired, @DefaultTextID, @Region, @SearchType, @Rule, @Rural)
    END
  
  RETURN


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertAIPageSource]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertAIPageSource]
(
  @AnalysisItemID int,
  @SourcePageID int
)
AS
  IF NOT EXISTS(Select SourcePageID FROM ckbx_ItemData_AI_SourcePages WHERE AnalysisItemID = @AnalysisItemID AND SourcePageID = @SourcePageID)
    BEGIN
      INSERT INTO ckbx_ItemData_AI_SourcePages
        (AnalysisItemID, SourcePageID)
      VALUES
        (@AnalysisItemID, @SourcePageID)
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertAIRT]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertAIRT]
(
  @AnalysisItemID int,
  @ResponseTemplateID int
)
AS
  IF NOT EXISTS(Select ResponseTemplateID FROM ckbx_ItemData_AI_ResponseTemplates WHERE AnalysisItemID = @AnalysisItemID AND ResponseTemplateID = @ResponseTemplateID)
    BEGIN
      INSERT INTO ckbx_ItemData_AI_ResponseTemplates
        (AnalysisItemID, ResponseTemplateID)
      VALUES
        (@AnalysisItemID, @ResponseTemplateID)
    END



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertAISource]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertAISource]
(
  @AnalysisItemID int,
  @SourceItemID int
)
AS
  IF NOT EXISTS(Select SourceItemID FROM ckbx_ItemData_AI_SourceItems WHERE AnalysisItemID = @AnalysisItemID AND SourceItemID = @SourceItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_AI_SourceItems
        (AnalysisItemID, SourceItemID)
      VALUES
        (@AnalysisItemID, @SourceItemID)
    END



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertAverageScore]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertAverageScore]
( 
  @ItemID int,
  @ScoreOption nvarchar(50),
  @UseAliases bit
)
AS
  IF NOT EXISTS(Select ItemID FROM ckbx_ItemData_AverageScore WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_AverageScore
        (ItemID, ScoreOption, UseAliases)
      VALUES
        (@ItemID, @ScoreOption, @UseAliases)
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertCaptcha]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertCaptcha]
(
  @ItemID int,
  @MaxCodeLength int,
  @MinCodeLength int,
  @CodeType varchar(50),
  @ImageHeight int,
  @ImageWidth int,
  @ImageFormat varchar(50),
  @TextStyles varchar(4000),
  @EnableSound bit
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_Captcha WHERE ItemID = @ItemID)
    BEGIN
       INSERT INTO ckbx_ItemData_Captcha
         (ItemID, MaxCodeLength, MinCodeLength, CodeType, ImageHeight, ImageWidth, ImageFormat, TextStyles, EnableSound)
       VALUES
         (@ItemID, @MaxCodeLength, @MinCodeLength, @CodeType, @ImageHeight, @ImageWidth, @ImageFormat, @TextStyles, @EnableSound)
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertCrossTab]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertCrossTab]
(
  @ItemID int,
  @UseAliases bit
)
AS
  IF NOT EXISTS(Select ItemID FROM ckbx_ItemData_CrossTab WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_CrossTab
        (ItemID, UseAliases)
      VALUES
        (@ItemID, @UseAliases)
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertCurrentScore]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[ckbx_sp_ItemData_InsertCurrentScore]
(
   @ItemID int,
   @MessageTextId nvarchar(255),
   @PageId int
)
AS
  INSERT INTO ckbx_ItemData_CurrentScore
    (ItemId, MessageTextId, PageId)
  VALUES
    (@ItemId, @MessageTextId, @PageId)
    
    

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertDA]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertDA]
(
  @ItemID int, 
  @AnalysisGUID uniqueidentifier,
  @ShowInNewTab bit
)
AS
  IF NOT EXISTS(Select ItemID FROM ckbx_ItemData_DisplayAnalysis WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_DisplayAnalysis (ItemID, AnalysisGUID, ShowInNewTab) VALUES (@ItemID, @AnalysisGUID, @ShowInNewTab)
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertDetailsItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertDetailsItem]
(
  @ItemID int,
  @GroupAnswers bit,
  @LinkToResponseDetails bit,
  @UseAliases bit
)
AS
BEGIN
  IF NOT EXISTS(Select ItemID FROM ckbx_ItemData_DetailsItem WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_DetailsItem
        (ItemID, GroupAnswers, LinkToResponseDetails, UseAliases)
      VALUES
        (@ItemID, @GroupAnswers, @LinkToResponseDetails, @UseAliases)
    END
END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertDR]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--Alter procedure
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertDR]
(
	@ItemID int,
	@DisplayInline bit,
	@IncludeResponseDetails bit,
	@ShowPageNumbers bit,
	@ShowQuestionNumbers bit,
	@IncludeMessageItems bit,
	@ShowHiddenItems bit
)
AS

   IF NOT EXISTS(Select ItemID FROM ckbx_ItemData_DispResponse WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_DispResponse
        (ItemID, DisplayInline, IncludeResponseDetails, ShowPageNumbers, ShowQuestionNumbers, IncludeMessageItems, ShowHiddenItems)
      VALUES
        (@ItemID, @DisplayInline,@IncludeResponseDetails, @ShowPageNumbers, @ShowQuestionNumbers, @IncludeMessageItems, @ShowHiddenItems)
        END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertEmail]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE    PROCEDURE [dbo].[ckbx_sp_ItemData_InsertEmail]
(
   @ItemID int,
   @MessageFormat varchar(5),
   @StyleTemplateID int,
   @FromAddress nvarchar(255),
   @ToAddress nvarchar(1000),
   @Bcc nvarchar(1000),
   @SubjectTextID varchar(255),
   @BodyTextID varchar(255),
   @SendOnce bit
  
)
AS
  INSERT INTO ckbx_ItemData_Email
    (ItemID, MessageFormat, StyleTemplateID, FromAddress, ToAddress, Bcc, SubjectTextID, BodyTextID, SendOnce)
  VALUES
    (@ItemID, @MessageFormat, @StyleTemplateID, @FromAddress, @ToAddress, @Bcc, @SubjectTextID, @BodyTextID, @SendOnce)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertEmailResponse]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertEmailResponse]
(
   @ItemID int,
   @MessageFormat varchar(5),
   @StyleTemplateID int,
   @FromAddress nvarchar(255),
   @ToAddress nvarchar(1000),
   @Bcc nvarchar(1000),
   @SubjectTextID varchar(255),
   @BodyTextID varchar(255),
   @SendOnce bit,
   @IncludeResponseDetails bit,
   @ShowPageNumbers bit,
   @ShowQuestionNumbers bit,
   @IncludeMessageItems bit,
   @ShowHiddenItems bit
)
AS
BEGIN
  INSERT INTO ckbx_ItemData_EmailResponse
    (ItemID, MessageFormat, StyleTemplateID, FromAddress, ToAddress, Bcc, SubjectTextID, BodyTextID, SendOnce, IncludeResponseDetails, ShowPageNumbers, ShowQuestionNumbers, IncludeMessageItems, ShowHiddenItems)
  VALUES
    (@ItemID, @MessageFormat, @StyleTemplateID, @FromAddress, @ToAddress, @Bcc, @SubjectTextID, @BodyTextID, @SendOnce, @IncludeResponseDetails, @ShowPageNumbers, @ShowQuestionNumbers, @IncludeMessageItems, @ShowHiddenItems)
END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertFileUpload]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertFileUpload]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @IsRequired int,
  @AllowedFileTypes nvarchar(1024)
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_FileUpload WHERE ItemID = @ItemID)
    BEGIN
       INSERT INTO ckbx_ItemData_FileUpload
         (ItemID, TextID, SubTextID, IsRequired, AllowedFileTypes)
       VALUES
         (@ItemID, @TextID, @SubTextID, @IsRequired, @AllowedFileTypes)
    END
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertFrequency]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertFrequency]
(
  @ItemID int,
  @OtherOption varchar(50),
  @UseAliases bit,
  @PrimarySourceItemID int,
  @DisplayStatistics int,
  @DisplayAnswers int 
  )
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_Frequency WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_Frequency
        (ItemID, OtherOption, UseAliases, PrimarySourceItemID, DisplayStatistics, DisplayAnswers)
      VALUES
        (@ItemID, @OtherOption, @UseAliases, @PrimarySourceItemID, @DisplayStatistics, @DisplayAnswers)
    END




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertHidden]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertHidden]
(
	@ItemID int,
	@TextID varchar(255),
	@SubTextID varchar(255),
	@VariableName nvarchar(255),
	@VariableSource varchar(255)
)
AS
	 IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_Hidden WHERE ItemID = @ItemID)
    	BEGIN
	INSERT INTO [ckbx_ItemData_Hidden] 
	(
    		ItemID,
		TextID,
		SubTextID,
    		VariableName,
 		VariableSource
	)
	VALUES 
	(
    		@ItemID,
		@TextID,
		@SubTextID,
    		@VariableName,
    		@VariableSource
	)
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertHR]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertHR]
(
  @ItemID int,
  @Width int,
  @Unit varchar(10),
  @Color varchar(50),
  @Thickness int
)
AS
  IF NOT EXISTS(SELECT ItemID From ckbx_ItemData_HR WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_HR (ItemID, Width, Unit, Color, Thickness) VALUES (@ItemID, @Width, @Unit, @Color, @Thickness)
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertHtml]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_InsertHtml]
(
    @ItemID int,
    @Html ntext,
    @InlineCss ntext
)
AS
    INSERT INTO [ckbx_ItemData_Html] 
      (ItemID, Html, InlineCss)
    VALUES 
      (@ItemID, @Html, @InlineCss)
    RETURN





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertImage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_InsertImage]
    @ItemID int,
    @ImagePath nvarchar(1023),
    @ImageID int
AS
INSERT INTO [ckbx_ItemData_Image] (
    ItemID,
    ImagePath,
    ImageID)
VALUES (
    @ItemID,
    @ImagePath,
    @ImageID)





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertJavascript]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertJavascript]
(
  @ItemID int,
  @Script ntext
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_Javascript WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_Javascript
        (ItemID, Script)
      VALUES
        (@ItemID, @Script)
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertMatrix]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE    PROCEDURE [dbo].[ckbx_sp_ItemData_InsertMatrix]
(
    @ItemID int,
    @TextID nvarchar(255),
    @SubTextID nvarchar(255),
    @PKIndex int,
    @IsRequired bit
)
AS
  INSERT INTO [ckbx_ItemData_Matrix] (
    ItemID,
    TextID,
    SubTextID,
    PKIndex,
    IsRequired)
  VALUES (
    @ItemID,
    @TextID,
    @SubTextID,
    @PKIndex,
    @IsRequired)







GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertMatrixRowSelect]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertMatrixRowSelect]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @AllowMultipleSelection bit,
  @IsRequired int,
  @MinToSelect int,
  @MaxToSelect int
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_MatrixRowSelect WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_MatrixRowSelect
        (ItemID, TextID, SubTextID, AllowMultipleSelection, IsRequired, MinToSelect, MaxToSelect)
      VALUES
        (@ItemID, @TextID, @SubTextID, @AllowMultipleSelection, @IsRequired, @MinToSelect, @MaxToSelect)
    END

  RETURN




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertMatrixSumTotal]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertMatrixSumTotal]
(
  @ItemID int,
  @Operator varchar(64),
  @SumValue float
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_MatrixSumTotal WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_MatrixSumTotal
        (ItemID, Operator, SumValue)
      VALUES
        (@ItemID, @Operator, @SumValue)
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertMatSummary]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_InsertMatSummary]
(
  @ItemID int,
  @MatrixSourceItem int,
  @UseAliases bit
)
AS
  IF NOT EXISTS(Select ItemID FROM ckbx_ItemData_MatrixSummary WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_MatrixSummary
        (ItemID, MatrixSourceItem, UseAliases)
      VALUES
        (@ItemID, @MatrixSourceItem, @UseAliases)
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertMColType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[ckbx_sp_ItemData_InsertMColType]
(
  @MatrixID int,
  @Column int,
  @PrototypeID int,
  @UniqueAnswers bit,
  @Width int
)
AS
IF @PrototypeID <= 0
    BEGIN
      RETURN
    END

  IF NOT EXISTS(SELECT ColumnPrototypeID FROM ckbx_ItemData_MatrixColumns WHERE MatrixID = @MatrixID AND ColumnPrototypeID = @PrototypeID)
    BEGIN
      INSERT INTO ckbx_ItemData_MatrixColumns (MatrixID, [Column], ColumnPrototypeID, UniqueAnswers, Width) VALUES (@MatrixID, @Column, @PrototypeID, @UniqueAnswers, @Width)
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertMessage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertMessage]
(
  @ItemID int,
  @TextID nvarchar(255)
)
AS
    INSERT INTO ckbx_ItemData_Message (ItemID, TextID) VALUES (@ItemID, @TextID)
    RETURN




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertMItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE   PROCEDURE [dbo].[ckbx_sp_ItemData_InsertMItem]
(
  @MatrixID int,
  @Row int,
  @Column int,
  @ItemID int
)
 
AS
  IF @ItemID <= 0
    BEGIN
      RETURN
    END

  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_MatrixItems WHERE MatrixID = @MatrixID AND ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_MatrixItems
        (MatrixID, Row, [Column], ItemID)
      VALUES
        (@MatrixID, @Row, @Column, @ItemID)
    END
 






GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertMLText]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertMLText]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @IsRequired int,
  @DefaultTextID nvarchar(255),
  @IsHtmlFormattedData bit,
  @MaxLength int,
  @MinLength int
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_MLText WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_MLText
        (ItemID, TextID, SubTextID, IsRequired, DefaultTextID, IsHtmlFormattedData, [MaxLength], MinLength)
      VALUES
        (@ItemID, @TextID, @SubTextID, @IsRequired, @DefaultTextID, @IsHtmlFormattedData, @MaxLength, @MinLength)
    END
  
  RETURN

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertMRow]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_InsertMRow]
(
  @MatrixID int, 
  @Row int,
  @IsSubheading bit,
  @IsOther bit
)
AS
  IF NOT EXISTS(SELECT Row FROM ckbx_ItemData_MatrixRows WHERE MatrixID = @MatrixID AND Row = @Row)
    BEGIN
     INSERT INTO ckbx_ItemData_MatrixRows
       (MatrixID, Row, IsSubheading, IsOther)
     VALUES
       (@MatrixID, @Row, @IsSubheading, @IsOther)
    END



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertNetPromoterScoreStatisticsTable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertNetPromoterScoreStatisticsTable]
( 
  @ItemID int,
  @UseAliases bit
)
AS

 IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_NetPromoterScoreStatisticsTable WHERE ItemID = @ItemID)
    BEGIN
       INSERT INTO ckbx_ItemData_NetPromoterScoreStatisticsTable
         (ItemId, UseAliases)
       VALUES
         (@ItemId, @UseAliases)
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertNetPromoterScoreTable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertNetPromoterScoreTable]
( 
  @ItemID int,
  @UseAliases bit
)
AS

 IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_NetPromoterScoreTable WHERE ItemID = @ItemID)
    BEGIN
       INSERT INTO ckbx_ItemData_NetPromoterScoreTable
         (ItemId, UseAliases)
       VALUES
         (@ItemId, @UseAliases)
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertPUProp]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertPUProp]
(
  @ItemID int,
  @SourceItemID int,
  @ProviderName varchar(255),
  @PropertyName varchar(255)
)
AS
  INSERT INTO ckbx_ItemData_PUProps
    (ItemID, SourceItemID, ProviderName, PropertyName)
  VALUES
    (@ItemID, @SourceItemID, @ProviderName, @PropertyName)




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertRankOrder]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertRankOrder]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @RankOrderType varchar(25),
  @RankOrderOptionType varchar(25),
  @N int,
  @Randomize bit,
  @IsRequired bit
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_RankOrder WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_RankOrder
        (ItemID, TextID, SubTextID, RankOrderType, RankOrderOptionType, N, Randomize, IsRequired)
      VALUES
        (@ItemID, @TextID, @SubTextID, @RankOrderType, @RankOrderOptionType, @N, @Randomize, @IsRequired)
    END

  RETURN


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertRankOrderSummary]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_InsertRankOrderSummary]
(
  @ItemID int,
  @UseAliases bit
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_RankOrderSummary WHERE ItemID = @ItemID)
    BEGIN
       INSERT INTO ckbx_ItemData_RankOrderSummary
         (ItemId, UseAliases)
       VALUES
         (@ItemId, @UseAliases)
    END
  
  RETURN

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertRankOrderSummaryTable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_InsertRankOrderSummaryTable]
(
  @ItemID int,
  @UseAliases bit
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_RankOrderSummaryTable WHERE ItemID = @ItemID)
    BEGIN
       INSERT INTO ckbx_ItemData_RankOrderSummaryTable
         (ItemId, UseAliases)
       VALUES
         (@ItemId, @UseAliases)
    END
  
  RETURN

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertRedirect]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertRedirect]
(
  @ItemID int,
  @Url nvarchar(1023),
  @UrlTextID nvarchar(1023),
  @AutoRedirect bit,
  @AutoRedirectDelayTime int,
  @RestartSurvey bit,
  @OpenInNewWindow bit
)
AS
  IF NOT EXISTS(Select ItemID from ckbx_ItemData_Redirect WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_Redirect
        (ItemID, Url, UrlTextID, AutoRedirect, AutoRedirectDelayTime, RestartSurvey, OpenInNewWindow)
      VALUES
        (@ItemID, @Url, @UrlTextID, @AutoRedirect, @AutoRedirectDelayTime, @RestartSurvey, @OpenInNewWindow)
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertRS]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--Insert Item
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertRS]
(
  @ItemID int,
  @StartValue int,
  @EndValue int,
  @TextID varchar(255),
  @SubTextID varchar(255),
  @IsRequired int,
  @DisplayNotApplicableText bit,
  @StartTextID varchar(255),
  @MidTextID varchar(255),
  @EndTextID varchar(255),
  @NotApplicableTextID varchar(255)
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_RS WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_RS 
        (ItemID, StartValue, EndValue, TextID, SubTextID, IsRequired, DisplayNotApplicableText, StartTextID, MidTextID, EndTextID, NotApplicableTextID) 
      VALUES 
	(@ItemID, @StartValue, @EndValue, @TextID, @SubTextID, @IsRequired, @DisplayNotApplicableText, @StartTextID, @MidTextID, @EndTextID, @NotApplicableTextID)
    END
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertScoreMessage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertScoreMessage]
(
  @ItemID int,
  @PageID int
)
AS
  IF NOT EXISTS(Select ItemID from ckbx_ItemData_ScoreMessage WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_ScoreMessage (ItemID, PageId) VALUES (@ItemID, @PageID)
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertSelect1]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertSelect1]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @IsRequired int,
  @AllowOther int,
  @OtherTextID nvarchar(255),
  @Randomize int
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_Select1 WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_Select1
        (ItemID, TextID, SubTextID, IsRequired, AllowOther, OtherTextID, Randomize)
      VALUES
        (@ItemID, @TextID, @SubTextID, @IsRequired, @AllowOther, @OtherTextID, @Randomize)
    END

  RETURN



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertSelectMany]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertSelectMany]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @IsRequired int,
  @AllowOther int,
  @OtherTextID nvarchar(255),
  @Randomize int,
  @MinToSelect int,
  @MaxToSelect int,
  @AllowNoneOfAbove bit
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_SelectMany WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_SelectMany
        (ItemID, TextID, SubTextID, IsRequired, AllowOther, OtherTextID, Randomize, MinToSelect, MaxToSelect, AllowNoneOfAbove)
      VALUES
        (@ItemID, @TextID, @SubTextID, @IsRequired, @AllowOther, @OtherTextID, @Randomize, @MinToSelect, @MaxToSelect, @AllowNoneOfAbove)
    END

  RETURN

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertSlider]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_InsertSlider]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @ValueType varchar(25),
  @MinValue int,
  @MaxValue int,
  @StepSize int,
  @DefaultValue int,
  @ValueListOptionType varchar(25)
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_Slider WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_Slider
        (ItemID, TextID, SubTextID, ValueType, MinValue, MaxValue, StepSize, DefaultValue, ValueListOptionType)
      VALUES
        (@ItemID, @TextID, @SubTextID, @ValueType, @MinValue, @MaxValue, @StepSize, @DefaultValue, @ValueListOptionType)
    END

  RETURN

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertSLText]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_InsertSLText]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @IsRequired int,
  @DefaultTextID nvarchar(255),
  @TextFormat int,
  @MaxLength int,
  @MaxValue float,
  @MinValue float,
  @CustomFormatId varchar(128),
  @AutocompleteListId int,
  @AutocompleteRemote nvarchar(2048)
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_SLText WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_SLText
        (ItemID, TextID, SubTextID, IsRequired, DefaultTextID, TextFormat, MaxLength, MaxValue, MinValue, CustomFormatId, AutocompleteListId, AutocompleteRemote)
      VALUES
        (@ItemID, @TextID, @SubTextID, @IsRequired, @DefaultTextID, @TextFormat, @MaxLength, @MaxValue, @MinValue, @CustomFormatId, @AutocompleteListId, @AutocompleteRemote)
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertStatisticsTable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_InsertStatisticsTable]
(
  @ItemID int,
  @ReportOption varchar(20),
  @UseAliases bit
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_ItemData_StatisticsTable WHERE ItemID = @ItemID)
    BEGIN
       INSERT INTO ckbx_ItemData_StatisticsTable
         (ItemId, ReportOption, UseAliases)
       VALUES
         (@ItemId, @ReportOption, @UseAliases)
    END
  
  RETURN

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_InsertTotalScore]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_InsertTotalScore]
(
  @ItemID int,
  @UseAliases bit
)
AS
IF NOT EXISTS(Select ItemID FROM ckbx_ItemData_TotalScore WHERE ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_ItemData_TotalScore
        (ItemID, UseAliases)
      VALUES
        (@ItemID, @UseAliases)
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_ListBasicItemData]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_ListBasicItemData]
(
	@ResponseTemplateID INT,
	@LanguageCode VARCHAR(5),
	@StartPagePosition INT = NULL,
	@EndPagePosition INT = NULL
)
AS
	CREATE TABLE #ColumnPrototypes 
	(
		ItemId INT,
		ColumnPrototypeID INT NULL,
		ItemName VARCHAR(50) NULL,
		TextIdPrefix NVARCHAR(255) NULL
	)

	CREATE TABLE #RowText 
	(
		MatrixId INT,
		[Row] INT NULL,
		RowText NVARCHAR(MAX) NULL
	)

	IF @StartPagePosition IS NULL 
		SET @StartPagePosition = 0

	IF @EndPagePosition IS NULL 
		SET @EndPagePosition = 9999999

	INSERT INTO #ColumnPrototypes 
		SELECT mi.ItemID, mc.ColumnPrototypeID, it.ItemName, it.TextIdPrefix 
			FROM ckbx_TemplatePage_Items tpi
			INNER JOIN ckbx_Template_Pages tp ON tp.PageID = tpi.PageID
			INNER JOIN ckbx_ItemData_MatrixItems mi ON mi.MatrixId = tpi.ItemId
			INNER JOIN ckbx_ItemData_MatrixColumns mc ON mc.MatrixID = tpi.ItemId AND mc.[Column] = mi.[Column]
			INNER JOIN ckbx_Item i ON i.ItemID = mc.ColumnPrototypeID
			INNER JOIN ckbx_ItemType it ON i.ItemTypeID = it.ItemTypeID
				WHERE tp.TemplateID = @ResponseTemplateID AND it.IsAnswerable = 1 AND tp.PagePosition BETWEEN @StartPagePosition AND @EndPagePosition
	
	INSERT INTO #RowText 
		SELECT tpi.ItemId , mi.[Row] , CAST(t.TextValue COLLATE DATABASE_DEFAULT AS VARCHAR(MAX)) AS RowText
			FROM ckbx_TemplatePage_Items tpi
			INNER JOIN ckbx_Template_Pages tp ON tp.PageID = tpi.PageID
			INNER JOIN ckbx_ItemData_MatrixItems mi ON mi.MatrixID = tpi.ItemId AND mi.[Column] = 1
			INNER JOIN ckbx_ItemData_MatrixRows mr ON mr.MatrixID = tpi.ItemId AND mr.[Row] = mi.[Row] AND mr.IsOther = 1
			INNER JOIN ckbx_Item i ON i.ItemID = mi.ItemID
			INNER JOIN ckbx_ItemType it ON it.ItemTypeID = i.ItemTypeID
			LEFT OUTER JOIN ckbx_Text t ON t.TextID COLLATE DATABASE_DEFAULT = ('/' + it.TextIdPrefix + '/' + CAST(mi.ItemID AS VARCHAR) + '/defaultText') COLLATE DATABASE_DEFAULT AND LanguageCode = @LanguageCode
				WHERE tp.TemplateID = @ResponseTemplateID AND tp.PagePosition BETWEEN @StartPagePosition AND @EndPagePosition

		UNION SELECT tpi.ItemId , mi.[Row], CAST(t.TextValue COLLATE DATABASE_DEFAULT AS VARCHAR(MAX)) AS RowText
			FROM ckbx_TemplatePage_Items tpi
			INNER JOIN ckbx_Template_Pages tp ON tp.PageID = tpi.PageID
			INNER JOIN ckbx_ItemData_MatrixItems mi ON mi.MatrixID = tpi.ItemId AND mi.[Column] = 1
			INNER JOIN ckbx_ItemData_MatrixRows mr ON mr.MatrixID = tpi.ItemId AND mr.[Row] = mi.[Row] AND mr.IsOther != 1 AND mr.IsSubheading != 1
			INNER JOIN ckbx_Item i ON i.ItemID = mi.ItemID
			INNER JOIN ckbx_ItemType it ON it.ItemTypeID = i.ItemTypeID
			LEFT OUTER JOIN ckbx_Text t ON t.TextID COLLATE DATABASE_DEFAULT = ('/' + it.TextIdPrefix + '/' + CAST(mi.ItemID AS VARCHAR) + '/text') COLLATE DATABASE_DEFAULT AND LanguageCode = @LanguageCode
				WHERE tp.TemplateID = @ResponseTemplateID AND tp.PagePosition BETWEEN @StartPagePosition AND @EndPagePosition

	--select items data			
	SELECT 
		i.ItemID AS ItemID, (it.ItemName COLLATE DATABASE_DEFAULT) AS ItemType,
		(CAST((tp.PagePosition-1) AS VARCHAR) +'.'+CAST(tpi.Position AS VARCHAR)+ ' - ' + CAST(t.TextValue COLLATE DATABASE_DEFAULT AS VARCHAR(MAX))) AS [ItemText],
		tp.PagePosition, tpi.Position AS ItemPosition, NULL AS MatrixRowPosition, NULL AS MatrixColumnPosition, NULL AS ParentID, NULL as RowNumber
			FROM ckbx_TemplatePage_Items tpi
			INNER JOIN ckbx_Template_Pages tp ON tp.PageID = tpi.PageID
			INNER JOIN ckbx_Item i ON i.ItemID = tpi.ItemID
			INNER JOIN ckbx_ItemType it ON i.ItemTypeID = it.ItemTypeID
			LEFT OUTER JOIN ckbx_Text t ON t.TextID COLLATE DATABASE_DEFAULT = ('/' + it.TextIdPrefix + '/' + CAST(tpi.ItemID AS VARCHAR) + '/text') COLLATE DATABASE_DEFAULT AND LanguageCode = @LanguageCode
				WHERE tp.TemplateID = @ResponseTemplateID AND it.IsAnswerable = 1 AND it.ItemName != 'Matrix' AND it.ItemName != 'RankOrder' AND tp.PagePosition BETWEEN @StartPagePosition AND @EndPagePosition
	
	--select column data for matrixes			
	UNION SELECT
		mi.ItemID AS ItemID, (cp.ItemName COLLATE DATABASE_DEFAULT) AS ItemType, 
		(CAST((tp.PagePosition-1) AS VARCHAR) +'.'+CAST(tpi.Position AS VARCHAR)+'.'+CAST(mi.[Row] AS VARCHAR)+'.'+CAST(mi.[Column] AS VARCHAR) + ' '+ r.RowText + ' - ' + CAST(t.TextValue COLLATE DATABASE_DEFAULT AS VARCHAR(MAX))) AS [ItemText],
		tp.PagePosition	,tpi.Position AS ItemPosition, mi.[Row] AS MatrixRowPosition, mi.[Column] AS MatrixColumnPosition, mi.[MatrixID] AS ParentID, mi.[Row] as RowNumber
			FROM ckbx_TemplatePage_Items tpi
			INNER JOIN ckbx_Template_Pages tp ON tp.PageID = tpi.PageID
			INNER JOIN ckbx_ItemData_MatrixItems mi ON mi.MatrixId = tpi.ItemId
			INNER JOIN ckbx_ItemData_MatrixRows mr ON mr.MatrixID = tpi.ItemId AND mr.[Row] = mi.[Row] AND mr.IsSubheading != 1
			INNER JOIN #ColumnPrototypes cp ON mi.ItemID = cp.ItemId
			LEFT OUTER JOIN ckbx_Text t ON t.TextID COLLATE DATABASE_DEFAULT = ('/' + cp.TextIdPrefix + '/' + CAST(cp.ColumnPrototypeID AS VARCHAR) + '/text') COLLATE DATABASE_DEFAULT AND LanguageCode = @LanguageCode
			LEFT OUTER JOIN #RowText r ON r.MatrixId =  tpi.ItemId AND mi.[Row] = r.[Row]
				WHERE tp.TemplateID = @ResponseTemplateID AND tp.PagePosition BETWEEN @StartPagePosition AND @EndPagePosition
		
			ORDER BY tp.PagePosition, ItemPosition, MatrixColumnPosition, MatrixRowPosition
			
	DROP TABLE #ColumnPrototypes 
	DROP TABLE #RowText 

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_RemoveColumnsFromMatrix]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_RemoveColumnsFromMatrix]
(
  @MatrixID int
)
AS
  DELETE FROM ckbx_ItemData_MatrixColumns WHERE MatrixID = @MatrixID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_RemoveItemsFromMatrix]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_RemoveItemsFromMatrix]
(
  @MatrixID int
)
AS
  DELETE FROM ckbx_ItemData_MatrixItems WHERE MatrixID = @MatrixID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_RemoveListData]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_RemoveListData]
(
  @ListID int,
  @ItemID int
)
AS
  UPDATE ckbx_ItemOptions SET ItemID = NULL WHERE ListID = @ListID
  DELETE FROM ckbx_ItemLists WHERE ItemID = @ItemID AND ListID = @ListID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_RemoveRule]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_RemoveRule]
(
	@ItemID int
)
AS

DELETE ckbx_ItemRules WHERE ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_SM_AddMessage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_SM_AddMessage]
(
  @ItemID int,
  @LowScore float,
  @HighScore float,
  @ScoreMessageID int out 
)
AS
IF NOT EXISTS(Select ItemID FROM ckbx_ItemData_ScoreMessages WHERE ItemID = @ItemID AND LowScore = @LowScore AND HighScore = @HighScore)
    BEGIN
      INSERT INTO ckbx_ItemData_ScoreMessages
        (ItemID, LowScore, HighScore)
      VALUES
        (@ItemID, @LowScore, @HighScore)

      SELECT @ScoreMessageID = @@IDENTITY

	 --Set the text ID
	UPDATE ckbx_ItemData_ScoreMessages
	SET		MessageTextID = '/scoreMessageData/' + convert(varchar(10), @ItemID) + '/' + convert(varchar(10), @ScoreMessageID)
	WHERE	ScoreMessageID = @ScoreMessageID

    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_SM_DeleteMessage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_SM_DeleteMessage]
(
  @ScoreMessageID int,
  @ItemID int
)
AS
  DELETE FROM ckbx_ItemData_ScoreMessages
  WHERE ScoreMessageID = @ScoreMessageID AND ItemID = @ItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_SM_DeleteMessages]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_SM_DeleteMessages]
(
  @ItemId int
)
AS
  DELETE FROM ckbx_Itemdata_ScoreMessages WHERE ItemId = @ItemId
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_SM_UpdateMessage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_SM_UpdateMessage]
(
  @ScoreMessageID int,
  @ItemID int,
  @LowScore int,
  @HighScore int
)
AS
   UPDATE ckbx_ItemData_ScoreMessages
   SET
     LowScore = @LowScore,
     HighScore = @HighScore,
     ItemID = @ItemID
   WHERE
     ScoreMessageID = @ScoreMessageID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateAddress]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateAddress]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @IsRequired int,
  @DefaultTextID nvarchar(255),
  @Region nvarchar(255),
  @SearchType nvarchar(255),
  @Rule nvarchar(255),
  @Rural nvarchar(255)
)
AS
  UPDATE ckbx_ItemData_Address
  SET
    AddressID = @TextID,
    SubTextID = @SubTextID,
    IsRequired = @IsRequired,
    DefaultTextID = @DefaultTextID,
    Region = @Region,
    SearchType = @SearchType,
    [Rule] = @Rule,
    Rural = @Rural
  WHERE
    ItemID = @ItemID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateAverageScore]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateAverageScore]
( 
  @ItemID int,
  @ScoreOption nvarchar(50),
  @UseAliases bit
)
AS
  UPDATE ckbx_ItemData_AverageScore
  SET
    ScoreOption = @ScoreOption,
	UseAliases = @UseAliases
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateCaptcha]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateCaptcha]
(
  @ItemID int,
  @MaxCodeLength int,
  @MinCodeLength int,
  @CodeType varchar(50),
  @ImageHeight int,
  @ImageWidth int,
  @ImageFormat varchar(50),
  @TextStyles varchar(4000),
  @EnableSound bit
)
AS
UPDATE ckbx_ItemData_Captcha SET
    MaxCodeLength = @MaxCodeLength,
    MinCodeLength = @MinCodeLength,
    CodeType = @CodeType,
    ImageHeight = @ImageHeight,
    ImageWidth = @ImageWidth,
    ImageFormat = @ImageFormat,
    TextStyles = @TextStyles,
    EnableSound = @EnableSound
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateCrossTab]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateCrossTab]
(
  @ItemID int,
  @UseAliases bit
)
AS
  UPDATE ckbx_ItemData_CrossTab
  SET
	UseAliases = @UseAliases
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateCurrentScore]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateCurrentScore]
(
   @ItemID int,
   @MessageTextId nvarchar(255),
   @PageId int
)
AS
  UPDATE ckbx_ItemData_CurrentScore	
  SET 
	MessageTextId = @MessageTextId,
	PageId = @PageId
  WHERE
    ItemId = @ItemId


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateDA]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateDA]
(
  @ItemID int, 
  @AnalysisGUID uniqueidentifier,
  @ShowInNewTab bit
)
AS
  UPDATE ckbx_ItemData_DisplayAnalysis
  SET
    AnalysisGUID = @AnalysisGUID,
    ShowInNewTab = @ShowInNewTab
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateDetailsItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateDetailsItem]
(
  @ItemID int,
  @GroupAnswers bit,
  @LinkToResponseDetails bit,
  @UseAliases bit
)
AS
BEGIN
  UPDATE 
    ckbx_ItemData_DetailsItem
  SET
    GroupAnswers = @GroupAnswers,
    LinkToResponseDetails = @LinkToResponseDetails,
    UseAliases = @UseAliases
  WHERE
    ItemID = @ItemID
END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateDR]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--Alter procedure
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateDR]
(
  @ItemID int,
  @DisplayInline bit,
  @IncludeResponseDetails bit,
  @ShowPageNumbers bit,
  @ShowQuestionNumbers bit,
  @IncludeMessageItems bit,
  @ShowHiddenItems bit
)
AS
	UPDATE ckbx_ItemData_DispResponse
  SET
    DisplayInline = @DisplayInline,
    IncludeResponseDetails = @IncludeResponseDetails,
    ShowPageNumbers = @ShowPageNumbers,
    ShowQuestionNumbers = @ShowQuestionNumbers,
    IncludeMessageItems = @IncludeMessageItems,
    ShowHiddenItems = @ShowHiddenItems
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateEmail]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE   PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateEmail]
(
   @ItemID int,
   @MessageFormat varchar(5),
   @StyleTemplateID int, 
   @FromAddress nvarchar(255),
   @ToAddress nvarchar(1000),
   @Bcc nvarchar(1000),
   @SubjectTextID varchar(255),
   @BodyTextID varchar(255),
   @SendOnce bit
  
)
AS
  UPDATE ckbx_ItemData_Email
  SET 
    MessageFormat = @MessageFormat,
    StyleTemplateID = @StyleTemplateID,
    FromAddress = @FromAddress,
    ToAddress = @ToAddress,
    Bcc = @Bcc,
    SubjectTextID = @SubjectTextID,
    BodyTextID = @BodyTextID,
    SendOnce = @SendOnce
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateEmailResponse]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateEmailResponse]
(
   @ItemID int,
   @MessageFormat varchar(5),
   @StyleTemplateID int, 
   @FromAddress nvarchar(255),
   @ToAddress nvarchar(1000),
   @Bcc nvarchar(1000),
   @SubjectTextID varchar(255),
   @BodyTextID varchar(255),
   @SendOnce bit,
   @IncludeResponseDetails bit,
   @ShowPageNumbers bit,
   @ShowQuestionNumbers bit,
   @IncludeMessageItems bit,
   @ShowHiddenItems bit
)
AS
BEGIN
  UPDATE ckbx_ItemData_EmailResponse
  SET 
    MessageFormat = @MessageFormat,
    StyleTemplateID = @StyleTemplateID,
    FromAddress = @FromAddress,
    ToAddress = @ToAddress,
    Bcc = @Bcc,
    SubjectTextID = @SubjectTextID,
    BodyTextID = @BodyTextID,
    SendOnce = @SendOnce,
    IncludeResponseDetails = @IncludeResponseDetails,
    ShowPageNumbers = @ShowPageNumbers,
    ShowQuestionNumbers = @ShowQuestionNumbers,
    IncludeMessageItems = @IncludeMessageItems,
    ShowHiddenItems = @ShowHiddenItems
  WHERE
    ItemID = @ItemID
END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateFileUpload]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateFileUpload]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @IsRequired int,
  @AllowedFileTypes nvarchar(1024)
)
AS
UPDATE ckbx_ItemData_FileUpload SET
    TextID = @TextID,
    SubTextID = @SubTextID,
    IsRequired = @IsRequired,
    AllowedFileTypes = @AllowedFileTypes
  WHERE
    ItemID = @ItemID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateFrequency]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateFrequency]
(
  @ItemID int,
  @OtherOption varchar(50),
  @UseAliases bit,
  @PrimarySourceItemID int,
  @DisplayStatistics int,
  @DisplayAnswers int  
)
AS
  UPDATE ckbx_ItemData_Frequency
  SET
    OtherOption = @OtherOption,
	UseAliases = @UseAliases,
	PrimarySourceItemID = @PrimarySourceItemID,
	DisplayStatistics = @DisplayStatistics,
	DisplayAnswers = @DisplayAnswers
  WHERE
    ItemID = @ItemID




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateHidden]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateHidden]
(
    	@ItemID int,
	@TextID varchar (255),
	@SubTextID varchar (255),
    	@VariableName nvarchar(255),
    	@VariableSource varchar(255)
)
AS
  UPDATE [ckbx_ItemData_Hidden]
  SET
 	TextID = @TextID,
	SubTextID = @SubTextID,
	VariableName = @VariableName,
	VariableSource = @VariableSource
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateHR]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateHR]
(
  @ItemID int,
  @Width int,
  @Unit varchar(10),
  @Color varchar(50),
  @Thickness int
)
AS
  UPDATE 
    ckbx_ItemData_HR 
  SET  
    Width = @Width, 
    Unit = @Unit, 
    Color = @Color, 
    Thickness = @Thickness
  WHERE
    ItemID = @ItemID
  




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateHtml]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateHtml]
    @ItemID int,
    @Html ntext,
    @InlineCss ntext
AS
UPDATE [ckbx_ItemData_Html]
SET
    Html = @Html,
    InlineCss = @InlineCss
WHERE
    ItemID = @ItemID





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateImage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE   PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateImage]
    @ItemID int,
    @ImagePath nvarchar(1023),
    @ImageID int
AS
UPDATE [ckbx_ItemData_Image]
SET
    ImagePath = @ImagePath,
    ImageID = @ImageID
WHERE
    ItemID = @ItemID






GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateJavascript]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateJavascript]
(
  @ItemID int,
  @Script ntext
)
AS
  UPDATE ckbx_ItemData_Javascript
  SET
    Script = @Script
  WHERE
    ItemID = @ItemID  

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateMatrix]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE   PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateMatrix]
(
    @ItemID int,
    @TextID nvarchar(255),
    @SubTextID nvarchar(255),
    @PKIndex int,
    @IsRequired bit
)
AS
  UPDATE [ckbx_ItemData_Matrix]
  SET
    TextID = @TextID,
    SubTextID = @SubTextID,
    IsRequired = @IsRequired,
    PKIndex = @PKIndex
  WHERE
    ItemID = @ItemID






GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateMatrixRowSelect]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateMatrixRowSelect]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @AllowMultipleSelection bit,
  @IsRequired int,
  @MinToSelect int,
  @MaxToSelect int
)
AS
  UPDATE ckbx_ItemData_MatrixRowSelect
  SET
    TextID = @TextID,
    SubTextID = @SubTextID,
    AllowMultipleSelection = @AllowMultipleSelection,
    IsRequired = @IsRequired,    
    MinToSelect = @MinToSelect,
    MaxToSelect = @MaxToSelect
  WHERE
    ItemID = @ItemID






GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateMatrixSumTotal]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateMatrixSumTotal]
(
  @ItemID int,
  @Operator varchar(64),
  @SumValue float
)
AS
  UPDATE ckbx_ItemData_MatrixSumTotal
  SET
    Operator = @Operator,
    SumValue = @SumValue
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateMatSummary]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateMatSummary]
(
  @ItemID int,
  @MatrixSourceItem int,
  @UseAliases bit
)
AS
  UPDATE ckbx_ItemData_MatrixSummary
  SET
    MatrixSourceItem = @MatrixSourceItem,
	UseAliases = @UseAliases
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateMessage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateMessage]
(
  @ItemID int,
  @TextID nvarchar(255)
)
AS
  UPDATE ckbx_ItemData_Message SET TextID = @TextID WHERE ItemID = @ItemID





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateMLText]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateMLText]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @IsRequired int,
  @DefaultTextID nvarchar(255),
  @IsHtmlFormattedData bit,
  @MaxLength int,
  @MinLength int
)
AS
  UPDATE ckbx_ItemData_MLText
  SET
    TextID = @TextID,
    SubTextID = @SubTextID,
    IsRequired = @IsRequired,
    DefaultTextID = @DefaultTextID,
	IsHtmlFormattedData = @IsHtmlFormattedData,
	[MaxLength] = @MaxLength,
    MinLength = @MinLength
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateNetPromoterScoreStatisticsTable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateNetPromoterScoreStatisticsTable]
( 
  @ItemID int,
  @UseAliases bit
)
AS

UPDATE ckbx_ItemData_NetPromoterScoreStatisticsTable
  SET
	UseAliases = @UseAliases
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateNetPromoterScoreTable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateNetPromoterScoreTable]
( 
  @ItemID int,
  @UseAliases bit
)
AS

UPDATE ckbx_ItemData_NetPromoterScoreTable
  SET
	UseAliases = @UseAliases
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateRankOrder]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateRankOrder]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @RankOrderType varchar(25),
  @RankOrderOptionType varchar(25),
  @N int,
  @Randomize bit,
  @IsRequired bit  
)
AS
  UPDATE ckbx_ItemData_RankOrder
  SET
    TextID = @TextID,
    SubTextID = @SubTextID,
    RankOrderType = @RankOrderType,
    RankOrderOptionType = @RankOrderOptionType,
	N = @N,
	Randomize = @Randomize,
	IsRequired = @IsRequired	
  WHERE
    ItemID = @ItemID
    

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateRankOrderSummary]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateRankOrderSummary]
(
  @ItemID int,
  @UseAliases bit
)
AS
  UPDATE ckbx_ItemData_RankOrderSummary
  SET
	UseAliases = @UseAliases
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateRankOrderSummaryTable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateRankOrderSummaryTable]
(
  @ItemID int,
  @UseAliases bit
)
AS
  UPDATE ckbx_ItemData_RankOrderSummaryTable
  SET
	UseAliases = @UseAliases
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateRedirect]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateRedirect]
(
  @ItemID int,
  @Url nvarchar(1023),
  @UrlTextID nvarchar(1023),
  @AutoRedirect bit,
  @AutoRedirectDelayTime int,
  @RestartSurvey bit,
  @OpenInNewWindow bit
)
AS
    UPDATE ckbx_ItemData_Redirect
    SET
        Url = @Url,
        UrlTextID = @UrlTextID,
        AutoRedirect = @AutoRedirect,
        RestartSurvey = @RestartSurvey,
        AutoRedirectDelayTime = @AutoRedirectDelayTime,
		OpenInNewWindow = @OpenInNewWindow
    WHERE
        ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateRS]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--UpdateItem
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateRS]
(
  @ItemID int,
  @StartValue int,
  @EndValue int,
  @TextID varchar(255),
  @SubTextID varchar(255),
  @IsRequired int,
  @DisplayNotApplicableText bit,
  @StartTextID varchar(255),
  @MidTextID varchar(255),
  @EndTextID varchar(255),
  @NotApplicableTextID varchar(255)
)
AS
  UPDATE
    ckbx_ItemData_RS
  SET
    StartValue = @StartValue,
    EndValue = @EndValue,
    TextID = @TextID,
    SubTextID = @SubTextID,
    IsRequired = @IsRequired,
    DisplayNotApplicableText = @DisplayNotApplicableText,
    StartTextID = @StartTextID,
    MidTextID = @MidTextID,
    EndTextID = @EndTextID,
    NotApplicableTextID = @NotApplicableTextID
  WHERE
    ItemID = @ItemID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateScoreMessage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateScoreMessage]
(
  @ItemID int,
  @PageID int
)
AS
	UPDATE ckbx_ItemData_ScoreMessage
	SET PageId = @PageID WHERE ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateSelect1]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateSelect1]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @IsRequired int,
  @AllowOther int,
  @OtherTextID nvarchar(255),
  @Randomize int
)
AS
  UPDATE ckbx_ItemData_Select1
  SET
    TextID = @TextID,
    SubTextID = @SubTextID,
    IsRequired = @IsRequired,
    AllowOther = @AllowOther,
    OtherTextID = @OtherTextID,
    Randomize = @Randomize
  WHERE
    ItemID = @ItemID






GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateSelectItemID]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateSelectItemID]
(
  @ExistingItemID int,
  @ExistingItemName varchar(50),
  @NewItemID int,
  @NewItemName varchar(50)
)
AS
  -- Delete existing
  IF @ExistingItemName = 'Checkboxes'
    BEGIN
		DELETE FROM ckbx_ItemData_SelectMany WHERE ItemID = @ExistingItemID
    END
  ELSE IF @ExistingItemName = 'DropDownList' OR @ExistingItemName = 'RadioButtons'
    BEGIN
		DELETE FROM ckbx_ItemData_Select1 WHERE ItemID = @ExistingItemID
    END

  --Update new
   IF @NewItemName = 'Checkboxes'
    BEGIN
		UPDATE ckbx_ItemData_SelectMany SET ItemID = @ExistingItemID WHERE ItemID = @NewItemID
    END
  ELSE IF @NewItemName = 'DropDownList' OR @NewItemName = 'RadioButtons'
    BEGIN
		UPDATE ckbx_ItemData_Select1 SET ItemID = @ExistingItemID WHERE ItemID = @NewItemID
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateSelectMany]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateSelectMany]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @IsRequired int,
  @AllowOther int,
  @OtherTextID nvarchar(255),
  @Randomize int,
  @MinToSelect int,
  @MaxToSelect int,
  @AllowNoneOfAbove bit
)
AS
  UPDATE ckbx_ItemData_SelectMany
  SET
    TextID = @TextID,
    SubTextID = @SubTextID,
    IsRequired = @IsRequired,
    AllowOther = @AllowOther,
    OtherTextID = @OtherTextID,
    Randomize = @Randomize,
    MinToSelect = @MinToSelect,
    MaxToSelect = @MaxToSelect,
	AllowNoneOfAbove = @AllowNoneOfAbove
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateSlider]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateSlider]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @ValueType varchar(25),
  @MinValue int,
  @MaxValue int,
  @StepSize int,
  @DefaultValue int,
  @ValueListOptionType varchar(25)
)
AS
  UPDATE ckbx_ItemData_Slider
  SET
    TextID = @TextID,
    SubTextID = @SubTextID,
    ValueType = @ValueType,
	MinValue = @MinValue,
	MaxValue = @MaxValue,
	StepSize = @StepSize,
	DefaultValue = @DefaultValue,
	ValueListOptionType = @ValueListOptionType
  WHERE
    ItemID = @ItemID
    

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateSLText]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateSLText]
(
  @ItemID int,
  @TextID nvarchar(255),
  @SubTextID nvarchar(255),
  @IsRequired int,
  @DefaultTextID nvarchar(255),
  @TextFormat int,
  @MaxLength int,
  @MaxValue float,
  @MinValue float,
  @CustomFormatId varchar(128),
  @AutocompleteListId int,
  @AutocompleteRemote nvarchar(2048)
)
AS
  UPDATE ckbx_ItemData_SLText
  SET
    TextID = @TextID,
    SubTextID = @SubTextID,
    IsRequired = @IsRequired,
    DefaultTextID = @DefaultTextID,
    TextFormat = @TextFormat,
    MaxLength = @MaxLength,
    MaxValue = @MaxValue,
    MinValue = @MinValue,
    CustomFormatId = @CustomFormatId,
	AutocompleteListId = @AutocompleteListId,
	AutocompleteRemote = @AutocompleteRemote
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateStatisticsTable]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateStatisticsTable]
(
  @ItemID int,
  @ReportOption varchar(20),
  @UseAliases bit
)
AS
  UPDATE ckbx_ItemData_StatisticsTable
  SET
    ReportOption = @ReportOption,
	UseAliases = @UseAliases
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpdateTotalScore]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpdateTotalScore]
(
  @ItemID int,
  @UseAliases bit
)
AS
  UPDATE 
    ckbx_ItemData_TotalScore
  SET
	UseAliases = @UseAliases
  WHERE
    ItemID = @ItemID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemData_UpsertFileUploadFiles]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemData_UpsertFileUploadFiles]
(
   @ItemID int,
   @FileID int,
   @AnswerID bigint
)
AS
IF NOT EXISTS(SELECT FileID FROM ckbx_ItemData_FileUpload_Files WHERE AnswerID = @AnswerID)
   BEGIN
      INSERT INTO ckbx_ItemData_FileUpload_Files (ItemID, FileID, AnswerID) VALUES (@ItemID, @FileID, @AnswerID)
   END
ELSE
   BEGIN
      UPDATE 
         ckbx_ItemData_FileUpload_Files 
      SET
         FileID = @FileID
      WHERE 
         AnswerID = @AnswerID AND ItemID = @ItemID
   END
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemEditors_List]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemEditors_List]
AS
	SELECT
		ed.ItemTypeId,
		it.ItemName,
		ed.EditorTypeName,
		ed.EditorTypeAssembly
	FROM
		ckbx_ItemEditors ed
		INNER JOIN ckbx_ItemType it ON it.ItemTypeId = ed.ItemTypeId

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemFormatter_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemFormatter_Get]
(
  @ItemTypeId int,
  @Format varchar(64)
)
AS
  SELECT 
	ItemTypeID, 
	Format, 
	FormatterClassName, 
	FormatterAssembly 
  FROM 
	ckbx_ItemFormatters
  WHERE
    ItemTypeId = @ItemTypeId
    AND Format = @Format
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemOperand_Create]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemOperand_Create]
(
	@OperandID int,
	@ItemID int,
	@ParentItemID int = null,
	@ColumnNumber int,
	@Category nvarchar(255)
)
AS

	INSERT INTO ckbx_ItemOperand (OperandID, ItemID, ParentItemID, ColumnNumber, Category) VALUES (@OperandID, @ItemID, @ParentItemID, @ColumnNumber, @Category)


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemOperand_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemOperand_Delete]
(
	@OperandID int
)
AS
	DELETE ckbx_ItemOperand WHERE OperandID = @OperandID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemOperand_GetOperand]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemOperand_GetOperand]
(
	@OperandID int
)

AS

	SELECT OperandID, ItemID FROM ckbx_ItemOperand WHERE OperandID = @OperandID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemOperand_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemOperand_Update]
(
	@OperandID int,
	@ItemID int,
	@ParentItemID int = null,
	@ColumnNumber int,
	@Category nvarchar(255)
)
AS
	UPDATE 
		ckbx_ItemOperand
	SET
		ItemID = @ItemID,
		ParentItemID = @ParentItemID,
		ColumnNumber = @ColumnNumber,
		Category = @Category
	WHERE
		OperandID = @OperandID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemRenderers_List]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_ItemRenderers_List]
AS
  SELECT
    AppearanceCode,
    RendererTypeName,
    RendererAssemblyName
  FROM
    ckbx_ItemAppearanceRenderer
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemType_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemType_Get]
(
  @ItemTypeID int
)
AS 
	SELECT ItemTypeID, ItemName, ItemDataAssemblyName, ItemDataClassName, DefaultAppearanceCode, TextIdPrefix FROM ckbx_ItemType WHERE ItemTypeID = @ItemTypeID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemType_GetByName]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ItemType_GetByName]
(
  @ItemName varchar(50)
)
AS
	SELECT ItemTypeID, ItemName, ItemDataAssemblyName, ItemDataClassName, DefaultAppearanceCode, TextIdPrefix FROM ckbx_ItemType WHERE ItemName = @ItemName

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemType_List]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[ckbx_sp_ItemType_List]
AS
	SELECT 
		it.ItemTypeID, 
		it.ItemName, 
		it.ItemDataAssemblyName, 
		it.ItemDataClassName, 
		it.DefaultAppearanceCode,
		CASE WHEN ic.CategoryName IS NULL THEN 'Other' ELSE ic.CategoryName END AS CategoryName,
		it.MobileCompatible,
		it.RTCompatible,
		it.LibraryCompatible,
		it.ReportCompatible,
		it.Position,
		it.TextIdPrefix
	FROM 
		ckbx_ItemType it
		LEFT OUTER JOIN ckbx_ItemType_Categories ic ON ic.CategoryID = it.CategoryID
	ORDER BY
		CASE WHEN ic.CategoryName IS NULL THEN 'Other' ELSE ic.CategoryName END ASC,
		it.Position ASC

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ItemType_ListCategories]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ItemType_ListCategories]
AS
  SELECT
    CategoryID,
    CategoryName,
    CategoryTextID,
    CategoryDescriptionTextID,
    Position
  FROM
    ckbx_ItemType_Categories
  ORDER BY
    Position ASC

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_LayoutTemplate_AutoColumns_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_LayoutTemplate_AutoColumns_Delete]
(
  @LayoutTemplateID int
)
AS
  DELETE FROM ckbx_LayoutTemplate_AutoColumns WHERE LayoutTemplateID = @LayoutTemplateID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_LayoutTemplate_AutoColumns_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_LayoutTemplate_AutoColumns_Get]
(
  @LayoutTemplateID int
)
AS
  SELECT
	ac.LayoutTemplateID,
    ac.TemplateControlSource,
    ac.[Columns],
    ac.RepeatDirection,
	ac.RoundedCorners,
	ac.BorderWidth,
	ac.BackgroundColor,
	ac.BorderColor
  FROM
    ckbx_LayoutTemplate_AutoColumns ac
  WHERE
    ac.LayoutTemplateID = @LayoutTemplateID
    
  SELECT
	iz.LayoutTemplateID,
    iz.ItemID,
    iz.ZoneName
  FROM
    ckbx_LayoutTemplate_ItemZones iz
  WHERE
    iz.LayoutTemplateID = @LayoutTemplateID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_LayoutTemplate_AutoColumns_UpSert]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_LayoutTemplate_AutoColumns_UpSert]
(
   @LayoutTemplateID int,
   @TemplateControlSource varchar(255),
   @Columns int,
   @RepeatDirection varchar(16),
   @RoundedCorners bit,
   @BorderWidth int,
   @BackgroundColor varchar(63),
   @BorderColor varchar(63)
)
AS
  IF NOT EXISTS(Select LayoutTemplateID FROM ckbx_LayoutTemplate_AutoColumns WHERE LayoutTemplateID = @LayoutTemplateID)
    BEGIN
	  INSERT INTO ckbx_LayoutTemplate_AutoColumns
		(LayoutTemplateID, TemplateControlSource, [Columns], RepeatDirection, RoundedCorners, BorderWidth, BackgroundColor, BorderColor)
	  VALUES
		(@LayoutTemplateID, @TemplateControlSource, @Columns, @RepeatDirection, @RoundedCorners, @BorderWidth, @BackgroundColor, @BorderColor)
    END
  ELSE
    BEGIN
	  UPDATE ckbx_LayoutTemplate_AutoColumns
	  SET
		TemplateControlSource = @TemplateControlSource,
		[Columns] = @Columns,
		RepeatDirection = @RepeatDirection,
		RoundedCorners = @RoundedCorners,
	    BorderWidth = @BorderWidth,
	    BackgroundColor = @BackgroundColor,
	    BorderColor = @BorderColor
	  WHERE
		LayoutTemplateID = @LayoutTemplateID
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_LayoutTemplate_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_LayoutTemplate_Delete]
(
  @LayoutTemplateID int
)
AS
  DELETE FROM ckbx_LayoutTemplate_ItemZones WHERE LayoutTemplateID = @LayoutTemplateID
  DELETE FROM ckbx_LayoutTemplate WHERE LayoutTemplateID = @LayoutTemplateID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_LayoutTemplate_DeleteAllItemZones]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_LayoutTemplate_DeleteAllItemZones]
(
  @LayoutTemplateId int
)
AS
  DELETE FROM ckbx_LayoutTemplate_ItemZones WHERE LayoutTemplateID = @LayoutTemplateID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_LayoutTemplate_DeleteItemZone]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_LayoutTemplate_DeleteItemZone]
(
  @LayoutTemplateID int,
  @ItemID int
)
AS
  DELETE FROM ckbx_LayoutTemplate_ItemZones WHERE LayoutTemplateID = @LayoutTemplateID AND ItemID = @ItemID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_LayoutTemplate_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_LayoutTemplate_Get]
(
  @LayoutTemplateID int
)
AS
  SELECT
	lt.LayoutTemplateID,
    lt.LayoutTemplateTypeID,
    ltt.LayoutTemplateTypeName,
    ltt.TemplateAssembly,
	ltt.TemplateClassName
  FROM
    ckbx_LayoutTemplate lt
    INNER JOIN ckbx_LayoutTemplateType ltt ON ltt.LayoutTemplateTypeID = lt.LayoutTemplateTypeID
  WHERE
    lt.LayoutTemplateID = @LayoutTemplateID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_LayoutTemplate_Insert]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_LayoutTemplate_Insert]
(
   @LayoutTemplateTypeName varchar(64),
   @LayoutTemplateID int out
)
AS
  DECLARE @TypeID int
  SELECT @TypeID = LayoutTemplateTypeID FROM ckbx_LayoutTemplateType WHERE LayoutTemplateTypeName = @LayoutTemplateTypeName

  IF @TypeID IS NOT NULL
    BEGIN
	  INSERT INTO ckbx_LayoutTemplate
		(LayoutTemplateTypeID)
	  VALUES
		(@TypeID)

	  SELECT @LayoutTemplateID = @@IDENTITY
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_LayoutTemplate_ListTypes]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_LayoutTemplate_ListTypes]
AS
  SELECT
    LayoutTemplateTypeID,
    LayoutTemplateTypeName,
    TemplateAssembly,
    TemplateClassName
  FROM
    ckbx_LayoutTemplateType 
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_LayoutTemplate_UpSertItemZone]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--Insert into Item Zone
CREATE PROCEDURE [dbo].[ckbx_sp_LayoutTemplate_UpSertItemZone]
(
  @LayoutTemplateID int,
  @ItemID int,
  @ZoneName varchar(64)
)
AS
  IF NOT EXISTS(Select ItemID FROM ckbx_LayoutTemplate_ItemZones WHERE ItemID = @ItemID AND LayoutTemplateID = @LayoutTemplateID)
    BEGIN
	  INSERT INTO ckbx_LayoutTemplate_ItemZones
		(LayoutTemplateID, ItemID, ZoneName)
	  VALUES
		(@LayoutTemplateID, @ItemID, @ZoneName)
    END
  ELSE
    BEGIN
	  UPDATE ckbx_LayoutTemplate_ItemZones
	  SET
		ZoneName = @ZoneName
	  WHERE
		ItemID = @ItemID
		AND LayoutTemplateID = @LayoutTemplateID
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_LayoutTemplate_UserControl_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_LayoutTemplate_UserControl_Delete]
(
  @LayoutTemplateID int
)
AS
  DELETE FROM ckbx_LayoutTemplate_UserControl WHERE LayoutTemplateID = @LayoutTemplateID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_LayoutTemplate_UserControl_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_LayoutTemplate_UserControl_Get]
(
  @LayoutTemplateID int
)
AS
  SELECT
	uc.LayoutTemplateID,
    uc.TemplateControlSource
  FROM
    ckbx_LayoutTemplate_UserControl uc
  WHERE
    uc.LayoutTemplateID = @LayoutTemplateID
    
  SELECT
	iz.LayoutTemplateID,
    iz.ItemID,
    iz.ZoneName
  FROM
    ckbx_LayoutTemplate_ItemZones iz
  WHERE
    iz.LayoutTemplateID = @LayoutTemplateID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_LayoutTemplate_UserControl_UpSert]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_LayoutTemplate_UserControl_UpSert]
(
   @LayoutTemplateID int,
   @TemplateControlSource varchar(255)
)
AS
  IF NOT EXISTS(Select LayoutTemplateID FROM ckbx_LayoutTemplate_UserControl WHERE LayoutTemplateID = @LayoutTemplateID)
    BEGIN
	  INSERT INTO ckbx_LayoutTemplate_UserControl
		(LayoutTemplateID, TemplateControlSource)
	  VALUES
		(@LayoutTemplateID, @TemplateControlSource)
    END
  ELSE
    BEGIN
	  UPDATE ckbx_LayoutTemplate_UserControl
	  SET
		TemplateControlSource = @TemplateControlSource
	  WHERE
		LayoutTemplateID = @LayoutTemplateID
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Library_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Library_Delete]
(
  @LibraryTemplateID int,
  @ModifiedDate datetime
)
AS
  UPDATE 
	ckbx_Template 
  SET 
	Deleted = 1,
	ModifiedDate = @ModifiedDate
  WHERE 
	TemplateID = @LibraryTemplateID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Library_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE      PROCEDURE [dbo].[ckbx_sp_Library_Get]
(
  @TemplateID int
)
AS

--Library Data
SELECT
  ckbx_Template.*,
  ckbx_LibraryTemplate.LibraryTemplateID,
  ckbx_LibraryTemplate.NameTextID,
  ckbx_LibraryTemplate.DescriptionTextID

FROM
  ckbx_LibraryTemplate
  INNER JOIN ckbx_Template ON ckbx_Template.TemplateID = ckbx_LibraryTemplate.LibraryTemplateID
WHERE
  ckbx_LibraryTemplate.LibraryTemplateID = @TemplateID

--Items Data
SELECT 
  TemplateID, ti.ItemID, i.ModifiedDate, i.ItemTypeID, it.ItemName, i.CreatedDate, i.Alias, ItemDataClassName, ItemDataAssemblyName 
FROM 
  ckbx_Template_Items ti
  INNER JOIN ckbx_Item i ON i.ItemID = ti.ItemID
  INNER JOIN ckbx_ItemType it ON it.ItemTypeID = i.ItemTypeID
WHERE 
  TemplateID = @TemplateID

--Pages
SELECT TemplateID, PageID, PagePosition FROM ckbx_Template_Pages WHERE TemplateID = @TemplateID

--PageItems
SELECT PageID, ItemID, Position FROM ckbx_TemplatePage_Items WHERE PageID IN (Select PageID FROM ckbx_Template_Pages WHERE TemplateID = @TemplateID)

  -- Item Appearance Data
  SELECT 
    ckbx_ItemAppearances.ItemID, ckbx_ItemAppearances.AppearanceID 
  FROM 
    ckbx_ItemAppearances
    INNER JOIN ckbx_Template_Items ON ckbx_Template_Items.ItemID = ckbx_ItemAppearances.ItemID
    INNER JOIN ckbx_Item ON ckbx_Item.ItemID = ckbx_Template_Items.ItemID
  WHERE
    ckbx_Template_Items.TemplateID = @TemplateID
    AND (ckbx_Item.Deleted IS NULL OR ckbx_Item.Deleted = 0)

  --Item Appearance
  SELECT 
    ckbx_ItemAppearance.*
  FROM 
    ckbx_ItemAppearance 
    INNER JOIN ckbx_ItemAppearances ON ckbx_ItemAppearances.AppearanceID = ckbx_ItemAppearance.AppearanceID
    INNER JOIN ckbx_Template_Items ON ckbx_Template_Items.ItemID = ckbx_ItemAppearances.ItemID
    INNER JOIN ckbx_Item ON ckbx_Item.ItemID = ckbx_Template_Items.ItemID
  WHERE
    ckbx_Template_Items.TemplateID = @TemplateID
    AND (ckbx_Item.Deleted IS NULL OR ckbx_Item.Deleted = 0)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Library_GetAccessControllableResource]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Library_GetAccessControllableResource]
(
                @TemplateID int
)
AS
                SELECT
                                t.AclID,
                                t.DefaultPolicy,
                                lt.NameTextID,
                                lt.DescriptionTextID,
                                t.ModifiedDate,
                                t.CreatedDate,
                                t.CreatedBy
                FROM
                                ckbx_LibraryTemplate as lt
                                INNER JOIN ckbx_Template as t
                                ON lt.LibraryTemplateID = t.TemplateID
                WHERE
                                TemplateID = @TemplateID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Library_GetItemsCount]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Library_GetItemsCount]
(
                @LibraryID int
)
AS
BEGIN
   SELECT COUNT (ItemID) FROM ckbx_Template_Items WHERE TemplateID = @LibraryID
END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Library_GetLibraryTemplateIDFromName]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_Library_GetLibraryTemplateIDFromName]
(
   @LibraryName nvarchar(255),
   @LibraryID int out
)
AS
SELECT 
	@LibraryID = (SELECT TOP 1 LibraryTemplateID
  FROM 
    ckbx_LibraryTemplate l
    INNER JOIN ckbx_Text txt ON txt.TextID = l.NameTextID
	INNER JOIN ckbx_Template t ON t.TemplateID = l.LibraryTemplateID
  WHERE 
     txt.TextValue LIKE @LibraryName
     AND (t.Deleted IS NULL OR t.Deleted = 0))


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Library_Insert]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE  PROCEDURE [dbo].[ckbx_sp_Library_Insert]
(
	@LibraryTemplateID int,
	@NameTextID varchar(255),
	@DescriptionTextID varchar(255)
)
AS
	INSERT INTO ckbx_LibraryTemplate
	  (LibraryTemplateID, NameTextID, DescriptionTextID)
	VALUES
	  (@LibraryTemplateID, @NameTextID, @DescriptionTextID)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ListData_Create]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE  PROCEDURE [dbo].[ckbx_sp_ListData_Create]
(
   @ListID int out
)
AS
  INSERT INTO ckbx_ItemOptionsList (NameTextID, DescriptionTextID) VALUES ('', '')
  SELECT @ListID = @@Identity
  UPDATE 
    ckbx_ItemOptionsList 
  SET 
    NameTextID = '/listData/' + CAST(@ListID AS VARCHAR) + '/name',
    DescriptionTextID = '/listData/' + CAST(@ListID AS VARCHAR) + '/description'
  WHERE
    ListID = @ListID




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ListData_DeleteOption]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ListData_DeleteOption]
(
  @OptionID int
)
AS
  UPDATE ckbx_ItemOptions SET Deleted = 1 WHERE OptionID = @OptionID
  DELETE FROM ckbx_Response_ItemOptionOrder WHERE ItemID IN (Select ItemID FROM ckbx_Response_ItemOptionOrder WHERE OptionID = @OptionID)
  


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ListData_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_ListData_Get]
(
  @ListID int
)
AS 
  SELECT
    ListID,
    NameTextID,
    DescriptionTextID
  FROM
    ckbx_ItemOptionsList
  WHERE
    ListID = @ListID

  SELECT
	OptionID, 
	ItemID, 
	TextID, 
	Alias, 
	Category, 
	IsDefault, 
	Position, 
	IsOther, 
	IsNoneOfAbove,
	Points, 
	Deleted, 	
	ListID,
	ContentID
  FROM
    ckbx_ItemOptions

  WHERE
    ListID = @ListID
    and (Deleted IS NULL OR Deleted = 0)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ListData_InsertOption]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ListData_InsertOption]
(
  @ListID int,
  @ItemID int,
  @Alias nvarchar(255),
  @Category nvarchar(255),
  @IsDefault bit,
  @Position int,
  @IsOther bit,
  @IsNoneOfAbove bit,
  @Points decimal(18,3),
  @ContentID int,
  @OptionID int out
)
AS
  INSERT INTO ckbx_ItemOptions
    (ListID, ItemID, Alias, Category, IsDefault, Position, IsOther, IsNoneOfAbove, Points, Deleted, ContentID)
  VALUES
    (@ListID, @ItemID, @Alias, @Category, @IsDefault, @Position, @IsOther, @IsNoneOfAbove, @Points, 0, @ContentID)

  SELECT @OptionID = @@Identity

  UPDATE ckbx_ItemOptions SET TextID = '/listOption/' + CAST(@OptionID AS VARCHAR) + '/text' WHERE OptionID = @OptionID

  DELETE FROM ckbx_Response_ItemOptionOrder WHERE ItemID = @ItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ListData_UpdateOption]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ListData_UpdateOption]
(
  @OptionID int,
  @Alias nvarchar(255),
  @Category nvarchar(255),
  @IsDefault bit,
  @Position int,
  @IsOther bit,
  @IsNoneOfAbove bit,
  @Points decimal(18,3),
  @ContentID int
)
AS
  UPDATE ckbx_ItemOptions
  SET 
    --TextID = @TextID, Do not update since textID is invariant based on optionid
    Alias = @Alias,
    Category = @Category,
    IsDefault = @IsDefault,
    Position = @Position,
    IsOther = @IsOther,
    IsNoneOfAbove = @IsNoneOfAbove,
    Points = @Points,
    ContentID = @ContentID
  WHERE
    OptionID = @OptionID

  RETURN

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Message_OptOut_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Message_OptOut_Get]
(
  @UniqueIdentifier nvarchar(611),
  @Page varchar(255)
)
AS
SELECT
      count(ID)
FROM
      [ckbx_Message_OptOut]
WHERE
      [UniqueIdentifier] = @UniqueIdentifier
      AND LOWER([Page]) = LOWER(@Page)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Message_OptOut_Set]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Message_OptOut_Set]
(
  @UniqueIdentifier nvarchar(611),
  @Page varchar(255)
)
AS
INSERT INTO [ckbx_Message_OptOut] ([UniqueIdentifier], [Page])
VALUES (@UniqueIdentifier, @Page)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_MobileStyles_Add]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_MobileStyles_Add]
(
	@Name nvarchar(255),
    @CssUrl nvarchar(255),
	@IsDefault bit,
	@LanguageCode varchar(5),
    @StyleID int = 0 out
)
AS
	BEGIN
	--check if already exist
		IF 	(SELECT COUNT(ms.StyleID) FROM ckbx_MobileStyles ms 
			INNER JOIN ckbx_Text t ON ms.NameTextID = t.TextID
			WHERE CAST(t.TextValue as nvarchar(max)) = @Name) > 0
			RETURN;
					
		INSERT INTO ckbx_MobileStyles (CssUrl, IsDefault)
		VALUES (@CssUrl, @IsDefault)

		DECLARE @Id as INT
		SET @Id = @@Identity
		
		DECLARE @TextID as varchar(255)
		SET @TextID = N'/mobileStyle/' + CAST(@Id as varchar(10))

		UPDATE ckbx_MobileStyles 
		SET NameTextID = @TextID
		WHERE StyleID = @Id

		exec ckbx_sp_Text_Set @TextID, @LanguageCode, @Name

		SET @StyleID = @Id
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_MobileStyles_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_MobileStyles_Delete]
(
    @StyleID int
)
AS
	BEGIN
		DELETE FROM ckbx_MobileStyles
		WHERE StyleID = @StyleID
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_MobileStyles_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_MobileStyles_Get]
(
    @StyleID int,
	@LanguageCode varchar(5)
)
AS
	BEGIN
		SELECT ms.CssUrl, ms.IsDefault, t.TextValue as Name FROM ckbx_MobileStyles ms
		INNER JOIN ckbx_Text t ON ms.NameTextID = t.TextID 
		WHERE ms.StyleID = @StyleID
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_MobileStyles_GetAll]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_MobileStyles_GetAll]
(
	@LanguageCode varchar(5)
)
AS
	BEGIN
		SELECT ms.StyleID, ms.IsDefault, ms.CssUrl, t.TextValue as Name FROM ckbx_MobileStyles ms
		INNER JOIN ckbx_Text t ON ms.NameTextID = t.TextID 
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_MobileStyles_GetDefault]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_MobileStyles_GetDefault]
(
	@LanguageCode varchar(5)
)
AS
	BEGIN
		SELECT TOP 1 ms.StyleID, ms.IsDefault, ms.CssUrl, t.TextValue as Name FROM ckbx_MobileStyles ms
		INNER JOIN ckbx_Text t ON ms.NameTextID = t.TextID 
		WHERE ms.IsDefault = 1
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_PageId_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_PageId_Get]
(
	@PagePath varchar(255)
)
AS
  SELECT
    PageId
  FROM
    ckbx_PageId
  WHERE
    PagePath = @PagePath
    

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_PageTextIds_List]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_PageTextIds_List]
(
  @PageId int
)
AS
  SELECT
    TextId
  FROM
    ckbx_PageTextIds
  WHERE
    PageId = @PageId
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_CanDeleteELEntries]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Panel_CanDeleteELEntries]
(
	@PanelID int
)
AS
SELECT 
	COUNT(PanelID) 
FROM 
	ckbx_InvitationPanels 
WHERE 
	PanelID = @PanelID 

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_CheckNameExists]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[ckbx_sp_Panel_CheckNameExists]
(
	@Name nvarchar (255),
	@PanelTypeName nvarchar(500),
	@IDToIgnore int
)
AS

	SET NOCOUNT ON

	DECLARE @PanelTypeID INT

	SELECT @PanelTypeID = PanelTypeID FROM ckbx_PanelType WHERE TypeName = @PanelTypeName

  IF @IDToIgnore IS NULL
    BEGIN
	  SELECT COUNT([Name]) FROM ckbx_Panel WHERE [Name] = @Name AND PanelTypeID = @PanelTypeID
    END
  ELSE
    BEGIN
	  SELECT COUNT([Name]) FROM ckbx_Panel WHERE [Name] = @Name AND PanelTypeID = @PanelTypeID AND PanelID <> @IDToIgnore
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_CreateEmailListACL]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Panel_CreateEmailListACL]
(
      @PanelID int,
      @CreatedBy nvarchar (611),
      @AclID int out,
      @DefaultPolicyID int out
)
AS
      -- Create an AccessControlList entry for the CreatedBy user
      -- create a new Acl
      exec ckbx_sp_ACL_Create @AclID OUTPUT

    -- Create the Default Policy for this EmailList
      Declare @DefaultPolicy int
      exec ckbx_sp_ACL_CreatePolicy 'Checkbox.Panels.Security.EmailListPolicy', 'Checkbox', @DefaultPolicyID OUTPUT

    -- Set the AclID and DefaultPolicy for this EmailList
    UPDATE ckbx_Panel set AclID = @AclID, DefaultPolicy = @DefaultPolicyID WHERE PanelID = @PanelID

      -- Create the Policy for the first Entry
      DECLARE @PolicyID int
      exec ckbx_sp_ACL_CreatePolicy 'Checkbox.Panels.Security.EmailListPolicy', 'Checkbox', @PolicyID OUTPUT

      exec ckbx_sp_ACL_AddPolicyPermission @PolicyID, 'EmailList.Edit'
      exec ckbx_sp_ACL_AddPolicyPermission @PolicyID, 'EmailList.View'
      exec ckbx_sp_ACL_AddPolicyPermission @PolicyID, 'EmailList.Delete'
      exec ckbx_sp_ACL_AddEntry @AclID, 'Prezza.Framework.Security.ExtendedPrincipal', @CreatedBy, @PolicyID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Panel_Delete]
(
	@PanelID int
)
AS
	DELETE FROM ckbx_Invitation_Responses WHERE RecipientId IN (Select RecipientId FROM ckbx_InvitationRecipients WHERE PanelID = @PanelID)
	DELETE FROM ckbx_InvitationRecipients WHERE PanelId = @PanelID
	DELETE FROM ckbx_InvitationPanels WHERE PanelId = @PanelID
    DELETE FROM ckbx_GroupPanel WHERE PanelID = @PanelID
    DELETE FROM ckbx_Panel WHERE PanelID = @PanelID
    
    DECLARE @AclID int
	DECLARE @DefaultPolicy int
	SELECT
		@AclID = AclID,
		@DefaultPolicy = DefaultPolicy
	FROM
		ckbx_Panel
	WHERE
		PanelID = @PanelID
	
	IF (@AclID IS NOT NULL)
	BEGIN
		EXEC ckbx_sp_ACL_Delete @AclID
	END
	
	IF (@DefaultPolicy IS NOT NULL)
	BEGIN
		EXEC ckbx_sp_ACL_DeletePolicy @DefaultPolicy
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_DeleteAdHoc]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Panel_DeleteAdHoc]
(
  @PanelID int,
  @EmailAddress nvarchar(255)
)
AS
  DELETE FROM ckbx_AdHocEmailPanel WHERE PanelID = @PanelID AND EmailAddress = @EmailAddress


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_DeleteELEntries]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Panel_DeleteELEntries]
(
@PanelID int
)
AS

DELETE ckbx_EmailListPanel WHERE PanelID = @PanelID

if exists (select top 1 PanelId from ckbx_InvitationRecipients where PanelID = @PanelID and TotalSent > 0)
-- there is at least one inclusion this email list to the invitation and this invitation already has been sent
begin
--create ad-hoc panels for each recipient from the current email list
DECLARE @RecipientID bigint
DECLARE @InvitationID bigint
DECLARE @NewPanelID bigint
DECLARE @EMail nvarchar(255)
DECLARE @CreatedBy nvarchar(255)
DECLARE @Created datetime
DECLARE @OldInvitationID bigint
set @OldInvitationID = NULL

DECLARE Recipient_Cursor CURSOR FOR
select RecipientID, EmailAddress, InvitationID from ckbx_InvitationRecipients where PanelID = @PanelID order by InvitationID

OPEN Recipient_Cursor;


FETCH NEXT FROM Recipient_Cursor INTO @RecipientID, @Email, @InvitationID;
WHILE @@FETCH_STATUS = 0
BEGIN
-- get old panel creator and creation date
if (@InvitationID <> @OldInvitationID) or (@OldInvitationID is null)
select @Created = DateCreated, @CreatedBy = CreatedBy from ckbx_Panel where PanelID = @PanelID

--create a new ad-hoc panel
insert into ckbx_Panel (Name, Description, DateCreated, CreatedBy, PanelTypeID, Deleted, AclID, DefaultPolicy)
values ('Invitation[' + CAST (@InvitationID as nvarchar(10)) + '] AdHocEmailPanel', 'This Panel was autogenerated for this Invitation', @Created, @CreatedBy, 4, NULL, NULL, NULL)

set @NewPanelID = @@IDENTITY

insert into ckbx_AdHocEmailPanel (PanelID, EmailAddress)
values (@NewPanelID, @EMail)

--bind recipient to the new panel
update ckbx_InvitationRecipients set PanelID = @NewPanelID where RecipientID = @RecipientID

--remember invitation id.
set @OldInvitationID = @InvitationID
FETCH NEXT FROM Recipient_Cursor INTO @RecipientID, @Email, @InvitationID

END;

CLOSE Recipient_Cursor;
DEALLOCATE Recipient_Cursor;	
end
--delete bindings to invitations
delete from ckbx_InvitationPanels where PanelID = @PanelID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_DeleteEmail]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Panel_DeleteEmail]
(
 	@PanelID int,
	@EmailAddress nvarchar (255)
)
AS
	DELETE ckbx_EmailListPanel WHERE PanelID = @PanelID AND EmailAddress = @EmailAddress



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_DeleteUser]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Panel_DeleteUser]
(
	@PanelID int,
	@UniqueIdentifier nvarchar (611)
)
AS

	DELETE ckbx_UserPanel WHERE PanelID = @PanelID AND UserIdentifier = @UniqueIdentifier

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_GetAccessControllableResource]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_Panel_GetAccessControllableResource]
(
  @PanelID int
)
AS
SELECT
	AclID,
	DefaultPolicy
FROM
	ckbx_Panel
WHERE
	PanelID = @PanelID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_GetAdHocPanelists]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Panel_GetAdHocPanelists]
(
	@PanelID int
)
AS

	SELECT EmailAddress FROM ckbx_AdHocEmailPanel WHERE PanelID = @PanelID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_GetEmailAddressData]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Panel_GetEmailAddressData]
(
	@PanelID int
)
AS
SELECT 
	EmailAddress,
	FName,
	LName
FROM 
	ckbx_EmailListPanel 
WHERE 
	PanelID = @PanelID
ORDER BY
	EmailAddress ASC
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_GetGroupPanel]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Panel_GetGroupPanel]
(
	@PanelID int
)
AS

	SELECT GroupID FROM ckbx_GroupPanel WHERE PanelID = @PanelID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_GetPanel]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Panel_GetPanel]
(
	@PanelID int
)
AS

	SELECT * FROM ckbx_Panel WHERE PanelID = @PanelID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_GetTypeID]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Panel_GetTypeID]
(
	@PanelID int
)
AS

	SELECT PanelTypeID FROM ckbx_Panel WHERE PanelID = @PanelID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_GetTypeInfo]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Panel_GetTypeInfo]
(
  @PanelTypeID int
)
AS
  SELECT
    PanelTypeID,
    TypeName,
    TypeAssembly
  FROM
    ckbx_PanelType
  WHERE
    PanelTypeID = @PanelTypeID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_GetTypeInfoFromName]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Panel_GetTypeInfoFromName]
(
  @PanelTypeName nvarchar(500)
)
AS
  SELECT
    PanelTypeID,
    TypeName,
    TypeAssembly
  FROM
    ckbx_PanelType
  WHERE
    TypeName = @PanelTypeName

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_GetUserPanelIDs]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Panel_GetUserPanelIDs]
(
	@PanelID int
)
AS

	SELECT UserIdentifier FROM ckbx_UserPanel WHERE PanelID = @PanelID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_Insert]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Panel_Insert]
(
	@Name nvarchar (255),
	@Description nvarchar (510) = null,
	@DateCreated datetime,
	@CreatedBy nvarchar (611),
	@PanelTypeName nvarchar(500),
	@PanelID int out
)
AS

	SET NOCOUNT ON 

	DECLARE @PanelTypeID INT

	SELECT @PanelTypeID = PanelTypeID FROM ckbx_PanelType WHERE TypeName = @PanelTypeName

	INSERT INTO ckbx_Panel ( 
			[Name], 
			[Description], 
			DateCreated, 
			CreatedBy, 
			PanelTypeID )
	VALUES (
			@Name,
			@Description,
			@DateCreated,
			@CreatedBy,
			@PanelTypeID  )

	SET @PanelID = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_InsertAdHoc]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Panel_InsertAdHoc]
(
	@PanelID int,
	@EmailAddress nvarchar (255)
	
)
AS
	IF NOT EXISTS (SELECT PanelID FROM ckbx_AdHocEmailPanel WHERE PanelID = @PanelID AND EmailAddress = @EmailAddress)
	BEGIN
		INSERT INTO ckbx_AdHocEmailPanel ( PanelID, EmailAddress )  VALUES ( @PanelID, @EmailAddress )
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_InsertEmail]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Panel_InsertEmail]
(
	@PanelID int,
	@EmailAddress nvarchar (255),
	@FName nvarchar (255) = null,
	@LName nvarchar (255) = null
)
AS

	IF NOT EXISTS (SELECT EmailAddress FROM ckbx_EmailListPanel WHERE PanelID = @PanelID AND EmailAddress = @EmailAddress)
	BEGIN
		INSERT INTO ckbx_EmailListPanel (PanelID, EmailAddress, FName, LName) VALUES (@PanelID, @EmailAddress, @FName, @LName)
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_InsertGroupPanel]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Panel_InsertGroupPanel]
(
	@PanelID int,
	@GroupID int
)
AS
	IF NOT EXISTS (SELECT GroupID FROM ckbx_GroupPanel WHERE PanelID = @PanelID AND GroupID = @GroupID)
	BEGIN
		INSERT INTO ckbx_GroupPanel ( PanelID, GroupID )  VALUES   (@PanelID, @GroupID)
	END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_InsertUser]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Panel_InsertUser]
(
	@PanelID int,
	@UniqueIdentifier nvarchar (611)
)
AS

	IF NOT EXISTS (SELECT PanelID FROM ckbx_UserPanel WHERE PanelID = @PanelID AND UserIdentifier = @UniqueIdentifier)
	BEGIN
		INSERT INTO ckbx_UserPanel (PanelID, UserIdentifier) VALUES (@PanelID, @UniqueIdentifier)
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Panel_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Panel_Update]
(
	@PanelID int,
	@Name nvarchar (255),
	@Description nvarchar(510),
	@ModifiedBy nvarchar(611)
	
)
AS

	UPDATE ckbx_Panel SET [Name] = @Name, [Description] = @Description, ModifiedBy = @ModifiedBy, ModifiedDate = getdate() WHERE PanelID = @PanelID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Parse_String]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Parse_String]
(
    @Separator VARCHAR(1),
    @Source VARCHAR(MAX)
)
AS
    BEGIN
        CREATE TABLE #List ( item nvarchar(4000))

	    DECLARE @sItem nvarchar(4000)
	    WHILE CHARINDEX(@Separator,@Source,0) <> 0
		    BEGIN
		    SELECT
		    @sItem=RTRIM(LTRIM(SUBSTRING(@Source,1,CHARINDEX(@Separator,@Source,0)-1))),
		    @Source=RTRIM(LTRIM(SUBSTRING(@Source,CHARINDEX(@Separator,@Source,0)+LEN(@Separator),LEN(@Source))))
		 
		    INSERT INTO #List values (@sItem)
		    END

	    IF LEN(@Source) > 0
		    INSERT INTO #List SELECT @Source -- Put the last item in
		 
		    SELECT * FROM #List

            DROP TABLE #List
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Product_GetInfo]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Product_GetInfo]
(
  @ProductName varchar(255) 
)
AS
  SELECT TOP 1
    ProductID,
    ProductName,
    Version,
    InstallDate
  FROM
    ckbx_Product_Info
  WHERE
    ProductName = @ProductName
  ORDER BY
    InstallDate DESC


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Product_GetModules]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Product_GetModules]
(
  @ProductID int
)
AS
  SELECT
    ProductID,
    ModuleID,
    ModuleName,
    Version,
    InstallDate
  FROM
    ckbx_Product_Modules
  WHERE
    ProductID = @ProductID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Product_GetPatches]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Product_GetPatches]
(
@ProductID int
)
AS
SELECT
p.ProductID,
m.ModuleID,
p.PatchName,
p.Version,
p.InstallDate
FROM
ckbx_Product_Patches p
LEFT OUTER JOIN ckbx_Product_Modules m on m.ModuleID = p.ModuleID
WHERE
p.ProductID = @ProductID
ORDER BY p.Version

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Product_InsertModule]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Product_InsertModule]
(
  @ProductID int,
  @ModuleName varchar(255),
  @Version varchar(63)
) 
AS
  IF NOT EXISTS(SELECT ModuleID FROM ckbx_Product_Modules WHERE ProductID = @ProductID AND ModuleName = @ModuleName AND Version = @Version)
    BEGIN
      INSERT INTO ckbx_Product_Modules
        (ProductID, ModuleName, Version, InstallDate)
      VALUES
        (@ProductID, @ModuleName, @Version, GetDate())
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Product_InsertPatch]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Product_InsertPatch]
(
  @ProductID int,
  @ModuleID int,
  @PatchName varchar(255),
  @Version varchar(63)
)
AS
  IF NOT EXISTS(Select PatchName FROM ckbx_Product_Patches WHERE PatchName = @PatchName AND [Version] = @Version)
    BEGIN
      INSERT INTO ckbx_Product_Patches
        (ProductID, ModuleID, PatchName, Version, InstallDate)
      VALUES
        (@ProductID, @ModuleID, @PatchName, @Version, getdate())
    END
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Product_InsertProduct]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_Product_InsertProduct]
(
  @ProductName varchar(255),
  @Version varchar(63)
) 
AS
  IF NOT EXISTS(Select ProductName FROM ckbx_Product_Info WHERE ProductName = @ProductName AND Version = @Version)
    BEGIN
      INSERT INTO ckbx_Product_Info
        (ProductName, Version, InstallDate)
      VALUES
        (@ProductName, @Version, GetDate())
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Profile_CreateProperty]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Profile_CreateProperty]
(
	@CustomUserFieldName nvarchar(255),
	@isDeletable bit,
	@Hidden bit
)	
AS
DECLARE @position int
SELECT @position = MAX(position) FROM ckbx_customUserField  WHERE position IS NOT NULL


If @position IS NULL
    BEGIN
		SET @position = 1
    END
Else
    BEGIN	
		SET @position = @position + 1
    END
	

DECLARE @CustomUserFieldID int
SELECT @CustomUserFieldID = CustomUserFieldID FROM ckbx_CustomUserField WHERE CustomUserFieldName = @CustomUserFieldName

IF @CustomUserFieldID is null
	BEGIN		
		INSERT INTO ckbx_CustomUserField (CustomUserFieldName,position,isDeletable,Hidden) VALUES (@CustomUserFieldName,@position,@isDeletable,@Hidden)
	END
	
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Profile_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Profile_Delete]
(
  @UniqueIdentifier nvarchar(611)
)	
AS
	DELETE FROM ckbx_CustomUserFieldMap WHERE UniqueIdentifier = @UniqueIdentifier 
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Profile_DeleteProperty]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE  PROCEDURE [dbo].[ckbx_sp_Profile_DeleteProperty]
(
	@CustomUserFieldName nvarchar(255)
)	
AS
	DECLARE @CustomUserFieldID int
	DECLARE @Position int

	SELECT @CustomUserFieldID = CustomUserFieldID FROM ckbx_CustomUserField WHERE CustomUserFieldName = @CustomUserFieldName
		
	IF @CustomUserFieldID is not null
	BEGIN		
		SELECT @Position = Position FROM ckbx_CustomUserField WHERE CustomUserFieldID = @CustomUserFieldID 
	
		DELETE FROM ckbx_CustomUserFieldMap where CustomUserFieldID = @CustomUserFieldID 

		DELETE FROM ckbx_CustomUserField where CustomUserFieldName = @CustomUserFieldName	
		
		UPDATE ckbx_CustomUserField SET position = position - 1 WHERE position > @position
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Profile_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Profile_Get]
(
  @UniqueIdentifier nvarchar(511)
)
AS
  SELECT
    cuf.CustomUserFieldName AS PropertyName,
    cufm.Value AS PropertyValue
  FROM
    ckbx_CustomUserField cuf
    LEFT OUTER JOIN ckbx_CustomUserFieldMap cufm ON cufm.CustomUserFieldId = cuf.CustomUserFieldId AND cufm.[UniqueIdentifier] = @UniqueIdentifier
  ORDER BY
	cuf.Position ASC

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Profile_GetFields]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[ckbx_sp_Profile_GetFields]

AS
	SELECT CustomUserFieldName, Position FROM ckbx_CustomUserField ORDER BY Position
	RETURN




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Profile_LoadForResponseTemplate]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Profile_LoadForResponseTemplate]
(
  @ResponseTemplateId int
)
AS

SELECT
  c.[UniqueIdentifier],
  c.[UserName],
  c.[Domain],
  cuf.CustomUserFieldName,
  cufm.Value
FROM
  ckbx_Response r
  INNER JOIN ckbx_Credential c ON c.[UniqueIdentifier] = r.[UniqueIdentifier]
  LEFT OUTER JOIN ckbx_CustomUserFieldMap cufm ON cufm.[UniqueIdentifier] = c.[UniqueIdentifier]
  LEFT OUTER JOIN ckbx_CustomUserField cuf ON cuf.CustomUserFieldId = cufm.CustomUserFieldId
WHERE
  r.ResponseTemplateId = @ResponseTemplateId
  AND r.[UniqueIdentifier] IS NOT NULL
  AND r.[UniqueIdentifier] != 'AnonymousRespondent'
  AND (r.Deleted IS NULL OR r.Deleted = 0)
ORDER BY
  r.[UniqueIdentifier]
  

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Profile_MoveProperty]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_Profile_MoveProperty]
(
	@CustomUserFieldName nvarchar(255),
	@MoveUp int
)
AS
	
	DECLARE @FieldPosition int
	DECLARE @MoveFieldID int

IF @MoveUp = 1
BEGIN
	SELECT @FieldPosition = position FROM ckbx_customUserField WHERE CustomUserFieldName = @CustomUserFieldName AND Position > 1
	SELECT @MoveFieldID = customUserFieldID FROM ckbx_customUserField WHERE position = (@FieldPosition - 1)   

	IF @FieldPosition IS NOT NULL
		BEGIN
			UPDATE ckbx_customUserField SET Position = Position + 1 WHERE customUserFieldID = @MoveFieldID

			UPDATE ckbx_customUserField SET Position = Position - 1 WHERE customUserFieldName = @CustomUserFieldName	
		END
END
ELSE
BEGIN
	SELECT @FieldPosition = position FROM ckbx_customUserField WHERE CustomUserFieldName = @CustomUserFieldName AND Position  < (SELECT top 1 Position FROM ckbx_CustomUserField ORDER BY position DESC)
	SELECT @MoveFieldID = customUserFieldID FROM ckbx_customUserField WHERE position = (@FieldPosition + 1)   

	IF @FieldPosition IS NOT NULL
		BEGIN
			UPDATE ckbx_customUserField SET Position = Position - 1 WHERE customUserFieldID = @MoveFieldID

			UPDATE ckbx_customUserField SET Position = Position + 1 WHERE customUserFieldName = @CustomUserFieldName	
		END
END



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Profile_UpdateUserProfile]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[ckbx_sp_Profile_UpdateUserProfile]
(
	@UniqueIdentifier nvarchar(611),
	@Values nvarchar(max),
    @Fields nvarchar(max)
)
AS
BEGIN
	SET NOCOUNT ON

	create table #Values (t nvarchar(4000)) 
	insert into #Values exec ckbx_sp_Parse_String ',', @Values

	create table #Fields (t nvarchar(4000)) 
	insert into #Fields exec ckbx_sp_Parse_String ',', @Fields
	
	declare @value nvarchar(4000)
	declare @field nvarchar(4000)
	
	DECLARE values_cursor CURSOR FOR SELECT t FROM #Values
	DECLARE fields_cursor CURSOR FOR SELECT t FROM #Fields
	
	OPEN values_cursor
	OPEN fields_cursor
	
	FETCH NEXT FROM values_cursor INTO @value
	FETCH NEXT FROM fields_cursor INTO @field
	
	IF @@FETCH_STATUS <> 0 
		return
		
	WHILE @@FETCH_STATUS = 0
	begin
		set @value = replace(@value, '~c~', ',')
		set @field = replace(@field, '~c~', ',')
		
		exec ckbx_sp_Profile_UpSertProperty @UniqueIdentifier, @field, @value

		FETCH NEXT FROM values_cursor INTO @value
		FETCH NEXT FROM fields_cursor INTO @field		
	end

	CLOSE values_cursor
	CLOSE fields_cursor
	DEALLOCATE values_cursor
	DEALLOCATE fields_cursor	
END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Profile_UpSertProperty]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Profile_UpSertProperty]
(
	@UniqueIdentifier nvarchar(611),
	@PropertyName nvarchar(510),
    @PropertyValue nvarchar(510)
)
AS
BEGIN
	
	SET NOCOUNT ON

	DECLARE @CustomUserFieldID int

	SELECT	@CustomUserFieldID = CustomUserFieldID
	FROM	ckbx_CustomUserField
	WHERE	CustomUserFieldName = @PropertyName

	IF (@CustomUserFieldID > 0)
	BEGIN
		IF EXISTS (SELECT [Value] FROM ckbx_CustomUserFieldMap WHERE [UniqueIdentifier] = @UniqueIdentifier AND CustomUserFieldID = @CustomUserFieldID)
		BEGIN		
			UPDATE	ckbx_CustomUserFieldMap
			SET		[Value] = @PropertyValue 
			WHERE	[UniqueIdentifier] = @UniqueIdentifier 
			AND		CustomUserFieldID = @CustomUserFieldID
		END
		ELSE
		BEGIN
			INSERT INTO ckbx_CustomUserFieldMap([UniqueIdentifier], CustomUserFieldID, [Value])
			VALUES (@UniqueIdentifier, @CustomUserFieldID, @PropertyValue)
		END
	END
END
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ProfileOperand_Create]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ProfileOperand_Create]
(
	@OperandID int,
	@ProfileKey nvarchar(255)
)
AS

	IF NOT EXISTS (SELECT OperandID FROM ckbx_ProfileOperand WHERE OperandID = @OperandID)
	BEGIN
		INSERT INTO ckbx_ProfileOperand
		(OperandID, ProfileKey)
		VALUES
		(@OperandID, @ProfileKey)
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ProfileOperand_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ProfileOperand_Delete]
(
	@OperandID int
)
AS
	DELETE ckbx_ProfileOperand WHERE OperandID = @OperandID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Progress_Add]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE  [dbo].[ckbx_sp_Progress_Add]
(
	@Key nvarchar(64),
	@Message nvarchar(1024),
	@ErrorMessage nvarchar(1024),
	@CurrentItem int,
	@TotalItemCount int,
	@Status nvarchar(32)
)
AS
	BEGIN
		IF (NOT EXISTS(SELECT [Key] FROM ckbx_Progress WHERE [Key] = @Key))
			BEGIN
				INSERT INTO ckbx_Progress ([Key]) VALUES (@Key)
			END

		UPDATE ckbx_Progress 
			SET [Message] = @Message,
			ErrorMessage = @ErrorMessage, 
			CurrentItem = @CurrentItem,
			TotalItemCount = @TotalItemCount,
			Status = @Status
		WHERE 
			[Key] = @Key
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Progress_Clear]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE  [dbo].[ckbx_sp_Progress_Clear]
(
	@Key nvarchar(64)
)
AS
	BEGIN
		DELETE FROM ckbx_Progress
		WHERE 
			[Key] = @Key
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Progress_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE  [dbo].[ckbx_sp_Progress_Get]
(
	@Key nvarchar(64)
)
AS
	BEGIN
		SELECT * FROM ckbx_Progress
		WHERE 
			[Key] = @Key
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_Count]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*ckbx_sp_Response_Count*/
CREATE PROCEDURE [dbo].[ckbx_sp_Response_Count]
(
	@ResponseTemplateID int,
	@IncludeIncomplete bit,
    @IncludeTest bit,
	@TotalCount int output
	   
)
AS
	SET NOCOUNT ON
	
	SELECT @TotalCount = count(*) 
	FROM ckbx_response 
	WHERE ResponseTemplateID = @ResponseTemplateID 
	AND (Deleted IS NULL OR Deleted = 0)
	AND (IsComplete = 1 OR @IncludeIncomplete = 1)
	AND (IsTest IS NULL OR IsTest = 0 OR @IncludeTest = 1)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_CountForAnonRespondent]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[ckbx_sp_Response_CountForAnonRespondent]
(
	@RespondentGUID UniqueIdentifier,
	@ResponseTemplateID int,
	@UserCount int output	   
)

AS
	SET NOCOUNT ON
	SELECT @UserCount = Count(ResponseID) 
	FROM ckbx_Response 
	WHERE ResponseTemplateID = @ResponseTemplateID 
	AND RespondentGUID = @RespondentGUID 
	AND (Deleted = 0 OR Deleted IS NULL)
	AND IsComplete = 1



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_CountForAnonymizedUser]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[ckbx_sp_Response_CountForAnonymizedUser]
(
	@ResumeKey char(32),
	@ResponseTemplateID int,
	@UserCount int output
)

AS
	SET NOCOUNT ON
	SELECT @UserCount = Count(ResponseID) 
	FROM ckbx_Response 
	WHERE ResponseTemplateID = @ResponseTemplateID 
	AND ResumeKey = @ResumeKey 
	AND (Deleted = 0 OR Deleted IS NULL)
	AND IsComplete = 1



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_CountForUser]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[ckbx_sp_Response_CountForUser]
(
	@UniqueIdentifier nvarchar(255),
	@ResponseTemplateID int,
	@UserCount int output
)

AS
	SET NOCOUNT ON
	SELECT @UserCount = Count(ResponseID) 
	FROM ckbx_Response 
	WHERE ResponseTemplateID = @ResponseTemplateID 
	AND UniqueIdentifier = @UniqueIdentifier 
	AND (Deleted = 0 OR Deleted IS NULL)
	AND IsComplete = 1



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_Create]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Response_Create]
(
      @RespondentID nvarchar(611) = null,
      @GUID nvarchar (255),
      @ResponseTemplateID int,
      @LastPageViewed int,
      @IP nvarchar (50) = null,
      @NetworkUser nvarchar (255) = null,
      @StartDate datetime,
      @RespondentGuid uniqueidentifier = null,
      @LanguageCode nvarchar(5),
      @IsTest bit,
	  @IsAnonymized bit,
	  @ResumeKey char(32),
	  @Invitee nvarchar(510),
      @SessionId uniqueidentifier,
      @ResponseID bigint output
)
AS
INSERT INTO ckbx_Response 
      (
            [UniqueIdentifier], 
            [GUID], 
            ResponseTemplateID, 
            IsComplete, 
            LastPageViewed, 
            [Started], 
            IP, 
            LastEdit,
            NetworkUser,
			RespondentGuid,
            [Language],
            IsTest,
			IsAnonymized,
			ResumeKey,
			Invitee,
            SessionId
      ) 
      VALUES 
      (
            @RespondentID, 
            @GUID, 
            @ResponseTemplateID, 
            0, 
            @LastPageViewed, 
            @StartDate, 
            @IP,
            @StartDate,
            @NetworkUser,
			@RespondentGuid,
            @LanguageCode,
            @IsTest,
			@IsAnonymized,
			@ResumeKey,
			@Invitee,            
            @SessionId
      )
      
      SET @ResponseID = SCOPE_IDENTITY()
--END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_CreateAnswer]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_CreateAnswer]
(
	@ResponseID bigint,
	@ItemID int,
	@AnswerText ntext = null,
	@OptionID int = null,
	@Points decimal(18,4) = null,
	@DateCreated datetime,
	@AnswerID bigint out
)
AS

	INSERT INTO ckbx_ResponseAnswers
	(
		ResponseID,
		ItemID,
		AnswerText,
		OptionID,
		Points,
		DateCreated
	)
	VALUES
	(
		@ResponseID,
		@ItemID,
		@AnswerText,
		@OptionID,
		@Points,
		@DateCreated
	)

	SET @AnswerID = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[ckbx_sp_Response_Delete]
(
	@ResponseID bigint

)
AS
  UPDATE ckbx_Response SET Deleted = 1 WHERE ResponseID = @ResponseID
  DELETE FROM ckbx_Response_PageItemOrder WHERE ResponseID = @ResponseID
  DELETE FROM ckbx_Response_ItemOptionOrder WHERE ResponseID = @ResponseID

  --UPDATE ckbx_ResponseAnswers SET Deleted = 1 WHERE ResponseID = @ResponseID
  --DELETE FROM ckbx_ResponseLog WHERE ResponseID = @ResponseID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_DeleteAnswer]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[ckbx_sp_Response_DeleteAnswer]
(
	@AnswerID int
)
AS
	
	DELETE FROM ckbx_ResponseAnswers WHERE AnswerID = @AnswerID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_DeleteForRT]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[ckbx_sp_Response_DeleteForRT]
(
	@ResponseTemplateID int
)
AS
	UPDATE ckbx_Response SET Deleted = 1 WHERE ResponseTemplateID = @ResponseTemplateID /*AND Ended is not null*/

	UPDATE ckbx_ResponseAnswers SET Deleted = 1 WHERE ResponseID 
		IN(Select responseID FROM ckbx_response WHERE ResponseTemplateID = @ResponseTemplateID /*AND Ended is not null*/)

	DELETE FROM ckbx_ResponseLog WHERE ResponseID
		IN(Select responseID FROM ckbx_response WHERE ResponseTemplateID = @ResponseTemplateID /*AND Ended is not null*/)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_DeleteForUser]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE  PROCEDURE [dbo].[ckbx_sp_Response_DeleteForUser]
(
	@UniqueIdentifier nvarchar(611)
)
AS

	UPDATE ckbx_Response SET Deleted = 1 WHERE UniqueIdentifier = @UniqueIdentifier

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_DeletePageLog]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_DeletePageLog]
(
	@PageLogID bigint
)
AS

	DELETE ckbx_ResponseLog WHERE PageLogID = @PageLogID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_DeleteSession]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_DeleteSession]
(
	@SessionGuid uniqueidentifier
)
AS
  DELETE FROM ckbx_Response_Sessions WHERE SessionGuid = @SessionGuid


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_GetDataRowForGuid]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Response_GetDataRowForGuid]
(
   @ResponseGuid uniqueidentifier
)
AS
   SELECT * FROM ckbx_Response WHERE [GUID] = @ResponseGuid


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_GetDataRowForId]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_GetDataRowForId]
(
  @ResponseId bigint
)
AS
  SELECT * FROM ckbx_Response WHERE ResponseId = @ResponseId

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_GetEmailSent]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Response_GetEmailSent]
(
  @ResponseID int,
  @EmailItemID int
)
AS
  SELECT
    ResponseID,
    EmailItemID,
    EmailDate
  FROM
   ckbx_Response_EmailSent
  WHERE
    ResponseID = @ResponseID
    AND EmailItemID = @EmailItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_GetIncompleteResponseData]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*ckbx_sp_Response_GetResponseData*/
CREATE PROCEDURE [dbo].[ckbx_sp_Response_GetIncompleteResponseData]
(
  @ResponseTemplateID as int,
  @StartDate as datetime,
  @EndDate as datetime
)
AS 
	SELECT * FROM ckbx_Response
    WHERE (ckbx_Response.ResponseTemplateID = @ResponseTemplateID)
	    AND (ckbx_Response.IsTest IS NULL OR ckbx_Response.IsTest = 0)
        AND (ckbx_Response.Deleted IS NULL OR ckbx_Response.Deleted = 0)
        AND (ckbx_Response.IsComplete IS NULL OR ckbx_Response.IsComplete = 0)
        AND (@StartDate IS NULL OR ckbx_Response.Ended IS NULL OR ckbx_Response.Ended >= @StartDate)
        AND (@EndDate IS NULL OR ckbx_Response.Ended IS NULL OR ckbx_Response.Ended <= @EndDate)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_GetListForAnonymousUser]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Response_GetListForAnonymousUser]
(
	@RespondentGuid nvarchar(611),
	@ResponseTemplateID int
)
AS
	
	SELECT
          ResponseID,
          GUID,
          ResponseTemplateID,
          IsComplete,
          LastPageViewed,
          Started,
          Ended,
          IP,
          LastEdit,
          NetworkUser,
          Language,
          [UniqueIdentifier],
          RespondentGUID
        FROM
          ckbx_Response
        WHERE
          (Deleted IS NULL OR Deleted = 0)
          AND ResponseTemplateID = @ResponseTemplateID
          AND RespondentGuid = @RespondentGuid



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_GetListForUser]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Response_GetListForUser]
(
	@UniqueIdentifier nvarchar(611),
	@ResponseTemplateID int
)
AS
	
	SELECT
          ResponseID,
          GUID,
          ResponseTemplateID,
          IsComplete,
          LastPageViewed,
          Started,
          Ended,
          IP,
          LastEdit,
          NetworkUser,
          Language,
          [UniqueIdentifier],
          RespondentGUID
        FROM
          ckbx_Response
        WHERE
          (Deleted IS NULL OR Deleted = 0)
          AND ResponseTemplateID = @ResponseTemplateID
          AND [UniqueIdentifier] = @UniqueIdentifier



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_GetPageByResponseId]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_GetPageByResponseId]
(
	@ResponseId bigint,
	@ResponseTemplateId int,
	@IncludeIncomplete bit,
    @MinResponseCompletedDate DATETIME,
	@MaxResponseCompletedDate DATETIME,
	@ResultsPerPage int,
	@SortField varchar(64),
	@SortAscending bit,
	@FilterField varchar(64),
	@FilterValue nvarchar(255)
)
AS
	BEGIN
		  DECLARE @OrderBy varchar(64)
  
		  IF (@SortField is NOT NULL AND len(@SortField) > 0)
			BEGIN
				IF @SortAscending = 1
					BEGIN
						SET @OrderBy = ' ASC'
					END
				ELSE
					BEGIN
						SET @OrderBy = ' DESC'
					END
			END
	
		  DECLARE @Query nvarchar(4000)
		  DECLARE @WhereClause nvarchar(1000)
		  DECLARE @OrderByClause nvarchar(1000)
		  DECLARE @QueryParams nvarchar(500)
  
		  SET @QueryParams = '@ResponseTemplateId int, @FilterValue nvarchar(255), @MinResponseCompletedDate datetime, @MaxResponseCompletedDate datetime, @ResponseRowNumberOUT int OUTPUT'
  
		  --create the WHERE clause  
		  SET @WhereClause = ' (Deleted IS NULL OR Deleted = 0) '
		  IF @ResponseTemplateID IS NOT NULL AND @ResponseTemplateID >= 1000
		  BEGIN
			SET @WhereClause = @WhereClause + ' AND ckbx_Response.ResponseTemplateID = @ResponseTemplateId '
		  END

		  IF @IncludeIncomplete = 0
		  BEGIN
			SET @WhereClause = @WhereClause + ' AND IsComplete = 1 '
		  END

		  IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
		  BEGIN
			IF (@FilterField = 'UniqueIdentifier')
			BEGIN
			  SET @WhereClause = @WhereClause + ' AND [UniqueIdentifier] = ''' + @FilterValue +  ''''	
			END

			IF (@FilterField = 'Invitee')
			BEGIN
			  SET @WhereClause = @WhereClause + ' AND [Invitee] like ''%'' + @FilterValue + ''%'' '	
			END

			IF (@FilterField = 'ResponseID')
			BEGIN
			  SET @WhereClause = @WhereClause + ' AND CAST(ResponseID AS NVARCHAR) = @FilterValue '	
			END	

			IF (@FilterField = 'Guid')
			BEGIN
			  SET @WhereClause = @WhereClause + ' AND Replace ([GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '   
			END

			IF (@FilterField = 'RespondentGuid')
			BEGIN
			  SET @WhereClause = @WhereClause + ' AND Replace ([RespondentGuid], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '   
			END

			IF (@FilterField = 'ResumeKey')
			BEGIN
			  SET @WhereClause = @WhereClause + ' AND [ResumeKey] like ''%'' + @FilterValue + ''%'' '	
			END

			IF (@FilterField = 'StartDate')
			BEGIN
			  SET @WhereClause = @WhereClause + ' AND [Started] > @FilterValue '
			END
		  END
				
		  IF (@MinResponseCompletedDate IS NOT NULL)
			  BEGIN
				IF @ResponseTemplateID >= 1000
					BEGIN 
						SET @WhereClause = @WhereClause + ' AND (ended IS NULL OR (@MinResponseCompletedDate <= ended)) ';
					END
				ELSE
					BEGIN
						SET @WhereClause = @WhereClause + ' AND (ended IS NOT NULL AND (@MinResponseCompletedDate <= ended)) ';
					END
			  END
  
		  IF (@MaxResponseCompletedDate IS NOT NULL)
			  BEGIN
				IF @ResponseTemplateID >= 1000
					BEGIN
						SET @WhereClause = @WhereClause + ' AND (ended IS NULL OR (@MaxResponseCompletedDate >= ended)) ';
					END
				ELSE
					BEGIN
						SET @WhereClause = @WhereClause + ' AND (ended IS NOT NULL AND (@MaxResponseCompletedDate >= ended)) ';
					END
			  END
  
		  --build the ORDER BY clause
		  IF (@SortField is NOT NULL AND len(@SortField) > 0)
			BEGIN
				SET @OrderByClause = ' ORDER BY ['+@SortField+'] ' + @OrderBy
			END
		  ELSE
			BEGIN
				SET @OrderByClause = ''
			END 

    	  DECLARE @ResponseRowNumber int	

		SET @Query = 'SET @ResponseRowNumberOUT = 
			(SELECT tempTable.RowNum
			 FROM (
				 SELECT ResponseID, ROW_NUMBER() OVER (' + @OrderByClause + ') as RowNum FROM ckbx_Response WHERE ' + @WhereClause +
			 ') AS tempTable
			 WHERE tempTable.ResponseID='+ CAST (@ResponseId as nvarchar) + ')'
		
		exec sp_executesql @Query, @QueryParams, @ResponseTemplateId = @ResponseTemplateId, @FilterValue = @FilterValue, @MinResponseCompletedDate = @MinResponseCompletedDate, @MaxResponseCompletedDate = @MaxResponseCompletedDate, @ResponseRowNumberOUT = @ResponseRowNumber OUTPUT			

		SELECT (@ResponseRowNumber-1) / @ResultsPerPage + 1

	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_GetResponseGuidBySessionGuid]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create Procedure [dbo].[ckbx_sp_Response_GetResponseGuidBySessionGuid]
(
@SessionGuid uniqueidentifier, 
@ResponseGuid uniqueidentifier output
)
AS
	SELECT @ResponseGuid = [GUID]
	FROM [ckbx_Response]
	WHERE [SessionID] = @SessionGuid


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_GetSession]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Response_GetSession]
(
	@SessionGuid uniqueidentifier
)
AS
  SELECT 
    SessionGuid,
	ResponseId,
	ResponseTemplateId,
	AuthenticatedRespondentUid,
	AnonymousRespondentUid,
    EnteredPassword,
	SelectedLanguage
  FROM
    ckbx_Response_Sessions
  WHERE
    SessionGuid = @SessionGuid
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_GetSessionIdByResponseGuid]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_GetSessionIdByResponseGuid]
(
	@ResponseGuid uniqueidentifier
)
AS
  SELECT [SessionId] 
	FROM [ckbx_Response]
	WHERE [GUID] = @ResponseGuid

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_GetState]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Response_GetState]
(
	@GUID uniqueidentifier
)
AS
	DECLARE @ResponseID int
	
	-- Get the ResponseID for querying the ResponseAnswers table
	SELECT @ResponseID = ResponseID FROM ckbx_Response WHERE GUID = @GUID

	SELECT * FROM ckbx_Response WHERE GUID = @GUID AND (Deleted IS NULL OR Deleted = 0)
	SELECT * FROM ckbx_ResponseAnswers WHERE ResponseID = @ResponseID AND (Deleted IS NULL OR Deleted = 0)
	SELECT * FROM ckbx_ResponseLog WHERE ResponseID = @ResponseID ORDER BY PageLogID asc
	SELECT * FROM ckbx_Response_PageItemOrder WHERE ResponseID = @ResponseID ORDER BY PageID ASC, Position ASC
	SELECT * FROM ckbx_Response_ItemOptionOrder WHERE ResponseID = @ResponseID ORDER BY ItemID ASC, Position ASC


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_GetSurveyIdFromResponseGuid]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_GetSurveyIdFromResponseGuid]
(
  @ResponseGuid uniqueidentifier,
  @SurveyId int out
)
AS
  SELECT @SurveyId = ResponseTemplateId FROM ckbx_Response WHERE [GUID] = @ResponseGuid

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_GetSurveyIdFromResponseId]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_GetSurveyIdFromResponseId]
(
  @ResponseId bigint,
  @SurveyId int out
)
AS
  SELECT @SurveyId = ResponseTemplateId FROM ckbx_Response WHERE ResponseId = @ResponseId

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_GetSurveyIdFromWorkflowSessionGuid]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[ckbx_sp_Response_GetSurveyIdFromWorkflowSessionGuid]
(
@SessionGuid uniqueidentifier, 
@SurveyId int output
)
AS
	SELECT @SurveyId = [ResponseTemplateID]
	FROM [ckbx_Response]
	WHERE [SessionID] = @SessionGuid


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_InsertItemOptionOrder]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_InsertItemOptionOrder]
(
  @ResponseID bigint,
  @ItemID int,
  @OptionID int,
  @Position int
)
AS
  INSERT INTO ckbx_Response_ItemOptionOrder
    (ResponseID, ItemID, OptionID, Position)
  VALUES
    (@ResponseID, @ItemID, @OptionID, @Position)


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_InsertPageItemOrder]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_InsertPageItemOrder]
(
  @ResponseID bigint,
  @PageID int,
  @ItemID int,
  @Position int
)
AS
  INSERT INTO ckbx_Response_PageItemOrder
	(ResponseID, PageID, ItemID, Position)
  VALUES
	(@ResponseID, @PageID, @ItemID, @Position)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_InsertPageLog]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Response_InsertPageLog]
(
	@ResponseID bigint,
	@PageID int,
	@PageStartTime datetime = null,
	@PageEndTime datetime = null,
	@PageLogID bigint out
)
AS
	INSERT INTO ckbx_ResponseLog 
	(
		ResponseID, 
		PageID, 
		PageStartTime, 
		PageEndTime
	)
	VALUES
	(
		@ResponseID,
		@PageID,
		@PageStartTime,
		@PageEndTime
	)

	SET @PageLogID = SCOPE_IDENTITY()


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_InsertSession]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Response_InsertSession]
(
	@SessionGuid uniqueidentifier
)
AS
  IF NOT EXISTS(Select SessionGuid FROM ckbx_Response_Sessions WHERE SessionGuid = @SessionGuid)
    BEGIN
      INSERT INTO ckbx_Response_Sessions (SessionGuid) VALUES (@SessionGuid)
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_LifecycleDaily]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[ckbx_sp_Response_LifecycleDaily]
	@ResponseTemplateID as int,
	@MinDate as datetime
as
begin
	if @ResponseTemplateID=-1
		begin
			select DAY(Ended) as [Day], MONTH(Ended) as [Month], YEAR(Ended) as [Year], Min(Ended) as [MinDate], COUNT(*) as [Count] from ckbx_Response r
				inner join ckbx_Template t on t.TemplateID = r.ResponseTemplateID
			where (@MinDate is null or @MinDate < Ended)
				and (r.Deleted is null or r.Deleted = 0)
				and (t.Deleted is null or t.Deleted = 0)
				and (IsTest is null or IsTest = 0)
			group by DAY(Ended), MONTH(Ended), YEAR(Ended)
			order by Min(Ended)
			
			select count(*) 
				FROM ckbx_response 
				WHERE (Deleted IS NULL OR Deleted = 0)
				AND (IsComplete = 1)
				AND (IsTest IS NULL OR IsTest = 0)	
		end
	else
		begin
			select DAY(Ended) as [Day], MONTH(Ended) as [Month], YEAR(Ended) as [Year], Min(Ended) as [MinDate], COUNT(*) as [Count] from ckbx_Response 
			where ResponseTemplateID = @ResponseTemplateID and (@MinDate is null or @MinDate < Ended)
				and (Deleted is null or Deleted = 0)
				and (IsTest is null or IsTest = 0)
			group by DAY(Ended), MONTH(Ended), YEAR(Ended)
			order by Min(Ended)
			
			select count(*) 
				FROM ckbx_response 
				WHERE ResponseTemplateID = @ResponseTemplateID 
				AND (Deleted IS NULL OR Deleted = 0)
				AND (IsComplete = 1)
				AND (IsTest IS NULL OR IsTest = 0)	
		end
end
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_LifecycleMonthly]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[ckbx_sp_Response_LifecycleMonthly]
	@ResponseTemplateID as int,
	@MinDate as datetime
as
begin
	select MONTH(Ended) as [Month], YEAR(Ended) as [Year], Min(Ended) as [MinDate], COUNT(*) as [Count] from ckbx_Response r
			inner join ckbx_Template t on t.TemplateID = r.ResponseTemplateID
	where ResponseTemplateID = @ResponseTemplateID and (@MinDate is null or @MinDate < Ended)
		and (r.Deleted is null or r.Deleted = 0)
		and (t.Deleted is null or t.Deleted = 0)
		and (IsTest is null or IsTest = 0)
	group by MONTH(Ended), YEAR(Ended)
	order by Min(Ended)
end



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_List]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	




CREATE PROCEDURE [dbo].[ckbx_sp_Response_List]
(
	@ResponseTemplateId int,
	@IncludeComplete bit,
	@IncludeIncomplete bit,
	@IncludeTest bit,
    @MinResponseCompletedDate DATETIME,
	@MaxResponseCompletedDate DATETIME,
	@PageNumber int, 
	@ResultsPerPage int,
	@SortField varchar(64),
	@SortAscending bit,
	@FilterField varchar(64),
	@FilterValue nvarchar(255),   
    @DateFieldName nvarchar(255) = null
)
AS
BEGIN
  DECLARE @OrderBy varchar(64)
  
  IF (@SortField is NOT NULL AND len(@SortField) > 0)
	BEGIN
		IF @SortAscending = 1
			BEGIN
				SET @OrderBy = ' ASC'
			END
		ELSE
			BEGIN
				SET @OrderBy = ' DESC'
			END
	END
	
  DECLARE @Query nvarchar(4000)
  DECLARE @WhereClause nvarchar(1000)
  DECLARE @OrderByClause nvarchar(1000)
  DECLARE @QueryParams nvarchar(500)
  
  SET @QueryParams = '@ResponseTemplateId int, @FilterValue nvarchar(255), @MinResponseCompletedDate datetime, @MaxResponseCompletedDate datetime'
  
  --create the WHERE clause  
  SET @WhereClause = ' (Deleted IS NULL OR Deleted = 0) '
  IF @ResponseTemplateID IS NOT NULL AND @ResponseTemplateID >= 1000
  BEGIN
    SET @WhereClause = @WhereClause + ' AND ckbx_Response.ResponseTemplateID = @ResponseTemplateId '
  END

  IF @IncludeIncomplete = 0 AND @IncludeComplete = 0
	RETURN

  IF @IncludeIncomplete = 0
  BEGIN
    SET @WhereClause = @WhereClause + ' AND IsComplete = 1 '
  END
  ELSE IF @IncludeComplete = 0
  BEGIN
    SET @WhereClause = @WhereClause + ' AND IsComplete = 0 '
  END

  IF @IncludeTest = 0
  BEGIN
    SET @WhereClause = @WhereClause + ' AND (IsTest = 0 OR IsTest = NULL) '
  END

  IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
  BEGIN
    IF (@FilterField = 'UniqueIdentifier')
    BEGIN
      SET @WhereClause = @WhereClause + ' AND [UniqueIdentifier] = ''' + @FilterValue +  ''''	
    END

    IF (@FilterField = 'Invitee')
    BEGIN
      SET @WhereClause = @WhereClause + ' AND [Invitee] like ''%'' + @FilterValue + ''%'' '	
    END

    IF (@FilterField = 'ResponseID')
    BEGIN
      SET @WhereClause = @WhereClause + ' AND CAST(ResponseID AS NVARCHAR) = @FilterValue '	
    END	

    IF (@FilterField = 'Guid')
    BEGIN
      SET @WhereClause = @WhereClause + ' AND Replace ([GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '   
    END

    IF (@FilterField = 'RespondentGuid')
    BEGIN
      SET @WhereClause = @WhereClause + ' AND [RespondentGuid] = @FilterValue'   
    END

    IF (@FilterField = 'ResumeKey')
    BEGIN
      SET @WhereClause = @WhereClause + ' AND [ResumeKey] like ''%'' + @FilterValue + ''%'' '	
    END

	IF (@FilterField = 'StartDate')
	BEGIN
	  SET @WhereClause = @WhereClause + ' AND [Started] > @FilterValue '
	END
  END
				
  IF (@MinResponseCompletedDate IS NOT NULL)
	  BEGIN
		IF @ResponseTemplateID >= 1000
			BEGIN 
				SET @WhereClause = @WhereClause + ' AND (ended IS NULL OR (@MinResponseCompletedDate <= ended)) ';
			END
		ELSE
			BEGIN
				SET @WhereClause = @WhereClause + ' AND (ended IS NOT NULL AND (@MinResponseCompletedDate <= ended)) ';
			END
	  END
  
  IF (@MaxResponseCompletedDate IS NOT NULL)
	  BEGIN
		IF @ResponseTemplateID >= 1000
			BEGIN
				SET @WhereClause = @WhereClause + ' AND (ended IS NULL OR (@MaxResponseCompletedDate >= ended)) ';
			END
		ELSE
			BEGIN
				SET @WhereClause = @WhereClause + ' AND (ended IS NOT NULL AND (@MaxResponseCompletedDate >= ended)) ';
			END
	  END
  
  --build the ORDER BY clause
  IF (@SortField is NOT NULL AND len(@SortField) > 0)
  BEGIN
    SET @OrderByClause = ' ORDER BY ['+@SortField+'] ' + @OrderBy
  END
  ELSE
  BEGIN
	SET @OrderByClause = ''
  END 
  
  --If not paging, simply return the results
  IF @PageNumber <= 0 OR @ResultsPerPage <= 0
  BEGIN
	--select results
    SET @Query = '
      SELECT ckbx_response.*, rt.TemplateName FROM ckbx_Response 
		LEFT JOIN ckbx_ResponseTemplate rt ON ckbx_Response.ResponseTemplateID = rt.ResponseTemplateID 
		WHERE ' + @WhereClause + ' ' + @OrderByClause    
    exec sp_executesql @Query, @QueryParams, @ResponseTemplateId = @ResponseTemplateId, @FilterValue = @FilterValue, @MinResponseCompletedDate = @MinResponseCompletedDate, @MaxResponseCompletedDate = @MaxResponseCompletedDate					
  END
  ELSE
  BEGIN
	DECLARE @PageLowerBound int
	DECLARE @PageUpperBound int
	
	-- Set the page bounds
	SET @PageLowerBound = @ResultsPerPage * (@PageNumber - 1) + 1
	SET @PageUpperBound = @PageLowerBound + @ResultsPerPage - 1

    CREATE TABLE #indexedResults
    (
       [Index] int,
       [ResponseID] bigint 
    )
    
	/*
    SET @Query = 'INSERT INTO #indexedResults (ResponseID) SELECT TOP ' 
        + CONVERT(nvarchar, @PageUpperBound)
        + 'ResponseID FROM ckbx_Response WHERE ' + @WhereClause + ' ' + @OrderByClause
        */
    SET @Query = 'INSERT INTO #indexedResults ([Index], ResponseID) 
		SELECT * FROM (SELECT ROW_NUMBER() OVER (' + @OrderByClause + ') as RN, ResponseID FROM ckbx_Response
		WHERE ' + @WhereClause + ') a WHERE a.RN BETWEEN ' 
		+ CAST (@PageLowerBound as nvarchar) + ' AND ' + CAST (@PageUpperBound as nvarchar)

    exec sp_executesql @Query, @QueryParams, @ResponseTemplateId = @ResponseTemplateId, @FilterValue = @FilterValue, @MinResponseCompletedDate = @MinResponseCompletedDate, @MaxResponseCompletedDate = @MaxResponseCompletedDate					
    
    SELECT ckbx_Response.*, RT.TemplateName FROM ckbx_Response 
    LEFT JOIN ckbx_ResponseTemplate RT ON ckbx_Response.ResponseTemplateID = RT.ResponseTemplateID,
		#indexedResults I
	WHERE ckbx_Response.ResponseID = I.ResponseID 
	ORDER BY [INDEX]
  END			
  
  --select total count				
  SET @Query = '
    SELECT COUNT(ResponseID) AS TotalItemCount FROM ckbx_Response  
      WHERE ' + @WhereClause
  exec sp_executesql @Query, @QueryParams, @ResponseTemplateId = @ResponseTemplateId, @FilterValue = @FilterValue, @MinResponseCompletedDate = @MinResponseCompletedDate, @MaxResponseCompletedDate = @MaxResponseCompletedDate					
END
	

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_ListAnswersForGuid]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_ListAnswersForGuid]
(
  @ResponseGuid uniqueidentifier
)
AS
SELECT
  ra.*
FROM
  ckbx_Response r
  INNER JOIN ckbx_ResponseAnswers ra ON ra.ResponseId = r.ResponseId
WHERE
  r.[GUID] = @ResponseGuid

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_ListAnswersForId]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_ListAnswersForId]
(
  @ResponseId bigint
)
AS
  SELECT * FROM ckbx_ResponseAnswers WHERE ResponseId = @ResponseID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_ListForInvitation]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Response_ListForInvitation]
(
	@InvitationId int,
	@IncludeIncomplete bit,
	@PageNumber int, 
	@ResultsPerPage int,
	@SortField varchar(64),
	@SortAscending bit,
	@FilterField varchar(64),
	@FilterValue nvarchar(255)   
)
AS
BEGIN
  DECLARE @OrderBy varchar(64)
  
  IF (@SortField is NOT NULL AND len(@SortField) > 0)
	BEGIN
		IF @SortAscending = 1
			BEGIN
				SET @OrderBy = ' ASC'
			END
		ELSE
			BEGIN
				SET @OrderBy = ' DESC'
			END
	END
	
  --If not paging, simply return the results
  DECLARE @Query nvarchar(2000)
  DECLARE @QueryParams nvarchar(500)
  
  SET @QueryParams = '@FilterValue nvarchar(255)'
  
	IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '

				CREATE TABLE #invitationResponses(RecipientID bigint, ResponseID bigint)

				INSERT INTO #invitationResponses
				SELECT DISTINCT * FROM ckbx_Invitation_Responses
				
				SELECT
					r.*, rt.TemplateName
				FROM 
					ckbx_Response r
					INNER JOIN #invitationResponses ir ON ir.ResponseId = r.ResponseId
					INNER JOIN ckbx_InvitationRecipients ir2 ON ir2.RecipientId = ir.RecipientId AND ir2.EmailAddress = r.Invitee
					INNER JOIN ckbx_ResponseTemplate rt ON r.ResponseTemplateID = rt.ResponseTemplateID 
				WHERE 
					ir2.InvitationId = '+ cast(@InvitationId as NVARCHAR)+ ' 
					 AND (r.Deleted IS NULL OR r.Deleted = 0)
					 AND (ir2.Deleted IS NULL or ir2.Deleted = 0)'
				IF @IncludeIncomplete = 0
					BEGIN
						SET @Query = @Query + ' AND r.IsComplete = 1 '
					END
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
					BEGIN
						IF (@FilterField = 'UniqueIdentifier')
							BEGIN
								SET @Query = @Query + ' AND [r].[UniqueIdentifier] like ''%'' + @FilterValue + ''%'' '	
							END
						IF (@FilterField = 'ResponseID')
							BEGIN
								SET @Query = @Query + ' AND CAST(r.ResponseID AS NVARCHAR) = @FilterValue '	
							END	
					END
				IF (@SortField is NOT NULL AND len(@SortField) > 0)
					BEGIN
						SET @Query = @Query + ' ORDER BY [r].['+@SortField+'] ' + @OrderBy
					END

				SET @Query = @Query + ' DROP TABLE #invitationResponses'		
			--Select results
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			
			--Select count
			SET @Query = '
				CREATE TABLE #invitationResponses(RecipientID bigint, ResponseID bigint)

				INSERT INTO #invitationResponses
				SELECT DISTINCT * FROM ckbx_Invitation_Responses

				SELECT 
					COUNT(r.ResponseID)  AS TotalItemCount
				FROM 
					ckbx_Response r
					INNER JOIN #invitationResponses ir ON ir.ResponseId = r.ResponseId
					INNER JOIN ckbx_InvitationRecipients ir2 ON ir2.RecipientId = ir.RecipientId AND ir2.EmailAddress = r.Invitee
				WHERE 
					ir2.InvitationId = '+ cast(@InvitationId as NVARCHAR)+ ' 
					 AND (r.Deleted IS NULL OR r.Deleted = 0)
					 AND (ir2.Deleted IS NULL or ir2.Deleted = 0)
					 '
				IF @IncludeIncomplete = 0
					BEGIN
						SET @Query = @Query + ' AND r.IsComplete = 1 '
					END
					
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
					BEGIN
					IF (@FilterField = 'UniqueIdentifier')
						BEGIN
							SET @Query = @Query + ' AND [r].[UniqueIdentifier] like ''%'' + @FilterValue + ''%'' '	
						END
					IF (@FilterField = 'ResponseID')
						BEGIN
							SET @Query = @Query + ' AND CAST(r.ResponseID AS NVARCHAR) = @FilterValue '	
						END	
					END
					
				SET @Query = @Query + ' DROP TABLE #invitationResponses'		
			--Select Count
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			
			SELECT @Query = '
			
				IF object_id(''tempdb..#orderedResults'') IS NOT NULL
					BEGIN
						DROP TABLE #orderedResults
					END
			
				CREATE TABLE #invitationResponses(RecipientID bigint, ResponseID bigint)

				INSERT INTO #invitationResponses
				SELECT DISTINCT * FROM ckbx_Invitation_Responses
	
				CREATE TABLE #orderedResults(ResponseID bigint, ItemIndex INT IDENTITY(1, 1));
			
				INSERT INTO #orderedResults	
				SELECT
					r.ResponseId
				FROM 
					ckbx_Response r
					INNER JOIN #invitationResponses ir ON ir.ResponseId = r.ResponseId
					INNER JOIN ckbx_InvitationRecipients ir2 ON ir2.RecipientId = ir.RecipientId AND ir2.EmailAddress = r.Invitee
				WHERE 
					ir2.InvitationId = '+ cast(@InvitationId as NVARCHAR)+ ' 
					 AND (r.Deleted IS NULL OR r.Deleted = 0)
					 AND (ir2.Deleted IS NULL or ir2.Deleted = 0)'
				IF @IncludeIncomplete = 0
					BEGIN
						SET @Query = @Query + ' AND r.IsComplete = 1 '
					END
					
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
					BEGIN
					IF (@FilterField = 'UniqueIdentifier')
						BEGIN
							SET @Query = @Query + ' AND [r].[UniqueIdentifier] like ''%'' + @FilterValue + ''%'' '	
						END
					IF (@FilterField = 'ResponseID')
						BEGIN
							SET @Query = @Query + ' AND CAST(r.ResponseID AS NVARCHAR) = @FilterValue '	
						END	
					END
					
				IF (@SortField is NOT NULL AND len(@SortField) > 0)
					BEGIN
						SET @Query = @Query + ' ORDER BY [r].['+@SortField+'] ' + @OrderBy
					END
					
				SET @Query = @Query + '; 

				DROP TABLE #invitationResponses

				--Select Rows
				SELECT 
					r.*, rt.TemplateName
				FROM 
					#orderedResults results 
					INNER JOIN ckbx_Response r on results.ResponseID = r.ResponseID
					INNER JOIN ckbx_ResponseTemplate rt ON r.ResponseTemplateID = rt.ResponseTemplateID 
				WHERE results.ItemIndex BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';
				
				--Select Count
				SELECT COUNT(*) AS TotalItemCount FROM #orderedResults'
			
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
		END
END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_ListTest]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_ListTest]
(
	@ResponseTemplateId int,
	@IncludeComplete bit,
	@IncludeIncomplete bit,
    @MinResponseCompletedDate DATETIME,
	@MaxResponseCompletedDate DATETIME,
	@PageNumber int, 
	@ResultsPerPage int,
	@SortField varchar(64),
	@SortAscending bit,
	@FilterField varchar(64),
	@FilterValue nvarchar(255),   
    @DateFieldName nvarchar(255) = null
)
AS
BEGIN
  DECLARE @OrderBy varchar(64)
  
  IF (@SortField is NOT NULL AND len(@SortField) > 0)
	BEGIN
		IF @SortAscending = 1
			BEGIN
				SET @OrderBy = ' ASC'
			END
		ELSE
			BEGIN
				SET @OrderBy = ' DESC'
			END
	END
	
  DECLARE @Query nvarchar(4000)
  DECLARE @WhereClause nvarchar(1000)
  DECLARE @OrderByClause nvarchar(1000)
  DECLARE @QueryParams nvarchar(500)
  
  SET @QueryParams = '@ResponseTemplateId int, @FilterValue nvarchar(255), @MinResponseCompletedDate datetime, @MaxResponseCompletedDate datetime'
  
  --create the WHERE clause  
  SET @WhereClause = ' (Deleted IS NULL OR Deleted = 0) AND IsTest = 1 '
  IF @ResponseTemplateID IS NOT NULL AND @ResponseTemplateID >= 1000
  BEGIN
    SET @WhereClause = @WhereClause + ' AND ckbx_Response.ResponseTemplateID = @ResponseTemplateId '
  END

  IF @IncludeIncomplete = 0 AND @IncludeComplete = 0
	RETURN

  IF @IncludeIncomplete = 0
  BEGIN
    SET @WhereClause = @WhereClause + ' AND IsComplete = 1 '
  END
  ELSE IF @IncludeComplete = 0
  BEGIN
    SET @WhereClause = @WhereClause + ' AND IsComplete = 0 '
  END

  IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
  BEGIN
    IF (@FilterField = 'UniqueIdentifier')
    BEGIN
      SET @WhereClause = @WhereClause + ' AND [UniqueIdentifier] = ''' + @FilterValue +  ''''	
    END

    IF (@FilterField = 'Invitee')
    BEGIN
      SET @WhereClause = @WhereClause + ' AND [Invitee] like ''%'' + @FilterValue + ''%'' '	
    END

    IF (@FilterField = 'ResponseID')
    BEGIN
      SET @WhereClause = @WhereClause + ' AND CAST(ResponseID AS NVARCHAR) = @FilterValue '	
    END	

    IF (@FilterField = 'Guid')
    BEGIN
      SET @WhereClause = @WhereClause + ' AND Replace ([GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '   
    END

    IF (@FilterField = 'RespondentGuid')
    BEGIN
      SET @WhereClause = @WhereClause + ' AND [RespondentGuid] = @FilterValue'   
    END

    IF (@FilterField = 'ResumeKey')
    BEGIN
      SET @WhereClause = @WhereClause + ' AND [ResumeKey] like ''%'' + @FilterValue + ''%'' '	
    END

	IF (@FilterField = 'StartDate')
	BEGIN
	  SET @WhereClause = @WhereClause + ' AND [Started] > @FilterValue '
	END
  END
				
  IF (@MinResponseCompletedDate IS NOT NULL)
	  BEGIN
		IF @ResponseTemplateID >= 1000
			BEGIN 
				SET @WhereClause = @WhereClause + ' AND (ended IS NULL OR (@MinResponseCompletedDate <= ended)) ';
			END
		ELSE
			BEGIN
				SET @WhereClause = @WhereClause + ' AND (ended IS NOT NULL AND (@MinResponseCompletedDate <= ended)) ';
			END
	  END
  
  IF (@MaxResponseCompletedDate IS NOT NULL)
	  BEGIN
		IF @ResponseTemplateID >= 1000
			BEGIN
				SET @WhereClause = @WhereClause + ' AND (ended IS NULL OR (@MaxResponseCompletedDate >= ended)) ';
			END
		ELSE
			BEGIN
				SET @WhereClause = @WhereClause + ' AND (ended IS NOT NULL AND (@MaxResponseCompletedDate >= ended)) ';
			END
	  END
  
  --build the ORDER BY clause
  IF (@SortField is NOT NULL AND len(@SortField) > 0)
  BEGIN
    SET @OrderByClause = ' ORDER BY ['+@SortField+'] ' + @OrderBy
  END
  ELSE
  BEGIN
	SET @OrderByClause = ''
  END 
  
  --If not paging, simply return the results
  IF @PageNumber <= 0 OR @ResultsPerPage <= 0
  BEGIN
	--select results
    SET @Query = '
      SELECT ckbx_response.*, rt.TemplateName FROM ckbx_Response 
		LEFT JOIN ckbx_ResponseTemplate rt ON ckbx_Response.ResponseTemplateID = rt.ResponseTemplateID 
		WHERE ' + @WhereClause + ' ' + @OrderByClause    
    exec sp_executesql @Query, @QueryParams, @ResponseTemplateId = @ResponseTemplateId, @FilterValue = @FilterValue, @MinResponseCompletedDate = @MinResponseCompletedDate, @MaxResponseCompletedDate = @MaxResponseCompletedDate					
  END
  ELSE
  BEGIN
	DECLARE @PageLowerBound int
	DECLARE @PageUpperBound int
	
	-- Set the page bounds
	SET @PageLowerBound = @ResultsPerPage * (@PageNumber - 1) + 1
	SET @PageUpperBound = @PageLowerBound + @ResultsPerPage - 1

    CREATE TABLE #indexedResults
    (
       [Index] int,
       [ResponseID] bigint 
    )
    
	/*
    SET @Query = 'INSERT INTO #indexedResults (ResponseID) SELECT TOP ' 
        + CONVERT(nvarchar, @PageUpperBound)
        + 'ResponseID FROM ckbx_Response WHERE ' + @WhereClause + ' ' + @OrderByClause
        */
    SET @Query = 'INSERT INTO #indexedResults ([Index], ResponseID) 
		SELECT * FROM (SELECT ROW_NUMBER() OVER (' + @OrderByClause + ') as RN, ResponseID FROM ckbx_Response
		WHERE ' + @WhereClause + ') a WHERE a.RN BETWEEN ' 
		+ CAST (@PageLowerBound as nvarchar) + ' AND ' + CAST (@PageUpperBound as nvarchar)

    exec sp_executesql @Query, @QueryParams, @ResponseTemplateId = @ResponseTemplateId, @FilterValue = @FilterValue, @MinResponseCompletedDate = @MinResponseCompletedDate, @MaxResponseCompletedDate = @MaxResponseCompletedDate					
    
    SELECT ckbx_Response.*, RT.TemplateName FROM ckbx_Response 
    LEFT JOIN ckbx_ResponseTemplate RT ON ckbx_Response.ResponseTemplateID = RT.ResponseTemplateID,
		#indexedResults I
	WHERE ckbx_Response.ResponseID = I.ResponseID 
	ORDER BY [INDEX]
  END			
  
  --select total count				
  SET @Query = '
    SELECT COUNT(ResponseID) AS TotalItemCount FROM ckbx_Response  
      WHERE ' + @WhereClause
  exec sp_executesql @Query, @QueryParams, @ResponseTemplateId = @ResponseTemplateId, @FilterValue = @FilterValue, @MinResponseCompletedDate = @MinResponseCompletedDate, @MaxResponseCompletedDate = @MaxResponseCompletedDate					
END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_MarkEmailSent]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_MarkEmailSent]
(
  @ResponseID int,
  @EmailItemID int,
  @EmailDate datetime
)
AS
  INSERT INTO ckbx_Response_EmailSent (ResponseID, EmailItemID, EmailDate) VALUES (@ResponseID, @EmailItemID, @EmailDate)


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_Update]
(
	@GUID uniqueidentifier,
	@LastEdit datetime,
	@IsComplete bit,
	@EndDate datetime = null,
	@LastPageViewed int,
	@Language nvarchar(8),
	@IsTest bit
)
AS
	UPDATE ckbx_Response SET LastEdit = @LastEdit, IsComplete = @IsComplete, Ended = @EndDate, LastPageViewed = @LastPageViewed, [Language] = @Language WHERE ckbx_Response.GUID = @GUID
	if @IsComplete = 1
	begin
		declare @invitee nvarchar(1020)
		declare @uniqueIdentifier nvarchar(255)
		declare @responseID bigint
		declare @recipientID bigint
		declare @ResponseTemplateID int 
		select @invitee = invitee, @responseID = responseID, @ResponseTemplateID = ResponseTemplateID,
			@uniqueIdentifier = [UniqueIdentifier] from ckbx_Response
			where ckbx_Response.GUID = @GUID
		
		if @invitee is not null
		begin
			IF OBJECT_ID('tempdb..#Recipients') IS NOT NULL
			BEGIN
			   DROP TABLE #Recipients 
			END    	
			CREATE TABLE #Recipients
			(
				RecipientID bigint,
				InvitationID int
			)	
			
			insert into #Recipients
				select recipientID, i.InvitationID from ckbx_InvitationRecipients ir 
					inner join ckbx_Invitation i on ir.InvitationId = i.InvitationID and @uniqueIdentifier = ir.[UniqueIdentifier]
					where i.ResponseTemplateID = @ResponseTemplateID and ir.HasResponded = 0 and ir.EMailAddress = @invitee
					
			insert into #Recipients
				select recipientID, i.InvitationID  from ckbx_invitationrecipients ir 
					inner join ckbx_credential c on lower(ir.EmailAddress) = lower(c.Email) and @uniqueIdentifier = c.[UniqueIdentifier]
					inner join ckbx_Invitation i on ir.InvitationId = i.InvitationID
					where 
						i.ResponseTemplateID = @ResponseTemplateID and
						(c.username = @uniqueIdentifier or c.Email=@uniqueIdentifier)
													
			IF @IsTest != 'True'
				BEGIN
					update ckbx_InvitationRecipients set HasResponded = 1 where recipientID in
					(select recipientID from #Recipients) and [UniqueIdentifier] = @uniqueIdentifier
					
					insert into ckbx_Invitation_Responses
						select distinct r.RecipientID, @responseID from #Recipients r where 
							not exists (select top 1 RecipientID from ckbx_Invitation_Responses ir
								where ir.RecipientID = r.RecipientID and ir.ResponseID = @responseID)
				END
						
			DROP TABLE #Recipients
		END
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_UpdateAnswer]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_UpdateAnswer]
(
	@AnswerID bigint,
	@AnswerText ntext = null,
	@OptionID int = null,
	@Points decimal(18,4) = null,
	@DateCreated datetime
)
AS
	UPDATE ckbx_ResponseAnswers 
	SET

	AnswerText = @AnswerText,
	OptionID = @OptionID,
	Points = @Points,
	DateCreated = @DateCreated
	WHERE AnswerID = @AnswerID	

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_UpdatePageLog]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Response_UpdatePageLog]
(
	@PageLogID bigint,
	@PageEndTime datetime
)
AS

	UPDATE ckbx_ResponseLog SET PageEndTime = @PageEndTime WHERE PageLogID = @PageLogID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Response_UpdateSession]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Response_UpdateSession]
(
	@SessionGuid uniqueidentifier,
	@ResponseId bigint,
	@ResponseTemplateId int,
	@AuthenticatedRespondentUid nvarchar(511),
	@AnonymousRespondentUid uniqueidentifier,
    @EnteredPassword nvarchar(255),
	@SelectedLanguage nvarchar(5)
)
AS
  UPDATE ckbx_Response_Sessions 
  SET 
	ResponseId = @ResponseId,
	ResponseTemplateId = @ResponseTemplateId,
	AuthenticatedRespondentUid = @AuthenticatedRespondentUid,
	AnonymousRespondentUid = @AnonymousRespondentUid,
    EnteredPassword = @EnteredPassword,
	SelectedLanguage = @SelectedLanguage
  WHERE
    SessionGuid = @SessionGuid

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ResponseOperand_Create]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ResponseOperand_Create]
(
	@OperandID int,
	@ResponseKey varchar(50)
)
AS

	IF NOT EXISTS (SELECT OperandID FROM ckbx_ResponseOperand WHERE OperandID = @OperandID)
	BEGIN
		INSERT INTO ckbx_ResponseOperand
		(OperandID, ResponseKey)
		VALUES
		(@OperandID, @ResponseKey)
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ResponseOperand_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ResponseOperand_Delete]
(
	@OperandID int
)
AS
	DELETE ckbx_ResponseOperand WHERE OperandID = @OperandID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ResponseTemplate_GenerateActivityHistogram]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ResponseTemplate_GenerateActivityHistogram]
(
   @ResponseTemplateId int,
   @InvitationId int,
   @StartDate datetime,
   @EndDate datetime,
   @Granularity varchar(15)
)
AS
	DECLARE @DayStart datetime
	DECLARE @NumDays int
	
	DECLARE @CurDayEnd datetime
	DECLARE @CurDayStart datetime

	IF @EndDate IS NULL
		BEGIN
			SET @EndDate = getdate()
		END

	--Figure out start of first day, SQL is a fairly efficient way to get zero hour
	SET @DayStart = CAST(FLOOR( CAST(@StartDate AS FLOAT)) AS DATETIME)
	SET @NumDays = DATEDIFF(day, @StartDate, @EndDate)
	
	--Create ouptput table
	CREATE TABLE #tmpActivity
	(
		ActivityStartDate datetime,
		ActivityEndDate datetime,
		StartedResponses int		,
		EndedResponses int,
		AvgCompletedResponseTime datetime
	)

	--Place holders
	DECLARE @StartedResponses int
	DECLARE @EndedResponses int
	DECLARE @AvgCompletedResponseTime datetime

	SET @CurDayStart = @DayStart
	SET @CurDayEnd = DATEADD(millisecond, -1, DATEADD(day, 1, @CurDayStart))

	WHILE @CurDayStart < @EndDate
		BEGIN

			IF @InvitationId IS NOT NULL
				BEGIN
					--Responses started
					SELECT @StartedResponses = COUNT(*) 
						FROM 
							ckbx_Response r 
							INNER JOIN ckbx_Invitation_Responses ir ON ir.ResponseId = r.ResponseId 
							INNER JOIN ckbx_InvitationRecipients ir2 ON ir2.RecipientId = ir.RecipientId
						WHERE 
							r.Started BETWEEN @CurDayStart AND @CurDayEnd 
							AND ir2.InvitationId = @InvitationId

					--Responses completed
					SELECT @EndedResponses = COUNT(*)
						FROM 
							ckbx_Response r 
							INNER JOIN ckbx_Invitation_Responses ir ON ir.ResponseId = r.ResponseId 
							INNER JOIN ckbx_InvitationRecipients ir2 ON ir2.RecipientId = ir.RecipientId
						WHERE 
							r.Started BETWEEN @CurDayStart AND @CurDayEnd 
							AND ir2.InvitationId = @InvitationId
							AND r.IsComplete = 1


					--Avg. Completed Response Time
					SELECT @AvgCompletedResponseTime = CAST(AVG(CAST(r.Ended AS FLOAT) -  CAST(r.[Started] AS FLOAT)) AS DATETIME)
						FROM 
							ckbx_Response r 
							INNER JOIN ckbx_Invitation_Responses ir ON ir.ResponseId = r.ResponseId 
							INNER JOIN ckbx_InvitationRecipients ir2 ON ir2.RecipientId = ir.RecipientId
						WHERE 
							r.Started BETWEEN @CurDayStart AND @CurDayEnd 
							AND ir2.InvitationId = @InvitationId
							AND r.IsComplete = 1

				END
			ELSE
				BEGIN
					--Responses started
					SELECT @StartedResponses = COUNT(*) 
						FROM 
							ckbx_Response r 
						WHERE 
							r.Started BETWEEN @CurDayStart AND @CurDayEnd
							AND r.ResponseTemplateId = @ResponseTemplateId

					--Responses completed
					SELECT @EndedResponses = COUNT(*)
						FROM 
							ckbx_Response r 
						WHERE 
							r.Started BETWEEN @CurDayStart AND @CurDayEnd 
							AND r.ResponseTemplateId = @ResponseTemplateId

					--Avg. Completed Response Time
					SELECT @AvgCompletedResponseTime = CAST(AVG(CAST(r.Ended AS FLOAT) -  CAST(r.[Started] AS FLOAT)) AS DATETIME)
						FROM 
							ckbx_Response r 
						WHERE 
							r.Started BETWEEN @CurDayStart AND @CurDayEnd 
							AND r.ResponseTemplateId = @ResponseTemplateId
				END

			INSERT INTO #tmpActivity
				(ActivityStartDate, ActivityEndDate, StartedResponses, EndedResponses, AvgCompletedResponseTime)
			VALUES
				(@CurDayStart, @CurDayEnd, @StartedResponses, @EndedResponses, @AvgCompletedResponseTime)
			

			IF @Granularity = 'Day'
				BEGIN
					SET @CurDayStart = DATEADD(day, 1, @CurDayStart)
				END

			ELSE IF @Granularity = 'Week'
				BEGIN
					SET @CurDayStart = DATEADD(week, 1, @CurDayStart)
				END

			ELSE
				BEGIN
					SET @CurDayStart = DATEADD(month, 1, @CurDayStart)
				END
			
			SET @CurDayEnd = DATEADD(millisecond, -1, DATEADD(day, 1, @CurDayStart))

		END

	--Select output
	SELECT 
		ActivityStartDate,
		ActivityEndDate, 
		StartedResponses, 
		EndedResponses, 
		AvgCompletedResponseTime 
	FROM 
		#tmpActivity


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ResponseTemplate_GetMinMaxResponseDate]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ResponseTemplate_GetMinMaxResponseDate]
(
	@ResponseTemplateId int,
    @InvitationId int
)
AS
  IF @InvitationId IS NULL
    BEGIN
		SELECT
			MIN([Started]) AS MinStartDate,
			MAX([Ended]) AS MaxEndDate,
			MAX([Started]) AS MaxStartDate
		FROM
			ckbx_Response
		WHERE
			ResponseTemplateId = @ResponseTemplateId
	END
  ELSE
	BEGIN
		SELECT
			MIN([Started]) AS MinStartDate,
			MAX([Ended]) AS MaxEndDate,
			MAX([Started]) AS MaxStartDate
		FROM
			ckbx_Response r
			INNER JOIN ckbx_Invitation_Responses ir ON ir.ResponseId = r.ResponseId
			INNER JOIN ckbx_InvitationRecipients ir2 ON ir2.RecipientId = ir.RecipientId
		WHERE
			r.ResponseTemplateId = @ResponseTemplateId
			AND (ir2.Deleted IS NULL OR ir2.Deleted = 0)
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Role_GetAll]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_Role_GetAll]

AS
	/* SET NOCOUNT ON */
	
	SELECT * FROM ckbx_Role
	SELECT rp.RoleID, rp.PermissionID, p.PermissionName, p.PermissionDisplayName FROM ckbx_Permission p 
	JOIN ckbx_RolePermissions rp ON rp.PermissionID = p.PermissionID
	RETURN 





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Role_GetId]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Role_GetId]
(
  @RoleName nvarchar(100)
)
AS
  Select RoleID FROM ckbx_Role WHERE RoleName = @RoleName

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Role_GetPermissions]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_Role_GetPermissions]
(
	@RoleName varchar (255)
)
AS
	/* SET NOCOUNT ON */
	
	SELECT rp.RoleID, rp.PermissionID, p.PermissionName, p.PermissionDisplayName FROM ckbx_Permission p 
	JOIN ckbx_RolePermissions rp ON rp.PermissionID = p.PermissionID
	JOIN ckbx_Role r ON rp.RoleID = r.RoleID
	where r.RoleName = @RoleName
	RETURN 




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Role_ListAll]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_Role_ListAll]

AS
	/* SET NOCOUNT ON */
	
	SELECT * FROM ckbx_Role






GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Role_ListForUser]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Role_ListForUser]
(
   @UniqueIdentifier nvarchar(511)
)
AS
  SELECT
    r.RoleName
  FROM
    ckbx_Role r
    INNER JOIN ckbx_IdentityRoles ir ON ir.RoleId = r.RoleId
  WHERE
    ir.UniqueIdentifier = @UniqueIdentifier
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Role_ListUsersInRole]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Role_ListUsersInRole]
(
   @RoleName nvarchar(511)
)
AS
  SELECT
    [UniqueIdentifier]
  FROM ckbx_IdentityRoles ir 
    INNER JOIN ckbx_Role r ON r.RoleId = ir.RoleId
  WHERE
    r.RoleName = @RoleName



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_AddResponsePipe]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_RT_AddResponsePipe]
(
  @ResponseTemplateID int,
  @PipeName nvarchar(64),
  @ItemID int
)
AS 
  IF NOT EXISTS(SELECT PipeName FROM ckbx_ResponsePipe WHERE PipeName = @PipeName AND ResponseTemplateID = @ResponseTemplateID)
    BEGIN
      INSERT INTO ckbx_ResponsePipe
        (ResponseTemplateID, PipeName, ItemID) 
      VALUES
        (@ResponseTemplateID, @PipeName, @ItemID)
    END



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_ChangeOwner]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_RT_ChangeOwner]
(
	@ResponseTemplateID int,
	@CreatedBy nvarchar(611)
)
AS
BEGIN
	UPDATE [ckbx_ResponseTemplate]
	SET [CreatedBy]=@CreatedBy
	WHERE [ResponseTemplateID] = @ResponseTemplateID END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_CheckFolderExists]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_RT_CheckFolderExists]
(
	@FolderName nvarchar (255),
	@ItemId int,
	@CreatedBy nvarchar (611)
)
AS
DECLARE @FolderType nvarchar(50)
SELECT @FolderType = 'Folder'

--Verify that a new folder has a unique name
if (@ItemId <= 0)
	BEGIN
		SELECT 
			count(FolderID) as folderCount
		FROM 
			ckbx_Folder as f 
		INNER JOIN ckbx_FormFolders as ff
			ON f.FolderID = ff.ItemID
			AND ff.ItemType = @FolderType
			AND ff.AncestorID is null
		WHERE
			LOWER(f.Name) = LOWER(@FolderName)
	END
--Verify that an update has not produced a name conflict
ELSE
	BEGIN
		SELECT 
			count(FolderID) as folderCount
		FROM 
			ckbx_Folder as f 
		INNER JOIN ckbx_FormFolders as ff
			ON f.FolderID = ff.ItemID
			AND ff.ItemType = @FolderType
			AND ff.AncestorID is null
		WHERE
			f.FolderID != @ItemId
			AND LOWER(f.Name) = LOWER(@FolderName)
			AND f.CreatedBy = @CreatedBy
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_RT_Delete]
(
   @ResponseTemplateID int,
   @ModifiedDate datetime
)
AS

		UPDATE ckbx_Template SET Deleted = 1, ModifiedDate = @ModifiedDate WHERE TemplateID = @ResponseTemplateID
  UPDATE ckbx_ResponseTemplate SET StyleTemplateID = NULL, TabletStyleTemplateID = NULL, SmartPhoneStyleTemplateID = NULL, IsActive = 0 WHERE ResponseTemplateID = @ResponseTemplateID
  
  --Remove any URL mapppings
  DECLARE @RTGuid uniqueidentifier

  SELECT @RTGuid = GUID FROM ckbx_ResponseTemplate WHERE ResponseTemplateID = @ResponseTemplateID  

  IF @RTGuid IS NOT NULL
    BEGIN
	  DECLARE @GuidAsString nvarchar(2000)  --Length 2000 to match field in ckbx_UrlMappings
      SET @GuidAsString = CONVERT(nvarchar(2000), @RTGuid)
      SET @GuidAsString = REPLACE(@GuidAsString, '-', '')

      --Remove mapping
      DELETE FROM ckbx_UrlMappings WHERE DestinationUrl LIKE '%/Survey.aspx?s=' + @GuidAsString

    END

	delete from ckbx_Timeline_Result where ObjectParentType = 'SURVEY' and ObjectParentID = @ResponseTemplateID

  RETURN



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_DeletePage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[ckbx_sp_RT_DeletePage]
(
	@ResponseTemplateID int,
	@PageID int
)
AS
	DELETE ckbx_ResponseLog WHERE PageID = @PageID
	DELETE FROM ckbx_Response_PageItemOrder WHERE PageID = @PageID
	DELETE ckbx_Template_Pages WHERE TemplateID = @ResponseTemplateID AND PageID = @PageID
    


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_DeleteResponsePipe]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_RT_DeleteResponsePipe]
(
  @ResponseTemplateID int,
  @PipeName nvarchar(64)
)
AS 
  DELETE FROM ckbx_ResponsePipe WHERE ResponseTemplateID = @ResponseTemplateID and PipeName = @PipeName


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_DeleteTestResponses]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_RT_DeleteTestResponses]
(
	@ResponseTemplateID int
)
AS
	UPDATE 
		ckbx_Response 
	SET Deleted = 1 
	WHERE 
		ResponseTemplateID = @ResponseTemplateID
		AND IsTest = 1

	UPDATE 
		ckbx_ResponseAnswers 
	SET Deleted = 1 
	WHERE 
		ResponseID IN (
						SELECT 
							responseID 
						FROM 
							ckbx_response 
						WHERE 
							ResponseTemplateID = @ResponseTemplateID
							AND ckbx_response.IsTest = 1
					)

	DELETE FROM 
		ckbx_ResponseLog 
	WHERE 
		ResponseID IN (
						SELECT 
							responseID 
						FROM 
							ckbx_response
						WHERE 
							ResponseTemplateID = @ResponseTemplateID
							AND ckbx_response.IsTest = 1
					)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_DeleteUserResponses]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[ckbx_sp_RT_DeleteUserResponses]
(
	@UserUniqueIdentifier nvarchar(611)
)
AS
	UPDATE 
		ckbx_Response 
	SET Deleted = 1 
	WHERE 
		UniqueIdentifier = @UserUniqueIdentifier		

	UPDATE 
		ckbx_ResponseAnswers 
	SET Deleted = 1 
	WHERE 
		ResponseID IN (
						SELECT 
							responseID 
						FROM 
							ckbx_response 
						WHERE 
							UniqueIdentifier = @UserUniqueIdentifier	
					)

	DELETE FROM 
		ckbx_ResponseLog 
	WHERE 
		ResponseID IN (
						SELECT 
							responseID 
						FROM 
							ckbx_response
						WHERE 
							UniqueIdentifier = @UserUniqueIdentifier	
					)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_GetAccessControllableResource]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--Alter procedure
CREATE PROCEDURE [dbo].[ckbx_sp_RT_GetAccessControllableResource]
(
   @TemplateID int
)
AS

		SELECT
            t.AclID,
            t.DefaultPolicy,
            rt.TemplateName as [Name],
            rt.GUID,
            rt.AllowSurveyEditWhileActive,
            rt.DefaultLanguage,
            rt.TitleTextId,
            rt.SecurityType as [SecurityTypeValue],
            rt.IsActive,
            rt.ActivationStart,
            rt.ActivationEnd,
            rt.MaxTotalResponses,
            rt.MaxResponsesPerUser,
            rt.AllowEdit,
            rt.StyleTemplateId,
            rt.TabletStyleTemplateId,
            rt.SmartPhoneStyleTemplateId,
            rt.SupportedLanguages as [SupportedLanguagesString],
            rt.AnonymizeResponses,
            t.ModifiedDate,
            t.CreatedDate,
            t.CreatedBy
      FROM
            ckbx_ResponseTemplate as rt
            INNER JOIN ckbx_Template as t
            ON rt.ResponseTemplateID = t.TemplateID
      WHERE
            TemplateID = @TemplateID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_GetByItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[ckbx_sp_RT_GetByItem]
(
  @ItemID int,
  @ResponseTemplateID int out
)
AS
	select @ResponseTemplateID = ResponseTemplateID from ckbx_Template_Items ti
	inner join ckbx_ResponseTemplate rt on ti.TemplateID = rt.ResponseTemplateID
	where ItemID = @ItemID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_GetGUID]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_RT_GetGUID]
(
  @ResponseTemplateID int
)
AS
  SELECT GUID FROM ckbx_ResponseTemplate WHERE ResponseTemplateID = @ResponseTemplateID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_GetIDByGUID]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_RT_GetIDByGUID]
(
	@GUID uniqueidentifier
)
AS

SELECT ResponseTemplateID FROM ckbx_ResponseTemplate WHERE GUID = @GUID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_GetIDFromResponseGUID]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_RT_GetIDFromResponseGUID]
(
  @ResponseGUID uniqueidentifier
)
AS
  SELECT ResponseTemplateID FROM ckbx_Response WHERE GUID = @ResponseGUID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_GetPagePositionById]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_RT_GetPagePositionById]
(
  @PageID int
)
AS
	SELECT [PagePosition] FROM ckbx_Template_Pages WHERE [PageID] =  @PageID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_GetParent]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_RT_GetParent]
(
  @ResponseTemplateId int,
  @FolderId int out
)
AS
	SELECT 
		@FolderId = AncestorId 
	FROM 
		ckbx_FormFolders 
	WHERE 
		ItemId = @ResponseTemplateId 
		AND ItemType = 'Form'
		AND NumLevel = 1

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_GetResponseTemplate]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_RT_GetResponseTemplate]

(

  @ResponseTemplateID int

)

AS

--1

  -- Master ResponseTemplate table
	SELECT
		t.TemplateID,
		t.ModifiedDate,
		t.Deleted,
		t.DefaultPolicy,
		t.AclID,
		t.CreatedDate,
		rt.*
	FROM
		ckbx_ResponseTemplate rt

      INNER JOIN ckbx_Template t on t.TemplateID = rt.ResponseTemplateID 

  WHERE 

      rt.ResponseTemplateID = @ResponseTemplateID

 

  --2

  -- Select All ItemData data for this ResponseTemplate

  SELECT 

      ckbx_Item.ItemID,

      ckbx_Item.ItemTypeID,

      ckbx_Item.Alias,

      ckbx_Item.CreatedDate,

      ckbx_Item.ModifiedDate,

      ckbx_Item.Deleted,

	  ckbx_Item.IsActive,

      ckbx_Template_Items.TemplateID,

      ckbx_ItemType.ItemDataClassName,

      ckbx_ItemType.ItemDataAssemblyName,

      ckbx_ItemType.DefaultAppearanceCode,

      ckbx_ItemType.ItemName,

      ckbx_ItemType.MobileCompatible

  FROM 

      ckbx_Item 

      INNER JOIN ckbx_Template_Items ON ckbx_Item.ItemID = ckbx_Template_Items.ItemID

      INNER JOIN ckbx_ItemType on ckbx_ItemType.ItemTypeID = ckbx_Item.ItemTypeID

  WHERE 

    ckbx_Template_Items.TemplateID = @ResponseTemplateID

    AND (ckbx_Item.Deleted IS NULL OR ckbx_Item.Deleted = 0)

 

  --3

  -- Select all PageData for this ResponseTemplate

  SELECT TemplateID, PageID, PagePosition, LayoutTemplateID FROM ckbx_Template_Pages WHERE TemplateID = @ResponseTemplateID ORDER BY PagePosition

 

  --4

  -- Select List Data from ItemOptions table for any Items with list data

    SELECT

            opt.OptionID, opt.ItemID, opt.TextID, opt.Alias, opt.IsDefault, opt.[Position], opt.IsOther, opt.Points, opt.Deleted, opt.ListID

    FROM 

            ckbx_ItemOptions opt

            INNER JOIN ckbx_Template_Items ti ON ti.ItemID = opt.ItemID

      WHERE

            ti.TemplateID = @ResponseTemplateID

            AND (opt.Deleted IS NULL OR (opt.Deleted IS NOT NULL AND opt.Deleted = 0))

 

  --5

  /* SELECTS from ckbx_TemplatePage_Items */

  SELECT 

      tp.PageID, tpi.ItemID, tpi.[Position]

  FROM

      ckbx_Template_Pages tp

      INNER JOIN ckbx_TemplatePage_Items tpi ON tpi.PageID = tp.PageID

      INNER JOIN ckbx_Template_Items ti ON ti.ItemID = tpi.ItemID and ti.TemplateID = tp.TemplateID

      INNER JOIN ckbx_Item i ON i.ItemID = ti.ItemID

      INNER JOIN ckbx_ItemType it ON it.ItemTypeID = i.ItemTypeID

  WHERE

      tp.TemplateID = @ResponseTemplateID

  ORDER BY

      tp.PagePosition, tpi.Position

 

  --6
/*
  Rule loading now performed by ckbx_sp_RT_GetResponseTemplate_Rules
  
  --Item Rules

  SELECT

      ir.ItemID, ir.RuleID

  FROM

      ckbx_ItemRules ir

      LEFT OUTER JOIN ckbx_Template_Items ti ON ti.ItemID = ir.ItemID

      LEFT OUTER JOIN ckbx_ItemData_MatrixItems mi ON mi.ItemID = ir.ItemID

      LEFT OUTER JOIN ckbx_Template_Items ti2 ON ti2.ItemID = mi.MatrixID

  WHERE

      (ti.TemplateID = @ResponseTemplateID OR ti2.TemplateID = @ResponseTemplateID)

      AND ((ti.ItemID IS NOT NULL) OR (mi.ItemID IS NOT NULL AND ti2.ItemID IS NOT NULL))

   

--SELECT ItemID, RuleID FROM ckbx_ItemRules WHERE ItemID IN 

--  (SELECT ItemID FROM ckbx_Template_Items WHERE TemplateID = @ResponseTemplateID)

-- OR ItemID IN

-- (SELECT ItemID FROM ckbx_ItemData_MatrixItems WHERE MatrixID IN 

--  (SELECT ItemID FROM ckbx_Template_Items WHERE TemplateID = @ResponseTemplateID))

  

  --7

  --Page Rules

  SELECT

      tpr.PageID, tpr.RuleID, tpr.EventTrigger

  FROM

      ckbx_TemplatePage_Rules tpr

      INNER JOIN ckbx_Template_Pages tp ON tp.PageID = tpr.PageID

  WHERE

      tp.TemplateID = @ResponseTemplateID

 

  --Prepare the temp tables

  IF object_id('tempdb..#Rules') IS NOT NULL

  BEGIN

      DROP Table #Rules

  END

  IF object_id('tempdb..#Expressions') IS NOT NULL

  BEGIN

      DROP Table #Expressions

  END

  IF object_id('tempdb..#Operands') IS NOT NULL

  BEGIN

      DROP Table #Operands

  END

 

  --GET ALL THE RULES DATA INTO 3 TABLES

  select RuleID, ExpressionID

  INTO #Rules

  FROM ckbx_Rule WHERE RuleID IN 

 

(SELECT RuleID FROM ckbx_ItemRules WHERE ItemID IN 

  (SELECT ItemID FROM ckbx_Template_Items WHERE TemplateID = @ResponseTemplateID)

 OR ItemID IN

 (SELECT ItemID FROM ckbx_ItemData_MatrixItems WHERE MatrixID IN 

  (SELECT ItemID FROM ckbx_Template_Items WHERE TemplateID = @ResponseTemplateID)))

  OR

  RuleID IN (SELECT RuleID FROM ckbx_TemplatePage_Rules WHERE PageID IN (

  SELECT PageID FROM ckbx_Template_Pages WHERE TemplateID = @ResponseTemplateID))

 

  SELECT * 

  INTO #Expressions

  FROM ckbx_Expression WHERE ExpressionID IN (

  SELECT ExpressionID FROM #Rules)

  OR ExpressionID IN (

  SELECT ExpressionID FROM ckbx_Expression

  WHERE Root IN (

  SELECT ExpressionID FROM #Rules))

 

  SELECT * INTO #Operands FROM ckbx_Operand WHERE OperandID IN (

  SELECT LeftOperand FROM #Expressions WHERE LeftOperand IS NOT NULL) 

  OR

  OperandID IN (

  SELECT RightOperand FROM #Expressions WHERE RightOperand IS NOT NULL )

 

  -- SELECT FROM TMP TABLES

  --8

  SELECT RuleID, ExpressionID FROM #Rules

 

  --9

  SELECT ExpressionID, Operator, LeftOperand, RightOperand, Parent, Depth, Lineage, Root, ChildRelation FROM #Expressions

 

  ---10

  SELECT OperandID, TypeName, TypeAssembly FROM #Operands

 

  ---11

  SELECT

      op.OperandID, op.ItemID, op.ParentItemID, op.ColumnNumber, op.Category

  FROM

      #Operands o

      INNER JOIN ckbx_ItemOperand op ON op.OperandID = o.OperandID

  

  ---12

  SELECT

      vo.OperandID, vo.ItemID, vo.OptionID, vo.AnswerValue

  FROM

      #Operands o

      INNER JOIN ckbx_ValueOperand vo ON vo.OperandID = o.OperandID

 

   --13

  SELECT

      po.OperandID, po.ProfileKey

  FROM

      #Operands o

      INNER JOIN ckbx_ProfileOperand po ON po.OperandID = o.OperandID

  

  -- SELECT THE RULEACTIONS

  -- 14

  SELECT

      ra.RuleID, ra.ActionID

  FROM

      #Rules r

      INNER JOIN ckbx_RuleActions ra ON ra.RuleID = r.RuleID

  --SELECT THE ACTIONS

  

  --15

  SELECT

      a.ActionID, a.ActionTypeName, a.ActionAssembly

  FROM

      #Rules r

      INNER JOIN ckbx_RuleActions ra ON ra.RuleID = r.RuleID

      INNER JOIN ckbx_Action a ON a.ActionID = ra.ActionID

 */

  --16

  --ResponsePipes

  SELECT ResponseTemplateID, PipeName, ItemID FROM ckbx_ResponsePipe WHERE ResponseTemplateID = @ResponseTemplateID

 

  --17
/*
  SELECT 

      ro.OperandID, ro.ResponseKey 

  FROM 

    #Operands o

      INNER JOIN ckbx_ResponseOperand ro ON ro.OperandID = o.OperandID

 */

  --18 Item Appearance Data

  SELECT 

    ia.ItemID, ia.AppearanceID 

  FROM 

    ckbx_ItemAppearances ia

    INNER JOIN ckbx_Template_Items ti ON ti.ItemID = ia.ItemID

    INNER JOIN ckbx_Item i ON i.ItemID = ti.ItemID

      INNER JOIN ckbx_ItemType it ON it.ItemTypeID = i.ItemTypeID

  WHERE

    ti.TemplateID = @ResponseTemplateID

    AND (i.Deleted IS NULL OR i.Deleted = 0)

 

  --19 Item Appearance

  SELECT 

    a.*

  FROM 

    ckbx_ItemAppearance a

    INNER JOIN ckbx_ItemAppearances ia ON ia.AppearanceID = a.AppearanceID

    INNER JOIN ckbx_Template_Items ti ON ti.ItemID = ia.ItemID

    INNER JOIN ckbx_Item i ON i.ItemID = ti.ItemID

      INNER JOIN ckbx_ItemType it ON it.ItemTypeID = i.ItemTypeID

  WHERE

    ti.TemplateID = @ResponseTemplateID

    AND (i.Deleted IS NULL OR i.Deleted = 0)

 

 

-- 20 BranchAction
/*
  SELECT 

      pba.ActionID,

      pba.GoToPageID

  FROM

      #Rules r

      INNER JOIN ckbx_RuleActions ra ON ra.RuleID = r.RuleID

      INNER JOIN ckbx_PageBranchAction pba ON pba.ActionID = ra.ActionID      
*/
 

 

  --CLEAN UP
/*
  DROP TABLE #Rules

  DROP TABLE #Expressions

  DROP TABLE #Operands */

 

--21 -- Item Lists

  SELECT 

      il.ListID, il.ItemID 

  FROM 

      ckbx_ItemLists il

      INNER JOIN ckbx_Template_Items ti ON ti.ItemID = il.ItemID

  WHERE

      ti.TemplateID = @ResponseTemplateID

  

--22 -- Profile Updater Item Data

  SELECT ItemID, SourceItemID, ProviderName, PropertyName FROM ckbx_ItemData_PUProps WHERE ItemID IN (Select ti.ItemID FROM ckbx_Template_Items ti WHERE ti.TemplateID = @ResponseTemplateID)


--23 -- Score Messages

  SELECT ScoreMessageID
      ,sm.ItemID
      ,LowScore
      ,HighScore
      ,MessageTextID
  FROM [ckbx_ItemData_ScoreMessages] sm
  inner join ckbx_Template_Items ti ON ti.ItemID = sm.ItemID
  WHERE
      ti.TemplateID = @ResponseTemplateID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_GetResponseTemplate_Rules]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_RT_GetResponseTemplate_Rules]
(
  @ResponseTemplateId int  
)
AS
 
  -- Ensure temp tables do not exist

  IF object_id('tempdb..#Rules') IS NOT NULL
  BEGIN
      DROP Table #Rules
  END

  IF object_id('tempdb..#Expressions') IS NOT NULL
  BEGIN
      DROP Table #Expressions
  END

  IF object_id('tempdb..#Operands') IS NOT NULL
  BEGIN
      DROP Table #Operands
  END

  ------------------------------- Populate temp tables ---------------------------

  --Rules & Expressions
  SELECT RuleID, ExpressionID
  INTO #Rules
  FROM ckbx_Rule 
  WHERE 
	RuleID IN  
		(SELECT RuleID FROM ckbx_ItemRules 
		 WHERE 
			ItemID IN  (SELECT ItemID FROM ckbx_Template_Items WHERE TemplateID = @ResponseTemplateID)
			OR ItemID IN (SELECT ItemID FROM ckbx_ItemData_MatrixItems WHERE MatrixID IN  (SELECT ItemID FROM ckbx_Template_Items WHERE TemplateID = @ResponseTemplateID)))
	OR RuleID IN 
		(SELECT RuleID FROM ckbx_TemplatePage_Rules 
			WHERE PageID IN (SELECT PageID FROM ckbx_Template_Pages WHERE TemplateID = @ResponseTemplateID))

 
  -- Expression Data
  SELECT * INTO #Expressions FROM ckbx_Expression 
  WHERE 
	ExpressionID IN (SELECT ExpressionID FROM #Rules)
    OR ExpressionID IN (SELECT ExpressionID FROM ckbx_Expression WHERE Root IN (SELECT ExpressionID FROM #Rules))

 
  -- Operand Data
  SELECT * INTO #Operands FROM ckbx_Operand 
  WHERE 
    OperandID IN (SELECT LeftOperand FROM #Expressions WHERE LeftOperand IS NOT NULL) 
    OR OperandID IN (SELECT RightOperand FROM #Expressions WHERE RightOperand IS NOT NULL )


 ------------- END TEMP TABLE -------------------

 --Select operand data
 SELECT OperandID, TypeName, TypeAssembly FROM #Operands

 --Select base expression data  
 SELECT ExpressionID, Operator, LeftOperand, RightOperand, Parent, Depth, Lineage, Root, ChildRelation FROM #Expressions

 --Select rule data
 SELECT RuleID, ExpressionID FROM #Rules
 

  --Item operands
  SELECT 
	op.OperandID, op.ItemID, op.ParentItemID, op.ColumnNumber, op.Category
  FROM     
	#Operands o
    INNER JOIN ckbx_ItemOperand op ON op.OperandID = o.OperandID

  --Value operands
  SELECT
      vo.OperandID, vo.ItemID, vo.OptionID, vo.AnswerValue
  FROM

      #Operands o
      INNER JOIN ckbx_ValueOperand vo ON vo.OperandID = o.OperandID

 
  --Profile Operands
  SELECT
      po.OperandID, po.ProfileKey
  FROM
      #Operands o
      INNER JOIN ckbx_ProfileOperand po ON po.OperandID = o.OperandID


  --Response operands
  SELECT 
      ro.OperandID, ro.ResponseKey 
  FROM 
    #Operands o
      INNER JOIN ckbx_ResponseOperand ro ON ro.OperandID = o.OperandID


  --Actions
  SELECT
      a.ActionID, a.ActionTypeName, a.ActionAssembly
  FROM
      #Rules r
      INNER JOIN ckbx_RuleActions ra ON ra.RuleID = r.RuleID
      INNER JOIN ckbx_Action a ON a.ActionID = ra.ActionID


  --Rule to Action Mapping
  SELECT
      ra.RuleID, ra.ActionID
  FROM
      #Rules r
      INNER JOIN ckbx_RuleActions ra ON ra.RuleID = r.RuleID

  
  --Item to rule mappings
	SELECT
		ir.ItemID, ir.RuleID, tpi.PageID
	FROM
		ckbx_ItemRules ir
	INNER JOIN ckbx_TemplatePage_Items tpi on ir.ItemID = tpi.ItemID
	INNER JOIN ckbx_Template_Items ti ON ti.ItemID = ir.ItemID
	WHERE
		ti.TemplateID = @ResponseTemplateID 
	Union	
	SELECT
		ir.ItemID, ir.RuleID, tpi.PageID
	FROM
		ckbx_ItemRules ir
	INNER JOIN ckbx_ItemData_MatrixItems mi ON mi.ItemID = ir.ItemID    
	INNER JOIN ckbx_Template_Items ti ON ti.ItemID = mi.MatrixID
	INNER JOIN ckbx_TemplatePage_Items tpi on tpi.ItemID = ti.ItemID
	WHERE
		ti.TemplateID = @ResponseTemplateID
	  

  --Page to Rule Mapping
  SELECT
      tpr.PageID, tpr.RuleID, tpr.EventTrigger
  FROM
      ckbx_TemplatePage_Rules tpr
      INNER JOIN ckbx_Template_Pages tp ON tp.PageID = tpr.PageID
  WHERE
      tp.TemplateID = @ResponseTemplateID


  --BranchActions
  SELECT 
	    pba.ActionID,pba.GoToPageID
  FROM 
		#Rules r
		INNER JOIN ckbx_RuleActions ra ON ra.RuleID = r.RuleID
        INNER JOIN ckbx_Action a ON a.ActionID = ra.ActionID
		INNER JOIN ckbx_PageBranchAction pba ON a.ActionID=pba.ActionID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_GetResponseTemplateIDFromName]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_RT_GetResponseTemplateIDFromName]
(
   @ResponseTemplateName nvarchar(255),
   @ResponseTemplateID int out
)
AS
  SELECT 
	@ResponseTemplateID = rt.ResponseTemplateID 
  FROM 
    ckbx_ResponseTemplate rt
    INNER JOIN ckbx_Template t ON t.TemplateID = rt.ResponseTemplateID
  WHERE 
     rt.TemplateName = @ResponseTemplateName
     AND (t.Deleted IS NULL OR t.Deleted = 0)



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_GetShowAsterisksSetting]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_RT_GetShowAsterisksSetting]
(
  @ResponseTemplateID int,
  @ShowAsterisks int out
)
AS 
SET @ShowAsterisks = (SELECT [ShowAsterisks]
  FROM [ckbx_ResponseTemplate]
  WHERE [ResponseTemplateID] = @ResponseTemplateID)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_GetTableNames]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_RT_GetTableNames]
AS
 
	SELECT TableName FROM ckbx_RTTableNames ORDER BY TablePosition ASC




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_HasResponses]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_RT_HasResponses]
(
	@ResponseTemplateID int,
	@Count int output
)
AS
	SET NOCOUNT ON

	SELECT
		@Count = count(ResponseID)
	FROM
		ckbx_Response
	WHERE
		ResponseTemplateID = @ResponseTemplateID
		AND (Deleted is null OR Deleted = 0)
		AND IsTest = 0

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_Insert]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_RT_Insert]
(
    @ResponseTemplateID int,
    @TemplateName nvarchar(255),
    @NameTextID nvarchar(255),
    @TitleTextID nvarchar(255),
    @DescriptionTextID nvarchar(255),
    @IsActive bit,
    @ActivationStart datetime,
    @ActivationEnd datetime,
    @MaxTotalResponses int,
    @MaxResponsesPerUser int,
    @AllowContinue bit,
	@ShowSaveAndQuit bit,
    @AllowEdit bit,
    @AllowFormReset bit,
    @AnonymizeResponses bit,
    @DisableBackButton bit,
    @RandomizeItemsInPages bit,
    @ShowValidationMessage bit,
    @RequiredFieldsAlert bit,
    @MobileCompatible bit,
    @ButtonContinueTextID nvarchar(255),
    @ButtonBackTextID nvarchar(255),
    @LanguageSource nvarchar(25),
    @LanguageSourceToken nvarchar(255),
    @GuestPassword nvarchar(255),
    @StyleTemplateID int,
    @TabletStyleTemplateID int,
    @SmartPhoneStyleTemplateID int,
    @ShowPageNumbers bit,
    @EnableDynamicPageNumbers bit,
    @EnableDynamicItemNumbers bit,
    @ShowProgressBar bit,
    @ProgressBarOrientation int,
    @ShowItemNumbers bit,
    @ShowTitle bit,
    @ShowAsterisks bit,
	@HideFooterHeader bit,
	@MobileStyleId int,
    @SupportedLanguages nvarchar(1023),
    @DefaultLanguage nvarchar(5),
    @SecurityType int,
    @ReportSecurityType int,
    @EnableScoring bit,
    @GUID nvarchar(50),
    @CreatedBy nvarchar(255),
    @CompletionType int,
	@AllowSurveyEditWhileActive bit,
	@IsPoll bit,
    @ChartStyleID int,
	@Height int,
	@Width int,
	@BorderWidth int,
	@BorderColor varchar(63),
	@BorderStyle varchar(63),
	@GoogleAnalyticsTrackingID varchar(32)
)
AS
INSERT INTO [ckbx_ResponseTemplate] (
    ResponseTemplateID,
    TemplateName,
    NameTextID,
    TitleTextID,
    DescriptionTextID,
    IsActive,
    ActivationStart,
    ActivationEnd,
    MaxTotalResponses,
    MaxResponsesPerUser,
    AllowContinue,
	ShowSaveAndQuit,
    AllowEdit,
    AllowFormReset,
    AnonymizeResponses,
    DisableBackButton,
    RandomizeItemsInPages,
    ShowValidationMessage,
    RequiredFieldsAlert,
    MobileCompatible,
    ButtonContinueTextID,
    ButtonBackTextID,
    LanguageSource,
    LanguageSourceToken,
    GuestPassword,
    StyleTemplateID,
    TabletStyleTemplateID,
    SmartPhoneStyleTemplateID,
	HideFooterHeader,
	MobileStyleId,
    SupportedLanguages,
    DefaultLanguage,
    SecurityType,
    ReportSecurityType,
    EnableScoring,
    GUID,
    CreatedBy,
    CompletionType,
	AllowSurveyEditWhileActive,
	IsPoll,
	ChartStyleID,
	Height,
	Width,
	BorderWidth,
	BorderColor,
	BorderStyle,
	GoogleAnalyticsTrackingID
)
VALUES (
    @ResponseTemplateID,
    @TemplateName,
    @NameTextID,
    @TitleTextID,
    @DescriptionTextID,
    @IsActive,
    @ActivationStart,
    @ActivationEnd,
    @MaxTotalResponses,
    @MaxResponsesPerUser,
    @AllowContinue,
	@ShowSaveAndQuit,
    @AllowEdit,
    @AllowFormReset,
    @AnonymizeResponses,
    @DisableBackButton,
    @RandomizeItemsInPages,
    @ShowValidationMessage,
    @RequiredFieldsAlert,
    @MobileCompatible,
    @ButtonContinueTextID,
    @ButtonBackTextID,
    @LanguageSource,
    @LanguageSourceToken,
    @GuestPassword,
    @StyleTemplateID,
    @TabletStyleTemplateID,
    @SmartPhoneStyleTemplateID,
	@HideFooterHeader,
	@MobileStyleId,
    @SupportedLanguages,
    @DefaultLanguage,
    @SecurityType,
    @ReportSecurityType,
    @EnableScoring,
    @GUID,
    @CreatedBy,
    @CompletionType,
	@AllowSurveyEditWhileActive,
	@IsPoll,
    @ChartStyleID,
	@Height,
	@Width,
	@BorderWidth,
	@BorderColor,
	@BorderStyle,
	@GoogleAnalyticsTrackingID
)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_MoveTemplateToRoot]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE  PROCEDURE [dbo].[ckbx_sp_RT_MoveTemplateToRoot]
(
	@ResponseTemplateID int
)
AS
  IF EXISTS(SELECT ItemID FROM ckbx_FormFolders WHERE ItemType = 'Form' AND ItemID = @ResponseTemplateID)
    BEGIN
      UPDATE ckbx_FormFolders SET AncestorID = NULL, NumLevel = 0 WHERE ItemID = @ResponseTemplateID AND ItemType = 'Form'
    END
  ELSE
    BEGIN
      INSERT INTO ckbx_FormFolders (ItemID, AncestorID, NumLevel, ItemType) VALUES (@ResponseTemplateID, NULL, 0, 'Form')
    END




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_MoveToFolder]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_RT_MoveToFolder]
(
   @FolderID int,
   @ItemID int
)
AS
   IF EXISTS(Select ItemID FROM ckbx_FormFolders WHERE ItemID = @ItemID AND ItemType = 'FORM')
     BEGIN
       UPDATE ckbx_FormFolders
       SET
         AncestorID = @FolderID,
         NumLevel = 1
       WHERE
         ItemID = @ItemID
         AND ItemType = 'Form'
     END
   ELSE
     BEGIN
       INSERT INTO ckbx_FormFolders
         (ItemID, AncestorID, NumLevel, Path, ItemType)
       VALUES
         (@ItemID, @FolderID, 1, NULL, 'Form')
     END




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_TestResponseCount]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_RT_TestResponseCount]
(
	@ResponseTemplateID int,
	@Count int output
)
AS
	SET NOCOUNT ON

	SELECT 
		@Count = Count(ResponseID) 
	FROM 
		ckbx_Response 
	WHERE 
		ResponseTemplateID = @ResponseTemplateID 
		AND (Deleted = 0 OR Deleted IS NULL)
		AND IsTest = 1

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_RT_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_RT_Update]
(
    @ResponseTemplateID int,
    @TemplateName nvarchar(255),
    @NameTextID nvarchar(255),
    @TitleTextID nvarchar(255),
    @DescriptionTextID nvarchar(255),
    @IsActive bit,
    @ActivationStart datetime,
    @ActivationEnd datetime,
    @MaxTotalResponses int,
    @MaxResponsesPerUser int,
    @AllowContinue bit,
	@ShowSaveAndQuit bit,
    @AllowEdit bit,
    @AllowFormReset bit,
    @AnonymizeResponses bit,
    @GuestPassword nvarchar(255),
    @DisableBackButton bit,
    @StyleTemplateID int,
    @TabletStyleTemplateID int,
    @SmartPhoneStyleTemplateID int,
    @ShowPageNumbers bit,
    @ShowProgressBar bit,
    @ProgressBarOrientation int,
    @ShowItemNumbers bit,
    @EnableDynamicPageNumbers bit,
    @EnableDynamicItemNumbers bit,
    @ShowTitle bit,
    @ShowAsterisks bit,
	@HideFooterHeader bit,
	@MobileStyleId int,
    @RandomizeItemsInPages bit,
    @ShowValidationMessage bit,
    @RequiredFieldsAlert bit,
    @MobileCompatible bit,
    @ButtonContinueTextID nvarchar(255),
    @ButtonBackTextID  nvarchar(255),
    @SupportedLanguages nvarchar(1023),
    @DefaultLanguage nvarchar(5),
    @LanguageSource nvarchar(25),
    @LanguageSourceToken nvarchar(255),
    @SecurityType int,
    @ReportSecurityType int,
    @EnableScoring bit,
    @CompletionType int,
	@AllowSurveyEditWhileActive bit,
	@IsPoll bit,
	@ChartStyleID int,
	@Height int,
	@Width int,	
	@BorderWidth int,
	@BorderColor varchar(63),
	@BorderStyle varchar(63),
	@GoogleAnalyticsTrackingID varchar(32)
)
AS	
  UPDATE [ckbx_ResponseTemplate]
  SET
    TemplateName = @TemplateName,
    NameTextID = @NameTextID,
    TitleTextID = @TitleTextID,
    DescriptionTextID = @DescriptionTextID,
    IsActive = @IsActive,
    ActivationStart = @ActivationStart,
    ActivationEnd = @ActivationEnd,
    MaxTotalResponses = @MaxTotalResponses,
    MaxResponsesPerUser = @MaxResponsesPerUser,
    AllowContinue = @AllowContinue,
	ShowSaveAndQuit = @ShowSaveAndQuit,
    AllowEdit = @AllowEdit,
    AllowFormReset = @AllowFormReset,
    DisableBackButton = @DisableBackButton,
    GuestPassword = @GuestPassword,
    StyleTemplateID = @StyleTemplateID,
    TabletStyleTemplateID = @TabletStyleTemplateID,
    SmartPhoneStyleTemplateID = @SmartPhoneStyleTemplateID,
    ShowPageNumbers = @ShowPageNumbers,
    EnableDynamicPageNumbers = @EnableDynamicPageNumbers,
    EnableDynamicItemNumbers = @EnableDynamicItemNumbers,
    ShowProgressBar = @ShowProgressBar,
    ProgressBarOrientation = @ProgressBarOrientation,
    ShowItemNumbers = @ShowItemNumbers,
    ShowTitle = @ShowTitle,
    ShowAsterisks = @ShowAsterisks,
	HideFooterHeader = @HideFooterHeader,
	MobileStyleId  = @MobileStyleId,
    RandomizeItemsInPages = @RandomizeItemsInPages,
    ShowValidationMessage = @ShowValidationMessage,
    RequiredFieldsAlert = @RequiredFieldsAlert,
    MobileCompatible = @MobileCompatible,
    ButtonContinueTextID = @ButtonContinueTextID,
    ButtonBackTextID = @ButtonBackTextID,
    SupportedLanguages = @SupportedLanguages,
    DefaultLanguage = @DefaultLanguage,
    LanguageSource = @LanguageSource,
    LanguageSourceToken = @LanguageSourceToken,
    SecurityType = @SecurityType,
    ReportSecurityType = @ReportSecurityType,
    EnableScoring = @EnableScoring,
    CompletionType = @CompletionType,
	AllowSurveyEditWhileActive = @AllowSurveyEditWhileActive,
	IsPoll = @IsPoll,
	ChartStyleID = @ChartStyleID,
	Height = @Height,
	Width = @Width,
	BorderWidth = @BorderWidth,
	BorderColor = @BorderColor,
	BorderStyle = @BorderStyle,
	AnonymizeResponses = @AnonymizeResponses,
	GoogleAnalyticsTrackingID = @GoogleAnalyticsTrackingID

  WHERE
    ResponseTemplateID = @ResponseTemplateID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_AddAction]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_Rules_AddAction]
(
	@RuleID int,
	@ActionID int
)

AS
	
	IF NOT EXISTS (SELECT RuleID FROM ckbx_RuleActions WHERE RuleID = @RuleID AND ActionID = @ActionID)
	BEGIN
		INSERT INTO ckbx_RuleActions (RuleID, ActionID) VALUES (@RuleID, @ActionID)
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_ComparableOperands]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Rules_ComparableOperands] 
(
	@LeftOperandTypeName varchar (255),
	@LeftOperandTypeAssembly varchar (255),
	@LogicalOperation varchar (50)
)

AS

SELECT RightOperandTypeName, RightOperandTypeAssembly FROM ckbx_OperandComparer 
WHERE 
LeftOperandTypeName = @LeftOperandTypeName AND
LeftOperandTypeAssembly = @LeftOperandTypeAssembly AND
LogicalOperation = @LogicalOperation

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_Create]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_Rules_Create]
(
	@ExpressionID int,
	@RuleID int out
)
AS
	INSERT INTO ckbx_Rule (ExpressionID) VALUES (@ExpressionID)
	SET @RuleID = SCOPE_IDENTITY()



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_CreateAction]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Rules_CreateAction]
(
	@ActionTypeName varchar (255),
	@ActionTypeAssembly varchar (255),
	@ActionID int out
)
AS

	INSERT INTO ckbx_Action (ActionTypeName, ActionAssembly)
	VALUES (@ActionTypeName, @ActionTypeAssembly)

	SELECT @ActionID = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_CreateExpression]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_Rules_CreateExpression]
(
	@Operator int,
	@Left int = null,
	@Right int = null,
	@Parent int = null,
	@Depth int,
	@Lineage varchar(255),
	@Root int = null,
	@LogicalConnector varchar (20) = null,
	@ExpressionID int out
)

AS

	INSERT INTO ckbx_Expression
	(Operator, LeftOperand, RightOperand, Parent, Depth, Lineage, Root, ChildRelation)
	VALUES
	(@Operator, @Left, @Right, @Parent, @Depth, @Lineage, @Root, @LogicalConnector)

	SET @ExpressionID = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Rules_Delete]
(
	@RuleID int
)
AS

	DELETE ckbx_Rule WHERE RuleID = @RuleID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_DeleteAction]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Rules_DeleteAction]
(
	@ActionID int
)

AS

	DELETE ckbx_RuleActions WHERE ActionID = @ActionID
	DELETE ckbx_Action WHERE ActionID = @ActionID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_DeleteExpression]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Rules_DeleteExpression]
(
	@ExpressionID int
)
AS

	DELETE ckbx_Expression WHERE ExpressionID = @ExpressionID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_DeleteOperand]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Rules_DeleteOperand]
(
	@OperandID int
)
AS

	DELETE ckbx_Operand WHERE OperandID = @OperandID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_GetAction]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Rules_GetAction]
(
	@ActionID int
)

AS

SELECT ActionID, ActionTypeName, ActionAssembly FROM ckbx_Action WHERE ActionID = @ActionID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_GetData]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/* Gets all rule data associated with a given ResponseTemplate */
CREATE PROCEDURE [dbo].[ckbx_sp_Rules_GetData]
(
	@ResponseTemplateID int
)

AS

  /* SELECT Item Rules */
   SELECT ItemID, RuleID FROM ckbx_ItemRules WHERE ItemID IN 
  (SELECT ItemID FROM ckbx_Template_Items WHERE TemplateID = @ResponseTemplateID)
  

  /* SELECT Page Rules */
  SELECT PageID, RuleID, EventTrigger FROM ckbx_TemplatePage_Rules WHERE PageID IN 
  (SELECT PageID FROM ckbx_Template_Pages WHERE TemplateID = @ResponseTemplateID)

  /*Prepare the temp tables */
  IF object_id('tempdb..#Rules') IS NOT NULL
  BEGIN
	DROP Table #Rules
  END
  IF object_id('tempdb..#Expressions') IS NOT NULL
  BEGIN
	DROP Table #Expressions
  END
  IF object_id('tempdb..#Operands') IS NOT NULL
  BEGIN
	DROP Table #Operands
  END

  /* GET ALL THE RULES DATA INTO 3 TABLES */
  SELECT * 
  INTO #Rules
  FROM ckbx_Rule WHERE RuleID IN (SELECT RuleID FROM ckbx_ItemRules WHERE ItemID IN 
  (SELECT ItemID FROM ckbx_Template_Items WHERE TemplateID = @ResponseTemplateID))
  OR
  RuleID IN (SELECT RuleID FROM ckbx_TemplatePage_Rules WHERE PageID IN (
  SELECT PageID FROM ckbx_Template_Pages WHERE TemplateID = @ResponseTemplateID))

  SELECT * 
  INTO #Expressions
  FROM ckbx_Expression WHERE ExpressionID IN (
  SELECT ExpressionID FROM #Rules)
  OR ExpressionID IN (
  SELECT ExpressionID FROM ckbx_Expression
  WHERE Root IN (
  SELECT ExpressionID FROM #Rules))

  SELECT * INTO #Operands FROM ckbx_Operand WHERE OperandID IN (
  SELECT LeftOperand FROM #Expressions WHERE LeftOperand IS NOT NULL) 
  OR
  OperandID IN (
  SELECT RightOperand FROM #Expressions WHERE RightOperand IS NOT NULL )

  -- SELECT FROM TMP TABLES
  SELECT RuleID, ExpressionID FROM #Rules

  SELECT ExpressionID, Operator, LeftOperand, RightOperand, Parent, Depth, Lineage, Root, ChildRelation FROM #Expressions

  SELECT OperandID, TypeName, TypeAssembly FROM #Operands


  SELECT OperandID, ItemID, ParentItemID FROM ckbx_ItemOperand WHERE OperandID IN (SELECT OperandID FROM #Operands)

  SELECT OperandID, OptionID, AnswerValue FROM ckbx_ValueOperand WHERE OperandID IN (SELECT OperandID FROM #Operands) 

  SELECT OperandID, ProfileKey FROM ckbx_ProfileOperand WHERE OperandID IN (SELECT OperandID FROM #Operands)

    SELECT OperandID, ResponseKey FROM ckbx_ResponseOperand WHERE OperandID IN (SELECT OperandID FROM #Operands)
  -- SELECT THE RULEACTIONS

  SELECT RuleID, ActionID FROM ckbx_RuleActions WHERE RuleID IN (SELECT RuleID FROM #Rules)
  --SELECT THE ACTIONS

  SELECT ActionID, ActionTypeName, ActionAssembly FROM ckbx_Action WHERE ActionID IN 
  (SELECT ActionID FROM ckbx_RuleActions WHERE RuleID IN (SELECT RuleID FROM #Rules))



  --CLEAN UP
  DROP TABLE #Rules
  DROP TABLE #Expressions
  DROP TABLE #Operands

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_GetExpressionData]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Rules_GetExpressionData]
(
	@ExpressionID int
)
AS

  IF object_id('tempdb..#Expressions') IS NOT NULL
  BEGIN
	DROP Table #Expressions
  END
  IF object_id('tempdb..#Operands') IS NOT NULL
  BEGIN
	DROP Table #Operands
  END

  SELECT * 
  INTO #Expressions
  FROM ckbx_Expression WHERE ExpressionID = @ExpressionID
  OR ExpressionID IN (
  SELECT ExpressionID FROM ckbx_Expression
  WHERE Root = @ExpressionID)

  SELECT * INTO #Operands FROM ckbx_Operand WHERE OperandID IN (
  SELECT LeftOperand FROM #Expressions WHERE LeftOperand IS NOT NULL) 
  OR
  OperandID IN (
  SELECT RightOperand FROM #Expressions WHERE RightOperand IS NOT NULL )

  -- SELECT FROM TMP TABLES
  --9
  SELECT ExpressionID, Operator, LeftOperand, RightOperand, Parent, Depth, Lineage, Root, ChildRelation FROM #Expressions

  ---10
  SELECT OperandID, TypeName, TypeAssembly FROM #Operands


  --CLEAN UP
  DROP TABLE #Expressions
  DROP TABLE #Operands


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_GetOperand]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Rules_GetOperand]
(
	@OperandID int
)
AS

	SELECT OperandID, TypeName, TypeAssembly FROM ckbx_Operand WHERE OperandID = @OperandID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_InsertOperand]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_Rules_InsertOperand]
(
	@TypeName varchar (255),
	@TypeAssembly varchar (255),
	@OperandID int out
)

AS

	INSERT INTO ckbx_Operand (TypeName, TypeAssembly) VALUES (@TypeName, @TypeAssembly)
	SET @OperandID = SCOPE_IDENTITY()




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_RemoveAction]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Rules_RemoveAction]
(
	@RuleID int,
	@ActionID int
)

AS

	DELETE ckbx_RuleActions WHERE RuleID = @RuleID AND ActionID = @ActionID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_SupportedOperands]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Rules_SupportedOperands]
(
	@TypeName varchar (255),
	@TypeAssembly varchar (255)
)
AS

	SELECT SupportsOperandTypeName, SupportsOperandTypeAssembly FROM ckbx_OperandSupport
	WHERE
	OperandSubjectTypeName = @TypeName
	AND
	OperandSubjectTypeAssembly = @TypeAssembly

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Rules_UpdateComposite]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Rules_UpdateComposite] 
(
	@ExpressionID int,
    @Operator int,
	@Left int,
	@Right int,
	@Parent int,
	@Depth int,
	@Lineage varchar(255),
	@Root int,
	@LogicalConnector varchar (20)
)
AS
select * from ckbx_Expression
	UPDATE 
		ckbx_Expression
	SET 
		Operator = @Operator,
		LeftOperand = @Left,
		RightOperand = @Right,
		Parent = @Parent,
		Depth = @Depth,
		Lineage = @Lineage,
		[Root] = @Root,		
		ChildRelation = @LogicalConnector 
	WHERE 
		ExpressionID = @ExpressionID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_ClearOldRequests]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Search_ClearOldRequests]
(@CachePeriodDays int)
AS
begin
	create table #Requests (RequestID uniqueidentifier)
	
	insert into #Requests
		select SearchRequestID from ckbx_Search_Request 
			where DATEDIFF(DAY,CreatedDate,GETDATE()) >= @CachePeriodDays
	
	delete from ckbx_Search_Available_Object where SearchRequestID in (select RequestID from #Requests)
	delete from ckbx_Search_Completion where SearchRequestID in (select RequestID from #Requests)
	delete from ckbx_Search_Result where SearchRequestID in (select RequestID from #Requests)
	delete from ckbx_Search_Request where SearchRequestID in (select RequestID from #Requests)
			
end


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Collect_Available_Objects]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[ckbx_sp_Search_Collect_Available_Objects]
(
	@UserID nvarchar(611),
	@ExpirationPeriodSeconds int,
	@SearchRequestID  uniqueidentifier out
)
as
begin
	declare @RequestID uniqueidentifier

	--get non-expired request ID
	set @RequestID = null
	select @RequestID = SearchRequestID from ckbx_Search_Request 
		where lower(@UserID) = lower(Creator) and 				
			DATEDIFF(SECOND,ObjectsCollectedDate,GETDATE()) <= @ExpirationPeriodSeconds

	if @RequestID is null
		begin
			--create a new request with an empty search term
			set @RequestID = newid()
		
			INSERT INTO [ckbx_Search_Request]
			   ([SearchRequestID]
			   ,[SearchTerm]
			   ,[Creator]
			   ,[CreatedDate]
			   ,[Status])
			 VALUES
			   (@RequestID
			   ,''
			   ,@UserID
			   ,getdate()
			   ,'CollectingObjects')

			--surveys
			create table #Surveys 
				(
					[ResponseTemplateID] [int] NOT NULL,
					[CreatedBy] [nvarchar](611) NULL,
					[TemplateName] [nvarchar](611) NULL,
					[NameTextID] [varchar](611) NULL,
					[TitleTextID] [varchar](611) NULL,
					[DescriptionTextID] [varchar](611) NULL,
					[IsActive] [bit] NULL,
					[ActivationStart] [datetime] NULL,
					[ActivationEnd] [datetime] NULL,
					[MaxTotalResponses] [int] NULL,
					[MaxResponsesPerUser] [int] NULL,
					[AllowContinue] [bit] NULL,
					[AllowEdit] [bit] NULL,
					[DisableBackButton] [bit] NULL,
					[StyleTemplateID] [int] NULL,
					[ShowPageNumbers] [bit] NULL,
					[ShowProgressBar] [bit] NULL,
					[ShowItemNumbers] [bit] NULL,
					[ShowTitle] [bit] NULL,
					[RandomizeItemsInPages] [bit] NULL,
					[MobileCompatible] [bit] NULL,
					[ButtonContinueTextID] [nvarchar](611) NULL,
					[ButtonBackTextID] [nvarchar](611) NULL,
					[CompletionType] [int] NULL,
					[SupportedLanguages] [nvarchar](1023) NULL,
					[DefaultLanguage] [nvarchar](5) NULL,
					[LanguageSourceToken] [nvarchar](100) NULL,
					[SecurityType] [int] NULL,
					[GuestPassword] [nvarchar](611) NULL,
					[LoginUrl] [nvarchar](500) NULL,
					[ReportSecurityType] [int] NULL,
					[EnableScoring] [bit] NULL,
					[GUID] [uniqueidentifier] NULL,
					[ShowValidationMessage] [bit] NULL,
					[RequiredFieldsAlert] [bit] NULL,
					[LanguageSource] [nvarchar](25) NULL,
					[EnableDynamicPageNumbers] [bit] NULL,
					[EnableDynamicItemNumbers] [bit] NULL,
					[ShowSaveAndQuit] [bit] NULL,
					[AllowSurveyEditWhileActive] [bit] NULL,
					[IsPoll] [bit] NULL,
					[ChartStyleID] [int] NULL,
					[Height] [int] NULL,
					[Width] [int] NULL,
					[BorderWidth] [int] NULL,
					[BorderColor] [varchar](63) NULL,
					[BorderStyle] [varchar](63) NULL,
					[AnonymizeResponses] [bit] NULL,
					[TabletStyleTemplateID] [int] NULL,
					[SmartPhoneStyleTemplateID] [int] NULL,
					[AllowFormReset] [bit] NULL,
					[ShowAsterisks] [bit] NULL,
					[HideFooterHeader] [bit] NULL,
					[MobileStyleId] [int] NULL,
					[ProgressBarOrientation] [int] NULL,
					[GoogleAnalyticsTrackingID] [varchar](32) NULL
				)

			insert into #Surveys exec ckbx_sp_Security_ListAccessibleSurveys @UniqueIdentifier=@UserID, @FirstPermissionName='Form.Edit', 
				@SecondPermissionName='Analysis.Create', 
				@RequireBothPermissions=0,
				@UseAclExclusion=1,	
				@PageNumber=-1,@ResultsPerPage=-1,@SortField=N'ItemName',@SortAscending=1,@FilterField=N'Name',@FilterValue=N'',@AncestorFolder=null,
				@DisplayCount = 0

		
			INSERT INTO [ckbx_Search_Available_Object]
				   ([SearchRequestID]
				   ,[ObjectType]
				   ,[ObjectIDString]
				   ,[ObjectID]
				   ,[ObjectGUID])
				select @RequestID, 'Survey', null, [ResponseTemplateID], [GUID]
					from #Surveys

			CREATE TABLE #Reports(
				[AnalysisTemplateID] [int] NOT NULL,
				[StyleTemplateID] [int] NULL,
				[ResponseTemplateID] [int] NULL,
				[AnalysisName] [nvarchar](255) NULL,
				[NameTextID] [nvarchar](255) NULL,
				[GUID] [uniqueidentifier] NULL,
				[DateFilterStart] [datetime] NULL,
				[DateFilterEnd] [datetime] NULL,
				[ChartStyleID] [int] NULL,
				[DisplaySurveyTitle] [bit] NOT NULL,
				[DisplayPdfExportButton] [bit] NOT NULL,
				[IncludeIncompleteResponses] [bit] NULL,
				[IncludeTestResponses] [bit] NULL,
				[TemplateID] [int] NOT NULL,
				[ModifiedDate] [datetime] NULL,
				[Deleted] [bit] NULL,
				[DefaultPolicy] [int] NULL,
				[AclID] [int] NULL,
				[CreatedDate] [datetime] NULL,
				[CreatedBy] [nvarchar](611) NULL,
				[ModifiedBy] [nvarchar](611) NULL)

			insert into #Reports
				exec ckbx_sp_Security_ListAccessibleAnalyses @UniqueIdentifier=@UserID,
					@FirstPermissionName=N'Analysis.Run',@SecondPermissionName=N'Analysis.Edit',@RequireBothPermissions=0,@UseAclExclusion=1,
					@PageNumber=0,@ResultsPerPage=0,@SortField=N'AnalysisName',@SortAscending=1,@FilterField=N'',@FilterValue=null, @DisplayCount = 0

			-- Reports
			INSERT INTO [ckbx_Search_Available_Object]
				   ([SearchRequestID]
				   ,[ObjectType]
				   ,[ObjectIDString]
				   ,[ObjectID]
				   ,[ObjectGUID])
				select @RequestID, 'Report', null, at.AnalysisTemplateID, at.[GUID]
					from #Reports at		


			--Users
			--do it for User Admin or Survey Admin only!
			INSERT INTO [ckbx_Search_Available_Object]
					([SearchRequestID]
					,[ObjectType]
					,[ObjectIDString]
					,[ObjectID]
					,[ObjectGUID])
				select @RequestID, 'User', c.[UniqueIdentifier], null, null from ckbx_Credential c					
		
			--Group
			--do it for User Admin or Survey Admin only!
			CREATE TABLE #Groups (
				[GroupID] [int] NOT NULL,
				[GroupName] [nvarchar](510) NULL,
				[Description] [nvarchar](510) NULL,
				[DateCreated] [datetime] NULL,
				[CreatedBy] [nvarchar](611) NULL,
				[AclID] [int] NULL,
				[DefaultPolicy] [int] NULL,
				[ModifiedDate] [datetime] NULL,
				[ModifiedBy] [nvarchar](611) NULL
				)
			insert into #Groups ([GroupID],[GroupName],[Description],[DateCreated],[CreatedBy],[AclID],[DefaultPolicy],[ModifiedDate],[ModifiedBy])			
				exec ckbx_sp_Security_ListAccessibleGroups @UniqueIdentifier=@UserID,@FirstPermissionName=N'Group.View',@SecondPermissionName=N'',@RequireBothPermissions=1,@UseAclExclusion=1,@PageNumber=-1,@ResultsPerPage=-1,@SortField=N'GroupName',@SortAscending=1,@FilterField=N'GroupName',@FilterValue=N'',@IncludeEveryoneGroup=0,@DisplayCount=0
		
			INSERT INTO [ckbx_Search_Available_Object]
					([SearchRequestID]
					,[ObjectType]
					,[ObjectIDString]
					,[ObjectID]
					,[ObjectGUID])
				select @RequestID, 'Group', null, GroupID, null from #Groups					
		
			--EmailList
			CREATE TABLE #emailLists (
				[PanelID] [int] NOT NULL,
				[Name] [nvarchar](510) NOT NULL,
				[Description] [nvarchar](510) NULL,
				[DateCreated] [datetime] NOT NULL,
				[CreatedBy] [nvarchar](611) NOT NULL,
				[PanelTypeID] [int] NOT NULL,
				[Deleted] [bit] NULL,
				[AclID] [int] NULL,
				[DefaultPolicy] [int] NULL,
				[ModifiedDate] [datetime] NULL,
				[ModifiedBy] [nvarchar](611) NULL
			) 
			insert into #emailLists 
				([PanelID],[Name],[Description],[DateCreated],[CreatedBy],[PanelTypeID],[Deleted],[AclID],[DefaultPolicy],[ModifiedDate],[ModifiedBy]) 				
				exec ckbx_sp_Security_ListAccessibleEmailLists @UniqueIdentifier=@UserID,@FirstPermissionName=N'EmailList.View',@SecondPermissionName=N'',@RequireBothPermissions=1,@UseAclExclusion=1,@PageNumber=-1,@ResultsPerPage=-1,@SortField=N'Name',@SortAscending=1,@FilterField=N'',@FilterValue=N'', @DisplayCount=0
			INSERT INTO [ckbx_Search_Available_Object]
					([SearchRequestID]
					,[ObjectType]
					,[ObjectIDString]
					,[ObjectID]
					,[ObjectGUID])
				select @RequestID, 'EMailList', null, [PanelID], null from #emailLists
				where PanelTypeID = 3

			delete from #Surveys 
			insert into #Surveys exec ckbx_sp_Security_ListAccessibleSurveys @UniqueIdentifier=@UserID, @FirstPermissionName='Form.Administer', 
				@SecondPermissionName=null, 
				@RequireBothPermissions=0,
				@UseAclExclusion=0,	
				@PageNumber=-1,@ResultsPerPage=-1,@SortField=N'ItemName',@SortAscending=1,@FilterField=N'Name',@FilterValue=N'',@AncestorFolder=null,
				@DisplayCount = 0

			--Invitation
			INSERT INTO [ckbx_Search_Available_Object]
					([SearchRequestID]
					,[ObjectType]
					,[ObjectIDString]
					,[ObjectID]
					,[ObjectGUID])
				select @RequestID, 'Invitation', null, InvitationID, null from #Surveys
					inner join ckbx_Invitation on #Surveys.ResponseTemplateID = ckbx_Invitation.ResponseTemplateID
		end
	
	update ckbx_Search_Request set ObjectsCollectedDate = getdate(), [Status] = 'Created' where @RequestID = SearchRequestID 
	
	set @SearchRequestID  = @RequestID 
end

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Collect_Results]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [dbo].[ckbx_sp_Search_Collect_Results]
	@UserID nvarchar(611),
	@RequestID uniqueidentifier,
	@Term nvarchar(1024),
	@PageSize int
as
begin
	select res.ObjectType,
		   ObjectID,
		   ObjectIDString,
		   ObjectGUID,
		   MatchedField,
		   MatchedText,
		   Title from
	(select *, DENSE_RANK() over (partition by ObjectType order by ObjectId, ObjectIdString, ObjectGUID, NEWID()) rn
	from 	
	(select *, 
	ROW_NUMBER() over (partition by ObjectType, ObjectId, ObjectIdString, ObjectGUID order by NEWID()) rn2
			from ckbx_Search_Result where (SearchRequestID = @RequestID) and (MatchedText like '%' + @Term + '%')
	) res where res.rn2 = 1) res
		inner join ckbx_Search_Appearance sa on res.ObjectType = sa.ObjectType
	where sa.Included = 1 and res.rn <= @PageSize
	order by sa.[Order]
		
	/* non-random matched data selection
	select ObjectType,
		   ObjectID,
		   ObjectIDString,
		   ObjectGUID,
		   MatchedField,
		   MatchedText 
	from 	
	(select *, 
	DENSE_RANK() over (partition by ObjectType order by ObjectId, ObjectIdString, ObjectGUID) rn,
	ROW_NUMBER() over (partition by ObjectType, ObjectId, ObjectIdString, ObjectGUID order by ObjectType) rn2
	from ckbx_Search_Result 
	) res where res.rn<3 and res.rn2=1
	*/
end


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Complete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Search_Complete]
(
  @RequestID uniqueidentifier,
  @Status varchar(100),
  @Message nvarchar(1024)  
)
AS
begin
	declare @CompletedObjectsCount int
	
	--find finished requests count
	select @CompletedObjectsCount = count(*) from ckbx_Search_Completion
		where SearchRequestID = @RequestID
	
	update ckbx_Search_Request set [Status] = @Status,
		CompletedDate = getdate(),
		[Message] = @Message
	where SearchRequestID = @RequestID 
		and ObjectTypesCount = @CompletedObjectsCount -- if the finished objects count is equal to total count -- set this request as completed
	
	select * from ckbx_Search_Request
		where SearchRequestID = @RequestID
end


  


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_EMailList]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[ckbx_sp_Search_EMailList]
	@RequestID uniqueidentifier,
	@MaxObjectsToCache int
as
begin
	declare @SearchTerm nvarchar(1024)
	
	--get search term and request id that contains available objects
	declare @AvailableObjectsRequestID uniqueidentifier
	select @SearchTerm  = SearchTerm, @AvailableObjectsRequestID = AvailableObjectsRequestID from ckbx_Search_Request 
		where SearchRequestID = @RequestID
	if @AvailableObjectsRequestID is null
		set @AvailableObjectsRequestID = @RequestID
	
	declare @ObjectType varchar(100)
	set @ObjectType = 'EMailList'
		
	-- check if the objects collection started for this type
	if exists (select top 1 * from [ckbx_Search_Completion] where ObjectType = @ObjectType and SearchRequestID = @RequestID)
		return 
	-- mark the fact that objects collection started for this type
	insert into [ckbx_Search_Completion] (SearchRequestID, ObjectType, IsCompleted) values (@RequestID, @ObjectType, 0)
	
	
	--search by Name
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Name'
			   ,p.Name
			   ,p.PanelID
			   ,null
			   ,null
			   ,p.Name
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Panel p  on sao.ObjectID = p.PanelID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and p.Name like '%' + @SearchTerm + '%'
	
	--search by Description
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Description'
			   ,p.[Description]
			   ,p.PanelID
			   ,null
			   ,null
			   ,p.Name
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Panel p  on sao.ObjectID = p.PanelID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and p.[Description] like '%' + @SearchTerm + '%'
	
	--search by Created By
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Created By'
			   ,p.CreatedBy
			   ,p.PanelID
			   ,null
			   ,null
			   ,p.Name
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Panel p  on sao.ObjectID = p.PanelID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and p.CreatedBy like '%' + @SearchTerm + '%'
	
	update [ckbx_Search_Completion] set IsCompleted = 1 where SearchRequestID = @RequestID and ObjectType = @ObjectType
	exec ckbx_sp_Search_Complete @RequestID, 'Succeeded', 'Search completed'
end



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_EMailList_Admin]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [dbo].[ckbx_sp_Search_EMailList_Admin]
	@RequestID uniqueidentifier,
	@MaxObjectsToCache int
as
begin
	declare @SearchTerm nvarchar(1024)
	
	--get search term and request id that contains available objects
	declare @AvailableObjectsRequestID uniqueidentifier
	select @SearchTerm  = SearchTerm, @AvailableObjectsRequestID = AvailableObjectsRequestID from ckbx_Search_Request 
		where SearchRequestID = @RequestID
	if @AvailableObjectsRequestID is null
		set @AvailableObjectsRequestID = @RequestID
	
	declare @ObjectType varchar(100)
	set @ObjectType = 'EMailList'
		
	-- check if the objects collection started for this type
	if exists (select top 1 * from [ckbx_Search_Completion] where ObjectType = @ObjectType and SearchRequestID = @RequestID)
		return 
	-- mark the fact that objects collection started for this type
	insert into [ckbx_Search_Completion] (SearchRequestID, ObjectType, IsCompleted) values (@RequestID, @ObjectType, 0)
	
	
	--search by Name
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Name'
			   ,p.Name
			   ,p.PanelID
			   ,null
			   ,null
			   ,p.Name
		from ckbx_Panel p
	where p.PanelTypeID = 3 and p.Name like '%' + @SearchTerm + '%'
	
	--search by Description
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Description'
			   ,p.[Description]
			   ,p.PanelID
			   ,null
			   ,null
			   ,p.Name
		from ckbx_Panel p 
	where p.PanelTypeID = 3 and p.[Description] like '%' + @SearchTerm + '%'
	
	--search by Created By
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Created By'
			   ,p.CreatedBy
			   ,p.PanelID
			   ,null
			   ,null
			   ,p.Name
		from ckbx_Panel p  
	where p.PanelTypeID = 3 and p.CreatedBy like '%' + @SearchTerm + '%'
	
	update [ckbx_Search_Completion] set IsCompleted = 1 where SearchRequestID = @RequestID and ObjectType = @ObjectType
	exec ckbx_sp_Search_Complete @RequestID, 'Succeeded', 'Search completed'
end

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Get_ObjectType_Roles]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[ckbx_sp_Search_Get_ObjectType_Roles](@ObjectType varchar(100))
AS
begin
	select RoleName from ckbx_Search_Settings ss
		inner join ckbx_Role r on ss.RoleID = r.RoleID
		where ObjectType = @ObjectType order by r.RoleID
end


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_GetRequest]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Search_GetRequest]
(
  @UserID nvarchar(611),
  @SearchTerm nvarchar(1024),
  @ResultsExpirationPeriodSeconds int,
  @ObjectsExpirationPeriodSeconds int,
  @RequestID uniqueidentifier,
  @CollectObjectIfNone bit = 0
)
AS
begin
	declare @RecentRequestID uniqueidentifier
	declare @AvailableObjectsRequestID uniqueidentifier
	declare @RecentStatus varchar(50)
	if @RequestID is null
	begin
		--locate request by the search term
		select @RecentRequestID = SearchRequestID, @RecentStatus = [Status] from ckbx_Search_Request 
			where @SearchTerm like '%' + SearchTerm + '%' and
				lower(Creator) = lower(@UserID) and
				DATEDIFF(SECOND,CreatedDate,GETDATE()) <= @ResultsExpirationPeriodSeconds
	end	
	else
	begin
		--locate request by ID
		select @RecentRequestID = SearchRequestID, @RecentStatus = [Status] from ckbx_Search_Request 
			where SearchRequestID = @RequestID and
				lower(Creator) = lower(@UserID) and
				DATEDIFF(SECOND,CreatedDate,GETDATE()) <= @ObjectsExpirationPeriodSeconds
	end


	if @RecentRequestID is null
	begin
		set @RecentStatus = 'Created'
		declare @ObjectTypesCount int

		--find object types count to collect		
		select @ObjectTypesCount = count(distinct sa.ObjectType) from ckbx_Search_Appearance sa 
			inner join ckbx_Search_Settings ss on sa.ObjectType = ss.ObjectType
			inner join ckbx_IdentityRoles ir on ss.RoleID = ir.RoleID
		where sa.Included = 1 and ir.[UniqueIdentifier] = @UserID
	
		--locate request with available objects collected
		select @AvailableObjectsRequestID = SearchRequestID from ckbx_Search_Request 
			where DATEDIFF(SECOND,ObjectsCollectedDate,GETDATE()) <= @ObjectsExpirationPeriodSeconds  and
				lower(Creator) = lower(@UserID)
				
		if @AvailableObjectsRequestID is null
		begin
			--collect available objects
			if @CollectObjectIfNone = 1
			begin
				--collect available objects				
				exec ckbx_sp_Search_Collect_Available_Objects @UserID, @ObjectsExpirationPeriodSeconds, @RecentRequestID out

				update [ckbx_Search_Request] set [Status] = @RecentStatus, completedDate = null, createdDate = getdate(), [Message] = '', 
					ObjectTypesCount = @ObjectTypesCount, SearchTerm = @SearchTerm
				where SearchRequestID = @RecentRequestID
			end
			else
			begin
				--create a new request without search for available objects
				set @RecentRequestID = newid()
				INSERT INTO [ckbx_Search_Request]
				   ([SearchRequestID]
				   ,[SearchTerm]
				   ,[Creator]
				   ,[CreatedDate]
				   ,[Status]
				   ,ObjectTypesCount)
				 VALUES
				   (@RecentRequestID
				   ,@SearchTerm
				   ,@UserID
				   ,getdate()
				   ,@RecentStatus
				   ,@ObjectTypesCount)
			end
		end
		else
		begin
			--create a new request with the link to existing object types
				--create a new request without search for available objects
				set @RecentRequestID = newid()
				INSERT INTO [ckbx_Search_Request]
				   ([SearchRequestID]
				   ,[SearchTerm]
				   ,[Creator]
				   ,[CreatedDate]
				   ,[Status]
				   ,ObjectTypesCount
				   ,AvailableObjectsRequestID)
				 VALUES
				   (@RecentRequestID
				   ,@SearchTerm
				   ,@UserID
				   ,getdate()
				   ,@RecentStatus
				   ,@ObjectTypesCount
				   ,@AvailableObjectsRequestID)
		end
	end

	
	select @RecentRequestID as [SearchRequestID], @RecentStatus as [Status]
end




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Group]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[ckbx_sp_Search_Group]
	@RequestID uniqueidentifier,
	@MaxObjectsToCache int
as
begin
	declare @SearchTerm nvarchar(1024)
	
	--get search term and request id that contains available objects
	declare @AvailableObjectsRequestID uniqueidentifier
	select @SearchTerm  = SearchTerm, @AvailableObjectsRequestID = AvailableObjectsRequestID from ckbx_Search_Request 
		where SearchRequestID = @RequestID
	if @AvailableObjectsRequestID is null
		set @AvailableObjectsRequestID = @RequestID
	
	declare @ObjectType varchar(100)
	set @ObjectType = 'Group'
		
	-- check if the objects collection started for this type
	if exists (select top 1 * from [ckbx_Search_Completion] where ObjectType = @ObjectType and SearchRequestID = @RequestID)
		return 
	-- mark the fact that objects collection started for this type
	insert into [ckbx_Search_Completion] (SearchRequestID, ObjectType, IsCompleted) values (@RequestID, @ObjectType, 0)
	
	--search by Name
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Name'
			   ,g.GroupName
			   ,g.GroupID
			   ,null
			   ,null
			   ,g.GroupName
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Group g  on sao.ObjectID = g.GroupID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and g.GroupName like '%' + @SearchTerm + '%'
	
	--search by Description
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Description'
			   ,g.[Description]
			   ,g.GroupID
			   ,null
			   ,null
			   ,g.GroupName
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Group g  on sao.ObjectID = g.GroupID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and g.[Description] like '%' + @SearchTerm + '%'
	
	--search by Created By
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Created By'
			   ,g.CreatedBy
			   ,g.GroupID
			   ,null
			   ,null
			   ,g.GroupName
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Group g  on sao.ObjectID = g.GroupID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and g.CreatedBy like '%' + @SearchTerm + '%'
	
	update [ckbx_Search_Completion] set IsCompleted = 1 where SearchRequestID = @RequestID and ObjectType = @ObjectType
	exec ckbx_sp_Search_Complete @RequestID, 'Succeeded', 'Search completed'
end




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Group_Admin]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[ckbx_sp_Search_Group_Admin]
	@RequestID uniqueidentifier,
	@MaxObjectsToCache int
as
begin
	declare @SearchTerm nvarchar(1024)
	
	--get search term and request id that contains available objects
	declare @AvailableObjectsRequestID uniqueidentifier
	select @SearchTerm  = SearchTerm, @AvailableObjectsRequestID = AvailableObjectsRequestID from ckbx_Search_Request 
		where SearchRequestID = @RequestID
	if @AvailableObjectsRequestID is null
		set @AvailableObjectsRequestID = @RequestID
	
	declare @ObjectType varchar(100)
	set @ObjectType = 'Group'
		
	-- check if the objects collection started for this type
	if exists (select top 1 * from [ckbx_Search_Completion] where ObjectType = @ObjectType and SearchRequestID = @RequestID)
		return 
	-- mark the fact that objects collection started for this type
	insert into [ckbx_Search_Completion] (SearchRequestID, ObjectType, IsCompleted) values (@RequestID, @ObjectType, 0)
	
	--search by Name
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Name'
			   ,g.GroupName
			   ,g.GroupID
			   ,null
			   ,null
			   ,g.GroupName
		from ckbx_Group g  
	where g.GroupName like '%' + @SearchTerm + '%'
	
	--search by Description
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Description'
			   ,g.[Description]
			   ,g.GroupID
			   ,null
			   ,null
			   ,g.GroupName
		from ckbx_Group g 
	where g.[Description] like '%' + @SearchTerm + '%'
	
	--search by Created By
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Created By'
			   ,g.CreatedBy
			   ,g.GroupID
			   ,null
			   ,null
			   ,g.GroupName
		from ckbx_Group g 
	where g.CreatedBy like '%' + @SearchTerm + '%'
	
	update [ckbx_Search_Completion] set IsCompleted = 1 where SearchRequestID = @RequestID and ObjectType = @ObjectType
	exec ckbx_sp_Search_Complete @RequestID, 'Succeeded', 'Search completed'
end


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Invitation]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[ckbx_sp_Search_Invitation]
	@RequestID uniqueidentifier,
	@MaxObjectsToCache int
as
begin
	declare @SearchTerm nvarchar(1024)
	
	--get search term and request id that contains available objects
	declare @AvailableObjectsRequestID uniqueidentifier
	select @SearchTerm  = SearchTerm, @AvailableObjectsRequestID = AvailableObjectsRequestID from ckbx_Search_Request 
		where SearchRequestID = @RequestID
	if @AvailableObjectsRequestID is null
		set @AvailableObjectsRequestID = @RequestID
	
	declare @ObjectType varchar(100)
	set @ObjectType = 'Invitation'
		
	-- check if the objects collection started for this type
	if exists (select top 1 * from [ckbx_Search_Completion] where ObjectType = @ObjectType and SearchRequestID = @RequestID)
		return 
	-- mark the fact that objects collection started for this type
	insert into [ckbx_Search_Completion] (SearchRequestID, ObjectType, IsCompleted) values (@RequestID, @ObjectType, 0)

	
	--search by Name
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Name'
			   ,i.Name
			   ,i.InvitationID
			   ,null
			   ,null
			   ,i.Name
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Invitation i  on sao.ObjectID = i.InvitationID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and i.Name like '%' + @SearchTerm + '%'
	
	--search by Subject
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Invitation Subject'
			   ,i.[Subject]
			   ,i.InvitationID
			   ,null
			   ,null
			   ,i.Name
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Invitation i  on sao.ObjectID = i.InvitationID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and i.[Subject] like '%' + @SearchTerm + '%'
	
		
	--search by Body
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Invitation Body'
			   ,i.[Body]
			   ,i.InvitationID
			   ,null
			   ,null
			   ,i.Name
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Invitation i  on sao.ObjectID = i.InvitationID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and i.[Body] like '%' + @SearchTerm + '%'

	--search by From
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Sender Name'
			   ,i.[FromName]
			   ,i.InvitationID
			   ,null
			   ,null
			   ,i.Name
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Invitation i  on sao.ObjectID = i.InvitationID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and i.[FromName] like '%' + @SearchTerm + '%'
	
	--search by From
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Sender Name'
			   ,i.FromAddress
			   ,i.InvitationID
			   ,null
			   ,null
			   ,i.Name
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Invitation i  on sao.ObjectID = i.InvitationID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and i.[FromAddress] like '%' + @SearchTerm + '%'
	
	--search by Reminder Subject
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Reminder Subject'
			   ,i.[ReminderSubject]
			   ,i.InvitationID
			   ,null
			   ,null
			   ,i.Name
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Invitation i  on sao.ObjectID = i.InvitationID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and i.[ReminderSubject] like '%' + @SearchTerm + '%'
	
		
	--search by Reminder Body
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Reminder Body'
			   ,i.[ReminderBody]
			   ,i.InvitationID
			   ,null
			   ,null
			   ,i.Name
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Invitation i  on sao.ObjectID = i.InvitationID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and i.[ReminderBody] like '%' + @SearchTerm + '%'

	update [ckbx_Search_Completion] set IsCompleted = 1 where SearchRequestID = @RequestID and ObjectType = @ObjectType
	exec ckbx_sp_Search_Complete @RequestID, 'Succeeded', 'Search completed'
end



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Invitation_Admin]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[ckbx_sp_Search_Invitation_Admin]
	@RequestID uniqueidentifier,
	@MaxObjectsToCache int
as
begin
	declare @SearchTerm nvarchar(1024)
	
	--get search term and request id that contains available objects
	declare @AvailableObjectsRequestID uniqueidentifier
	select @SearchTerm  = SearchTerm, @AvailableObjectsRequestID = AvailableObjectsRequestID from ckbx_Search_Request 
		where SearchRequestID = @RequestID
	if @AvailableObjectsRequestID is null
		set @AvailableObjectsRequestID = @RequestID
	
	declare @ObjectType varchar(100)
	set @ObjectType = 'Invitation'
		
	-- check if the objects collection started for this type
	if exists (select top 1 * from [ckbx_Search_Completion] where ObjectType = @ObjectType and SearchRequestID = @RequestID)
		return 
	-- mark the fact that objects collection started for this type
	insert into [ckbx_Search_Completion] (SearchRequestID, ObjectType, IsCompleted) values (@RequestID, @ObjectType, 0)

	
	--search by Name
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Name'
			   ,i.Name
			   ,i.InvitationID
			   ,null
			   ,null
			   ,i.Name
		from ckbx_Invitation i  
	where i.Name like '%' + @SearchTerm + '%'
	
	--search by Subject
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Invitation Subject'
			   ,i.[Subject]
			   ,i.InvitationID
			   ,null
			   ,null
			   ,i.Name
		from ckbx_Invitation i
	where i.[Subject] like '%' + @SearchTerm + '%'
	
		
	--search by Body
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Invitation Body'
			   ,i.[Body]
			   ,i.InvitationID
			   ,null
			   ,null
			   ,i.Name
		from ckbx_Invitation i  
	where i.[Body] like '%' + @SearchTerm + '%'

	--search by From
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Sender Name'
			   ,i.[FromName]
			   ,i.InvitationID
			   ,null
			   ,null
			   ,i.Name
		from ckbx_Invitation i  
	where i.[FromName] like '%' + @SearchTerm + '%'
	
	--search by From
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Sender Name'
			   ,i.FromAddress
			   ,i.InvitationID
			   ,null
			   ,null
			   ,i.Name
		from ckbx_Invitation i
	where i.[FromAddress] like '%' + @SearchTerm + '%'
	
	--search by Reminder Subject
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Reminder Subject'
			   ,i.[ReminderSubject]
			   ,i.InvitationID
			   ,null
			   ,null
			   ,i.Name
		from ckbx_Invitation i
	where i.[ReminderSubject] like '%' + @SearchTerm + '%'
	
		
	--search by Reminder Body
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Reminder Body'
			   ,i.[ReminderBody]
			   ,i.InvitationID
			   ,null
			   ,null
			   ,i.Name
		from ckbx_Invitation i
	where i.[ReminderBody] like '%' + @SearchTerm + '%'

	update [ckbx_Search_Completion] set IsCompleted = 1 where SearchRequestID = @RequestID and ObjectType = @ObjectType
	exec ckbx_sp_Search_Complete @RequestID, 'Succeeded', 'Search completed'
end

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Item]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[ckbx_sp_Search_Item]
	@RequestID uniqueidentifier,
	@MaxObjectsToCache int
as
begin
	declare @SearchTerm nvarchar(1024)
	
	--get search term and request id that contains available objects
	declare @AvailableObjectsRequestID uniqueidentifier
	select @SearchTerm  = SearchTerm, @AvailableObjectsRequestID = AvailableObjectsRequestID from ckbx_Search_Request 
		where SearchRequestID = @RequestID
	if @AvailableObjectsRequestID is null
		set @AvailableObjectsRequestID = @RequestID
	
	declare @ObjectType varchar(100)
	set @ObjectType = 'Item'
		
	-- check if the objects collection started for this type
	if exists (select top 1 * from [ckbx_Search_Completion] where ObjectType = @ObjectType and SearchRequestID = @RequestID)
		return 
	-- mark the fact that objects collection started for this type
	insert into [ckbx_Search_Completion] (SearchRequestID, ObjectType, IsCompleted) values (@RequestID, @ObjectType, 0)


	--search by Name
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Name'
			   ,txt.TextValue
			   ,ti.ItemID
			   ,null
			   ,null
			   ,'Item #' + cast(ti.ItemID as varchar(100))
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Template_Items ti on sao.ObjectID = ti.TemplateID
		inner join ckbx_Text txt on txt.TextID like '%ItemData/' + cast(ti.ItemID as varchar(50)) + '/text'
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = 'Survey' and txt.TextValue like '%' + @SearchTerm + '%'

	--search by Description
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Description'
			   ,txt.TextValue
			   ,ti.ItemID
			   ,null
			   ,null
			   ,'Item #' + cast(ti.ItemID as varchar(100))
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Template_Items ti on sao.ObjectID = ti.TemplateID
		inner join ckbx_Text txt on txt.TextID like '%ItemData/' + cast(ti.ItemID as varchar(50))  + '/subText'
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = 'Survey' and txt.TextValue like '%' + @SearchTerm + '%'

	--search by CreatedBy
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Created By'
			   ,i.CreatedBy
			   ,i.ItemID
			   ,null
			   ,null
			   ,'Item #' + cast(ti.ItemID as varchar(100))
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Template_Items ti on sao.ObjectID = ti.TemplateID
		inner join ckbx_Item i on ti.ItemID = i.ItemID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = 'Survey' and i.CreatedBy like '%' + @SearchTerm + '%'
		

	--search by ModifiedBy
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Modified By'
			   ,i.ModifiedBy
			   ,i.ItemID
			   ,null
			   ,null
			   ,'Item #' + cast(ti.ItemID as varchar(100))
		from ckbx_Search_Available_Object sao		
		inner join ckbx_Template_Items ti on sao.ObjectID = ti.TemplateID
		inner join ckbx_Item i on ti.ItemID = i.ItemID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = 'Survey' and i.ModifiedBy like '%' + @SearchTerm + '%'
		
	
	update [ckbx_Search_Completion] set IsCompleted = 1 where SearchRequestID = @RequestID and ObjectType = @ObjectType
	exec ckbx_sp_Search_Complete @RequestID, 'Succeeded', 'Search completed'
end


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Item_Admin]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[ckbx_sp_Search_Item_Admin]
	@RequestID uniqueidentifier,
	@MaxObjectsToCache int
as
begin
	declare @SearchTerm nvarchar(1024)
	
	--get search term and request id that contains available objects
	declare @AvailableObjectsRequestID uniqueidentifier
	select @SearchTerm  = SearchTerm, @AvailableObjectsRequestID = AvailableObjectsRequestID from ckbx_Search_Request 
		where SearchRequestID = @RequestID
	if @AvailableObjectsRequestID is null
		set @AvailableObjectsRequestID = @RequestID
	
	declare @ObjectType varchar(100)
	set @ObjectType = 'Item'
		
	-- check if the objects collection started for this type
	if exists (select top 1 * from [ckbx_Search_Completion] where ObjectType = @ObjectType and SearchRequestID = @RequestID)
		return 
	-- mark the fact that objects collection started for this type
	insert into [ckbx_Search_Completion] (SearchRequestID, ObjectType, IsCompleted) values (@RequestID, @ObjectType, 0)


	--search by Name
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Name'
			   ,txt.TextValue
			   ,ti.ItemID
			   ,null
			   ,null
			   ,'Item #' + cast(ti.ItemID as varchar(100))
		from ckbx_Template_Items ti 
		inner join ckbx_Text txt on txt.TextID like '%ItemData/' + cast(ti.ItemID as varchar(50)) + '/text'
	where txt.TextValue like '%' + @SearchTerm + '%'

	--search by Description
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Description'
			   ,txt.TextValue
			   ,ti.ItemID
			   ,null
			   ,null
			   ,'Item #' + cast(ti.ItemID as varchar(100))
		from ckbx_Template_Items ti 
		inner join ckbx_Text txt on txt.TextID like '%ItemData/' + cast(ti.ItemID as varchar(50))  + '/subText'
	where txt.TextValue like '%' + @SearchTerm + '%'

	--search by CreatedBy
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Created By'
			   ,i.CreatedBy
			   ,i.ItemID
			   ,null
			   ,null
			   ,'Item #' + cast(ti.ItemID as varchar(100))
		from ckbx_Template_Items ti 
		inner join ckbx_Item i on ti.ItemID = i.ItemID
	where i.CreatedBy like '%' + @SearchTerm + '%'
		

	--search by ModifiedBy
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Modified By'
			   ,i.ModifiedBy
			   ,i.ItemID
			   ,null
			   ,null
			   ,'Item #' + cast(ti.ItemID as varchar(100))
		from ckbx_Template_Items ti 
		inner join ckbx_Item i on ti.ItemID = i.ItemID
	where i.ModifiedBy like '%' + @SearchTerm + '%'
		
	
	update [ckbx_Search_Completion] set IsCompleted = 1 where SearchRequestID = @RequestID and ObjectType = @ObjectType
	exec ckbx_sp_Search_Complete @RequestID, 'Succeeded', 'Search completed'
end


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Report]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------------

CREATE procedure [dbo].[ckbx_sp_Search_Report]
	@RequestID uniqueidentifier,
	@MaxObjectsToCache int
as
begin
	declare @SearchTerm nvarchar(1024)
	
	--get search term and request id that contains available objects
	declare @AvailableObjectsRequestID uniqueidentifier
	select @SearchTerm  = SearchTerm, @AvailableObjectsRequestID = AvailableObjectsRequestID from ckbx_Search_Request 
		where SearchRequestID = @RequestID
	if @AvailableObjectsRequestID is null
		set @AvailableObjectsRequestID = @RequestID
	
	declare @ObjectType varchar(100)
	set @ObjectType = 'Report'
		
	-- check if the objects collection started for this type
	if exists (select top 1 * from [ckbx_Search_Completion] where ObjectType = @ObjectType and SearchRequestID = @RequestID)
		return 
	-- mark the fact that objects collection started for this type
	insert into [ckbx_Search_Completion] (SearchRequestID, ObjectType, IsCompleted) values (@RequestID, @ObjectType, 0)
	
	--search by Name
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Name'
			   ,at.AnalysisName
			   ,at.AnalysisTemplateID
			   ,null
			   ,at.[GUID]
			   ,at.AnalysisName
		from ckbx_Search_Available_Object sao		
		inner join ckbx_AnalysisTemplate at on sao.ObjectID = at.AnalysisTemplateID
		inner join ckbx_Template t on at.AnalysisTemplateID = sao.ObjectID
	where (t.Deleted IS NULL OR t.Deleted = 0) AND 
			sao.SearchRequestID = @AvailableObjectsRequestID and 
			sao.ObjectType = @ObjectType and 
			at.AnalysisName like '%' + @SearchTerm + '%'
	
	--search by CreatedBy
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Created By'
			   ,t.CreatedBy
			   ,at.AnalysisTemplateID
			   ,null
			   ,at.[GUID]
			   ,at.AnalysisName
		from ckbx_Search_Available_Object sao		
		inner join ckbx_AnalysisTemplate at  on sao.ObjectID = at.AnalysisTemplateID
		inner join ckbx_Template t on sao.ObjectID = t.TemplateID
	where (t.Deleted IS NULL OR t.Deleted = 0) AND  
			sao.SearchRequestID = @AvailableObjectsRequestID and
			sao.ObjectType = @ObjectType and
			t.CreatedBy like '%' + @SearchTerm + '%'
		
	--search by ModifiedBy
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Modified By'
			   ,t.ModifiedBy
			   ,at.AnalysisTemplateID
			   ,null
			   ,at.[GUID]
			   ,at.AnalysisName
		from ckbx_Search_Available_Object sao		
		inner join ckbx_AnalysisTemplate at  on sao.ObjectID = at.AnalysisTemplateID
		inner join ckbx_Template t on sao.ObjectID = t.TemplateID
	where (t.Deleted IS NULL OR t.Deleted = 0) AND 
			sao.SearchRequestID = @AvailableObjectsRequestID and
			sao.ObjectType = @ObjectType and
			t.ModifiedBy like '%' + @SearchTerm + '%'
	
	update [ckbx_Search_Completion] set IsCompleted = 1 where SearchRequestID = @RequestID and ObjectType = @ObjectType
	exec ckbx_sp_Search_Complete @RequestID, 'Succeeded', 'Search completed'
end


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Report_Admin]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[ckbx_sp_Search_Report_Admin]
	@RequestID uniqueidentifier,
	@MaxObjectsToCache int
as
begin
	declare @SearchTerm nvarchar(1024)
	
	--get search term and request id that contains available objects
	declare @AvailableObjectsRequestID uniqueidentifier
	select @SearchTerm  = SearchTerm, @AvailableObjectsRequestID = AvailableObjectsRequestID from ckbx_Search_Request 
		where SearchRequestID = @RequestID
	if @AvailableObjectsRequestID is null
		set @AvailableObjectsRequestID = @RequestID
	
	declare @ObjectType varchar(100)
	set @ObjectType = 'Report'
		
	-- check if the objects collection started for this type
	if exists (select top 1 * from [ckbx_Search_Completion] where ObjectType = @ObjectType and SearchRequestID = @RequestID)
		return 
	-- mark the fact that objects collection started for this type
	insert into [ckbx_Search_Completion] (SearchRequestID, ObjectType, IsCompleted) values (@RequestID, @ObjectType, 0)
	
	--search by Name
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Name'
			   ,at.AnalysisName
			   ,at.AnalysisTemplateID
			   ,null
			   ,at.[GUID]
			   ,at.AnalysisName
		from ckbx_AnalysisTemplate at
		inner join ckbx_Template t on at.AnalysisTemplateID = t.TemplateID
		inner join ckbx_Template rt on at.ResponseTemplateID = rt.TemplateID
	where at.AnalysisName like '%' + @SearchTerm + '%' 
		and (t.Deleted is null or t.Deleted = 0) and (rt.Deleted is null or rt.Deleted = 0)
	
	--search by CreatedBy
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Created By'
			   ,t.CreatedBy
			   ,at.AnalysisTemplateID
			   ,null
			   ,at.[GUID]
			   ,at.AnalysisName
		from ckbx_AnalysisTemplate at 
		inner join ckbx_Template t on at.AnalysisTemplateID = t.TemplateID
		inner join ckbx_Template rt on at.ResponseTemplateID = rt.TemplateID
	where t.CreatedBy like '%' + @SearchTerm + '%'
		and (t.Deleted is null or t.Deleted = 0) and (rt.Deleted is null or rt.Deleted = 0)
		
	--search by ModifiedBy
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Modified By'
			   ,t.ModifiedBy
			   ,at.AnalysisTemplateID
			   ,null
			   ,at.[GUID]
			   ,at.AnalysisName
		from ckbx_AnalysisTemplate at 
		inner join ckbx_Template t on at.AnalysisTemplateID = t.TemplateID
		inner join ckbx_Template rt on at.ResponseTemplateID = rt.TemplateID
	where t.ModifiedBy like '%' + @SearchTerm + '%'
		and (t.Deleted is null or t.Deleted = 0) and (rt.Deleted is null or rt.Deleted = 0)
	
	update [ckbx_Search_Completion] set IsCompleted = 1 where SearchRequestID = @RequestID and ObjectType = @ObjectType
	exec ckbx_sp_Search_Complete @RequestID, 'Succeeded', 'Search completed'
end


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Response]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[ckbx_sp_Search_Response]
	@RequestID uniqueidentifier,
	@MaxObjectsToCache int
as
begin
	declare @SearchTerm nvarchar(1024)
	
	--get search term and request id that contains available objects
	declare @AvailableObjectsRequestID uniqueidentifier
	select @SearchTerm  = SearchTerm, @AvailableObjectsRequestID = AvailableObjectsRequestID from ckbx_Search_Request 
		where SearchRequestID = @RequestID
	if @AvailableObjectsRequestID is null
		set @AvailableObjectsRequestID = @RequestID
	
	declare @ObjectType varchar(100)
	set @ObjectType = 'Response'
		
	-- check if the objects collection started for this type
	if exists (select top 1 * from [ckbx_Search_Completion] where ObjectType = @ObjectType and SearchRequestID = @RequestID)
		return 
	-- mark the fact that objects collection started for this type
	insert into [ckbx_Search_Completion] (SearchRequestID, ObjectType, IsCompleted) values (@RequestID, @ObjectType, 0)
	
	
	--search by Option Text
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Selected Option'
			   ,txt.TextValue
			   ,ra.ResponseID
			   ,null
			   ,r.[GUID]
			   ,'Response #' + cast(ra.ResponseID as nvarchar(100))
		from ckbx_Search_Available_Object sao				
		inner join ckbx_Template_Items ti on sao.ObjectID = ti.TemplateID
		inner join ckbx_ItemOptions iop on ti.ItemID = iop.OptionID
		inner join ckbx_Text txt on txt.TextID like '%Option/' + cast(iop.OptionID as varchar(50)) + '/text'
		inner join ckbx_ResponseAnswers ra on ra.OptionID = iop.OptionID
		inner join ckbx_Response r on ra.ResponseID = r.ResponseID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = 'Survey' and txt.TextValue like '%' + @SearchTerm + '%'
		 and (r.Deleted is null or r.Deleted = 0)

	--search by Answer Text
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Answer Text'
			   ,ra.AnswerText
			   ,ra.ResponseID
			   ,null
			   ,r.[GUID]
			   ,'Response #' + cast(ra.ResponseID as nvarchar(100))
		from ckbx_Search_Available_Object sao				
		inner join ckbx_Template_Items ti on sao.ObjectID = ti.TemplateID
		inner join ckbx_ResponseAnswers ra on ra.ItemID = ti.ItemID
		inner join ckbx_Response r on ra.ResponseID = r.ResponseID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = 'Survey' and ra.AnswerText like '%' + @SearchTerm + '%'
			 and (r.Deleted is null or r.Deleted = 0)

		
	--search by Respondent
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'User Unique Identifier'
			   ,r.[UniqueIdentifier]
			   ,r.ResponseID
			   ,null
			   ,r.[GUID]
			   ,'Response #' + cast(r.ResponseID as nvarchar(100))
		from ckbx_Search_Available_Object sao				
		inner join ckbx_Response r on r.ResponseTemplateID = sao.ObjectID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = 'Survey' and (r.[UniqueIdentifier] like '%' + @SearchTerm + '%')
		 and (r.Deleted is null or r.Deleted = 0)
		
	--search by NetworkUser
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Network User'
			   ,r.NetworkUser
			   ,r.ResponseID
			   ,null
			   ,r.[GUID]
			   ,'Response #' + cast(r.ResponseID as nvarchar(100))
		from ckbx_Search_Available_Object sao				
		inner join ckbx_Response r on r.ResponseTemplateID = sao.ObjectID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = 'Survey' and (r.NetworkUser like '%' + @SearchTerm + '%')
		 and (r.Deleted is null or r.Deleted = 0)
	
	--search by Invitee
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Invitee'
			   ,r.Invitee
			   ,r.ResponseID
			   ,null
			   ,r.[GUID]
			   ,'Response #' + cast(r.ResponseID as nvarchar(100))
		from ckbx_Search_Available_Object sao				
		inner join ckbx_Response r on r.ResponseTemplateID = sao.ObjectID
	where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = 'Survey' and (r.Invitee like '%' + @SearchTerm + '%')
		 and (r.Deleted is null or r.Deleted = 0)
	
	update [ckbx_Search_Completion] set IsCompleted = 1 where SearchRequestID = @RequestID and ObjectType = @ObjectType
	exec ckbx_sp_Search_Complete @RequestID, 'Succeeded', 'Search completed'
end




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Response_Admin]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[ckbx_sp_Search_Response_Admin]
	@RequestID uniqueidentifier,
	@MaxObjectsToCache int
as
begin
	declare @SearchTerm nvarchar(1024)
	
	--get search term and request id that contains available objects
	declare @AvailableObjectsRequestID uniqueidentifier
	select @SearchTerm  = SearchTerm, @AvailableObjectsRequestID = AvailableObjectsRequestID from ckbx_Search_Request 
		where SearchRequestID = @RequestID
	if @AvailableObjectsRequestID is null
		set @AvailableObjectsRequestID = @RequestID
	
	declare @ObjectType varchar(100)
	set @ObjectType = 'Response'
		
	-- check if the objects collection started for this type
	if exists (select top 1 * from [ckbx_Search_Completion] where ObjectType = @ObjectType and SearchRequestID = @RequestID)
		return 
	-- mark the fact that objects collection started for this type
	insert into [ckbx_Search_Completion] (SearchRequestID, ObjectType, IsCompleted) values (@RequestID, @ObjectType, 0)
	
	
	--search by Option Text
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Selected Option'
			   ,txt.TextValue
			   ,ra.ResponseID
			   ,null
			   ,r.[GUID]
			   ,'Response #' + cast(ra.ResponseID as nvarchar(100))
		from 
		ckbx_ItemOptions iop 
		inner join ckbx_Text txt on txt.TextID like '%Option/' + cast(iop.OptionID as varchar(50)) + '/text' 		
		inner join ckbx_ResponseAnswers ra on ra.OptionID = iop.OptionID		
		inner join ckbx_Response r on ra.ResponseID = r.ResponseID
		inner join ckbx_Template_Items ti on ti.ItemID = ra.ItemID	
		inner join ckbx_Template t on ti.TemplateID = t.TemplateID
	where txt.TextValue like '%' + @SearchTerm + '%' and (t.Deleted is null or t.Deleted = 0) and (r.Deleted is null or r.Deleted = 0)

	--search by Answer Text
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Answer Text'
			   ,ra.AnswerText
			   ,ra.ResponseID
			   ,null
			   ,r.[GUID]
			   ,'Response #' + cast(ra.ResponseID as nvarchar(100))
		from ckbx_Template_Items ti 
		inner join ckbx_ResponseAnswers ra on ra.ItemID = ti.ItemID
		inner join ckbx_Response r on ra.ResponseID = r.ResponseID
		inner join ckbx_Template t on ti.TemplateID = t.TemplateID
	where ra.AnswerText like '%' + @SearchTerm + '%' and (t.Deleted is null or t.Deleted = 0) and (r.Deleted is null or r.Deleted = 0)
		
	--search by Respondent
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'User Unique Identifier'
			   ,r.[UniqueIdentifier]
			   ,r.ResponseID
			   ,null
			   ,r.[GUID]
			   ,'Response #' + cast(r.ResponseID as nvarchar(100))
		from ckbx_Response r
		inner join ckbx_Template t on r.ResponseTemplateID = t.TemplateID
	where (r.[UniqueIdentifier] like '%' + @SearchTerm + '%') and (t.Deleted is null or t.Deleted = 0) and (r.Deleted is null or r.Deleted = 0)
		
	--search by NetworkUser
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Network User'
			   ,r.NetworkUser
			   ,r.ResponseID
			   ,null
			   ,r.[GUID]
			   ,'Response #' + cast(r.ResponseID as nvarchar(100))
		from ckbx_Response r 
		inner join ckbx_Template t on r.ResponseTemplateID = t.TemplateID
	where (r.NetworkUser like '%' + @SearchTerm + '%') and (t.Deleted is null or t.Deleted = 0) and (r.Deleted is null or r.Deleted = 0)
	
	--search by Invitee
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Invitee'
			   ,r.Invitee
			   ,r.ResponseID
			   ,null
			   ,r.[GUID]
			   ,'Response #' + cast(r.ResponseID as nvarchar(100))
		from ckbx_Response r
		inner join ckbx_Template t on r.ResponseTemplateID = t.TemplateID
	where (r.Invitee like '%' + @SearchTerm + '%') and (t.Deleted is null or t.Deleted = 0) and (r.Deleted is null or r.Deleted = 0)
	
	update [ckbx_Search_Completion] set IsCompleted = 1 where SearchRequestID = @RequestID and ObjectType = @ObjectType
	exec ckbx_sp_Search_Complete @RequestID, 'Succeeded', 'Search completed'
end




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Run]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Search_Run]
(
  @RequestID uniqueidentifier
)
AS
begin
	declare @RecentStatus varchar(50)
	declare @UserID nvarchar(611)
	select @RecentStatus = [Status], @UserID = Creator from ckbx_Search_Request 
			where SearchRequestID = @RequestID
	if @RecentStatus is null or @RecentStatus <> 'Created'
	begin
		return
	end
	
	update ckbx_Search_Request set [Status] = 'Pending' where SearchRequestID = @RequestID
		
	select sa.ObjectType from ckbx_Search_Appearance sa 
		inner join ckbx_Search_Settings ss on sa.ObjectType = ss.ObjectType
		inner join ckbx_IdentityRoles ir on ss.RoleID = ir.RoleID
	where sa.Included = 1 and ir.[UniqueIdentifier] = @UserID
	order by [sa].[Order]
	
end


  


  

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Settings_Add_ObjectType_Role]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[ckbx_sp_Search_Settings_Add_ObjectType_Role](@ObjectType varchar(100), @Role varchar(100))
AS
begin
	declare @RoleID int
	select top 1 @RoleID = RoleID from ckbx_Role where RoleName = @Role
	if @RoleID is null
		return
	insert into ckbx_Search_Settings (ObjectType, RoleID) values (@ObjectType, @RoleID)
end


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Settings_Delete_ObjectType_Role]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[ckbx_sp_Search_Settings_Delete_ObjectType_Role](@ObjectType varchar(100), @Role varchar(100))
AS
begin
	declare @RoleID int
	select top 1 @RoleID = RoleID from ckbx_Role where RoleName = @Role
	if @RoleID is null
		return
	delete from ckbx_Search_Settings where ObjectType = @ObjectType and RoleID = @RoleID
end


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Settings_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[ckbx_sp_Search_Settings_Get]
AS
begin
	select * from ckbx_Search_Appearance order by [Order]
end


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Settings_Include_ObjectType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create PROCEDURE [dbo].[ckbx_sp_Search_Settings_Include_ObjectType](@ObjectType varchar(100), @Include bit)
AS
begin
	update ckbx_Search_Appearance set [Included] = @Include
		where ObjectType = @ObjectType
end



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Settings_Set_Order]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[ckbx_sp_Search_Settings_Set_Order](@ObjectType varchar(100), @Order int)
AS
begin
	update ckbx_Search_Appearance set [Order] = @Order
		where ObjectType = @ObjectType
end


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Survey]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[ckbx_sp_Search_Survey]
	@RequestID uniqueidentifier,
	@MaxObjectsToCache int
as
begin
	declare @SearchTerm nvarchar(1024)
	
	--get search term and request id that contains available objects
	declare @AvailableObjectsRequestID uniqueidentifier
	select @SearchTerm  = SearchTerm, @AvailableObjectsRequestID = AvailableObjectsRequestID from ckbx_Search_Request 
		where SearchRequestID = @RequestID
	if @AvailableObjectsRequestID is null
		set @AvailableObjectsRequestID = @RequestID
	
	declare @ObjectType varchar(100)
	set @ObjectType = 'Survey'
		
	-- check if the objects collection started for this type
	if exists (select top 1 * from [ckbx_Search_Completion] where ObjectType = @ObjectType and SearchRequestID = @RequestID)
		return 
	-- mark the fact that objects collection started for this type
	insert into [ckbx_Search_Completion] (SearchRequestID, ObjectType, IsCompleted) values (@RequestID, @ObjectType, 0)

	--search by Name
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Name'
			   ,coalesce(txt.TextValue, rt.TemplateName)
			   ,rt.ResponseTemplateID
			   ,null
			   ,rt.[GUID]
			   ,rt.TemplateName
		from ckbx_Search_Available_Object sao		
		inner join ckbx_ResponseTemplate rt  on sao.ObjectID = rt.ResponseTemplateID
		left outer join ckbx_Text txt on txt.TextID = rt.NameTextID
		inner join ckbx_Template t on t.TemplateID = rt.ResponseTemplateID
	where (t.Deleted IS NULL OR t.Deleted = 0) AND 
		sao.SearchRequestID = @AvailableObjectsRequestID and
		sao.ObjectType = @ObjectType and 
		(rt.TemplateName like '%' + @SearchTerm + '%' or txt.TextValue like '%' + @SearchTerm + '%') 
	
	--search by Title
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Title'
			   ,txt.TextValue
			   ,rt.ResponseTemplateID
			   ,null
			   ,rt.[GUID]
			   ,rt.TemplateName
		from ckbx_Search_Available_Object sao		
		inner join ckbx_ResponseTemplate rt  on sao.ObjectID = rt.ResponseTemplateID
		inner join ckbx_Text txt on txt.TextID = rt.TitleTextID
		inner join ckbx_Template t on t.TemplateID = rt.ResponseTemplateID
	where (t.Deleted IS NULL OR t.Deleted = 0) AND 
			sao.SearchRequestID = @AvailableObjectsRequestID and
			sao.ObjectType = @ObjectType and txt.TextValue like '%' + @SearchTerm + '%'
		
	--search by Description
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Title'
			   ,txt.TextValue
			   ,rt.ResponseTemplateID
			   ,null
			   ,rt.[GUID]
			   ,rt.TemplateName
		from ckbx_Search_Available_Object sao		
		inner join ckbx_ResponseTemplate rt  on sao.ObjectID = rt.ResponseTemplateID
		inner join ckbx_Text txt on txt.TextID = rt.DescriptionTextID
		inner join ckbx_Template t on t.TemplateID = rt.ResponseTemplateID
	where (t.Deleted IS NULL OR t.Deleted = 0) AND 
			sao.SearchRequestID = @AvailableObjectsRequestID and
			sao.ObjectType = @ObjectType and txt.TextValue like '%' + @SearchTerm + '%'
		
	--search by CreatedBy
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Created By'
			   ,t.CreatedBy
			   ,rt.ResponseTemplateID
			   ,null
			   ,rt.[GUID]
			   ,rt.TemplateName
		from ckbx_Search_Available_Object sao		
		inner join ckbx_ResponseTemplate rt  on sao.ObjectID = rt.ResponseTemplateID
		inner join ckbx_Template t on rt.ResponseTemplateID = t.TemplateID
	where (t.Deleted IS NULL OR t.Deleted = 0) AND 
			sao.SearchRequestID = @AvailableObjectsRequestID and 
			sao.ObjectType = @ObjectType and t.CreatedBy like '%' + @SearchTerm + '%'
		
	--search by ModifiedBy
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,sao.ObjectType
			   ,'Modified By'
			   ,t.ModifiedBy
			   ,rt.ResponseTemplateID
			   ,null
			   ,rt.[GUID]
			   ,rt.TemplateName
		from ckbx_Search_Available_Object sao		
		inner join ckbx_ResponseTemplate rt  on sao.ObjectID = rt.ResponseTemplateID
		inner join ckbx_Template t on rt.ResponseTemplateID = t.TemplateID
	where (t.Deleted IS NULL OR t.Deleted = 0) AND 
			sao.SearchRequestID = @AvailableObjectsRequestID and
			sao.ObjectType = @ObjectType and t.ModifiedBy like '%' + @SearchTerm + '%'
	
	update [ckbx_Search_Completion] set IsCompleted = 1 where SearchRequestID = @RequestID and ObjectType = @ObjectType
	exec ckbx_sp_Search_Complete @RequestID, 'Succeeded', 'Search completed'
end

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_Survey_Admin]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------

CREATE procedure [dbo].[ckbx_sp_Search_Survey_Admin]
	@RequestID uniqueidentifier,
	@MaxObjectsToCache int
as
begin
	declare @SearchTerm nvarchar(1024)
	
	--get search term and request id that contains available objects
	declare @AvailableObjectsRequestID uniqueidentifier
	select @SearchTerm  = SearchTerm, @AvailableObjectsRequestID = AvailableObjectsRequestID from ckbx_Search_Request 
		where SearchRequestID = @RequestID
	if @AvailableObjectsRequestID is null
		set @AvailableObjectsRequestID = @RequestID
	
	declare @ObjectType varchar(100)
	set @ObjectType = 'Survey'
		
	-- check if the objects collection started for this type
	if exists (select top 1 * from [ckbx_Search_Completion] where ObjectType = @ObjectType and SearchRequestID = @RequestID)
		return 
	-- mark the fact that objects collection started for this type
	insert into [ckbx_Search_Completion] (SearchRequestID, ObjectType, IsCompleted) values (@RequestID, @ObjectType, 0)

	--search by Name
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Name'
			   ,coalesce(txt.TextValue, rt.TemplateName)
			   ,rt.ResponseTemplateID
			   ,null
			   ,rt.[GUID]
			   ,rt.TemplateName
		from ckbx_ResponseTemplate rt 
		left outer join ckbx_Text txt on txt.TextID = rt.NameTextID
		inner join ckbx_Template t on t.TemplateID = rt.ResponseTemplateID
	where 
		(t.Deleted IS NULL OR t.Deleted = 0) AND (rt.TemplateName like '%' + @SearchTerm + '%' or txt.TextValue like '%' + @SearchTerm + '%')
	
	--search by Title
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Title'
			   ,txt.TextValue
			   ,rt.ResponseTemplateID
			   ,null
			   ,rt.[GUID]
			   ,rt.TemplateName
		from ckbx_ResponseTemplate rt
		inner join ckbx_Text txt on txt.TextID = rt.TitleTextID
		inner join ckbx_Template t on t.TemplateID = rt.ResponseTemplateID
	where (t.Deleted IS NULL OR t.Deleted = 0) AND (txt.TextValue like '%' + @SearchTerm + '%')
		
	--search by Description
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Title'
			   ,txt.TextValue
			   ,rt.ResponseTemplateID
			   ,null
			   ,rt.[GUID]
			   ,rt.TemplateName
		from ckbx_ResponseTemplate rt
		inner join ckbx_Text txt on txt.TextID = rt.DescriptionTextID
		inner join ckbx_Template t on t.TemplateID = rt.ResponseTemplateID
	where (t.Deleted IS NULL OR t.Deleted = 0) AND (txt.TextValue like '%' + @SearchTerm + '%')
		
	--search by CreatedBy
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Created By'
			   ,t.CreatedBy
			   ,rt.ResponseTemplateID
			   ,null
			   ,rt.[GUID]
			   ,rt.TemplateName
		from ckbx_ResponseTemplate rt
		inner join ckbx_Template t on rt.ResponseTemplateID = t.TemplateID
	where (t.Deleted IS NULL OR t.Deleted = 0) AND (t.CreatedBy like '%' + @SearchTerm + '%')
		
	--search by ModifiedBy
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'Modified By'
			   ,t.ModifiedBy
			   ,rt.ResponseTemplateID
			   ,null
			   ,rt.[GUID]
			   ,rt.TemplateName
		from ckbx_ResponseTemplate rt
		inner join ckbx_Template t on rt.ResponseTemplateID = t.TemplateID
	where (t.Deleted IS NULL OR t.Deleted = 0) AND (t.ModifiedBy like '%' + @SearchTerm + '%')
	
	update [ckbx_Search_Completion] set IsCompleted = 1 where SearchRequestID = @RequestID and ObjectType = @ObjectType
	exec ckbx_sp_Search_Complete @RequestID, 'Succeeded', 'Search completed'
end

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_User]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[ckbx_sp_Search_User]
	@RequestID uniqueidentifier,
	@MaxObjectsToCache int
as
begin
	declare @SearchTerm nvarchar(1024)
	declare @Creator as nvarchar(611)
	
	--get search term and request id that contains available objects
	declare @AvailableObjectsRequestID uniqueidentifier
	select @SearchTerm  = SearchTerm, @AvailableObjectsRequestID = AvailableObjectsRequestID, @Creator = Creator from ckbx_Search_Request 
		where SearchRequestID = @RequestID
	if @AvailableObjectsRequestID is null
		set @AvailableObjectsRequestID = @RequestID
	
	declare @ObjectType varchar(100)
	set @ObjectType = 'User'
		
	-- check if the objects collection started for this type
	if exists (select top 1 * from [ckbx_Search_Completion] where ObjectType = @ObjectType and SearchRequestID = @RequestID)
		return 
	-- mark the fact that objects collection started for this type
	insert into [ckbx_Search_Completion] (SearchRequestID, ObjectType, IsCompleted) values (@RequestID, @ObjectType, 0)

	declare @CanViewAllUsers int
	set @CanViewAllUsers = 0

	--check if regular user can view Everyone group
	select @CanViewAllUsers = count(*) from ckbx_Group g
		inner join ckbx_AccessControlEntries aces on g.AclID = aces.AclID
		inner join ckbx_AccessControlEntry ace on aces.EntryID = ace.EntryID
		inner join ckbx_PolicyPermissions pp on ace.PolicyID = pp.PolicyID
		inner join ckbx_Permission p on pp.PermissionID = p.PermissionID
		where GroupId = 1 and EntryType like '%ExtendedPrincipal%' and EntryIdentifier = @Creator and PermissionName = 'Group.View'
		
	if @CanViewAllUsers > 0
	begin	
		--search by UID
		INSERT INTO [ckbx_Search_Result]
				   ([SearchRequestID]
				   ,[ObjectType]
				   ,[MatchedField]
				   ,[MatchedText]
				   ,[ObjectID]
				   ,[ObjectIDString]
				   ,[ObjectGUID]
				   ,[Title])
		select top(@MaxObjectsToCache) @RequestID
				   ,sao.ObjectType
				   ,'User Unique Identifier'
				   ,c.[UniqueIdentifier]
				   ,null
				   ,c.[UniqueIdentifier]
				   ,c.[GUID]
				   ,c.[UserName]
			from ckbx_Search_Available_Object sao		
			inner join ckbx_Credential c  on sao.ObjectIDString = c.[UniqueIdentifier]
		where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and c.[UniqueIdentifier] like '%' + @SearchTerm + '%'
		
		--search by Email
		INSERT INTO [ckbx_Search_Result]
				   ([SearchRequestID]
				   ,[ObjectType]
				   ,[MatchedField]
				   ,[MatchedText]
				   ,[ObjectID]
				   ,[ObjectIDString]
				   ,[ObjectGUID]
				   ,[Title])
		select top(@MaxObjectsToCache) @RequestID
				   ,sao.ObjectType
				   ,'E-mail'
				   ,c.Email
				   ,null
				   ,c.[UniqueIdentifier]
				   ,c.[GUID]
				   ,c.[UserName]
			from ckbx_Search_Available_Object sao		
			inner join ckbx_Credential c  on sao.ObjectIDString = c.[UniqueIdentifier]
		where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and c.Email like '%' + @SearchTerm + '%'

		--search by GUID
		INSERT INTO [ckbx_Search_Result]
				   ([SearchRequestID]
				   ,[ObjectType]
				   ,[MatchedField]
				   ,[MatchedText]
				   ,[ObjectID]
				   ,[ObjectIDString]
				   ,[ObjectGUID]
				   ,[Title])
		select top(@MaxObjectsToCache) @RequestID
				   ,sao.ObjectType
				   ,'GUID'
				   ,cast(c.[GUID] as nvarchar(1024))
				   ,null
				   ,c.[UniqueIdentifier]
				   ,c.[GUID]
				   ,c.[UserName]
			from ckbx_Search_Available_Object sao		
			inner join ckbx_Credential c  on sao.ObjectIDString = c.[UniqueIdentifier]
		where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and cast(c.[GUID] as nvarchar(1024)) like '%' + @SearchTerm + '%'
		
		--search by Profile Property
		INSERT INTO [ckbx_Search_Result]
				   ([SearchRequestID]
				   ,[ObjectType]
				   ,[MatchedField]
				   ,[MatchedText]
				   ,[ObjectID]
				   ,[ObjectIDString]
				   ,[ObjectGUID]
				   ,[Title])
		select top(@MaxObjectsToCache) @RequestID
				   ,sao.ObjectType
				   ,cuf.CustomUserFieldName
				   ,cufm.Value
				   ,null
				   ,c.[UniqueIdentifier]
				   ,c.[GUID]
				   ,c.[UserName]
			from ckbx_Search_Available_Object sao				
			inner join ckbx_Credential c  on sao.ObjectIDString = c.[UniqueIdentifier]
			inner join ckbx_CustomUserFieldMap cufm on c.[UniqueIdentifier] = cufm.[UniqueIdentifier]
			inner join ckbx_CustomUserField cuf on cufm.CustomUserFieldID = cuf.CustomUserFieldID
		where sao.SearchRequestID = @AvailableObjectsRequestID and sao.ObjectType = @ObjectType and (cufm.Value like '%' + @SearchTerm + '%') and (cuf.Hidden is null or cuf.Hidden = 0)
	end
	
	update [ckbx_Search_Completion] set IsCompleted = 1 where SearchRequestID = @RequestID and ObjectType = @ObjectType
	exec ckbx_sp_Search_Complete @RequestID, 'Succeeded', 'Search completed'
end




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Search_User_Admin]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[ckbx_sp_Search_User_Admin]
	@RequestID uniqueidentifier,
	@MaxObjectsToCache int
as
begin
	declare @SearchTerm nvarchar(1024)
	
	--get search term and request id that contains available objects
	declare @AvailableObjectsRequestID uniqueidentifier
	select @SearchTerm  = SearchTerm, @AvailableObjectsRequestID = AvailableObjectsRequestID from ckbx_Search_Request 
		where SearchRequestID = @RequestID
	if @AvailableObjectsRequestID is null
		set @AvailableObjectsRequestID = @RequestID
	
	declare @ObjectType varchar(100)
	set @ObjectType = 'User'
		
	-- check if the objects collection started for this type
	if exists (select top 1 * from [ckbx_Search_Completion] where ObjectType = @ObjectType and SearchRequestID = @RequestID)
		return 
	-- mark the fact that objects collection started for this type
	insert into [ckbx_Search_Completion] (SearchRequestID, ObjectType, IsCompleted) values (@RequestID, @ObjectType, 0)

	
	--search by UID
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'User Unique Identifier'
			   ,c.[UniqueIdentifier]
			   ,null
			   ,c.[UniqueIdentifier]
			   ,c.[GUID]
			   ,c.[UserName]
		from ckbx_Credential c
	where c.[UniqueIdentifier] like '%' + @SearchTerm + '%'
	
	--search by Email
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'E-mail'
			   ,c.Email
			   ,null
			   ,c.[UniqueIdentifier]
			   ,c.[GUID]
			   ,c.[UserName]
		from ckbx_Credential c 
	where c.Email like '%' + @SearchTerm + '%'

	--search by GUID
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,'GUID'
			   ,cast(c.[GUID] as nvarchar(1024))
			   ,null
			   ,c.[UniqueIdentifier]
			   ,c.[GUID]
			   ,c.[UserName]
		from ckbx_Credential c 
	where cast(c.[GUID] as nvarchar(1024)) like '%' + @SearchTerm + '%'
	
	--search by Profile Property
	INSERT INTO [ckbx_Search_Result]
			   ([SearchRequestID]
			   ,[ObjectType]
			   ,[MatchedField]
			   ,[MatchedText]
			   ,[ObjectID]
			   ,[ObjectIDString]
			   ,[ObjectGUID]
			   ,[Title])
	select top(@MaxObjectsToCache) @RequestID
			   ,@ObjectType
			   ,cuf.CustomUserFieldName
			   ,cufm.Value
			   ,null
			   ,c.[UniqueIdentifier]
			   ,c.[GUID]
			   ,c.[UserName]
		from ckbx_Credential c
		inner join ckbx_CustomUserFieldMap cufm on c.[UniqueIdentifier] = cufm.[UniqueIdentifier]
		inner join ckbx_CustomUserField cuf on cufm.CustomUserFieldID = cuf.CustomUserFieldID
	where (cufm.Value like '%' + @SearchTerm + '%') and (cuf.Hidden is null or cuf.Hidden = 0)
	
	update [ckbx_Search_Completion] set IsCompleted = 1 where SearchRequestID = @RequestID and ObjectType = @ObjectType
	exec ckbx_sp_Search_Complete @RequestID, 'Succeeded', 'Search completed'
end



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_CountAccessibleAnalysesForSurvey]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Security_CountAccessibleAnalysesForSurvey]
(
	@UniqueIdentifier nvarchar(511),
	@FirstPermissionName varchar(32),
	@SecondPermissionName varchar(32),
	@RequireBothPermissions bit,
	@UseAclExclusion bit,
	@ResponseTemplateId int,
	@TotalCount int output
)
AS
	SET NOCOUNT ON

	DECLARE @DataKey varchar(64)
	SET @DataKey = 'ListAccessibleAnalyses'
	
	--Clear data
	DELETE FROM ckbx_Security_TempResourceList WHERE DataKey = @DataKey AND spid = @@spid
	
	IF @SecondPermissionName IS NULL OR LEN(@SecondPermissionName) = 0
		BEGIN
			--One permission to check, so do it!
			EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissible
				@UniqueIdentifier,
				'Prezza.Framework.Security.ExtendedPrincipal',
				'ckbx_Template',
				'TemplateId',
				@FirstPermissionName,
				@UseAclExclusion,
				@DataKey
		END
	ELSE
		BEGIN
			IF @RequireBothPermissions = 1
				BEGIN
					EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithBothPermissions
						@UniqueIdentifier,
						'Prezza.Framework.Security.ExtendedPrincipal',
						'ckbx_Template',
						'TemplateId',
						@FirstPermissionName,
						@SecondPermissionName,
						@UseAclExclusion,
						@DataKey
				END
			ELSE
				BEGIN
					EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithEitherPermission
						@UniqueIdentifier,
						'Prezza.Framework.Security.ExtendedPrincipal',
						'ckbx_Template',
						'TemplateId',
						@FirstPermissionName,
						@SecondPermissionName,
						@UseAclExclusion,
						@DataKey
				END
		END
	
	
	SELECT
		@TotalCount = COUNT(DISTINCT at.AnalysisTemplateId)
	FROM
		ckbx_Security_TempResourceList trl
		INNER JOIN ckbx_AnalysisTemplate at ON at.AnalysisTemplateId = trl.ResourceId
		INNER JOIN ckbx_Template t ON t.TemplateId = trl.ResourceId
	WHERE 
		at.ResponseTemplateID = @ResponseTemplateId 
		AND spid = @@spid AND DataKey = @DataKey
		AND (t.Deleted is NULL OR t.Deleted = 0) 

	--Clear data
	DELETE FROM ckbx_Security_TempResourceList WHERE DataKey = @DataKey AND spid = @@spid			


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_CountAccessibleInvitationsForSurvey]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Security_CountAccessibleInvitationsForSurvey]
(
   @UniqueIdentifier nvarchar(511),
   @UseAclExclusion bit,
   @ResponseTemplateId int,
   @TotalCount int output 
)
AS
  --Remove any temp data
  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleInvitations_Forms'
    
  --Populate temp resource table with surveys
  --Pass 0 as ancestor, which means list only surveys in root
  EXEC ckbx_sp_Security_ListAccessibleSurveys @UniqueIdentifier, 'Form.Administer', NULL, 0, @UseAclExclusion, -1, -1, NULL, true, NULL, NULL, 0, 'AccessibleInvitations_Forms'


  SELECT 
  	  @TotalCount = COUNT(DISTINCT inv.InvitationId)
  FROM
	  ckbx_Security_TempResourceList tmp 
	  INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
	  INNER JOIN ckbx_Invitation inv ON inv.ResponseTemplateId = rt.ResponseTemplateId 
  WHERE
	  rt.ResponseTemplateid = @ResponseTemplateId
		
  --Remove any temp data
  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleInvitations_Forms'


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_CountAccessibleInvitationsForSurveyByType]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Security_CountAccessibleInvitationsForSurveyByType]
(
   @UniqueIdentifier nvarchar(511),
   @UseAclExclusion bit,
   @ResponseTemplateId int,
   @IsSent bit,
   @TotalCount int output 
)
AS
  --Remove any temp data
  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleInvitations_Forms'
    
  --Populate temp resource table with surveys
  --Pass 0 as ancestor, which means list only surveys in root
  EXEC ckbx_sp_Security_ListAccessibleSurveys @UniqueIdentifier, 'Form.Administer', NULL, 0, @UseAclExclusion, -1, -1, NULL, true, NULL, NULL, 0, 'AccessibleInvitations_Forms'


  if @IsSent = 1
  begin
	  SELECT 
  		  @TotalCount = COUNT(*)
	  FROM
		  ckbx_Security_TempResourceList tmp 
		  INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
		  INNER JOIN ckbx_Invitation inv ON inv.ResponseTemplateId = rt.ResponseTemplateId 
		  LEFT OUTER JOIN ckbx_InvitationSchedule isch on inv.InvitationID = isch.InvitationID and (isch.InvitationActivityType is null or isch.InvitationActivityType <> 4)
	  WHERE
		  rt.ResponseTemplateid = @ResponseTemplateId and (LastSentOn is not NULL or isch.ProcessingStarted is not NULL) and DataKey = 'AccessibleInvitations_Forms'
  end
  else
  begin

	  SELECT 
  		  @TotalCount = COUNT(*)
		FROM
				  ckbx_Security_TempResourceList tmp 
				  INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
				  INNER JOIN ckbx_Invitation inv ON inv.ResponseTemplateId = rt.ResponseTemplateId 
				  LEFT OUTER JOIN ckbx_InvitationSchedule isch on inv.InvitationID = isch.InvitationID and (isch.InvitationActivityType is null or isch.InvitationActivityType <> 4)
		WHERE 			
			rt.ResponseTemplateid = @ResponseTemplateId and
			(LastSentOn is NULL or isch.DateScheduled is not null and isch.ProcessingStarted is NULL)
			and DataKey = 'AccessibleInvitations_Forms'
  end
		
  --Remove any temp data
  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleInvitations_Forms'




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_GetPermissionMaskDisplayName]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Security_GetPermissionMaskDisplayName]
(
   @MaskName nvarchar(255)
)
AS
  SELECT MaskDisplayName FROM ckbx_PermissionMask WHERE MaskName = @MaskName
  

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleAnalyses]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleAnalyses]
(
	@UniqueIdentifier nvarchar(511),
	@FirstPermissionName varchar(32),
	@SecondPermissionName varchar(32),
	@RequireBothPermissions bit,
	@UseAclExclusion bit,
	@PageNumber int, 
	@ResultsPerPage int,
	@SortField varchar(64),
	@SortAscending bit,
	@FilterField varchar(64),
	@FilterValue nvarchar(255),
	@DisplayCount bit = 1
)
AS

	DECLARE @DataKey varchar(64)
	SET @DataKey = 'ListAccessibleAnalyses'
	
	--Clear data
	DELETE FROM ckbx_Security_TempResourceList WHERE DataKey = @DataKey AND spid = @@spid
	
	IF @SecondPermissionName IS NULL OR LEN(@SecondPermissionName) = 0
		BEGIN
			--One permission to check, so do it!
			EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissible
				@UniqueIdentifier,
				'Prezza.Framework.Security.ExtendedPrincipal',
				'ckbx_Template',
				'TemplateId',
				@FirstPermissionName,
				@UseAclExclusion,
				@DataKey
		END
	ELSE
		BEGIN
			IF @RequireBothPermissions = 1
				BEGIN
					EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithBothPermissions
						@UniqueIdentifier,
						'Prezza.Framework.Security.ExtendedPrincipal',
						'ckbx_Template',
						'TemplateId',
						@FirstPermissionName,
						@SecondPermissionName,
						@UseAclExclusion,
						@DataKey
				END
			ELSE
				BEGIN
					EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithEitherPermission
						@UniqueIdentifier,
						'Prezza.Framework.Security.ExtendedPrincipal',
						'ckbx_Template',
						'TemplateId',
						@FirstPermissionName,
						@SecondPermissionName,
						@UseAclExclusion,
						@DataKey
				END
		END
	
	DECLARE @OrderBy varchar(64)
	SET @OrderBy = ' ORDER BY [AnalysisName] ASC '

	IF (@SortField is NOT NULL AND len(@SortField) > 0)
		BEGIN
			IF @SortAscending = 1
				BEGIN
					SET @OrderBy = ' ORDER BY ['+@SortField+'] ASC'
				END
			ELSE
				BEGIN
					SET @OrderBy = ' ORDER BY ['+@SortField+'] DESC'
				END
		END
	
  	--If not paging, simply return the results
	DECLARE @Query nvarchar(4000)
	DECLARE @FilterClause nvarchar(2000)
	DECLARE @QueryParams nvarchar(500)
  
	--build filter clause
	set @FilterClause = ''
	IF (len(@FilterValue) > 0)	
	BEGIN
		IF @FilterValue IS NOT NULL and len(@FilterValue) > 0
		BEGIN
			IF (@FilterField = 'AnalysisName')
				BEGIN
					SET @FilterClause = ' AND AnalysisName like ''%'' + @FilterValue + ''%'' '	
				END
				
			IF (@FilterField = 'CreatedBy')
				BEGIN
					SET @FilterClause = ' AND t.CreatedBy like ''%'' + @FilterValue + ''%'' '	
				END
			END
		ELSE
		BEGIN
			SET @FilterClause = ' AND ((t.CreatedBy like ''%'' + @FilterValue + ''%'')
				OR (AnalysisName like ''%'' + @FilterValue + ''%'')
				OR (t.ModifiedBy like ''%'' + @FilterValue + ''%'')
			)
			'			
		END
	END

  
	SET @QueryParams = '@FilterValue nvarchar(255)'
	
		IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT
					at.*,
					t.*
				FROM
					ckbx_Security_TempResourceList trl
					INNER JOIN ckbx_AnalysisTemplate at ON at.AnalysisTemplateId = trl.ResourceId
					INNER JOIN ckbx_Template t ON t.TemplateId = trl.ResourceId
				WHERE 
					spid = @@spid AND DataKey = '''+@DataKey+'''
					AND (t.Deleted is NULL OR t.Deleted = 0) ' + @FilterClause+ @OrderBy

			--Select results
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			
			if @DisplayCount = 1 begin
				--Select count
				SET @Query = '
					SELECT 
						COUNT(AnalysisTemplateID)  AS TotalItemCount
					FROM
						ckbx_Security_TempResourceList trl
						INNER JOIN ckbx_AnalysisTemplate at ON at.AnalysisTemplateId = trl.ResourceId
						INNER JOIN ckbx_Template t ON t.TemplateId = trl.ResourceId
					WHERE 
						spid = @@spid AND DataKey = '''+@DataKey+'''
						AND (t.Deleted is NULL OR t.Deleted = 0) ' + @FilterClause
				--Select Count
				exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			end
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			
			SELECT @Query = '
			
				IF object_id(''tempdb..#orderedResults'') IS NOT NULL
					BEGIN
						DROP TABLE #orderedResults
					END
				
				CREATE TABLE #orderedResults(AnalysisTemplateID int);
			
				INSERT INTO #orderedResults	
				SELECT
					at.AnalysisTemplateID
				FROM
					ckbx_Security_TempResourceList trl
					INNER JOIN ckbx_AnalysisTemplate at ON at.AnalysisTemplateId = trl.ResourceId
					INNER JOIN ckbx_Template t ON t.TemplateId = trl.ResourceId
				WHERE 
					spid = @@spid AND DataKey = '''+@DataKey+'''
					AND (t.Deleted is NULL OR t.Deleted = 0) ' + @FilterClause+ @OrderBy
					
				SET @Query = @Query + '; 

				--Select Rows
				SELECT * FROM 
				(
					SELECT at.*, t.*, ROW_NUMBER() OVER ('+ @OrderBy+') AS NUM
					FROM #orderedResults results 
					INNER JOIN ckbx_AnalysisTemplate at
						on results.AnalysisTemplateID = at.AnalysisTemplateID
					INNER JOIN ckbx_Template t
						on t.TemplateId = at.AnalysisTemplateID
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';'
			
			if @DisplayCount = 1 
			begin
				SET @Query = @Query + '
				--Select Count
				SELECT COUNT(*) AS TotalItemCount FROM #orderedResults'
			end
			
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
		END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleAnalysesAnonymous]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleAnalysesAnonymous]
(
	@PermissionName varchar(32),
	@PageNumber int, 
	@ResultsPerPage int,
	@SortField varchar(64),
	@SortAscending bit,
	@FilterField varchar(64),
	@FilterValue nvarchar(255)
)
AS

	DECLARE @DataKey varchar(64)
	SET @DataKey = 'ListAccessibleAnalyses'
	
	--Clear data
	DELETE FROM ckbx_Security_TempResourceList WHERE DataKey = @DataKey AND spid = @@spid
	
	EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissible
		'',
		'Prezza.Framework.Security.ExtendedPrincipal',
		'ckbx_Template',
		'TemplateId',
		@PermissionName,
		0,
		@DataKey
	
	DECLARE @OrderBy varchar(64)
	SET @OrderBy = ' ORDER BY [AnalysisName] ASC '

	IF (@SortField is NOT NULL AND len(@SortField) > 0)
		BEGIN		
			IF @SortAscending = 1
				BEGIN
					SET @OrderBy = ' ORDER BY ['+@SortField+'] ASC'
				END
			ELSE
				BEGIN
					SET @OrderBy = ' ORDER BY ['+@SortField+'] DESC'
				END
		END
	
  	--If not paging, simply return the results
	DECLARE @Query nvarchar(2000)
	DECLARE @QueryParams nvarchar(500)
  
	SET @QueryParams = '@FilterValue nvarchar(255)'
	
		IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT
					at.*,
					t.*
				FROM
					ckbx_Security_TempResourceList trl
					INNER JOIN ckbx_AnalysisTemplate at ON at.AnalysisTemplateId = trl.ResourceId
					INNER JOIN ckbx_Template t ON t.TemplateId = trl.ResourceId
				WHERE 
					spid = @@spid AND DataKey = '''+@DataKey+'''
					AND (t.Deleted is NULL OR t.Deleted = 0) '
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
					BEGIN
						IF (@FilterField = 'AnalysisName')
							BEGIN
								SET @Query = @Query + ' AND AnalysisName like ''%'' + @FilterValue + ''%'' '	
							END
							
						IF (@FilterField = 'CreatedBy')
							BEGIN
								SET @Query = @Query + ' AND t.CreatedBy like ''%'' + @FilterValue + ''%'' '	
							END
					END
				
				SET @Query = @Query + @OrderBy

			--Select results
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			
			--Select count
			SET @Query = '
				SELECT 
					COUNT(AnalysisTemplateID)  AS TotalItemCount
				FROM
					ckbx_Security_TempResourceList trl
					INNER JOIN ckbx_AnalysisTemplate at ON at.AnalysisTemplateId = trl.ResourceId
					INNER JOIN ckbx_Template t ON t.TemplateId = trl.ResourceId
				WHERE 
					spid = @@spid AND DataKey = '''+@DataKey+'''
					AND (t.Deleted is NULL OR t.Deleted = 0) '
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
					BEGIN
						IF (@FilterField = 'AnalysisName')
							BEGIN
								SET @Query = @Query + ' AND AnalysisName like ''%'' + @FilterValue + ''%'' '	
							END
							
						IF (@FilterField = 'CreatedBy')
							BEGIN
								SET @Query = @Query + ' AND t.CreatedBy like ''%'' + @FilterValue + ''%'' '	
							END

					END
			--Select Count
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			
			SELECT @Query = '
			
				IF object_id(''tempdb..#orderedResults'') IS NOT NULL
					BEGIN
						DROP TABLE #orderedResults
					END
				
				CREATE TABLE #orderedResults(AnalysisTemplateID int);
			
				INSERT INTO #orderedResults	
				SELECT
					at.AnalysisTemplateID
				FROM
					ckbx_Security_TempResourceList trl
					INNER JOIN ckbx_AnalysisTemplate at ON at.AnalysisTemplateId = trl.ResourceId
					INNER JOIN ckbx_Template t ON t.TemplateId = trl.ResourceId
				WHERE 
					spid = @@spid AND DataKey = '''+@DataKey+'''
					AND (t.Deleted is NULL OR t.Deleted = 0) '
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
					BEGIN
						IF (@FilterField = 'AnalysisName')
							BEGIN
								SET @Query = @Query + ' AND AnalysisName like ''%'' + @FilterValue + ''%'' '	
							END
							
						IF (@FilterField = 'CreatedBy')
							BEGIN
								SET @Query = @Query + ' AND t.CreatedBy like ''%'' + @FilterValue + ''%'' '	
							END

					END
									
				SET @Query = @Query + @OrderBy + '; 

				--Select Rows
				SELECT * FROM 
				(
					SELECT at.*, t.*, ROW_NUMBER() OVER ('+ @OrderBy+') AS NUM
					FROM #orderedResults results 
					INNER JOIN ckbx_AnalysisTemplate at
						on results.AnalysisTemplateID = at.AnalysisTemplateID
					INNER JOIN ckbx_Template t
						on t.TemplateId = at.AnalysisTemplateID
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';
				
				--Select Count
				SELECT COUNT(*) AS TotalItemCount FROM #orderedResults'
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
		END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleAnalysesByPeriod]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleAnalysesByPeriod]
(
	@UniqueIdentifier nvarchar(511),
	@FirstPermissionName varchar(32),
	@SecondPermissionName varchar(32),
	@RequireBothPermissions bit,
	@UseAclExclusion bit,
	@PageNumber int, 
	@ResultsPerPage int,
	@SortField varchar(64),
	@SortAscending bit,
	@FilterField varchar(64),
	@FilterValue nvarchar(255),
	@StartDate datetime,
	@DateFieldName varchar(100)
)
AS

	declare @RoleID as int
	--check if the user is a System Admin
	select @RoleID = ir.RoleID from ckbx_IdentityRoles ir
		inner join ckbx_Role r on ir.RoleID = r.RoleID
		where ir.uniqueidentifier = @UniqueIdentifier and r.RoleName = 'System Administrator'

	--structure is the same as for ckbx_ResponseTemplate table
	create table #Surveys 
	(
		[ResponseTemplateID] [int] NOT NULL,
		[CreatedBy] [nvarchar](611) NULL,
		[TemplateName] [nvarchar](611) NULL,
		[NameTextID] [varchar](611) NULL,
		[TitleTextID] [varchar](611) NULL,
		[DescriptionTextID] [varchar](611) NULL,
		[IsActive] [bit] NULL,
		[ActivationStart] [datetime] NULL,
		[ActivationEnd] [datetime] NULL,
		[MaxTotalResponses] [int] NULL,
		[MaxResponsesPerUser] [int] NULL,
		[AllowContinue] [bit] NULL,
		[AllowEdit] [bit] NULL,
		[DisableBackButton] [bit] NULL,
		[StyleTemplateID] [int] NULL,
		[ShowPageNumbers] [bit] NULL,
		[ShowProgressBar] [bit] NULL,
		[ShowItemNumbers] [bit] NULL,
		[ShowTitle] [bit] NULL,
		[RandomizeItemsInPages] [bit] NULL,
		[MobileCompatible] [bit] NULL,
		[ButtonContinueTextID] [nvarchar](611) NULL,
		[ButtonBackTextID] [nvarchar](611) NULL,
		[CompletionType] [int] NULL,
		[SupportedLanguages] [nvarchar](1023) NULL,
		[DefaultLanguage] [nvarchar](5) NULL,
		[LanguageSourceToken] [nvarchar](100) NULL,
		[SecurityType] [int] NULL,
		[GuestPassword] [nvarchar](611) NULL,
		[LoginUrl] [nvarchar](500) NULL,
		[ReportSecurityType] [int] NULL,
		[EnableScoring] [bit] NULL,
		[GUID] [uniqueidentifier] NULL,
		[ShowValidationMessage] [bit] NULL,
		[RequiredFieldsAlert] [bit] NULL,
		[LanguageSource] [nvarchar](25) NULL,
		[EnableDynamicPageNumbers] [bit] NULL,
		[EnableDynamicItemNumbers] [bit] NULL,
		[ShowSaveAndQuit] [bit] NULL,
		[AllowSurveyEditWhileActive] [bit] NULL,
		[IsPoll] [bit] NULL,
		[ChartStyleID] [int] NULL,
		[Height] [int] NULL,
		[Width] [int] NULL,
		[BorderWidth] [int] NULL,
		[BorderColor] [varchar](63) NULL,
		[BorderStyle] [varchar](63) NULL,
		[AnonymizeResponses] [bit] NULL,
		[TabletStyleTemplateID] [int] NULL,
		[SmartPhoneStyleTemplateID] [int] NULL,
		[AllowFormReset] [bit] NULL,
		[ShowAsterisks] [bit] NULL,
		[HideFooterHeader] [bit] NULL,
		[MobileStyleId] int NULL,
		[ProgressBarOrientation] [int] NULL,
		[GoogleAnalyticsTrackingID] [varchar](32) NULL
	)
		
	--get all available surveys
	if @RoleID is null
		insert into #Surveys exec ckbx_sp_Security_ListAccessibleSurveys @UniqueIdentifier=@UniqueIdentifier, @FirstPermissionName=@FirstPermissionName, 
		@SecondPermissionName=null, 
		@RequireBothPermissions=0,
		@UseAclExclusion=0,	
		@PageNumber=-1,@ResultsPerPage=-1,@SortField=N'ItemName',@SortAscending=1,@FilterField=N'Name',@FilterValue=N'',@AncestorFolder=null,
		@DisplayCount = 0
	else	
		insert into #Surveys exec ckbx_sp_Security_ListAccessibleSurveysAdmin 
			@PageNumber=-1,
			@ResultsPerPage=-1,
			@SortField=N'ItemName',
			@SortAscending=1,
			@FilterField=N'Name',
			@FilterValue=N'', 
			@AncestorFolder=null,
			@DisplayCount = 0

	
	DECLARE @OrderBy varchar(64)
	SET @OrderBy = ' ORDER BY [AnalysisName] ASC '

	IF (@SortField is NOT NULL AND len(@SortField) > 0)
		BEGIN	
			IF @SortAscending = 1
				BEGIN
					SET @OrderBy = ' ORDER BY ['+@SortField+'] ASC'
				END
			ELSE
				BEGIN
					SET @OrderBy = ' ORDER BY ['+@SortField+'] DESC'
				END
		END
	
  	--If not paging, simply return the results
	DECLARE @Query nvarchar(2000)
	DECLARE @QueryParams nvarchar(500)
  
	SET @QueryParams = '@FilterValue nvarchar(255)'
	
		IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT
					at.*,
					t.*
				FROM #Surveys s 
					INNER JOIN ckbx_AnalysisTemplate at ON at.ResponseTemplateId = s.ResponseTemplateId
					INNER JOIN ckbx_Template t ON t.TemplateId = at.AnalysisTemplateId
				WHERE 
					' + @DateFieldName + ' > ''' + cast (@StartDate as varchar(100)) + '''
					AND (t.Deleted is NULL OR t.Deleted = 0) '
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
					BEGIN
						IF (@FilterField = 'AnalysisName')
							BEGIN
								SET @Query = @Query + ' AND AnalysisName like ''%'' + @FilterValue + ''%'' '	
							END
					END

				SET @Query = @Query + @OrderBy

			--Select results
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			
			--Select count
			SET @Query = '
				SELECT 
					COUNT(AnalysisTemplateID)  AS TotalItemCount
				FROM #Surveys s 
					INNER JOIN ckbx_AnalysisTemplate at ON at.ResponseTemplateId = s.ResponseTemplateId
					INNER JOIN ckbx_Template t ON t.TemplateId = at.AnalysisTemplateId
				WHERE 
					' + @DateFieldName + ' > ''' + cast (@StartDate as varchar(100)) + '''
					AND (t.Deleted is NULL OR t.Deleted = 0) '
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
					BEGIN
						IF (@FilterField = 'AnalysisName')
							BEGIN
								SET @Query = @Query + ' AND AnalysisName like ''%'' + @FilterValue + ''%'' '	
							END
					END
			--Select Count
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			
			SELECT @Query = '
			
				IF object_id(''tempdb..#orderedResults'') IS NOT NULL
					BEGIN
						DROP TABLE #orderedResults
					END
				
				CREATE TABLE #orderedResults(AnalysisTemplateID int);
			
				INSERT INTO #orderedResults	
				SELECT
					at.AnalysisTemplateID
				FROM #Surveys s 
					INNER JOIN ckbx_AnalysisTemplate at ON at.ResponseTemplateId = s.ResponseTemplateId
					INNER JOIN ckbx_Template t ON t.TemplateId = at.AnalysisTemplateId
				WHERE 
					' + @DateFieldName + ' > ''' + cast (@StartDate as varchar(100)) + '''
					AND (t.Deleted is NULL OR t.Deleted = 0) '
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
					BEGIN
						IF (@FilterField = 'AnalysisName')
							BEGIN
								SET @Query = @Query + ' AND AnalysisName like ''%'' + @FilterValue + ''%'' '	
							END
					END
									
				SET @Query = @Query+ @OrderBy + '; 

				--Select Rows
				SELECT * FROM 
				(
					SELECT at.*, t.*, ROW_NUMBER() OVER ('+ @OrderBy+') AS NUM
					FROM #orderedResults results 
					INNER JOIN ckbx_AnalysisTemplate at
						on results.AnalysisTemplateID = at.AnalysisTemplateID
					INNER JOIN ckbx_Template t
						on t.TemplateId = at.AnalysisTemplateID
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';
				
				--Select Count
				SELECT COUNT(*) AS TotalItemCount FROM #orderedResults'
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
		END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleAnalysesForSurvey]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleAnalysesForSurvey]
(
	@UniqueIdentifier nvarchar(511),
	@FirstPermissionName varchar(32),
	@SecondPermissionName varchar(32),
	@RequireBothPermissions bit,
	@UseAclExclusion bit,
	@PageNumber int, 
	@ResultsPerPage int,
	@SortField varchar(64),
	@SortAscending bit,
	@FilterField varchar(64),
	@FilterValue nvarchar(255),
	@ResponseTemplateId int
)
AS

	DECLARE @DataKey varchar(64)
	SET @DataKey = 'ListAccessibleAnalyses'
	
	--Clear data
	DELETE FROM ckbx_Security_TempResourceList WHERE DataKey = @DataKey AND spid = @@spid
	
	IF @SecondPermissionName IS NULL OR LEN(@SecondPermissionName) = 0
		BEGIN
			--One permission to check, so do it!
			EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissible
				@UniqueIdentifier,
				'Prezza.Framework.Security.ExtendedPrincipal',
				'ckbx_Template',
				'TemplateId',
				@FirstPermissionName,
				@UseAclExclusion,
				@DataKey
		END
	ELSE
		BEGIN
			IF @RequireBothPermissions = 1
				BEGIN
					EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithBothPermissions
						@UniqueIdentifier,
						'Prezza.Framework.Security.ExtendedPrincipal',
						'ckbx_Template',
						'TemplateId',
						@FirstPermissionName,
						@SecondPermissionName,
						@UseAclExclusion,
						@DataKey
				END
			ELSE
				BEGIN
					EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithEitherPermission
						@UniqueIdentifier,
						'Prezza.Framework.Security.ExtendedPrincipal',
						'ckbx_Template',
						'TemplateId',
						@FirstPermissionName,
						@SecondPermissionName,
						@UseAclExclusion,
						@DataKey
				END
		END
	
	DECLARE @OrderBy varchar(64)
	SET @OrderBy = ' ORDER BY [AnalysisName] ASC '

	IF (@SortField is NOT NULL AND len(@SortField) > 0)
		BEGIN			
			IF @SortAscending = 1
				BEGIN
					SET @OrderBy = ' ORDER BY ['+@SortField+'] ASC'
				END
			ELSE
				BEGIN
					SET @OrderBy = ' ORDER BY ['+@SortField+'] DESC'
				END
		END
	
  	--If not paging, simply return the results
	DECLARE @Query nvarchar(2000)
	DECLARE @QueryParams nvarchar(500)
  
	SET @QueryParams = '@FilterValue nvarchar(255)'
	
		IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT
					at.*,
					t.*
				FROM
					ckbx_Security_TempResourceList trl
					INNER JOIN ckbx_AnalysisTemplate at ON at.AnalysisTemplateId = trl.ResourceId
					INNER JOIN ckbx_Template t ON t.TemplateId = trl.ResourceId
				WHERE 
					at.ResponseTemplateID = '+ cast(@ResponseTemplateId as NVARCHAR)+ ' 
					AND spid = @@spid AND DataKey = '''+@DataKey+'''
					AND (t.Deleted is NULL OR t.Deleted = 0) '
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
					BEGIN
						IF (@FilterField = 'AnalysisName')
							BEGIN
								SET @Query = @Query + ' AND AnalysisName like ''%'' + @FilterValue + ''%'' '	
							END
					END
				SET @Query = @Query + @OrderBy

			--Select results
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			
			--Select count
			SET @Query = '
				SELECT 
					COUNT(AnalysisTemplateID)  AS TotalItemCount
				FROM
					ckbx_Security_TempResourceList trl
					INNER JOIN ckbx_AnalysisTemplate at ON at.AnalysisTemplateId = trl.ResourceId
					INNER JOIN ckbx_Template t ON t.TemplateId = trl.ResourceId
				WHERE 
					at.ResponseTemplateID = '+ cast(@ResponseTemplateId as NVARCHAR)+ '
					AND spid = @@spid AND DataKey = '''+@DataKey+'''
					AND (t.Deleted is NULL OR t.Deleted = 0) '
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
					BEGIN
						IF (@FilterField = 'AnalysisName')
							BEGIN
								SET @Query = @Query + ' AND AnalysisName like ''%'' + @FilterValue + ''%'' '	
							END
					END
			--Select Count
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			
			SELECT @Query = '
			
				IF object_id(''tempdb..#orderedResults'') IS NOT NULL
					BEGIN
						DROP TABLE #orderedResults
					END
				
				CREATE TABLE #orderedResults(AnalysisTemplateID int);
			
				INSERT INTO #orderedResults	
				SELECT
					at.AnalysisTemplateID
				FROM
					ckbx_Security_TempResourceList trl
					INNER JOIN ckbx_AnalysisTemplate at ON at.AnalysisTemplateId = trl.ResourceId
					INNER JOIN ckbx_Template t ON t.TemplateId = trl.ResourceId
				WHERE 
					at.ResponseTemplateID = '+ cast(@ResponseTemplateId as NVARCHAR)+ '
					AND spid = @@spid AND DataKey = '''+@DataKey+'''
					AND (t.Deleted is NULL OR t.Deleted = 0) '
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
					BEGIN
						IF (@FilterField = 'AnalysisName')
							BEGIN
								SET @Query = @Query + ' AND AnalysisName like ''%'' + @FilterValue + ''%'' '	
							END
					END
									
				SET @Query = @Query+ @OrderBy + '; 

				--Select Rows
				SELECT * FROM 
				(
					SELECT at.*, t.*, ROW_NUMBER() OVER ('+ @OrderBy+') AS NUM
					FROM #orderedResults results 
					INNER JOIN ckbx_AnalysisTemplate at
						on results.AnalysisTemplateID = at.AnalysisTemplateID
					INNER JOIN ckbx_Template t
						on t.TemplateId = at.AnalysisTemplateID
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';
				
				--Select Count
				SELECT COUNT(*) AS TotalItemCount FROM #orderedResults'
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
		END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleEmailLists]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleEmailLists]
(
   @UniqueIdentifier nvarchar(511),
   @FirstPermissionName varchar(32),
   @SecondPermissionName varchar(32),
   @RequireBothPermissions bit,
   @UseAclExclusion bit,
   @PageNumber int,
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(255),
   @DisplayCount bit = 1,
   @StartDate datetime = null,
   @DateFieldName varchar(100) = null
)
AS
 DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleEmailLists'

  IF @SecondPermissionName IS NULL OR LEN(@SecondPermissionName) = 0
    BEGIN
		--One permission to check, so do it!
		EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissible
			@UniqueIdentifier,
			'Prezza.Framework.Security.ExtendedPrincipal',
			'ckbx_Panel',
			'PanelId',
			@FirstPermissionName,
			@UseAclExclusion,
			'AccessibleEmailLists'
    END
  ELSE
    BEGIN
		IF @RequireBothPermissions = 1
		  BEGIN
			EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithBothPermissions
				@UniqueIdentifier,
				'Prezza.Framework.Security.ExtendedPrincipal',
				'ckbx_Panel',
				'PanelId',
				@FirstPermissionName,
				@SecondPermissionName,
				@UseAclExclusion,
				'AccessibleEmailLists'
		  END
		ELSE
		  BEGIN
			EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithEitherPermission
				@UniqueIdentifier,
				'Prezza.Framework.Security.ExtendedPrincipal',
				'ckbx_Panel',
				'PanelId',
				@FirstPermissionName,
				@SecondPermissionName,
				@UseAclExclusion,
				'AccessibleEmailLists'
		  END
    END
  
	--Create the order-by clause, if any
    DECLARE @OrderBy varchar(255)

    SET @OrderBy = ' ORDER BY [Name] ASC'

	IF (@SortField is NOT NULL AND len(@SortField) > 0)
		BEGIN	
			IF @SortAscending = 1
				BEGIN
					SET @OrderBy = ' ORDER BY ['+@SortField+'] ASC'
				END
			ELSE
				BEGIN
					SET @OrderBy = ' ORDER BY ['+@SortField+'] DESC'
				END
		END
	
	--Create the filter clause if applicable
	DECLARE @FilterBy varchar(255)
	SET @FilterBy = ''
	IF (LEN(@FilterValue) > 0)
		BEGIN
			if LEN(@FilterField) > 0
			BEGIN
				SET @FilterBy = ' AND f.PanelTypeID = 3 AND ' + @FilterField + ' LIKE ''%'' + @FilterValue + ''%'''
			END
			ELSE
			BEGIN
				--search through all the fields
				SET @FilterBy = ' AND f.PanelTypeID = 3 AND (NAME LIKE ''%'' + @FilterValue + ''%''
					OR [Description] LIKE ''%'' + @FilterValue + ''%''
					OR CreatedBy LIKE ''%'' + @FilterValue + ''%'') 					
				'
			END
		END
	ELSE
		BEGIN
			SET @FilterBy = ' AND f.PanelTypeID = 3 '
		END

	if @DateFieldName is not null and @DateFieldName <> ''
	begin
		set @FilterBy = @FilterBy + ' AND 
			' + @DateFieldName + ' > ''' + cast (@StartDate as varchar(100)) + ''' '
	end


	--If not paging, simply return the results
	DECLARE @Query nvarchar(1000)
	DECLARE @QueryParams nvarchar(500)
  
	SET @QueryParams = '@FilterValue nvarchar(255)'
	
	--Otherwise perform any necessary paging and return results
	IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT
					DISTINCT f.*
				FROM
					ckbx_Security_TempResourceList tmp
					INNER JOIN ckbx_Panel f ON f.PanelId = tmp.ResourceId
				WHERE
					DataKey = ''AccessibleEmailLists'' AND spid = @@spid
				' + @FilterBy + @OrderBy

			--Get Items
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue

			if @DisplayCount = 1
			begin
				--Get Count
				SET @Query = '
					SELECT
						COUNT(DISTINCT f.Name) AS RecordCount
					FROM
						ckbx_Security_TempResourceList tmp
						INNER JOIN ckbx_Panel f ON f.PanelId = tmp.ResourceId
					WHERE
						DataKey = ''AccessibleEmailLists'' AND spid = @@spid
					' + @FilterBy
					
				exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			end
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			IF object_id('tempdb..#orderedResults') IS NOT NULL
				BEGIN
					DROP TABLE #orderedResults
				END

			SELECT @Query = '
				SELECT DISTINCT
					f.*
					INTO #orderedResults
				FROM
					ckbx_Security_TempResourceList tmp
					INNER JOIN ckbx_Panel f ON f.PanelId = tmp.ResourceId
				WHERE
					DataKey = ''AccessibleEmailLists'' AND spid = @@spid
				' + @FilterBy + @OrderBy + ';


                SELECT * FROM 
				(
					SELECT *,ROW_NUMBER() OVER ('+ @OrderBy +') AS NUM
					FROM #orderedResults
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';'
				
				if @DisplayCount = 1 
				begin
					set @Query = @Query + '
					--Select Count
					SELECT COUNT(*) AS RecordCount FROM #orderedResults'
				end

			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue

					
		END

	--Clear temp data
	DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleEmailLists'

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleEmailListsAdmin]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleEmailListsAdmin]
(
   @PageNumber int, 
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(255),
   @DisplayCount bit = 1,
   @StartDate datetime = null,
   @DateFieldName varchar(100) = null   
      
)
AS
	--Create the order-by clause, if any
    DECLARE @OrderBy varchar(255)

    SET @OrderBy = ''

    IF len(@SortField) > 0
	BEGIN
		SET @OrderBy = ' ORDER BY ' + @SortField
	
			IF @SortAscending = 1
				BEGIN
					SET @OrderBy = @OrderBy + ' ASC'
				END
			ELSE
				BEGIN
					SET @OrderBy = @OrderBy + ' DESC'
				END
	END
    ELSE
    	BEGIN
		SET @OrderBy = ' ORDER BY NAME ASC'
	END
	
	--Create the filter clause if applicable
	DECLARE @FilterBy varchar(255)
	SET @FilterBy = ''
	IF (LEN(@FilterValue) > 0)
		BEGIN
			if LEN(@FilterField) > 0
			BEGIN
				SET @FilterBy = ' f.PanelTypeID = 3 AND ' + @FilterField + ' LIKE ''%'' + @FilterValue + ''%'''
			END
			ELSE
			BEGIN
				--search through all the fields
				SET @FilterBy = '  f.PanelTypeID = 3 AND (NAME LIKE ''%'' + @FilterValue + ''%''
					OR [Description] LIKE ''%'' + @FilterValue + ''%''
					OR CreatedBy LIKE ''%'' + @FilterValue + ''%'') 					
				'
			END
		END
	ELSE
		BEGIN
			SET @FilterBy = ' f.PanelTypeID = 3 '
		END

	if @DateFieldName is not null and @DateFieldName <> ''
	begin
		set @FilterBy = @FilterBy + ' AND 
			' + @DateFieldName + ' > ''' + cast (@StartDate as varchar(100)) + ''' '
	end


  --If not paging, simply return the results
  DECLARE @Query nvarchar(2000)
  DECLARE @QueryParams nvarchar(500)
  SET @QueryParams = '@FilterValue nvarchar(255)'

	IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT PanelId
				FROM
					ckbx_Panel f WHERE ' + @FilterBy + @OrderBy;

            						
			--Get Items
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue

			if @DisplayCount = 1
			begin			
				--Get Count
				SET @Query = '
					SELECT COUNT(PanelId) AS RecordCount
					FROM
						ckbx_Panel f WHERE ' + @FilterBy;
					
				exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			end
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			IF object_id('tempdb..#orderedResults') IS NOT NULL
				BEGIN
					DROP TABLE #orderedResults
				END

			SELECT @Query = '
				CREATE TABLE #orderedResults (PanelId INT, ItemIndex INT IDENTITY(1, 1));
			
				INSERT INTO #orderedResults
				SELECT PanelId
				FROM
					ckbx_Panel f WHERE ' + @FilterBy + @OrderBy + ';

				--Select Rows
				SELECT * FROM #orderedResults WHERE ItemIndex BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) 
				
				 
				if @DisplayCount = 1
				begin
					set @Query = @Query + '
					--Select Count
					SELECT COUNT(*) AS RecordCount FROM #orderedResults'
				end

			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
		END
		
	--Clear temp data
	DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleEmailLists'



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleFolders]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleFolders]
(
   @UniqueIdentifier nvarchar(511),
   @FirstPermissionName varchar(32),
   @SecondPermissionName varchar(32),
   @RequireBothPermissions bit,
   @UseAclExclusion bit,
   @PageNumber int, 
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(255),
   @DataKey varchar(64) = null,
   @IncludeInactive bit = 1,
   @IncludeActive bit = 1
)
AS

  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleFolders'

  IF @SecondPermissionName IS NULL OR LEN(@SecondPermissionName) = 0
    BEGIN
		--One permission to check, so do it!
		EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissible
			@UniqueIdentifier,
			'Prezza.Framework.Security.ExtendedPrincipal',
			'ckbx_Folder',
			'FolderId',
			@FirstPermissionName,
			@UseAclExclusion,
			'AccessibleFolders'
    END
  ELSE
    BEGIN
		IF @RequireBothPermissions = 1
		  BEGIN
			EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithBothPermissions
				@UniqueIdentifier,
				'Prezza.Framework.Security.ExtendedPrincipal',
				'ckbx_Folder',
				'FolderId',
				@FirstPermissionName,
				@SecondPermissionName,
				@UseAclExclusion,
				'AccessibleFolders'
		  END
		ELSE
		  BEGIN
			EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithEitherPermission
				@UniqueIdentifier,
				'Prezza.Framework.Security.ExtendedPrincipal',
				'ckbx_Folder',
				'FolderId',
				@FirstPermissionName,
				@SecondPermissionName,
				@UseAclExclusion,
				'AccessibleFolders'
		  END
    END
	
	--Create the order-by clause, if any
    DECLARE @OrderBy varchar(255)
	DECLARE @QueryParams nvarchar(500)
	SET @QueryParams = '@FilterValue nvarchar(255)'

    SET @OrderBy = ' ORDER BY [Name] ASC'

	IF (@SortField IS NOT NULL AND LEN(@SortField) > 0 )
		BEGIN
		-- SET @OrderBy = ' ORDER BY ' + @SortField
		
			IF @SortAscending = 1
				BEGIN
					SET @OrderBy = ' ORDER BY ' + @SortField + ' ASC'
				END
			ELSE
				BEGIN
					SET @OrderBy = ' ORDER BY ' + @SortField + ' DESC'
				END
		END

	--If not paging, simply return the results
	DECLARE @Query nvarchar(1000)
	
		
    --If there is a data key specified, insert data into tmp resource table and skip
    -- any paging since this data is being used to compose another paged data set and 
    -- paging will be handled in that case
    IF len(@DataKey) > 0
        BEGIN
          SET @Query = '
			INSERT INTO ckbx_Security_TempResourceList (spid, DataKey, ResourceId)
			SELECT
				@@spid,
				''' + @DataKey + ''',
				f.FolderId
			FROM
				ckbx_Security_TempResourceList tmp
				INNER JOIN ckbx_Folder f ON f.FolderId = tmp.ResourceId
			WHERE
				DataKey = ''AccessibleFolders'' AND spid = @@spid ' 	
				
			IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
				BEGIN
					IF (@FilterField = 'Name')
						BEGIN
							SET @Query = @Query + ' AND f.Name like ''%'' + @FilterValue + ''%'' '	
						END	
					ELSE IF (@FilterField = 'Id')
						BEGIN
							SET @Query = @Query + ' AND CAST(rt.ResponseTemplateID AS NVARCHAR) = @FilterValue '	
						END
					ELSE IF (@FilterField = 'Guid')
						BEGIN
						
							SET @Query = @Query + ' AND Replace (rt.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '	
						END
					ELSE IF (@FilterField = 'CreatedBy')
						BEGIN
							SET @Query = @Query + ' AND rt.CreatedBy like ''%'' + @FilterValue + ''%'' '	
						END
				END
				
				SET @Query = @Query + @OrderBy

			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			
			--Return
			RETURN;
		END
	
	--Otherwise perform any necessary paging and return results
	IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT
					DISTINCT f.*
				FROM
					ckbx_Security_TempResourceList tmp
					INNER JOIN ckbx_Folder f ON f.FolderId = tmp.ResourceId 
				WHERE
					DataKey = ''AccessibleFolders'' AND spid = @@spid ' 	
								
				SET @Query = @Query + @OrderBy
			EXEC(@Query)
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			IF object_id('tempdb..#orderedResults') IS NOT NULL
				BEGIN
					DROP TABLE #orderedResults
				END

			SELECT @Query = '
				SELECT DISTINCT
					f.*
					INTO #orderedResults
				FROM
					ckbx_Security_TempResourceList tmp
					INNER JOIN ckbx_Folder f ON f.FolderId = tmp.ResourceId 
				WHERE
					DataKey = ''AccessibleFolders'' AND spid = @@spid ' 	
									
				SET @Query = @Query + @OrderBy + ';
				
                SELECT * FROM 
				(
					SELECT *,ROW_NUMBER() OVER ('+ @OrderBy +') AS NUM
					FROM #orderedResults
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';'

			EXEC(@Query)

					
		END

    --Clear temp data
    DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleFolders'

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleGroupMembers]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleGroupMembers]
(
   @UniqueIdentifier nvarchar(511),
   @FirstPermissionName varchar(32),
   @SecondPermissionName varchar(32),
   @RequireBothPermissions bit,
   @UseAclExclusion bit,
   @PageNumber int, 
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(255),
   @DisplayRecordCount bit = 1
)
AS
  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleGroups'

  IF @SecondPermissionName IS NULL OR LEN(@SecondPermissionName) = 0
    BEGIN
		--One permission to check, so do it!
		EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissible
			@UniqueIdentifier,
			'Prezza.Framework.Security.ExtendedPrincipal',
			'ckbx_Group',
			'GroupID',
			@FirstPermissionName,
			@UseAclExclusion,
			'AccessibleGroups'
    END
  ELSE
    BEGIN
		IF @RequireBothPermissions = 1
		  BEGIN
			EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithBothPermissions
				@UniqueIdentifier,
				'Prezza.Framework.Security.ExtendedPrincipal',
				'ckbx_Group',
				'GroupID',
				@FirstPermissionName,
				@SecondPermissionName,
				@UseAclExclusion,
				'AccessibleGroups'
		  END
		ELSE
		  BEGIN
			EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithEitherPermission
				@UniqueIdentifier,
				'Prezza.Framework.Security.ExtendedPrincipal',
				'ckbx_Group',
				'GroupID',
				@FirstPermissionName,
				@SecondPermissionName,
				@UseAclExclusion,
				'AccessibleGroups'
		  END
    END
	
	--Create the order-by clause, if any
    DECLARE @OrderBy varchar(255)

    SET @OrderBy = ' ORDER BY MemberUniqueIdentifier ASC '

	IF len(@SortField) > 0
      BEGIN
        SET @OrderBy = ' ORDER BY ' + @SortField

		IF @SortAscending = 1
			BEGIN
				SET @OrderBy = @OrderBy + ' ASC '
			END
		ELSE
			BEGIN
				SET @OrderBy = @OrderBy + ' DESC '
			END
      END

	--Create the filer clause if applicable
	DECLARE @FilterBy varchar(255)
	SET @FilterBy = ''
	IF (LEN(@FilterValue) > 0 AND LEN(@FilterField) > 0)
	BEGIN
		SET @FilterBy = ' AND ' + @FilterField + ' LIKE ''%'' + @FilterValue + ''%'''
	END


	--If not paging, simply return the results
	DECLARE @Query nvarchar(1000)
	DECLARE @QueryParams nvarchar(500)
  
	SET @QueryParams = '@FilterValue nvarchar(255)'
	
	IF object_id('tempdb..#orderedResults') IS NOT NULL
		BEGIN
			DROP TABLE #orderedResults
		END
		
	--Otherwise perform any necessary paging and return results
	IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT
					DISTINCT m.*, Email
				INTO #orderedResults
				FROM
					ckbx_Security_TempResourceList tmp
					INNER JOIN ckbx_Group f ON f.GroupID = tmp.ResourceId
					INNER JOIN ckbx_GroupMembers m ON m.GroupID = f.GroupID
					LEFT OUTER JOIN ckbx_Credential c ON c.[UniqueIdentifier] = m.MemberUniqueIdentifier
				WHERE
					DataKey = ''AccessibleGroups'' AND spid = @@spid
				' + @FilterBy + @OrderBy + ';
				
				SELECT * FROM #orderedResults;	'
			if @DisplayRecordCount = 1
				set @Query = @Query + ' 
								SELECT COUNT(*) AS RecordCount FROM #orderedResults'

			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			SELECT @Query = '
				SELECT DISTINCT
					m.*
					INTO #orderedResults
				FROM
					ckbx_Security_TempResourceList tmp
					INNER JOIN ckbx_Group f ON f.GroupID = tmp.ResourceId
					INNER JOIN ckbx_GroupMembers m ON m.GroupID = f.GroupID
					LEFT OUTER JOIN ckbx_Credential c ON c.[UniqueIdentifier] = m.MemberUniqueIdentifier
				WHERE
					DataKey = ''AccessibleGroups'' AND spid = @@spid
				' + @FilterBy + @OrderBy + ';

                SELECT * FROM 
				(
					SELECT *,ROW_NUMBER() OVER ('+ @OrderBy+') AS NUM
					FROM #orderedResults
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';'

				if @DisplayRecordCount = 1
					set @Query = @Query + ' 
					SELECT COUNT(*) AS RecordCount FROM #orderedResults'

			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
					
		END

    --Clear temp data

    DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleGroups'


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleGroups]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleGroups]
(
   @UniqueIdentifier nvarchar(511),
   @FirstPermissionName varchar(32),
   @SecondPermissionName varchar(32),
   @RequireBothPermissions bit,
   @UseAclExclusion bit,
   @PageNumber int, 
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(255),
   @IncludeEveryoneGroup bit,
   @StartDate datetime = null,
   @DateFieldName varchar(100) = null,
   @DisplayCount bit = 1   
)
AS
  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleGroups'

  IF @SecondPermissionName IS NULL OR LEN(@SecondPermissionName) = 0
    BEGIN
		--One permission to check, so do it!
		EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissible
			@UniqueIdentifier,
			'Prezza.Framework.Security.ExtendedPrincipal',
			'ckbx_Group',
			'GroupID',
			@FirstPermissionName,
			@UseAclExclusion,
			'AccessibleGroups'
    END
  ELSE
    BEGIN
		IF @RequireBothPermissions = 1
		  BEGIN
			EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithBothPermissions
				@UniqueIdentifier,
				'Prezza.Framework.Security.ExtendedPrincipal',
				'ckbx_Group',
				'GroupID',
				@FirstPermissionName,
				@SecondPermissionName,
				@UseAclExclusion,
				'AccessibleGroups'
		  END
		ELSE
		  BEGIN
			EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithEitherPermission
				@UniqueIdentifier,
				'Prezza.Framework.Security.ExtendedPrincipal',
				'ckbx_Group',
				'GroupID',
				@FirstPermissionName,
				@SecondPermissionName,
				@UseAclExclusion,
				'AccessibleGroups'
		  END
    END
	
	--Create the order-by clause, if any
    DECLARE @OrderBy varchar(255)

    SET @OrderBy = ' ORDER BY GroupName ASC '

	IF len(@SortField) > 0
      BEGIN
        SET @OrderBy = ' ORDER BY ' + @SortField

		IF @SortAscending = 1
			BEGIN
				SET @OrderBy = @OrderBy + ' ASC'
			END
		ELSE
			BEGIN
				SET @OrderBy = @OrderBy + ' DESC'
			END
      END

	--Create the filer clause if applicable
	DECLARE @FilterBy varchar(255)
	SET @FilterBy = ''
	IF (LEN(@FilterValue) > 0)
	BEGIN
		if LEN(@FilterField) > 0 
		begin		
			SET @FilterBy = ' AND ' + @FilterField + ' LIKE ''%'' + @FilterValue + ''%'' '
		end
		else
		begin
			SET @FilterBy = ' AND (GroupName LIKE ''%'' + @FilterValue + ''%'' 
						OR [Description] like ''%'' + @FilterValue + ''%''  
						OR CreatedBy like ''%'' + @FilterValue + ''%'') '
		end
	END

	IF(@IncludeEveryoneGroup != 1)
	BEGIN
		SET @FilterBy = @FilterBy + ' AND GroupId > 1' 
	END
	
	if @DateFieldName is not null and @DateFieldName <> ''
	begin
		SET @FilterBy = @FilterBy + ' AND ' + @DateFieldName + ' > ''' + cast (@StartDate as varchar(100)) + ''' '
	end	

	--If not paging, simply return the results
	DECLARE @Query nvarchar(1000)
	DECLARE @QueryParams nvarchar(500)
  
	SET @QueryParams = '@FilterValue nvarchar(255)'
	
	IF object_id('tempdb..#orderedResults') IS NOT NULL
		BEGIN
			DROP TABLE #orderedResults
		END
		
	--Otherwise perform any necessary paging and return results
	IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT
					DISTINCT f.*
				INTO #orderedResults
				FROM
					ckbx_Security_TempResourceList tmp
					INNER JOIN ckbx_Group f ON f.GroupID = tmp.ResourceId
				WHERE
					DataKey = ''AccessibleGroups'' AND spid = ' + CAST(@@SPID AS VARCHAR)
				+ @FilterBy + @OrderBy + ';
				SELECT * FROM #orderedResults;'

				if @DisplayCount = 1
					set @Query = @Query + '
						SELECT COUNT(*) AS RecordCount FROM #orderedResults'
				
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			SELECT @Query = '
				SELECT DISTINCT
					f.*
					INTO #orderedResults
				FROM
					ckbx_Security_TempResourceList tmp
					INNER JOIN ckbx_Group f ON f.GroupID = tmp.ResourceId
				WHERE
					DataKey = ''AccessibleGroups'' AND spid = ' + CAST(@@SPID AS VARCHAR)
				+ @FilterBy + @OrderBy + ';

                SELECT * FROM 
				(
					SELECT *,ROW_NUMBER() OVER ('+ @OrderBy+') AS NUM
					FROM #orderedResults
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';'
				
				if @DisplayCount = 1
					set @Query = @Query + '
				
				--Select count
				SELECT COUNT(*) AS RecordCount FROM #orderedResults'

			--Select results
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
					
		END

    --Clear temp data
    DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleGroups'

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleInvitations]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleInvitations]
(
   @UniqueIdentifier nvarchar(511),
   @UseAclExclusion bit,
   @PageNumber int, 
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(255)   
)
AS
  --Remove any temp data
  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleInvitations_Forms'
  
  DECLARE @OrderBy varchar(100)

  SET @OrderBy = ' ORDER BY [Name] ASC '
  
	IF (@SortField IS NOT NULL AND LEN(@SortField) > 0 )
	BEGIN
		IF @SortAscending = 1
			BEGIN
				SET @OrderBy = ' ORDER BY [' + @SortField + '] ASC '
			END
		ELSE
			BEGIN
				SET @OrderBy = ' ORDER BY [' + @SortField + '] DESC '
			END
	END

  
  --Populate temp resource table with surveys
  --Pass 0 as ancestor, which means list only surveys in root
  EXEC ckbx_sp_Security_ListAccessibleSurveys @UniqueIdentifier, 'Form.Administer', NULL, 0, @UseAclExclusion, -1, -1, NULL, @SortAscending, NULL, NULL, 0, 'AccessibleInvitations_Forms'

  --If not paging, simply return the results
  DECLARE @Query nvarchar(2000)
  DECLARE @QueryParams nvarchar(500)
  SET @QueryParams = '@FilterValue nvarchar(255)'

	IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT DISTINCT
					inv.InvitationId
				FROM
					ckbx_Security_TempResourceList tmp 
					INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
					INNER JOIN ckbx_Invitation inv ON inv.ResponseTemplateId = rt.ResponseTemplateId '
					
			IF (@FilterField IS NOT NULL AND @FilterField <> '' AND @FilterValue IS NOT NULL AND @FilterValue <> '')
				BEGIN
					IF @FilterField = 'RecipientId'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND CAST(ir.RecipientId AS NVARCHAR) = @FilterValue '
						END
						
						
						
					IF @FilterField = 'RecipientGuid'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND Replace (ir.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '   
						END
						
					IF @FilterField = 'RecipientEmail'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND ir.EmailAddress like ''%'' + @FilterValue + ''%'' '	
						END
				END
				
				SET @Query = @Query + '					
				WHERE
					spid = @@spid
					AND DataKey = ''AccessibleInvitations_Forms'' '
					
				IF (@FilterField IS NOT NULL AND @FilterField <> '' AND @FilterValue IS NOT NULL AND @FilterValue <> '')
					BEGIN
						IF @FilterField = 'Name'
							BEGIN
								SET @Query = @Query + ' AND inv.Name LIKE ''%'' + @FilterValue + ''%'' '
							END
						
						IF @FilterField = 'InvitationId'
							BEGIN
								SET @Query = @Query + ' AND CAST(inv.InvitationId AS NVARCHAR) = @FilterValue '
							END
							
						IF @FilterField = 'CreatedBy'
							BEGIN
								SET @Query = @Query + ' AND inv.CreatedBy LIKE ''%'' + @FilterValue + ''%'' '
							END

					END

			SET @Query = @Query + @OrderBy

			--Select results
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			
			--Select count
			SET @Query = '
				SELECT COUNT(DISTINCT inv.InvitationId) AS TotalItemCount
				FROM
					ckbx_Security_TempResourceList tmp 
					INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
					INNER JOIN ckbx_Invitation inv ON inv.ResponseTemplateId = rt.ResponseTemplateId '

				IF (@FilterField IS NOT NULL AND @FilterField <> '' AND @FilterValue IS NOT NULL AND @FilterValue <> '')
				BEGIN
					IF @FilterField = 'RecipientId'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND CAST(ir.RecipientId AS NVARCHAR) = @FilterValue '
						END
						
						
						
					IF @FilterField = 'RecipientGuid'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND Replace (ir.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '   
						END
						
					IF @FilterField = 'RecipientEmail'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND ir.EmailAddress like  ''%'' + @FilterValue + ''%'' '	
						END
				END
				
				SET @Query = @Query + '		
				WHERE
					spid = @@spid
					AND DataKey = ''AccessibleInvitations_Forms'' '

				IF (@FilterField IS NOT NULL AND @FilterField <> '' AND @FilterValue IS NOT NULL AND @FilterValue <> '')
					BEGIN
						IF @FilterField = 'Name'
							BEGIN
								SET @Query = @Query + ' AND inv.Name LIKE ''%'' + @FilterValue + ''%'' '
							END
						
						IF @FilterField = 'InvitationId'
							BEGIN
								SET @Query = @Query + ' AND CAST(inv.InvitationId AS NVARCHAR) = @FilterValue '
							END
							
						IF @FilterField = 'CreatedBy'
							BEGIN
								SET @Query = @Query + ' AND inv.CreatedBy LIKE ''%'' + @FilterValue + ''%'' '
							END

					END
						
			--Select Count
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			IF object_id('tempdb..#orderedResults') IS NOT NULL
				BEGIN
					DROP TABLE #orderedResults
				END

			SELECT @Query = '
				SELECT
					inv.InvitationId
				FROM
					ckbx_Security_TempResourceList tmp 
					INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
					INNER JOIN ckbx_Invitation inv ON inv.ResponseTemplateId = rt.ResponseTemplateId '

				IF (@FilterField IS NOT NULL AND @FilterField <> '' AND @FilterValue IS NOT NULL AND @FilterValue <> '')
				BEGIN
					IF @FilterField = 'RecipientId'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND CAST(ir.RecipientId AS NVARCHAR) = @FilterValue '
						END
						
						
						
					IF @FilterField = 'RecipientGuid'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND Replace (ir.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '   
						END
						
					IF @FilterField = 'RecipientEmail'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND ir.EmailAddress like  ''%'' + @FilterValue + ''%'' '	
						END
				END
				
				SET @Query = @Query + '		
				WHERE
					spid = @@spid
					AND DataKey = ''AccessibleInvitations_Forms'' '


				IF (@FilterField IS NOT NULL AND @FilterField <> '' AND @FilterValue IS NOT NULL AND @FilterValue <> '')
					BEGIN
						IF @FilterField = 'Name'
							BEGIN
								SET @Query = @Query + ' AND inv.Name LIKE ''%'' + @FilterValue + ''%'' '
							END
						
						IF @FilterField = 'InvitationId'
							BEGIN
								SET @Query = @Query + ' AND CAST(inv.InvitationId AS NVARCHAR) = @FilterValue '
							END
							
						IF @FilterField = 'CreatedBy'
							BEGIN
								SET @Query = @Query + ' AND inv.CreatedBy LIKE ''%'' + @FilterValue + ''%'' '
							END
					END					
					
								
				SET @Query = @Query + @OrderBy + '

                SELECT * FROM 
				(
					SELECT *,ROW_NUMBER() OVER ('+ @OrderBy +') AS NUM
					FROM #orderedResults
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';
				
				--Select Count
				SELECT COUNT(*) AS TotalItemCount FROM #orderedResults'

				exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue

					
		END

  --Remove any temp data
  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleInvitations_Forms'


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleInvitationsAdmin]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleInvitationsAdmin]
(
   @PageNumber int, 
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(255)   
)
AS
  DECLARE @OrderBy varchar(100)
  
  SET @OrderBy = ' ORDER BY [Name] ASC '
  
	IF (@SortField IS NOT NULL AND LEN(@SortField) > 0 )
	BEGIN
		IF @SortAscending = 1
			BEGIN
				SET @OrderBy = ' ORDER BY [' + @SortField + '] ASC '
			END
		ELSE
			BEGIN
				SET @OrderBy = ' ORDER BY [' + @SortField + '] DESC '
			END
	END

  --If not paging, simply return the results
  DECLARE @Query nvarchar(2000)
  DECLARE @QueryParams nvarchar(500)
  SET @QueryParams = '@FilterValue nvarchar(255)'

	IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT DISTINCT
					inv.InvitationId
				FROM
					ckbx_ResponseTemplate rt
					INNER JOIN ckbx_Invitation inv ON inv.ResponseTemplateId = rt.ResponseTemplateId '
					
			IF (@FilterField IS NOT NULL AND @FilterField <> '' AND @FilterValue IS NOT NULL AND @FilterValue <> '')
				BEGIN
					IF @FilterField = 'RecipientId'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND CAST(ir.RecipientId AS NVARCHAR) = @FilterValue '
						END
						
						
						
					IF @FilterField = 'RecipientGuid'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND Replace (ir.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '   
						END
						
					IF @FilterField = 'RecipientEmail'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND ir.EmailAddress like  ''%'' + @FilterValue + ''%'' '	
						END
				END
				
					
				IF (@FilterField IS NOT NULL AND @FilterField <> '' AND @FilterValue IS NOT NULL AND @FilterValue <> '')
					BEGIN
						IF @FilterField = 'Name'
							BEGIN
								SET @Query = @Query + ' AND inv.Name LIKE ''%'' + @FilterValue + ''%'' '
							END
						
						IF @FilterField = 'InvitationId'
							BEGIN
								SET @Query = @Query + ' AND CAST(inv.InvitationId AS NVARCHAR) = @FilterValue '
							END
							
						IF @FilterField = 'CreatedBy'
							BEGIN
								SET @Query = @Query + ' AND inv.CreatedBy LIKE ''%'' + @FilterValue + ''%'' '
							END
					END

				SET @Query = @Query + @OrderBy

			--Select results
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			
			--Select count
			SET @Query = '
				SELECT COUNT(DISTINCT inv.InvitationId) AS TotalItemCount
				FROM
					ckbx_ResponseTemplate rt
					INNER JOIN ckbx_Invitation inv ON inv.ResponseTemplateId = rt.ResponseTemplateId '

				IF (@FilterField IS NOT NULL AND @FilterField <> '' AND @FilterValue IS NOT NULL AND @FilterValue <> '')
				BEGIN
					IF @FilterField = 'RecipientId'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND CAST(ir.RecipientId AS NVARCHAR) = @FilterValue '
						END
						
						
						
					IF @FilterField = 'RecipientGuid'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND Replace (ir.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '   
						END
						
					IF @FilterField = 'RecipientEmail'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND ir.EmailAddress like  ''%'' + @FilterValue + ''%'' '	
						END
				END

				IF (@FilterField IS NOT NULL AND @FilterField <> '' AND @FilterValue IS NOT NULL AND @FilterValue <> '')
					BEGIN
						IF @FilterField = 'Name'
							BEGIN
								SET @Query = @Query + ' AND inv.Name LIKE ''%'' + @FilterValue + ''%'' '
							END
						
						IF @FilterField = 'InvitationId'
							BEGIN
								SET @Query = @Query + ' AND CAST(inv.InvitationId AS NVARCHAR) = @FilterValue '
							END
							
						IF @FilterField = 'CreatedBy'
							BEGIN
								SET @Query = @Query + ' AND inv.CreatedBy LIKE ''%'' + @FilterValue + ''%'' '
							END
					END
						
			--Select Count
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			IF object_id('tempdb..#orderedResults') IS NOT NULL
				BEGIN
					DROP TABLE #orderedResults
				END

			SELECT @Query = '
				SELECT
					inv.InvitationId
				FROM
					ckbx_ResponseTemplate rt
					INNER JOIN ckbx_Invitation inv ON inv.ResponseTemplateId = rt.ResponseTemplateId '

				IF (@FilterField IS NOT NULL AND @FilterField <> '' AND @FilterValue IS NOT NULL AND @FilterValue <> '')
				BEGIN
					IF @FilterField = 'RecipientId'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND CAST(ir.RecipientId AS NVARCHAR) = @FilterValue '
						END
						
						
						
					IF @FilterField = 'RecipientGuid'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND Replace (ir.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '   
						END
						
					IF @FilterField = 'RecipientEmail'
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_InvitationRecipients ir 
														ON ir.InvitationId = inv.InvitationId
														AND ir.EmailAddress like  ''%'' + @FilterValue + ''%'' '	
						END
				END
			
				IF (@FilterField IS NOT NULL AND @FilterField <> '' AND @FilterValue IS NOT NULL AND @FilterValue <> '')
					BEGIN
						IF @FilterField = 'Name'
							BEGIN
								SET @Query = @Query + ' AND inv.Name LIKE ''%'' + @FilterValue + ''%'' '
							END
						
						IF @FilterField = 'InvitationId'
							BEGIN
								SET @Query = @Query + ' AND CAST(inv.InvitationId AS NVARCHAR) = @FilterValue '
							END
							
						IF @FilterField = 'CreatedBy'
							BEGIN
								SET @Query = @Query + ' AND inv.CreatedBy LIKE ''%'' + @FilterValue + ''%'' '
							END

					END										
					
				SET @Query = @Query + @OrderBy + '

                SELECT * FROM 
				(
					SELECT *,ROW_NUMBER() OVER ('+ @OrderBy +') AS NUM
					FROM #orderedResults
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';
				
				--Select Count
				SELECT COUNT(*) AS TotalItemCount FROM #orderedResults'

			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue

		END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleItemLibraries]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleItemLibraries]
(
   @UniqueIdentifier nvarchar(511),
   @FirstPermissionName varchar(32),
   @SecondPermissionName varchar(32),
   @RequireBothPermissions bit,
   @UseAclExclusion bit,
   @PageNumber int, 
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(255)   
)
AS

	--Remove any temp data
	DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleLibraries'

	DECLARE @StartRow int
	DECLARE @EndRow int
	DECLARE @OrderBy varchar(100)
	DECLARE @FilterString varchar(64)
  
	  SET @OrderBy = ' ORDER BY [TextValue] ASC '
  
  		IF @SortField = 'Name'
			BEGIN
				SET @SortField = 'TextValue'
			END

		IF (@SortField IS NOT NULL AND LEN(@SortField) > 0 )
		BEGIN
			IF @SortAscending = 1
				BEGIN
					SET @OrderBy = ' ORDER BY [' + @SortField + '] ASC '
				END
			ELSE
				BEGIN
					SET @OrderBy = ' ORDER BY [' + @SortField + '] DESC '
				END
		END


	SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1;
	SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10;

	  IF @SecondPermissionName IS NULL OR LEN(@SecondPermissionName) = 0
		BEGIN
			--One permission to check, so do it!
			EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissible
							@UniqueIdentifier,
							'Prezza.Framework.Security.ExtendedPrincipal',
							'ckbx_Template',
							'TemplateId',
							@FirstPermissionName,
							@UseAclExclusion,
							'AccessibleLibraries'
		END
	  ELSE
		BEGIN
			IF @RequireBothPermissions = 1
			  BEGIN
				EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithBothPermissions
								@UniqueIdentifier,
								'Prezza.Framework.Security.ExtendedPrincipal',
								'ckbx_Template',
								'TemplateId',
								@FirstPermissionName,
								@SecondPermissionName,
								@UseAclExclusion,
								'AccessibleLibraries'
			  END
			ELSE
			  BEGIN
				EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithEitherPermission
								@UniqueIdentifier,
								'Prezza.Framework.Security.ExtendedPrincipal',
								'ckbx_Template',
								'TemplateId',
								@FirstPermissionName,
								@SecondPermissionName,
								@UseAclExclusion,
								'AccessibleLibraries'
			  END
		END

	IF object_id('tempdb..#orderedResults') IS NOT NULL
		BEGIN
			DROP TABLE #orderedResults
		END

	-- Return paged/filtered results
	DECLARE @Query varchar(2000)

	SELECT
		  lt.*
	INTO
		  #orderedResults
	FROM
		  ckbx_Security_TempResourceList temp
		  INNER JOIN
				ckbx_LibraryTemplate lt
		  ON
				lt.LibraryTemplateId = temp.ResourceId AND temp.spid = @@spid
		  INNER JOIN
				ckbx_Template t
		  ON
				t.TemplateID = lt.LibraryTemplateID
		  WHERE
				(t.Deleted IS NULL OR (t.Deleted IS NOT NULL AND t.Deleted = 0))
				AND DataKey = 'AccessibleLibraries' AND spid = @@spid
            

	SET @Query = '
			SELECT * FROM
			(
				SELECT *, ROW_NUMBER() OVER ('+ @OrderBy +') AS NUM
				FROM 
				(
					SELECT 
						#orderedResults.LibraryTemplateID, 
						#orderedResults.NameTextID,
						#orderedResults.DescriptionTextID,
						CAST(ckbx_Text.TextValue AS VARCHAR(255)) AS TextValue
					FROM 
						#orderedResults 
					INNER JOIN 
						ckbx_Text ON #orderedResults.NameTextID = ckbx_Text.TextID
				) as InnerOrderedResults
			) as OuterOrderedResults
			WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';'

	/********************************************************************
	* We are suspending work on filtering/sorting due to time constraints
	  TODO:

	-- Filtering
	IF @FilterValue IS NOT NULL AND LEN(@FilterValue) > 0
		BEGIN
			SET @Query = @Query + ' AND ' + @FilterField + ' LIKE ''%' + @FilterValue + '%'''
		END
	*/
	-- Sorting

	SET @Query = @Query + ' SELECT COUNT(*) AS TotalItemCount FROM #orderedResults;'

	--PRINT (@Query);

	EXEC(@Query);

	--Remove any temp data
	DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleLibraries';

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleItemLibrariesAdmin]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleItemLibrariesAdmin]
(
   @PageNumber int, 
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(255)   
)
AS
  DECLARE @OrderBy varchar(100)
  
  SET @OrderBy = ' ORDER BY [TextValue] ASC '
  
	IF @SortField = 'Name'
		BEGIN
			SET @SortField = 'TextValue'
		END

	IF (@SortField IS NOT NULL AND LEN(@SortField) > 0 )
	BEGIN
		IF @SortAscending = 1
			BEGIN
				SET @OrderBy = ' ORDER BY [' + @SortField + '] ASC '
			END
		ELSE
			BEGIN
				SET @OrderBy = ' ORDER BY [' + @SortField + '] DESC '
			END
	END

  --If not paging, simply return the results
  DECLARE @Query nvarchar(2000)
  DECLARE @QueryParams nvarchar(500)
  SET @QueryParams = '@FilterValue nvarchar(255)'

	IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT
					lt.LibraryTemplateID, CAST(ckbx_Text.TextValue AS VARCHAR(255)) AS TextValue
				FROM
					ckbx_Text
					INNER JOIN ckbx_LibraryTemplate lt ON lt.NameTextID = ckbx_Text.TextID
					INNER JOIN ckbx_Template t ON t.TemplateID = lt.LibraryTemplateID
					WHERE
						(t.Deleted IS NULL OR (t.Deleted IS NOT NULL AND t.Deleted = 0))'
            						
				IF (@FilterField IS NOT NULL AND @FilterField <> '' AND @FilterValue IS NOT NULL AND @FilterValue <> '')
					BEGIN
						IF @FilterField = 'Name'
							BEGIN
								SET @Query = @Query + ' AND TextValue LIKE ''%'' + @FilterValue + ''%'' '
							END
					END

			SET @Query = @Query + @OrderBy

			--Select results
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			
			--Select count
			SET @Query = '
				SELECT COUNT(it.ItemID) AS TotalItemCount, CAST(ckbx_Text.TextValue AS VARCHAR(255)) AS TextValue
				FROM
					ckbx_Template_Items it
					INNER JOIN ckbx_LibraryTemplate lt ON lt.LibraryTemplateID = it.TemplateID 
					INNER JOIN ckbx_Text ON lt.NameTextID = ckbx_Text.TextID
					INNER JOIN ckbx_Template t ON t.TemplateID = lt.LibraryTemplateID
					WHERE
						(t.Deleted IS NULL OR (t.Deleted IS NOT NULL AND t.Deleted = 0))'

				IF (@FilterField IS NOT NULL AND @FilterField <> '' AND @FilterValue IS NOT NULL AND @FilterValue <> '')
					BEGIN
						IF @FilterField = 'Name'
							BEGIN
								SET @Query = @Query + ' AND TextValue LIKE ''%'' + @FilterValue + ''%'' '
							END
					END
						
			--Select Count
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			IF object_id('tempdb..#orderedResults') IS NOT NULL
				BEGIN
					DROP TABLE #orderedResults
				END

			SET @Query = '
				SELECT
					lt.LibraryTemplateID, CAST(ckbx_Text.TextValue AS VARCHAR(255)) AS TextValue
                    INTO #orderedResults
				FROM
					ckbx_Text
					INNER JOIN ckbx_LibraryTemplate lt ON lt.NameTextID = ckbx_Text.TextID
					INNER JOIN ckbx_Template t ON t.TemplateID = lt.LibraryTemplateID
					WHERE
						(t.Deleted IS NULL OR (t.Deleted IS NOT NULL AND t.Deleted = 0))'
										
				IF (@FilterField IS NOT NULL AND @FilterField <> '' AND @FilterValue IS NOT NULL AND @FilterValue <> '')
					BEGIN
						IF @FilterField = 'Name'
							BEGIN
								SET @Query = @Query + ' AND TextValue LIKE ''%'' + @FilterValue + ''%'' '
							END
					END					
					
			SET @Query = @Query + @OrderBy + '

                SELECT * FROM 
				(
					SELECT *,ROW_NUMBER() OVER ('+ @OrderBy +') AS NUM
					FROM #orderedResults
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';
			
			--Select Count
			SELECT COUNT(*) AS TotalItemCount FROM #orderedResults'

			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
		END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleSurveys]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleSurveys]
(
   @UniqueIdentifier nvarchar(611),
   @FirstPermissionName varchar(32),
   @SecondPermissionName varchar(32),
   @RequireBothPermissions bit,
   @UseAclExclusion bit,
   @PageNumber int, 
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(611),
   @AncestorFolder int,
   @DataKey varchar(64) = null,
   @DisplayCount bit = 1,
   @StartDate datetime = null,
   @EndDate datetime = null,   
   @DateFieldName nvarchar(255) = null,
   @IncludeInactive bit = 1,
   @IncludeActive bit = 1
)
AS
  --Clear temp data
  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleSurveys'
 
  IF @SecondPermissionName IS NULL OR LEN(@SecondPermissionName) = 0
    BEGIN
		--One permission to check, so do it!
		EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissible
			@UniqueIdentifier,
			'Prezza.Framework.Security.ExtendedPrincipal',
			'ckbx_Template',
			'TemplateId',
			@FirstPermissionName,
			@UseAclExclusion,
			'AccessibleSurveys'
    END
  ELSE
    BEGIN
		IF @RequireBothPermissions = 1
		  BEGIN
			EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithBothPermissions
				@UniqueIdentifier,
				'Prezza.Framework.Security.ExtendedPrincipal',
				'ckbx_Template',
				'TemplateId',
				@FirstPermissionName,
				@SecondPermissionName,
				@UseAclExclusion,
				'AccessibleSurveys'
		  END
		ELSE
		  BEGIN
			EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithEitherPermission
				@UniqueIdentifier,
				'Prezza.Framework.Security.ExtendedPrincipal',
				'ckbx_Template',
				'TemplateId',
				@FirstPermissionName,
				@SecondPermissionName,
				@UseAclExclusion,
				'AccessibleSurveys'
		  END
    END
  
	DECLARE @OrderBy varchar(100)

	SET @OrderBy = ' ORDER BY [TemplateName] ASC '

	--Modify sort field, if necessary
	IF @SortField = 'ItemName'
		BEGIN
			SET @SortField = 'TemplateName'
		END

  	--Create the order-by clause, if any
	IF (@SortField IS NOT NULL AND LEN(@SortField) > 0)
		BEGIN
		IF @SortAscending = 1
			BEGIN
				SET @OrderBy = ' ORDER BY [' + @SortField + '] ASC '
			END
		ELSE
			BEGIN
				SET @OrderBy = ' ORDER BY [' + @SortField + '] DESC '
			END
	END
        
	--If not paging, simply return the results
	DECLARE @Query nvarchar(3000)
	DECLARE @QueryParams nvarchar(500)
	SET @QueryParams = '@FilterValue nvarchar(611)'
	
    --If there is a data key specified, insert data into tmp resource table and skip
    -- any paging since this data is being used to compose another paged data set and 
    -- paging will be handled in that case
    IF len(@DataKey) > 0
        BEGIN
          SET @Query = '
			INSERT INTO ckbx_Security_TempResourceList (spid, DataKey, ResourceId)
			SELECT
				@@spid,
				''' + @DataKey + ''',
				rt.ResponseTemplateId
			FROM
				ckbx_Security_TempResourceList tmp
				INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
				INNER JOIN ckbx_Template t ON t.TemplateId = rt.ResponseTemplateId '
			IF @AncestorFolder = 0
				BEGIN
					SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON ff.ItemId = t.TemplateId AND ff.AncestorId IS NULL '
				END
			ELSE
				BEGIN
					IF @AncestorFolder IS NOT NULL
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON ff.ItemId = t.TemplateId AND ff.AncestorId = ' + CAST(@AncestorFolder AS VARCHAR(9))
						END
					ELSE
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON rt.ResponseTemplateId = ff.ItemId'
						END
				END
			SET @Query = @Query + '

			WHERE
				(t.Deleted IS NULL OR t.Deleted = 0)
				AND DataKey = ''AccessibleSurveys'' AND spid = @@spid '
				
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
					BEGIN
						IF (@FilterField = 'Name')
							BEGIN
								SET @Query = @Query + ' AND rt.TemplateName like ''%'' + @FilterValue + ''%'' '	
							END	
						ELSE IF (@FilterField = 'Id')
							BEGIN
								SET @Query = @Query + ' AND CAST(rt.ResponseTemplateID AS NVARCHAR) = @FilterValue '	
							END
						ELSE IF (@FilterField = 'Guid')
							BEGIN
							
								SET @Query = @Query + ' AND Replace (rt.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '	
							END
						ELSE IF (@FilterField = 'CreatedBy')
							BEGIN
								SET @Query = @Query + ' AND rt.CreatedBy like ''%'' + @FilterValue + ''%'' '	
							END
					END

				IF (@IncludeInactive = 0)
					BEGIN
						SET @Query = @Query + ' AND rt.IsActive <> 0 '							
					END

				IF (@IncludeActive = 0)
					BEGIN
						SET @Query = @Query + ' AND rt.IsActive <> 1 '							
					END

				SET @Query = @Query + @OrderBy

			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue

			RETURN
		END
		
	--Otherwise, perform any necessary paging and return result set
	IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT
					DISTINCT rt.*
				FROM
					ckbx_Security_TempResourceList tmp
					INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
					INNER JOIN ckbx_Template t ON t.TemplateId = rt.ResponseTemplateId '
			IF @AncestorFolder = 0
				BEGIN
					SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON ff.ItemId = t.TemplateId AND ff.AncestorId IS NULL '
				END
			ELSE
				BEGIN
					IF @AncestorFolder IS NOT NULL
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON ff.ItemId = t.TemplateId AND ff.AncestorId = ' + CAST(@AncestorFolder AS VARCHAR(9))
						END
					ELSE
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON rt.ResponseTemplateId = ff.ItemId '					
						END
				END
				
			SET @Query = @Query + '
				WHERE
				(t.Deleted IS NULL OR t.Deleted = 0)
				AND DataKey = ''AccessibleSurveys'' AND spid = @@spid '
				
                --admin timeline filter
				IF (@StartDate IS NOT NULL AND @EndDate IS NOT NULL)
					BEGIN
						SET @Query = @Query + ' AND (t.' + @DateFieldName + ' BETWEEN ''' + CAST(@StartDate as VARCHAR) + ''' AND ''' + CAST(@EndDate as VARCHAR) + ''')'  
					END

				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
				BEGIN
					IF (@FilterField = 'Name')
						BEGIN
							SET @Query = @Query + ' AND rt.TemplateName like ''%'' + @FilterValue + ''%'' '	
						END	
					ELSE IF (@FilterField = 'Id')
						BEGIN
							SET @Query = @Query + ' AND CAST(rt.ResponseTemplateID AS NVARCHAR) = @FilterValue '	
						END
					ELSE IF (@FilterField = 'Guid')
						BEGIN
						
							SET @Query = @Query + ' AND Replace (rt.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '	
						END
					ELSE IF (@FilterField = 'CreatedBy')
						BEGIN
							SET @Query = @Query + ' AND rt.CreatedBy like ''%'' + @FilterValue + ''%'' '	
						END
				END

				IF (@IncludeInactive = 0)
					BEGIN
						SET @Query = @Query + ' AND rt.IsActive <> 0 '							
					END

				IF (@IncludeActive = 0)
					BEGIN
						SET @Query = @Query + ' AND rt.IsActive <> 1 '							
					END
				
				SET @Query = @Query + @OrderBy
				
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			
			if @DisplayCount = 1
			begin
				--Now select count
				SET @Query = '
					SELECT
						COUNT(DISTINCT rt.ResponseTemplateId) AS TotalItemCount
					FROM
						ckbx_Security_TempResourceList tmp
						INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
						INNER JOIN ckbx_Template t ON t.TemplateId = rt.ResponseTemplateId '
				IF @AncestorFolder = 0
					BEGIN
						SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON ff.ItemId = t.TemplateId AND ff.AncestorId IS NULL '
					END
				ELSE
					BEGIN
						IF @AncestorFolder IS NOT NULL
							BEGIN
								SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON ff.ItemId = t.TemplateId AND ff.AncestorId = ' + CAST(@AncestorFolder AS VARCHAR(9))
							END
						ELSE
							BEGIN
								SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON rt.ResponseTemplateId = ff.ItemId'
							END
					END
					
				SET @Query = @Query + '
					WHERE
					(t.Deleted IS NULL OR t.Deleted = 0)
					AND DataKey = ''AccessibleSurveys'' AND spid = @@spid '
					
					IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
					BEGIN
						IF (@FilterField = 'Name')
							BEGIN
								SET @Query = @Query + ' AND rt.TemplateName like ''%'' + @FilterValue + ''%'' '	
							END	
						ELSE IF (@FilterField = 'Id')
							BEGIN
								SET @Query = @Query + ' AND CAST(rt.ResponseTemplateID AS NVARCHAR) = @FilterValue '	
							END
						ELSE IF (@FilterField = 'Guid')
							BEGIN
								SET @Query = @Query + ' AND Replace (rt.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '	
							END
						ELSE IF (@FilterField = 'CreatedBy')
							BEGIN
								SET @Query = @Query + ' AND rt.CreatedBy like ''%'' + @FilterValue + ''%'' '	
							END
					END

					IF (@IncludeInactive = 0)
						BEGIN
							SET @Query = @Query + ' AND rt.IsActive <> 0 '							
						END

					IF (@IncludeActive = 0)
						BEGIN
							SET @Query = @Query + ' AND rt.IsActive <> 1 '							
						END

				exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			end
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			IF object_id('tempdb..#orderedResults') IS NOT NULL
				BEGIN
					DROP TABLE #orderedResults
				END

			SELECT @Query = '
				SELECT DISTINCT
					rt.*
					INTO #orderedResults
				FROM
					ckbx_Security_TempResourceList tmp
					INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
					INNER JOIN ckbx_Template t ON t.TemplateId = rt.ResponseTemplateId '
			IF @AncestorFolder = 0
				BEGIN
					SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON ff.ItemId = t.TemplateId AND ff.AncestorId IS NULL '
				END
			ELSE
				BEGIN
					IF @AncestorFolder IS NOT NULL
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON ff.ItemId = t.TemplateId AND ff.AncestorId = ' + CAST(@AncestorFolder AS VARCHAR(9))
						END
					ELSE
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON rt.ResponseTemplateId = ff.ItemId '
						END

				END
				
			SET @Query = @Query + '
				WHERE
					(t.Deleted IS NULL OR t.Deleted = 0)
					AND DataKey = ''AccessibleSurveys'' AND spid = @@spid '
				
                --admin timeline filter
				IF (@StartDate IS NOT NULL AND @EndDate IS NOT NULL)
					BEGIN
						SET @Query = @Query + ' AND (t.' + @DateFieldName + ' BETWEEN ''' + CAST(@StartDate as VARCHAR) + ''' AND ''' + CAST(@EndDate as VARCHAR) + ''')'  
					END
                
                IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
				BEGIN
					IF (@FilterField = 'Name')
						BEGIN
							SET @Query = @Query + ' AND rt.TemplateName like ''%'' + @FilterValue + ''%'' '	
						END	
					ELSE IF (@FilterField = 'Id')
						BEGIN
							SET @Query = @Query + ' AND CAST(rt.ResponseTemplateID AS NVARCHAR) = @FilterValue '	
						END
					ELSE IF (@FilterField = 'Guid')
						BEGIN
							SET @Query = @Query + ' AND Replace (rt.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '	
						END
					ELSE IF (@FilterField = 'CreatedBy')
						BEGIN
							SET @Query = @Query + ' AND rt.CreatedBy like ''%'' + @FilterValue + ''%'' '	
						END
				END
				
				IF (@IncludeInactive = 0)
					BEGIN
						SET @Query = @Query + ' AND rt.IsActive <> 0 '							
					END

				IF (@IncludeActive = 0)
					BEGIN
						SET @Query = @Query + ' AND rt.IsActive <> 1 '							
					END

				SET @Query = @Query +  @OrderBy + ';

                SELECT * FROM 
				(
					SELECT *,ROW_NUMBER() OVER ('+ @OrderBy +') AS NUM
					FROM #orderedResults
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';'
				
				if @DisplayCount = 1
				begin
					SET @Query = @Query + '--Select count
					SELECT COUNT(ResponseTemplateId) AS TotalItemCount FROM #orderedResults'
				end

			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
		END

    --Clear temp data
    DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleSurveys'

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleSurveysAdmin]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleSurveysAdmin]
(
   @PageNumber int,
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(611),
   @AncestorFolder int,
   @DisplayCount bit = 1,
   @StartDate datetime = null,
   @EndDate datetime = null,   
   @DateFieldName nvarchar(255) = null,
   @IncludeInactive bit = 1,
   @IncludeActive bit = 1
)
AS
	DECLARE @OrderBy varchar(100)
	
	SET @OrderBy = ' ORDER BY [TemplateName] ASC '

	--Modify sort field, if necessary
	IF @SortField = 'ItemName'
		BEGIN
			SET @SortField = 'TemplateName'
		END

  	--Create the order-by clause, if any
	IF (@SortField IS NOT NULL AND LEN(@SortField) > 0)
		BEGIN
		IF @SortAscending = 1
			BEGIN
				SET @OrderBy = ' ORDER BY '+  @SortField + ' ASC ' 
			END
		ELSE
			BEGIN
				SET @OrderBy = ' ORDER BY '+  @SortField + ' DESC '
			END
	END
        
	--If not paging, simply return the results
	DECLARE @Query nvarchar(3000)
	DECLARE @QueryParams nvarchar(500)
	SET @QueryParams = '@FilterValue nvarchar(611)'
	
	IF (@PageNumber <= 0 OR @ResultsPerPage <= 0)
		BEGIN
			SET @Query = '  
                        SELECT
                              rt.*
                        FROM
                              ckbx_Responsetemplate rt
                              INNER JOIN ckbx_Template t ON t.TemplateId = rt.ResponseTemplateId '

			IF @AncestorFolder = 0
				BEGIN
					SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON ff.ItemId = t.TemplateId AND ff.AncestorId IS NULL '
				END
			ELSE
				BEGIN
					IF @AncestorFolder IS NOT NULL
						BEGIN
							SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON ff.ItemId = t.TemplateId AND ff.AncestorId = ' + CAST(@AncestorFolder AS VARCHAR(9))
						END
				END
				
                         SET @Query = @Query + '
			 WHERE
                              (t.Deleted IS NULL OR t.Deleted = 0) '
			
            --admin timeline filter
			IF (@StartDate IS NOT NULL AND @EndDate IS NOT NULL)
				BEGIN
						SET @Query = @Query + ' AND (t.' + @DateFieldName + ' BETWEEN ''' + CAST(@StartDate as VARCHAR) + ''' AND ''' + CAST(@EndDate as VARCHAR) + ''')'  
				END
            
            --Filter results
			IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
				BEGIN
					IF (@FilterField = 'Name')
						BEGIN
							SET @Query = @Query + ' AND rt.TemplateName like ''%'' + @FilterValue + ''%'' '  
						END   
					ELSE IF (@FilterField = 'Id')
						BEGIN
							SET @Query = @Query + ' AND CAST(rt.ResponseTemplateID AS NVARCHAR) = @FilterValue '   
						END
					ELSE IF (@FilterField = 'Guid')
						BEGIN
							SET @Query = @Query + ' AND Replace (rt.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '
						END
					ELSE IF (@FilterField = 'CreatedBy')
						BEGIN
							SET @Query = @Query + ' AND rt.CreatedBy like ''%'' + @FilterValue + ''%'' ' 
						END
				END
			
			IF (@IncludeInactive = 0)
				BEGIN
					SET @Query = @Query + ' AND rt.IsActive <> 0 '							
				END

			IF (@IncludeActive = 0)
				BEGIN
					SET @Query = @Query + ' AND rt.IsActive <> 1 '							
				END

			--Sort results	
			SET @Query = @Query + @OrderBy
			
			--Select results
			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			
			if @DisplayCount = 1
			begin
				--Select count
                  		SET @Query = '
							SELECT
								  COUNT(rt.ResponseTemplateId) AS TotalItemCount
							FROM
								  ckbx_Responsetemplate rt
								  INNER JOIN ckbx_Template t ON t.TemplateId = rt.ResponseTemplateId '
				IF @AncestorFolder = 0
					BEGIN
						SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON ff.ItemId = t.TemplateId AND ff.AncestorId IS NULL '
					END
				ELSE
					BEGIN
						IF @AncestorFolder IS NOT NULL
							BEGIN
								SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON ff.ItemId = t.TemplateId AND ff.AncestorId = ' + CAST(@AncestorFolder AS VARCHAR(9))
							END
					END
					
				SET @Query = @Query + '
				WHERE
								  (t.Deleted IS NULL OR t.Deleted = 0) '
				--Filter results
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
					BEGIN
						IF (@FilterField = 'Name')
							BEGIN
								SET @Query = @Query + ' AND rt.TemplateName like ''%'' + @FilterValue + ''%'' '  
							END
						ELSE IF (@FilterField = 'Id')
							BEGIN
								SET @Query = @Query + ' AND CAST(rt.ResponseTemplateID AS NVARCHAR) = @FilterValue '   
							END
						ELSE IF (@FilterField = 'Guid')
							BEGIN
								SET @Query = @Query + ' AND Replace (rt.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '   
							END
						ELSE IF (@FilterField = 'CreatedBy')
							BEGIN
								SET @Query = @Query + ' AND rt.CreatedBy like ''%'' + @FilterValue + ''%'' ' 
							END
					END
	                          
				IF (@IncludeInactive = 0)
					BEGIN
						SET @Query = @Query + ' AND rt.IsActive <> 0 '							
					END

				IF (@IncludeActive = 0)
					BEGIN
						SET @Query = @Query + ' AND rt.IsActive <> 1 '							
					END
							            
				--Select Count
				exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			end
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			IF object_id('tempdb..#orderedResults') IS NOT NULL
				BEGIN
					DROP TABLE #orderedResults
				END

			SELECT @Query = '
				SELECT DISTINCT
					rt.*
					INTO #orderedResults
				FROM
                    ckbx_Responsetemplate rt
                    INNER JOIN ckbx_Template t ON t.TemplateId = rt.ResponseTemplateId '
				IF @AncestorFolder = 0
					BEGIN
						SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON ff.ItemId = t.TemplateId AND ff.AncestorId IS NULL '
					END
				ELSE
					BEGIN
						IF @AncestorFolder IS NOT NULL
							BEGIN
								SET @Query = @Query + ' INNER JOIN ckbx_FormFolders ff ON ff.ItemId = t.TemplateId AND ff.AncestorId = ' + CAST(@AncestorFolder AS VARCHAR(9))
							END
					END
						
				SET @Query = @Query + '
				WHERE
                                	(t.Deleted IS NULL OR t.Deleted = 0) '

				--admin timeline filter
				IF (@StartDate IS NOT NULL AND @EndDate IS NOT NULL)
					BEGIN
						SET @Query = @Query + ' AND (t.' + @DateFieldName + ' BETWEEN ''' + CAST(@StartDate as VARCHAR) + ''' AND ''' + CAST(@EndDate as VARCHAR) + ''')'  
					END

				--Filter results
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
					BEGIN
						IF (@FilterField = 'Name')
							BEGIN
								SET @Query = @Query + ' AND rt.TemplateName like ''%'' + @FilterValue + ''%'' '   
							END
						ELSE IF (@FilterField = 'Id')
							BEGIN
								SET @Query = @Query + ' AND CAST(rt.ResponseTemplateID AS NVARCHAR) = @FilterValue '     
							END
						ELSE IF (@FilterField = 'Guid')
							BEGIN
								SET @Query = @Query + ' AND Replace (rt.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '  
							END
						ELSE IF (@FilterField = 'CreatedBy')
							BEGIN
								SET @Query = @Query + ' AND rt.CreatedBy like ''%'' + @FilterValue + ''%'' '  
							END
					END
					
				IF (@IncludeInactive = 0)
					BEGIN
						SET @Query = @Query + ' AND rt.IsActive <> 0 '							
					END

				IF (@IncludeActive = 0)
					BEGIN
						SET @Query = @Query + ' AND rt.IsActive <> 1 '							
					END

				SET @Query = @Query + @OrderBy + ';

                SELECT * FROM 
				(
					SELECT *,ROW_NUMBER() OVER ('+ @OrderBy +') AS NUM
					FROM #orderedResults
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';'
				
				if @DisplayCount = 1 
				begin
					SET @Query = @Query + '--Select Count
					SELECT COUNT(*) AS TotalItemCount FROM #orderedResults'
       				exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
       			end
			END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleSurveysAndFolders]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleSurveysAndFolders]
(
   @UniqueIdentifier nvarchar(511),
   @FirstPermissionName varchar(32),		--Used for folder permission
   @SecondPermissionName varchar(32),		--Used for survey permission
   @RequireBothPermissions bit,			
   @UseAclExclusion bit,
   @PageNumber int, 
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(255),
   @ThirdPermissionName varchar(32) = null,
   @IncludeInactive bit = 1,
   @IncludeActive bit = 1
)
AS
  --Remove any temp data
  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleFormsAndFolders_Folders'
  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleFormsAndFolders_Forms'
  
  DECLARE @OrderBy varchar(64)
  DECLARE @OrderByClause nvarchar(100)
  
  IF (@SortField IS NOT NULL AND LEN(@SortField) > 0)
      BEGIN
            IF @SortAscending = 1
                  BEGIN
                        SET @OrderBy = ' ASC'
                  END
            ELSE
                  BEGIN
                        SET @OrderBy = ' DESC'
                  END
      END
    
  --Populate temp resource table with folders
  --Sorting is done in final select later, so don't bother passing sort parameters here
  EXEC ckbx_sp_Security_ListAccessibleFolders @UniqueIdentifier, @FirstPermissionName, NULL, 0, @UseAclExclusion, -1, -1, NULL, @SortAscending, @FilterField, @FilterValue, 'AccessibleFormsAndFolders_Folders', @IncludeInactive, @IncludeActive

  --Populate temp resource table with surveys
  --Pass 0 as ancestor, which means list only surveys in root
  EXEC ckbx_sp_Security_ListAccessibleSurveys @UniqueIdentifier, @SecondPermissionName, @ThirdPermissionName, 0, @UseAclExclusion, -1, -1, NULL, @SortAscending, @FilterField, @FilterValue, 0, 'AccessibleFormsAndFolders_Forms', 1, null, null, null, @IncludeInactive, @IncludeActive

  --If not paging, simply return the results
  DECLARE @Query varchar(2000)

	IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT
					tmp.ResourceId,
					''Folder'' AS ResourceType,
					f.[Name] AS ItemName
				FROM
					ckbx_Security_TempResourceList tmp
					INNER JOIN ckbx_Folder f ON f.FolderId = tmp.ResourceId
				WHERE
					spid = @@spid
					AND DataKey = ''AccessibleFormsAndFolders_Folders''

				UNION

				SELECT
					tmp.ResourceId,
					''Form'' AS ResourceType,
					rt.TemplateName AS ItemName
				FROM
					ckbx_Security_TempResourceList tmp 
					INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
				WHERE
					spid = @@spid
					AND DataKey = ''AccessibleFormsAndFolders_Forms''
				ORDER BY
					ResourceType ASC '
					
                  IF (@SortField IS NOT NULL AND LEN(@SortField) > 0)
                        BEGIN
                              SET @Query = @Query + ', ' + @SortField  + ' ' +  @OrderBy
                        END

			--Select results
			EXEC(@Query)
			
			--Select count
			SET @Query = '
				SELECT (
						SELECT 
							COUNT(tmp.ResourceId) 
						FROM 	
							ckbx_Security_TempResourceList tmp
						WHERE
							spid = @@spid
							AND DataKey = ''AccessibleFormsAndFolders_Folders''
						)
				+
						(
						SELECT
							COUNT(tmp.ResourceId)
						FROM
							ckbx_Security_TempResourceList tmp
						WHERE
							spid = @@spid
							AND DataKey = ''AccessibleFormsAndFolders_Forms''
						) AS TotalItemCount'
						
			--Select Count
			EXEC(@Query)
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			IF object_id('tempdb..#orderedResults') IS NOT NULL
				BEGIN
					DROP TABLE #orderedResults
				END

			SELECT @Query = '
				SELECT
					tmp.ResourceId,
					''Folder'' AS ResourceType,
					f.[Name] AS ItemName
				INTO #orderedResults
				FROM
					ckbx_Security_TempResourceList tmp 
					INNER JOIN ckbx_Folder f ON f.FolderId = tmp.ResourceId
				WHERE
					spid = @@spid
					AND DataKey = ''AccessibleFormsAndFolders_Folders''

				UNION

				SELECT
					tmp.ResourceId,
					''Form'',
					rt.TemplateName AS ItemName
				FROM
					ckbx_Security_TempResourceList tmp
					INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
				WHERE
					spid = @@spid
					AND DataKey = ''AccessibleFormsAndFolders_Forms''
				ORDER BY
					ResourceType ASC'
					
                  SET @OrderByClause = ' ORDER BY ResourceType ASC '
                  IF (@SortField IS NOT NULL AND LEN(@SortField) > 0)
                        BEGIN
                              SET @OrderByClause = @OrderByClause + ', ' + @SortField  + ' ' +  @OrderBy
                        END
					
					
				SET @Query = @Query + '

                SELECT * FROM 
				(
					SELECT *,ROW_NUMBER() OVER ('+ @OrderByClause +') AS NUM
					FROM #orderedResults
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';
				
				--Select Count
				SELECT COUNT(*) AS TotalItemCount FROM #orderedResults'

			EXEC(@Query)

					
		END

  --Remove any temp data
  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleFormsAndFolders_Folders'
  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleFormsAndFolders_Forms'

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAccessibleSurveysAndFoldersAdmin]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


  CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAccessibleSurveysAndFoldersAdmin]
(
   @PageNumber int, 
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(255),
   @IncludeInactive bit = 1,
   @IncludeActive bit = 1
)
AS
  DECLARE @OrderBy varchar(64)
  
  IF (@SortField IS NOT NULL AND LEN(@SortField) > 0)
      BEGIN
            IF @SortAscending = 1
                  BEGIN
                        SET @OrderBy = ' ASC'
                  END
            ELSE
                  BEGIN
                        SET @OrderBy = ' DESC'
                  END
      END

  --If not paging, simply return the results
  DECLARE @Query nvarchar(3000)
  DECLARE @QueryParams nvarchar(500)
  DECLARE @OrderByClause nvarchar(100)
  SET @QueryParams = '@FilterValue nvarchar(255)'

      IF @PageNumber <= 0 OR @ResultsPerPage <= 0
            BEGIN
                  SET @Query = '
                        SELECT
                              FolderId AS ResourceId,
                              ''Folder'' AS ResourceType,
                              [Name] AS ItemName,
                        	CreatedBy, 
                        	LastModified,
                        	NULL AS IsActive
                        FROM
                              ckbx_Folder '
                  IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
                        BEGIN
                              IF (@FilterField = 'Name')
                                    BEGIN
                                          SET @Query = @Query + ' WHERE [Name] like ''%'' + @FilterValue + ''%'' '   
                                    END   
                              ELSE IF (@FilterField = 'Id')
                                    BEGIN
                                          SET @Query = @Query + ' WHERE CAST(FolderId AS NVARCHAR) = @FilterValue '   
                                    END
                              ELSE IF (@FilterField = 'Guid')
                                    BEGIN
                                          SET @Query = @Query + ' WHERE 1 <> 1'           
                                    END
                              ELSE IF (@FilterField = 'CreatedBy')
                                    BEGIN
                                          SET @Query = @Query + ' WHERE CreatedBy like ''%'' + @FilterValue + ''%'' '               
                                    END   
                        END
                              
                  SET @Query = @Query + '  
                        UNION

                        SELECT
                              rt. ResponseTemplateId AS ResourceId,
                              ''Form'' AS ResourceType,
                              rt.TemplateName AS ItemName,
                        	rt.CreatedBy,
                        	t.ModifiedDate as LastModified,
                        	rt.IsActive as IsActive
                        FROM
                              ckbx_Responsetemplate rt
                              INNER JOIN ckbx_Template t ON t.TemplateId = rt.ResponseTemplateId 
                              INNER JOIN ckbx_FormFolders ff ON ff.ItemId = rt.ResponseTemplateID AND ff.ItemType = ''FORM'' '
				
		SET @Query = @Query + '
			 WHERE
                              (t.Deleted IS NULL OR t.Deleted = 0) '
                  IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
                        BEGIN
                              IF (@FilterField = 'Name')
                                    BEGIN
                                          SET @Query = @Query + ' AND rt.TemplateName like ''%'' + @FilterValue + ''%'' '  
                                    END   
                              ELSE IF (@FilterField = 'Id')
                                    BEGIN
                                          SET @Query = @Query + ' AND CAST(rt.ResponseTemplateID AS NVARCHAR) = @FilterValue '
                                    END
                              ELSE IF (@FilterField = 'Guid')
                                    BEGIN
                                          SET @Query = @Query + ' AND Replace (rt.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '   
                                    END
                              ELSE IF (@FilterField = 'CreatedBy')
                                    BEGIN
                                          SET @Query = @Query + ' AND rt.CreatedBy like ''%'' + @FilterValue + ''%'' ' 
                                    END
                        END
				  ELSE
						--If not Filtering, only list surveys at root level
						BEGIN
							SET @Query = @Query + ' AND ff.AncestorId IS NULL '
						END
					
				IF (@IncludeInactive = 0)
					BEGIN
						SET @Query = @Query + ' AND rt.IsActive <> 0 '							
					END

				IF (@IncludeActive = 0)
					BEGIN
						SET @Query = @Query + ' AND rt.IsActive <> 1 '							
					END

                  SET @Query = @Query + '

                        ORDER BY
                              ResourceType ASC '
                        
                  IF (@SortField IS NOT NULL AND LEN(@SortField) > 0)
                        BEGIN
                              SET @Query = @Query + ', ' + @SortField  + ' ' +  @OrderBy
                        END
             
                  --Select results
                  exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
                  
                  --Select count
                  SET @Query = '
                        SELECT (
                                          SELECT 
                                                COUNT(folderId) 
                                          FROM 
                                                ckbx_Folder '
                                    IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
                                          BEGIN
                                                IF (@FilterField = 'Name')
                                                      BEGIN
                                                            SET @Query = @Query + ' WHERE [Name] like ''%'' + @FilterValue + ''%'' '  
                                                      END   
                                                ELSE IF (@FilterField = 'Id')
                                                      BEGIN
                                                            SET @Query = @Query + ' WHERE CAST(FolderId AS NVARCHAR) = @FilterValue '      
                                                      END
                                                ELSE IF (@FilterField = 'Guid')
                                                      BEGIN
                                                            SET @Query = @Query + ' WHERE 1 <> 1'       
                                                      END
                                                ELSE IF (@FilterField = 'CreatedBy')
                                                      BEGIN
                                                            SET @Query = @Query + ' WHERE CreatedBy like ''%'' + @FilterValue + ''%'' '                 
                                                      END   
                                          END         
                                    SET @Query = @Query + ' 
                                    )
                        +
                                    (
                                          SELECT
                                                COUNT(rt.ResponseTemplateId)
                                          FROM
                                                ckbx_Responsetemplate rt
                                                INNER JOIN ckbx_Template t ON t.TemplateId = rt.ResponseTemplateId
                                                INNER JOIN ckbx_FormFolders ff ON ff.ItemId = rt.ResponseTemplateID AND ff.ItemType = ''FORM'' '
						
					SET @Query = @Query + '
					WHERE
                                                (t.Deleted IS NULL OR t.Deleted = 0) '

                  IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
                        BEGIN
                              IF (@FilterField = 'Name')
                                    BEGIN
                                          SET @Query = @Query + ' AND rt.TemplateName like ''%'' + @FilterValue + ''%'' '  
                                    END
                              ELSE IF (@FilterField = 'Id')
                                    BEGIN
                                          SET @Query = @Query + ' AND CAST(rt.ResponseTemplateID AS NVARCHAR) = @FilterValue '   
                                    END
                              ELSE IF (@FilterField = 'Guid')
                                    BEGIN
                                          SET @Query = @Query + ' AND Replace (rt.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '   
                                    END
                              ELSE IF (@FilterField = 'CreatedBy')
                                    BEGIN
                                          SET @Query = @Query + ' AND rt.CreatedBy like ''%'' + @FilterValue + ''%'' ' 
                                    END
                        END
					ELSE
						--If not Filtering, only list surveys at root level
						BEGIN
							SET @Query = @Query + ' AND ff.AncestorId IS NULL '
						END
					
					IF (@IncludeInactive = 0)
						BEGIN
							SET @Query = @Query + ' AND rt.IsActive <> 0 '							
						END

					IF (@IncludeActive = 0)
						BEGIN
							SET @Query = @Query + ' AND rt.IsActive <> 1 '							
						END				  
				              
                  SET @Query = @Query + '                                 
                                    ) AS TotalItemCount'
                                    
                  --Select Count
                  exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
            END
      ELSE
            BEGIN
                  --Put results in temp table, then select
                   --Make sure temp table does not exist
                  DECLARE @StartRow int
                  DECLARE @EndRow int                 

                  SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
                  SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

                  IF object_id('tempdb..#orderedResults') IS NOT NULL
                        BEGIN
                              DROP TABLE #orderedResults
                        END

                  SELECT @Query = '
                        SELECT
                              ResourceId,
                              ResourceType,
                              ItemName
                        INTO 
                              #orderedResults
                        FROM
                              (
                                    SELECT
                                          FolderId AS ResourceId,
                                          ''Folder'' AS ResourceType,
                                          [Name] AS ItemName,
                                          CreatedBy, 
                                          LastModified,
                                          NULL AS IsActive
                                    FROM
                                          ckbx_Folder '
                              IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
                                    BEGIN
                                          IF (@FilterField = 'Name')
                                                BEGIN
                                                      SET @Query = @Query + ' WHERE [Name] like ''%'' + @FilterValue + ''%'' '   
                                                END   
                                          ELSE IF (@FilterField = 'Id')
                                                BEGIN
                                                      SET @Query = @Query + ' WHERE CAST(FolderId AS NVARCHAR) = @FilterValue '   
                                                END
                                          ELSE IF (@FilterField = 'Guid')
                                                BEGIN
                                                      SET @Query = @Query + ' WHERE 1 <> 1'            
                                                END
                                          ELSE IF (@FilterField = 'CreatedBy')
                                                BEGIN
                                                      SET @Query = @Query + ' WHERE CreatedBy like ''%'' + @FilterValue + ''%'' '               
                                                END   
                                    END
                                          
                              SET @Query = @Query + ' 

                                    UNION
            
                                    SELECT
                                          rt. ResponseTemplateId AS ResourceId,
                                          ''Form'' AS ResourceType,
                                          rt.TemplateName AS ItemName,
                                          rt.CreatedBy,
                                          t.ModifiedDate as LastModified,
                                          rt.IsActive as IsActive
                                    FROM
                                          ckbx_Responsetemplate rt
                                          INNER JOIN ckbx_Template t ON t.TemplateId = rt.ResponseTemplateId
                                          INNER JOIN ckbx_FormFolders ff ON ff.ItemId = rt.ResponseTemplateID AND ff.ItemType = ''FORM'' '
						
					SET @Query = @Query + '
					WHERE
                                          (t.Deleted IS NULL OR t.Deleted = 0) '
                                          
						IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
                              BEGIN
                                    IF (@FilterField = 'Name')
                                          BEGIN
                                                SET @Query = @Query + ' AND rt.TemplateName like ''%'' + @FilterValue + ''%'' '   
                                          END
                                    ELSE IF (@FilterField = 'Id')
                                          BEGIN
                                                SET @Query = @Query + ' AND CAST(rt.ResponseTemplateID AS NVARCHAR) = @FilterValue '     
                                          END
                                    ELSE IF (@FilterField = 'Guid')
                                          BEGIN
                                                SET @Query = @Query + ' AND Replace (rt.[GUID], ''-'','''') like ''%'' + cast(Replace(@FilterValue, ''-'','''') as NVARCHAR) + ''%'' '  
                                          END
                                    ELSE IF (@FilterField = 'CreatedBy')
                                          BEGIN
                                                SET @Query = @Query + ' AND rt.CreatedBy like ''%'' + @FilterValue + ''%'' '  
                                          END
                              END
                              
						ELSE
						--If not Filtering, only list surveys at root level
						BEGIN
							SET @Query = @Query + ' AND ff.AncestorId IS NULL '
						END
                       
						IF (@IncludeInactive = 0)
							BEGIN
								SET @Query = @Query + ' AND rt.IsActive <> 0 '							
							END

						IF (@IncludeActive = 0)
							BEGIN
								SET @Query = @Query + ' AND rt.IsActive <> 1 '							
							END				  
					                      
                        SET @Query = @Query + '
                              ) [result]
                              ORDER BY
                                    ResourceType ASC '
                              
                  SET @OrderByClause = ' ORDER BY ResourceType ASC '
				  IF (@SortField IS NOT NULL AND LEN(@SortField) > 0)
                        BEGIN
                              SET @OrderByClause = @OrderByClause + ', ' + @SortField + ' ' + @OrderBy
                        END
                              
                        SET @Query = @Query + '

                        --Add column for ordering
                        SELECT * FROM 
						(
							SELECT *,ROW_NUMBER() OVER ('+ @OrderByClause +') AS NUM
							FROM #orderedResults
						) as OrderedResults
						WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';
                        
                        --Select Count
                        SELECT COUNT(*) AS TotalItemCount FROM #orderedResults'
              exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
            END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAllFolders]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAllFolders]
(
   @PageNumber int, 
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(255)   
)
AS
  DECLARE @OrderBy varchar(100)
  
  SET @OrderBy = ' ORDER BY [Name] ASC '
  
	IF (@SortField IS NOT NULL AND LEN(@SortField) > 0 )
	BEGIN
		IF @SortAscending = 1
			BEGIN
				SET @OrderBy = ' ORDER BY [' + @SortField + '] ASC '
			END
		ELSE
			BEGIN
				SET @OrderBy = ' ORDER BY [' + @SortField + '] DESC '
			END
	END
  
  --TODO: Filtering

  --If not paging, simply return the results
  DECLARE @Query varchar(2000)

	IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				SELECT
					FolderId,
					[Name]
				FROM
					ckbx_Folder'
					
			SET @Query = @Query + @OrderBy

			--Select results
			EXEC(@Query)
			
			--Select count
			SET @Query = '
				SELECT 
					COUNT(folderId)  AS TotalItemCount
				FROM 	
					ckbx_Folder'
						
			--Select Count
			EXEC(@Query)
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			IF object_id('tempdb..#orderedResults') IS NOT NULL
				BEGIN
					DROP TABLE #orderedResults
				END

			SELECT @Query = '
				SELECT
					FolderId,
					[Name]
				INTO 
					#orderedResults
				FROM
					ckbx_Folder'
										
				SET @Query = @Query + @OrderBy + '

                SELECT * FROM 
				(
					SELECT *,ROW_NUMBER() OVER ('+ @OrderBy +') AS NUM
					FROM #orderedResults
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';
				
				--Select Count
				SELECT COUNT(*) AS TotalItemCount FROM #orderedResults'

			EXEC(@Query)
		END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListAllGroups]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListAllGroups]
(
   @PageNumber int, 
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(255),
   @IncludeEveryoneGroup bit,
   @StartDate datetime = null,
   @DateFieldName varchar(100) = null,
   @DisplayCount bit = 1
)
AS
	--Create the order-by clause, if any
    DECLARE @OrderBy varchar(255)

    SET @OrderBy = ''

	IF len(@SortField) > 0
      BEGIN
        SET @OrderBy = ' ORDER BY ' + @SortField

		IF @SortAscending = 1
			BEGIN
				SET @OrderBy = @OrderBy + ' ASC'
			END
		ELSE
			BEGIN
				SET @OrderBy = @OrderBy + ' DESC'
			END
      END

	--Create the filter clause if applicable
	DECLARE @FilterBy varchar(255)
	SET @FilterBy = ''
	IF (LEN(@FilterValue) > 0)
	BEGIN
		if LEN(@FilterField) > 0 
		begin		
			SET @FilterBy = ' WHERE ' + @FilterField + ' LIKE ''%'' + @FilterValue + ''%'' '
		end
		else
		begin
			SET @FilterBy = ' WHERE (GroupName LIKE ''%'' + @FilterValue + ''%'' 
						OR [Description] like ''%'' + @FilterValue + ''%''  
						OR CreatedBy like ''%'' + @FilterValue + ''%'') '
		end
	END
	
	IF(@IncludeEveryoneGroup != 1)
	BEGIN
		IF (LEN(@FilterValue) > 0 AND LEN(@FilterField) > 0)
			BEGIN
				SET @FilterBy = @FilterBy + ' AND GroupId > 1' 
			END
		ELSE
			BEGIN
				SET @FilterBy = ' WHERE GroupId > 1' 
			END
	END

	--apply date filter
	if @DateFieldName is not null and @DateFieldName <> ''
	begin
		IF (LEN(@FilterBy) > 0)
			BEGIN
				SET @FilterBy = @FilterBy + ' AND ' 
			END
		ELSE
			BEGIN
				SET @FilterBy = ' WHERE ' 
			END
		SET @FilterBy = @FilterBy + @DateFieldName + ' > ''' + cast (@StartDate as varchar(100)) + ''' '
	end	


		
	--If not paging, simply return the results
	DECLARE @Query nvarchar(1000)
	DECLARE @QueryParams nvarchar(500)
	SET @QueryParams = '@FilterValue nvarchar(255)'
	
	--Drop results table, if it exists
	IF object_id('tempdb..#results') IS NOT NULL
		BEGIN
			DROP TABLE #results
		END
		
	CREATE TABLE #results
	(
		GroupId int
	)
		
	
	--Otherwise perform any necessary paging and return results
	IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				INSERT INTO #results
				SELECT GroupID FROM ckbx_Group
				' + @FilterBy + @OrderBy

			exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
			
			SELECT g.* FROM #results r INNER JOIN ckbx_Group g ON g.GroupId = r.GroupId
			
			if @DisplayCount = 1
				SELECT COUNT(*) AS RecordCount FROM #results
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			SELECT @Query = '
				INSERT INTO #results
				SELECT GroupID FROM ckbx_Group
				' + @FilterBy + @OrderBy + ';

				--Add column for ordering
				ALTER TABLE #results ADD ItemIndex INT IDENTITY(1, 1)'
				
				exec sp_executesql @Query, @QueryParams, @FilterValue = @FilterValue
				
				--Now return results
				SELECT g.* FROM #results r INNER JOIN ckbx_Group g ON g.GroupId = r.GroupId WHERE ItemIndex BETWEEN @StartRow AND @EndRow

				if @DisplayCount = 1
					SELECT COUNT(*) AS RecordCount FROM #results
					
		END




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListPermissionMaskPermissions]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListPermissionMaskPermissions]
(
	@MaskName nvarchar(255)
)
AS
  SELECT
    p.PermissionName
  FROM
    ckbx_Permission p
    INNER JOIN ckbx_PermissionMaskPermissions pmp ON pmp.PermissionId = p.PermissionId
    INNER JOIN ckbx_PermissionMask pm ON pm.MaskId = pmp.MaskId
  WHERE
    pm.MaskName = @MaskName
  ORDER BY
    p.PermissionName ASC

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListPermissions]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListPermissions]
	
AS
	SELECT [PermissionName] FROM [ckbx_Permission]

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListResources_AccessibleByAccessPermissible]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--List all resources the specified principal can access
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListResources_AccessibleByAccessPermissible]
(
 @PrincipalId nvarchar(511),
  @PrincipalType varchar(64),
  @ResourceTableName varchar(64),
  @ResourceIdField varchar(64),
  @PermissionName varchar(32),
  @UseAclExclusion bit,
  @DataKey varchar(64)
)
AS
--Clear any temporary data
  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey IN
  (
	'HasAclPermission_DirectGranted',
	'HasAclPermission_DefaultPolicyGranted',
	'HasAclPermission_GroupPermissionGranted',
	'HasAclPermission_EveryoneGroupPermissionGranted',
	'HasAclPermission_DirectExcluded',
	'HasAclPermission_GroupMemberExcluded',
	'HasAclPermission_EveryoneGroupExcluded'
  )

  /*********** Populate Permission Temp Table ***********/
  --Principal is on resource's ACL w/permission.
  EXEC ckbx_sp_Security_ListResources_AccessPermissibleHasAclPermission
	@PrincipalId,
	@PrincipalType,
	@ResourceTableName,
	@ResourceIdField,
	@PermissionName,
    'HasAclPermission_DirectGranted'

  --Resource default policy has permission
  EXEC ckbx_sp_Security_ListResources_DefaultPolicyHasAclPermission
    @ResourceTableName,
    @ResourceIdField,
    @PermissionName,
    'HasAclPermission_DefaultPolicyGranted'

  
  --If access permissible is not a group, check for resources groups
  -- have access to.
  IF @PrincipalType <> 'Checkbox.Users.Group' AND @PrincipalID IS NOT NULL AND @PrincipalID <> '' AND @PrincipalID <> 'AnonymousRespondent'
    BEGIN
		--Add resources principal's groups can access
		EXEC ckbx_sp_Security_ListResources_PrincipalGroupHasPermission
			@PrincipalId,
			@PrincipalType,
			@ResourceTableName,
			@ResourceIdField,
			@PermissionName,
			'HasAclPermission_GroupPermissionGranted'

		--Add resources everyone group can access
		EXEC ckbx_sp_Security_ListResources_AccessPermissibleHasAclPermission
			'1',
			'Checkbox.Users.Group',
			@ResourceTableName,
			@ResourceIdField,
			@PermissionName,
			'HasAclPermission_EveryoneGroupPermissionGranted'
    END

	--Now check for exclusions, if desired
	IF @UseAclExclusion = 1
    BEGIN
		--Principal is specifically denied access by resource ACL
		EXEC ckbx_sp_Security_ListResources_AccessPermissibleExcludedFromPermission
			@PrincipalId,
			@PrincipalType,
			@ResourceTableName,
			@ResourceIdField,
			@PermissionName,
			'HasAclPermission_DirectExcluded'

		--Groups principal is in are specfically denied access
		IF @PrincipalType <> 'Checkbox.Users.Group'
			BEGIN
				--Group memberships
				EXEC ckbx_sp_Security_ListResources_PrincipalGroupExcludesPermission
					@PrincipalId,
					@PrincipalType,
					@ResourceTableName,
					@ResourceIdField,
					@PermissionName,
					'HasAclPermission_GroupMemberExcluded'

				--Everyone Group
				EXEC ckbx_sp_Security_ListResources_AccessPermissibleExcludedFromPermission
					'1',
					'Checkbox.Users.Group',
					@ResourceTableName,
					@ResourceIdField,
					@PermissionName ,
					'HasAclPermission_EveryoneGroupExcluded'

			END
	END

	--Fork, based on exclude ACL Settings
    --Start w/Simple case where ACL Exclusion is not used and just select all
    --  granted permissions.
	IF @UseAclExclusion <> 1
      BEGIN
		--No need to filter by data key, since child calls should clean up their own data before returning. Set data key
		-- and be done
		UPDATE 
			ckbx_Security_TempResourceList 
		SET 
			DataKey = @DataKey 
		WHERE 
			spid = @@spid 
			AND DataKey IN
			  (
				'HasAclPermission_DirectGranted',
				'HasAclPermission_DefaultPolicyGranted',
				'HasAclPermission_GroupPermissionGranted',
				'HasAclPermission_EveryoneGroupPermissionGranted',
				'HasAclPermission_DirectExcluded',
				'HasAclPermission_GroupMemberExcluded',
				'HasAclPermission_EveryoneGroupExcluded'
			  )
      END
	ELSE
		BEGIN
		--Now put things together into a granted...starting in reverse order of priority. By adding/removing
		-- in order of priority, we avoid huge queries while ensuring correctness of results.
		CREATE TABLE #granted (
			ResourceId int
		)
		--Add default policy permissions
		INSERT INTO #granted SELECT ResourceId FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'HasAclPermission_DefaultPolicyGranted'

		--Remove Everyone Group Denied
		DELETE FROM #granted WHERE EXISTS(Select ResourceId FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'HasAclPermission_EveryoneGroupExcluded' AND ResourceId = #granted.ResourceId)
		
		--Add everyone group granted
		INSERT INTO #granted SELECT ResourceId FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'HasAclPermission_EveryoneGroupPermissionGranted'

		--Remove group membership denied
		DELETE FROM #granted WHERE EXISTS(Select ResourceId FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'HasAclPermission_GroupMemberExcluded' AND ResourceId = #granted.ResourceId)

		--Add group membership granted
		INSERT INTO #granted SELECT ResourceId FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'HasAclPermission_GroupPermissionGranted'

		--Remove acl denied
		DELETE FROM #granted WHERE EXISTS(Select ResourceId FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'HasAclPermission_DirectExcluded' AND ResourceId = #granted.ResourceId)

		--Now select results
        INSERT INTO ckbx_Security_TempResourceList (spid, DataKey, ResourceId)
		SELECT @@spid, @DataKey, ResourceId FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'HasAclPermission_DirectGranted'
			UNION
		SELECT @@spid, @DataKey, ResourceId FROM #granted

		DROP TABLE #granted
		
	END

  /*********** Ensure Temp data Dropped ***********/
 --Clear any temporary data
  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey IN
  (
	'HasAclPermission_DirectGranted',
	'HasAclPermission_DefaultPolicyGranted',
	'HasAclPermission_GroupPermissionGranted',
	'HasAclPermission_EveryoneGroupPermissionGranted',
	'HasAclPermission_DirectExcluded',
	'HasAclPermission_GroupMemberExcluded',
	'HasAclPermission_EveryoneGroupExcluded'
  )

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithBothPermissions]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--List all resources the specified principal can access
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithBothPermissions]
(
  @PrincipalId nvarchar(511),
  @PrincipalType varchar(64),
  @ResourceTableName varchar(64),
  @ResourceIdField varchar(64),
  @FirstPermissionName varchar(32),
  @SecondPermissionName varchar(32),
  @UseAclExclusion bit,
  @DataKey varchar(64)
)
AS
  --Find resources principal can access with both of the specified permissions.
  --Clear out temp data from any previous runs...just in case
   --PRINT 'Deleting temp data...[' + @DataKey + ']'
  DELETE FROM 
	ckbx_Security_TempResourceList 
  WHERE 
	spid = @@spid 
	AND (DataKey = 'BothPermissionsTemp_Permission1' OR DataKey = 'BothPermissionsTemp_Permission2')

  EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissible
	@PrincipalId,
	@PrincipalType,
	@ResourceTableName,
	@ResourceIdField,
	@FirstPermissionName,
	@UseAclExclusion,
	'BothPermissionsTemp_Permission1'

  EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissible
	@PrincipalId,
	@PrincipalType,
	@ResourceTableName,
	@ResourceIdField,
	@SecondPermissionName,
	@UseAclExclusion,
	'BothPermissionsTemp_Permission2'

  --Insert temp data with provided key
  INSERT INTO ckbx_Security_TempResourceList (spid, DataKey, ResourceId)
  SELECT
	@@spid,
    @DataKey,
	t1.ResourceId 
  FROM ckbx_Security_TempResourceList t1
  WHERE 
    t1.spid = @@spid
    AND t1.DataKey = 'BothPermissionsTemp_Permission1'
	AND EXISTS(SELECT t2.ResourceId FROM ckbx_Security_TempResourceList t2 WHERE t2.ResourceId = t1.ResourceId AND t2.DataKey = 'BothPermissionsTemp_Permission2' AND t2.spid = @@spid)

	--Clear out data used only for this proc.
    --PRINT 'Deleting temp data...[BothPermissionsTemp_Permission1, BothPermissionsTemp_Permission2]'
	DELETE FROM 
		ckbx_Security_TempResourceList 
	WHERE 
		spid = @@spid 
		AND (DataKey = 'BothPermissionsTemp_Permission1' OR DataKey = 'BothPermissionsTemp_Permission2')

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithEitherPermission]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--List all resources the specified principal can access
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithEitherPermission]
(
  @PrincipalId nvarchar(511),
  @PrincipalType varchar(64),
  @ResourceTableName varchar(64),
  @ResourceIdField varchar(64),
  @FirstPermissionName varchar(32),
  @SecondPermissionName varchar(32),
  @UseAclExclusion bit,
  @DataKey varchar(64)
)
AS
   --Find resources principal can access with one or both of the specified permissions.
  EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissible
	@PrincipalId,
	@PrincipalType,
	@ResourceTableName,
	@ResourceIdField,
	@FirstPermissionName,
	@UseAclExclusion,
    @DataKey


  EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissible
	@PrincipalId,
	@PrincipalType,
	@ResourceTableName,
	@ResourceIdField,
	@SecondPermissionName,
	@UseAclExclusion,
    @DataKey

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListResources_AccessPermissibleExcludedFromPermission]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--List all resources where the specified principal is on the ACL
-- with the specified permission
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListResources_AccessPermissibleExcludedFromPermission]
(
  @PrincipalId nvarchar(511),
  @PrincipalType varchar(64),
  @ResourceTableName varchar(64),
  @ResourceIdField varchar(64),
  @PermissionName varchar(32),
  @DataKeyName varchar(64)
)
AS
  DECLARE @Query nvarchar(4000)

  SET @Query =
	'
  INSERT INTO ckbx_Security_TempResourceList (spid, DataKey, ResourceId)
  SELECT
	@@spid,
    ''' + @DataKeyName + ''',
    acr.' + @ResourceIdField + '
  FROM
    ' + @ResourceTableName + ' acr
    INNER JOIN ckbx_AccessControlEntries ace ON ace.AclId = acr.AclId
    INNER JOIN ckbx_AccessControlEntry ent ON ent.EntryId = ace.EntryId
    INNER JOIN ckbx_PolicyPermissions pp ON pp.PolicyId = ent.PolicyId
  WHERE
	(
		ent.EntryType = ''' + @PrincipalType + '''
		AND ent.EntryIdentifier = ''' + @PrincipalId + '''
	)
	AND 
	(
		pp.PolicyId IS NULL
		OR NOT EXISTS
		(
			SELECT
				p2.PermissionId
			FROM
				ckbx_PolicyPermissions pp2
				INNER JOIN ckbx_Permission p2 ON p2.PermissionId = pp2.PermissionId
			WHERE
			p2.PermissionName = ''' + @PermissionName + '''
			AND pp2.PolicyId = pp.PolicyId
		)
	)'
 
  EXEC(@Query)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListResources_AccessPermissibleHasAclPermission]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--List all resources where the specified principal is on the ACL
-- with the specified permission
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListResources_AccessPermissibleHasAclPermission]
(
  @PrincipalId nvarchar(511),
  @PrincipalType varchar(64),
  @ResourceTableName varchar(64),
  @ResourceIdField varchar(64),
  @PermissionName varchar(32),
  @DataKey varchar(64)
)
AS
  DECLARE @Query nvarchar(4000)

  SET @Query =
	'
  INSERT INTO ckbx_Security_TempResourceList (spid, DataKey, ResourceId)
  SELECT
	@@spid,
    ''' + @DataKey + ''',
    acr.' + @ResourceIdField + '
  FROM
    ' + @ResourceTableName + ' acr
    INNER JOIN ckbx_AccessControlEntries ace ON ace.AclId = acr.AclId
    INNER JOIN ckbx_AccessControlEntry ent ON ent.EntryId = ace.EntryId
    INNER JOIN ckbx_PolicyPermissions pp ON pp.PolicyId = ent.PolicyId
    INNER JOIN ckbx_Permission p ON p.PermissionId = pp.PermissionId
  WHERE
	ent.EntryType = ''' + @PrincipalType + '''
    AND ent.EntryIdentifier = ''' + @PrincipalId + '''
	AND p.PermissionName = ''' + @PermissionName + ''''

  EXEC(@Query )

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListResources_AccessPermissibleHasBothAclPermissions]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--List all resources where the specified principal is on the ACL
-- with at both of two specified permissions
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListResources_AccessPermissibleHasBothAclPermissions]
(
  @PrincipalId nvarchar(511),
  @PrincipalType varchar(64),
  @ResourceTableName varchar(64),
  @ResourceIdField varchar(64),
  @FirstPermissionName varchar(32),
  @SecondPermissionName varchar(32)
)
AS
	--Populate 2 temp tables with all resources that principal has access to
	CREATE TABLE #temp1 (
		ResourceId int
	)

	CREATE TABLE #temp2 (
		ResourceId int
	)

	--Permission 1
	INSERT INTO #temp1 
	EXEC ckbx_sp_Security_ListResources_AccessPermissibleHasAclPermission 
		@PrincipalId, 
		@PrincipalType, 
		@ResourceTableName,
		@ResourceIdField, 
		@FirstPermissionName

	--Permission 2
	INSERT INTO #temp2 
	EXEC ckbx_sp_Security_ListResources_AccessPermissibleHasAclPermission 
		@PrincipalId, 
		@PrincipalType, 
		@ResourceTableName, 
		@ResourceIdField, 
		@SecondPermissionName

	--Now select where both permissions are granted
	SELECT 
		t1.ResourceId 
	FROM 
		#temp1 t1
		INNER JOIN #temp2 t2 ON t1.ResourceId = t2.ResourceId

	DROP TABLE #temp1
	DROP TABLE #temp2

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListResources_AccessPermissibleHasEitherAclPermission]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--List all resources where the specified principal is on the ACL
-- with at least one of two specified permissions
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListResources_AccessPermissibleHasEitherAclPermission]
(
  @PrincipalId nvarchar(511),
  @PrincipalType varchar(64),
  @ResourceTableName varchar(64),
  @ResourceIdField varchar(64),
  @FirstPermissionName varchar(32),
  @SecondPermissionName varchar(32)
)
AS
	--Populate 2 temp tables with all resources that principal has access to
	CREATE TABLE #resourceList (
		ResourceId int
	)

	--Permission 1
	INSERT INTO #resourceList 
	EXEC ckbx_sp_Security_ListResources_AccessPermissibleHasAclPermission 
		@PrincipalId, 
		@PrincipalType, 
		@ResourceTableName,
		@ResourceIdField, 
		@FirstPermissionName

	--Permission 2
	INSERT INTO #resourceList 
	EXEC ckbx_sp_Security_ListResources_AccessPermissibleHasAclPermission 
		@PrincipalId, 
		@PrincipalType, 
		@ResourceTableName, 
		@ResourceIdField, 
		@SecondPermissionName

	--Now select UNION
	SELECT DISTINCT ResourceId FROM #resourceList

	DROP TABLE #resourceList
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListResources_DefaultPolicyHasAclPermission]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--List all resources where the default policy contains the specified
-- permission.
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListResources_DefaultPolicyHasAclPermission]
(
  @ResourceTableName varchar(64),
  @ResourceIdField varchar(64),
  @PermissionName varchar(32),
  @DataKey varchar(64)
)
AS
  DECLARE @Query nvarchar(4000)

  SET @Query =
	'
  INSERT INTO ckbx_Security_TempResourceList (spid, DataKey, ResourceId)
  SELECT
    @@spid,
    ''' + @DataKey + ''',
    acr.' + @ResourceIdField + '
  FROM
    ' + @ResourceTableName + ' acr
    INNER JOIN ckbx_PolicyPermissions pp ON pp.PolicyId = acr.DefaultPolicy
    INNER JOIN ckbx_Permission p ON p.PermissionId = pp.PermissionId
  WHERE
	p.PermissionName = ''' + @PermissionName + ''''
 
  EXEC(@Query)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListResources_DefaultPolicyHasBothPermissions]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--List all resources where the default policy contains both specified
-- permissions.
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListResources_DefaultPolicyHasBothPermissions]
(
  @ResourceTableName varchar(64),
  @ResourceIdField varchar(64),
  @FirstPermissionName varchar(32),
  @SecondPermissionName varchar(32)
)
AS
--Populate 2 temp tables with all resources that principal has access to
	CREATE TABLE #temp1 (
		ResourceId int
	)

	CREATE TABLE #temp2 (
		ResourceId int
	)

	--Permission 1
	INSERT INTO #temp1 
	EXEC ckbx_sp_Security_ListResources_DefaultPolicyHasAclPermission 
		@ResourceTableName,
		@ResourceIdField, 
		@FirstPermissionName

	--Permission 2
	INSERT INTO #temp2 
	EXEC ckbx_sp_Security_ListResources_DefaultPolicyHasAclPermission 
		@ResourceTableName, 
		@ResourceIdField, 
		@SecondPermissionName

	--Now select resources where both permissions are granted
	SELECT 
		t1.ResourceId 
	FROM 
		#temp1 t1
		INNER JOIN #temp2 t2 ON t1.ResourceId = t2.ResourceId

	DROP TABLE #temp1
	DROP TABLE #temp2

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListResources_DefaultPolicyHasEitherPermission]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--List all resources where the default policy contains one of two
-- specified permissions.
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListResources_DefaultPolicyHasEitherPermission]
(
  @ResourceTableName varchar(64),
  @ResourceIdField varchar(64),
  @FirstPermissionName varchar(32),
  @SecondPermissionName varchar(32)
)
AS
--Populate 2 temp tables with all resources that principal has access to
	CREATE TABLE #resourceList (
		ResourceId int
	)

	--Permission 1
    INSERT INTO #resourceList
	EXEC ckbx_sp_Security_ListResources_DefaultPolicyHasAclPermission 
		@ResourceTableName,
		@ResourceIdField, 
		@FirstPermissionName

	--Permission 2
	INSERT INTO #resourceList 
	EXEC ckbx_sp_Security_ListResources_DefaultPolicyHasAclPermission 
		@ResourceTableName, 
		@ResourceIdField, 
		@SecondPermissionName

	--Now select values
	SELECT ResourceId FROM #resourceList

	DROP TABLE #resourceList
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListResources_PrincipalGroupExcludesPermission]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--List all resources that a principal is denied access to as a result of permissions
-- assigned to groups principal is a member of.
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListResources_PrincipalGroupExcludesPermission]
(
  @PrincipalId nvarchar(511),
  @PrincipalType varchar(64),
  @ResourceTableName varchar(64),
  @ResourceIdField varchar(64),
  @PermissionName varchar(32),
  @DataKey varchar(64)
)
AS
  DECLARE @Query nvarchar(4000)

  SET @Query =
	'
	--Create temp list to contain groups
	CREATE TABLE #groupList (
		GroupIdAsText varchar(8)
	)

	--Populate table
	INSERT INTO #groupList
	SELECT CAST(GroupId AS varchar(8)) FROM ckbx_GroupMembers WHERE MemberUniqueIdentifier = ''' + @PrincipalId + ''';

  INSERT INTO ckbx_Security_TempResourceList (spid, DataKey, ResourceId)
  SELECT
    @@spid,
    ''' + @DataKey + ''',
    acr.' + @ResourceIdField + '
  FROM
    ' + @ResourceTableName + ' acr
    INNER JOIN ckbx_AccessControlEntries ace ON ace.AclId = acr.AclId
    INNER JOIN ckbx_AccessControlEntry ent ON ent.EntryId = ace.EntryId
	INNER JOIN #groupList gl ON gl.GroupIdAsText COLLATE DATABASE_DEFAULT = ent.EntryIdentifier COLLATE DATABASE_DEFAULT AND ent.EntryType = ''Checkbox.Users.Group''
    INNER JOIN ckbx_PolicyPermissions pp ON pp.PolicyId = ent.PolicyId
  WHERE
	(
		ent.EntryType = ''' + @PrincipalType + '''
		AND ent.EntryIdentifier = ''' + @PrincipalId + '''
	)
	AND 
	(
		pp.PolicyId IS NULL
		OR NOT EXISTS
		(
			SELECT
				p2.PermissionId
			FROM
				ckbx_PolicyPermissions pp2
				INNER JOIN ckbx_Permission p2 ON p2.PermissionId = pp2.PermissionId
			WHERE
			p2.PermissionName = ''' + @PermissionName + '''
			AND pp2.PolicyId = pp.PolicyId
		)
	)

	DROP TABLE #groupList'
 
  EXEC(@Query)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListResources_PrincipalGroupHasBothAclPermissions]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--List all resources where the specified principal is on the ACL
-- with at both of two specified permissions
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListResources_PrincipalGroupHasBothAclPermissions]
(
  @PrincipalId nvarchar(511),
  @PrincipalType varchar(64),
  @ResourceTableName varchar(64),
  @ResourceIdField varchar(64),
  @FirstPermissionName varchar(32),
  @SecondPermissionName varchar(32)
)
AS
	--Populate 2 temp tables with all resources that principal has access to
	CREATE TABLE #temp1 (
		ResourceId int
	)

	CREATE TABLE #temp2 (
		ResourceId int
	)

	--Permission 1
	INSERT INTO #temp1 
	EXEC ckbx_sp_Security_ListResources_PrincipalGroupHasPermission 
		@PrincipalId, 
		@PrincipalType, 
		@ResourceTableName,
		@ResourceIdField, 
		@FirstPermissionName

	--Permission 2
	INSERT INTO #temp2 
	EXEC ckbx_sp_Security_ListResources_PrincipalGroupHasPermission 
		@PrincipalId, 
		@PrincipalType, 
		@ResourceTableName, 
		@ResourceIdField, 
		@SecondPermissionName

	--Now select resources w/both permissions
	SELECT 
		t1.ResourceId 
	FROM 
		#temp1 t1
		INNER JOIN #temp2 t2 ON t1.ResourceId = t2.ResourceId

	DROP TABLE #temp1
	DROP TABLE #temp2

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListResources_PrincipalGroupHasEitherAclPermission]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--List all resources where the specified principal is on the ACL
-- with at least one of two specified permissions
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListResources_PrincipalGroupHasEitherAclPermission]
(
  @PrincipalId nvarchar(511),
  @PrincipalType varchar(64),
  @ResourceTableName varchar(64),
  @ResourceIdField varchar(64),
  @FirstPermissionName varchar(32),
  @SecondPermissionName varchar(32)
)
AS
	--Populate 2 temp tables with all resources that principal has access to
	CREATE TABLE #resourceList (
		ResourceId int
	)

	--Permission 1
	INSERT INTO #resourceList 
	EXEC ckbx_sp_Security_ListResources_PrincipalGroupHasPermission 
		@PrincipalId, 
		@PrincipalType, 
		@ResourceTableName,
		@ResourceIdField, 
		@FirstPermissionName

	--Permission 2
	INSERT INTO #resourceList 
	EXEC ckbx_sp_Security_ListResources_PrincipalGroupHasPermission 
		@PrincipalId, 
		@PrincipalType, 
		@ResourceTableName, 
		@ResourceIdField, 
		@SecondPermissionName

	--Now select values
	SELECT ResourceId FROM #resourceList

	DROP TABLE #resourceList
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListResources_PrincipalGroupHasPermission]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--List all resources that a principal can access as a result of permissions
-- assigned to groups principal is a member of.
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListResources_PrincipalGroupHasPermission]
(
  @PrincipalId nvarchar(511),
  @PrincipalType varchar(64),
  @ResourceTableName varchar(64),
  @ResourceIdField varchar(64),
  @PermissionName varchar(32),
  @DataKey varchar(64)
)
AS
  
  DECLARE @Query nvarchar(4000)

  SET @Query = '
	--Create temp list to contain groups
	CREATE TABLE #groupList (
		GroupIdAsText varchar(8)
	)

	--Populate table
	INSERT INTO #groupList
	SELECT CAST(GroupId AS varchar(8)) FROM ckbx_GroupMembers WHERE MemberUniqueIdentifier = ''' + @PrincipalId + ''';

	--Now build query to list resources the specfied groups can access
	INSERT INTO ckbx_Security_TempResourceList (spid, DataKey, ResourceId)
	SELECT
		@@spid,
		''' + @DataKey + ''',
		acr.' + @ResourceIdField + '
	FROM
		' + @ResourceTableName + ' acr
		INNER JOIN ckbx_AccessControlEntries ace ON ace.AclId = acr.AclId
		INNER JOIN ckbx_AccessControlEntry ent ON ent.EntryId = ace.EntryId
		INNER JOIN #groupList gl ON gl.GroupIdAsText COLLATE DATABASE_DEFAULT  = ent.EntryIdentifier COLLATE DATABASE_DEFAULT AND ent.EntryType  = ''Checkbox.Users.Group''
		INNER JOIN ckbx_PolicyPermissions pp ON pp.PolicyId = ent.PolicyId
		INNER JOIN ckbx_Permission p ON p.PermissionId = pp.PermissionId
	WHERE
			p.PermissionName = ''' + @PermissionName + ''';

	DROP TABLE #groupList'

  EXEC (@Query)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_ListTakeableSurveysAnonymous]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Security_ListTakeableSurveysAnonymous]
( 
@UniqueIdentifier nvarchar(511),
   @FirstPermissionName varchar(32),
   @SecondPermissionName varchar(32),
   @RequireBothPermissions bit,
   @UseAclExclusion bit,
   @PageNumber int, 
   @ResultsPerPage int,
   @SortField varchar(64),
   @SortAscending bit,
   @FilterField varchar(64),
   @FilterValue nvarchar(255),
   @DataKey varchar(64) = null
)
AS
  --Clear temp data
  DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleSurveys'
 
  IF @SecondPermissionName IS NULL OR LEN(@SecondPermissionName) = 0
    BEGIN
		--One permission to check, so do it!
		EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissible
			@UniqueIdentifier,
			'Prezza.Framework.Security.ExtendedPrincipal',
			'ckbx_Template',
			'TemplateId',
			@FirstPermissionName,
			@UseAclExclusion,
			'AccessibleSurveys'
    END
  ELSE
    BEGIN
		IF @RequireBothPermissions = 1
		  BEGIN
			EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithBothPermissions
				@UniqueIdentifier,
				'Prezza.Framework.Security.ExtendedPrincipal',
				'ckbx_Template',
				'TemplateId',
				@FirstPermissionName,
				@SecondPermissionName,
				@UseAclExclusion,
				'AccessibleSurveys'
		  END
		ELSE
		  BEGIN
			EXEC ckbx_sp_Security_ListResources_AccessibleByAccessPermissibleWithEitherPermission
				@UniqueIdentifier,
				'Prezza.Framework.Security.ExtendedPrincipal',
				'ckbx_Template',
				'TemplateId',
				@FirstPermissionName,
				@SecondPermissionName,
				@UseAclExclusion,
				'AccessibleSurveys'
		  END
    END
  
	DECLARE @OrderBy varchar(100)
  	
	SET @OrderBy = ' ORDER BY [TemplateName] ASC '

	--Modify sort field, if necessary
	IF @SortField = 'ItemName'
		BEGIN
			SET @SortField = 'TemplateName'
		END
	
	--Create the order-by clause, if any
	IF (@SortField IS NOT NULL AND LEN(@SortField) > 0 )
	BEGIN
		IF @SortAscending = 1
			BEGIN
				SET @OrderBy = ' ORDER BY [' + @SortField + '] ASC '
			END
		ELSE
			BEGIN
				SET @OrderBy = ' ORDER BY [' + @SortField + '] DESC '
			END
	END
        
	--If not paging, simply return the results
	DECLARE @Query varchar(3000)
	DECLARE @SortedQuery varchar(3000)
			
	--Otherwise, perform any necessary paging and return result set
	IF @PageNumber <= 0 OR @ResultsPerPage <= 0
		BEGIN
			SET @Query = '
				DECLARE @currentTime as DateTime;
				SET @currentTime = getDate();
				SELECT
					DISTINCT rt.*
				FROM
					ckbx_Security_TempResourceList tmp
					INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
					INNER JOIN ckbx_Template t ON t.TemplateId = rt.ResponseTemplateId 
					INNER JOIN ckbx_FormFolders ff ON ff.ItemId = t.TemplateId '
				
			SET @Query = @Query + '
				WHERE
				(t.Deleted IS NULL OR t.Deleted = 0)
				AND (rt.IsActive = 1)
				AND (rt.ActivationStart IS NULL OR @currentTime >= rt.ActivationStart)
				AND (rt.ActivationEnd IS NULL OR @currentTime <= rt.ActivationEnd)
				AND (rt.SecurityType < 3)
				AND DataKey = ''AccessibleSurveys'' AND spid = @@spid '
				
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
				BEGIN
					IF (@FilterField = 'Name')
						BEGIN
							SET @Query = @Query + ' AND rt.TemplateName like ''%' + cast(@FilterValue as NVARCHAR) + '%'' '	
						END	
					ELSE IF (@FilterField = 'Id')
						BEGIN
							SET @Query = @Query + ' AND rt.ResponseTemplateID like ''%' + cast(@FilterValue as NVARCHAR) + '%'' '	
						END
					ELSE IF (@FilterField = 'Guid')
						BEGIN
							SET @Query = @Query + ' AND rt.[GUID] like ''%' + cast(@FilterValue as NVARCHAR) + '%'' '	
						END
					ELSE IF (@FilterField = 'CreatedBy')
						BEGIN
							SET @Query = @Query + ' AND rt.CreatedBy like ''%' + cast(@FilterValue as NVARCHAR) + '%'' '	
						END
				END
				
				IF (@SortField IS NOT NULL AND LEN(@SortField) > 0)
					BEGIN
						SET @SortedQuery = @Query + @OrderBy
					END

			EXEC(@SortedQuery)
			
			--Now select count
			SET @Query = REPLACE(@Query, 'DISTINCT rt.*', 'COUNT(rt.ResponseTemplateId) AS TotalItemCount')
			
			EXEC(@Query)
		END
	ELSE
		BEGIN
			--Put results in temp table, then select
			 --Make sure temp table does not exist
			DECLARE @StartRow int
			DECLARE @EndRow int			

			SET @StartRow = ((@PageNumber - 1) * @ResultsPerPage)  + 1
			SET @EndRow = @StartRow + @ResultsPerPage - 1  --i.e. Start = 1 and results per page = 10 means get rows 1-10

			IF object_id('tempdb..#orderedResults') IS NOT NULL
				BEGIN
					DROP TABLE #orderedResults
				END

			SELECT @Query = '
				DECLARE @currentTime as DateTime;
				SET @currentTime = getDate();
				SELECT DISTINCT
					rt.*
					INTO #orderedResults
				FROM
					ckbx_Security_TempResourceList tmp
					INNER JOIN ckbx_ResponseTemplate rt ON rt.ResponseTemplateId = tmp.ResourceId
					INNER JOIN ckbx_Template t ON t.TemplateId = rt.ResponseTemplateId 
					INNER JOIN ckbx_FormFolders ff ON ff.ItemId = t.TemplateId '
							
			SET @Query = @Query + '
				WHERE
					(t.Deleted IS NULL OR t.Deleted = 0)
					AND (rt.IsActive = 1)
					AND (rt.ActivationStart IS NULL OR @currentTime >= rt.ActivationStart)
					AND (rt.ActivationEnd IS NULL OR @currentTime <= rt.ActivationEnd)
					AND (rt.SecurityType < 3)
					AND DataKey = ''AccessibleSurveys'' AND spid = @@spid '
				IF (@FilterValue IS NOT NULL AND len(@FilterValue) > 0)
				BEGIN
					IF (@FilterField = 'Name')
						BEGIN
							SET @Query = @Query + ' AND rt.TemplateName like ''%' + cast(@FilterValue as NVARCHAR) + '%'' '	
						END	
					ELSE IF (@FilterField = 'Id')
						BEGIN
							SET @Query = @Query + ' AND rt.ResponseTemplateID like ''%' + cast(@FilterValue as NVARCHAR) + '%'' '	
						END
					ELSE IF (@FilterField = 'Guid')
						BEGIN
							SET @Query = @Query + ' AND rt.[GUID] like ''%' + cast(@FilterValue as NVARCHAR) + '%'' '	
						END
					ELSE IF (@FilterField = 'CreatedBy')
						BEGIN
							SET @Query = @Query + ' AND rt.CreatedBy like ''%' + cast(@FilterValue as NVARCHAR) + '%'' '	
						END
				END
				
				SET @Query = @Query + @OrderBy + ';

                SELECT * FROM 
				(
					SELECT *,ROW_NUMBER() OVER ('+ @OrderBy +') AS NUM
					FROM #orderedResults
				) as OrderedResults
				WHERE NUM BETWEEN ' + CAST(@StartRow AS VARCHAR(6)) + ' AND ' + CAST(@EndRow AS VARCHAR(6)) + ';
				
				--Select count
				SELECT COUNT(ResponseTemplateId) AS TotalItemCount FROM #orderedResults'
			
			EXEC(@Query)
		END

    --Clear temp data
    DELETE FROM ckbx_Security_TempResourceList WHERE spid = @@spid AND DataKey = 'AccessibleSurveys'

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Security_UpdateDefaultPolicyId]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[ckbx_sp_Security_UpdateDefaultPolicyId]
(
  @DataTableName varchar(255),
  @IdentityColumnName varchar(255),
  @DefaultPolicyColumnName varchar(255),
  @ObjectIdentity int,
  @NewDefaultPolicyId int
)
AS
  DECLARE @Query varchar(2000)

  SET @Query = '
	UPDATE 
		[' + @DataTableName + '] 
	SET 
		[' + @DefaultPolicyColumnName + '] = ' + CAST(@NewDefaultPolicyId AS VARCHAR(8)) + ' 
	WHERE 
		[' + @IdentityColumnName + '] = ' + CAST(@NewDefaultPolicyId AS VARCHAR(8))
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Setting_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [dbo].[ckbx_sp_Setting_Delete]

	(
		@SettingName nvarchar(800)
	)

AS
	/* SET NOCOUNT ON */
	
	DELETE ckbx_Settings
	WHERE SettingName = @SettingName
	
	RETURN 





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Setting_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_Setting_Get]
(
	@SettingName nvarchar(800)
)
AS
	
	SELECT SettingValue FROM ckbx_Settings WHERE SettingName = @SettingName
	
	



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Setting_Insert]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [dbo].[ckbx_sp_Setting_Insert]

	(
		@SettingName nvarchar(200),
		@SettingValue nvarchar(2000)
	)

AS
	/* SET NOCOUNT ON */
	
	INSERT INTO ckbx_Settings(SettingName, SettingValue) 
	VALUES (@SettingName, @SettingValue)
	
	RETURN 



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Setting_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [dbo].[ckbx_sp_Setting_Update]

	(
		@SettingName nvarchar(800),
		@SettingValue nvarchar(4000)
	)

AS
	/* SET NOCOUNT ON */
	
	UPDATE ckbx_Settings
	SET SettingValue = @SettingValue WHERE SettingName = @SettingName
	
	RETURN 





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_DeleteElement]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_Style_DeleteElement]
(
  @ElementID INT
)
AS
  DELETE FROM ckbx_StyleTemplate_Properties WHERE ElementID = @ElementID
  DELETE FROM ckbx_StyleTemplate_Elements WHERE ElementID = @ElementID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_DeleteProperty]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Style_DeleteProperty]
(
  @ElementID int,
  @PropertyName varchar(127)
)
  AS
    DELETE TOP(1) FROM ckbx_StyleTemplate_Properties WHERE ElementID = @ElementID AND PropertyName = @PropertyName

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_DeleteTemplate]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--Alter procedure
CREATE PROCEDURE [dbo].[ckbx_sp_Style_DeleteTemplate]
(
   @TemplateID int
)
AS

  --Update default template
  UPDATE ckbx_Settings SET SettingValue = '-1' WHERE SettingName = 'DefaultStyleTemplate' AND SettingValue = CAST(@TemplateID AS VARCHAR)

  --De-reference any forms
  UPDATE ckbx_ResponseTemplate SET StyleTemplateID = NULL WHERE StyleTemplateID = @TemplateID

  --De-reference any forms
  UPDATE ckbx_ResponseTemplate SET TabletStyleTemplateID = NULL WHERE TabletStyleTemplateID = @TemplateID

  --De-reference any forms
  UPDATE ckbx_ResponseTemplate SET SmartPhoneStyleTemplateID = NULL WHERE SmartPhoneStyleTemplateID = @TemplateID

  --De-reference any reports
  UPDATE ckbx_AnalysisTemplate SET StyleTemplateID = NULL WHERE StyleTemplateID = @TemplateID
 
  --De-reference any email items
  UPDATE ckbx_ItemData_Email SET StyleTemplateID = NULL WHERE StyleTemplateID = @TemplateID

  --Delete the template element properties
  DELETE FROM ckbx_StyleTemplate_Properties WHERE ElementID IN (Select ElementID FROM ckbx_StyleTemplate_Elements WHERE TemplateID = @TemplateID)

  --Delete the template elements
  DELETE FROM ckbx_StyleTemplate_Elements WHERE TemplateID = @TemplateID

  --Delete the style template
  DELETE FROM ckbx_StyleTemplate WHERE TemplateID = @TemplateID
  


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_GetATUsing]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_Style_GetATUsing]
(
  @TemplateID int
)
  AS
    SELECT 
      ResponseTemplateID 
    FROM 
       ckbx_AnalysisTemplate  [at]
       INNER JOIN ckbx_Template t ON t.TemplateID = [at].ResponseTemplateID
    WHERE 
       [at].StyleTemplateID = @TemplateID
       AND (t.Deleted IS NULL OR t.Deleted = 0)



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_GetEmailUsing]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE  PROCEDURE [dbo].[ckbx_sp_Style_GetEmailUsing]
(
  @TemplateID int
)
  AS
    SELECT 
      ide.ItemID
    FROM 
       ckbx_ItemData_Email ide
       INNER JOIN ckbx_Item i ON i.ItemID = ide.ItemID
    WHERE 
       ide.StyleTemplateID = @TemplateID
       AND (i.Deleted IS NULL OR i.Deleted = 0)





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_GetIDFromName]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Style_GetIDFromName]
(
   @Name nvarchar(255),
   @TemplateID int out
)
AS
  SELECT @TemplateID = TemplateID FROM ckbx_StyleTemplate WHERE [Name] = @Name


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_GetProperties]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Style_GetProperties]
(
	@TemplateID int
)
AS
BEGIN
	SELECT * FROM ckbx_StyleTemplate WHERE TemplateID = @TemplateID
END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_GetRTUsing]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--Alter procedure
CREATE PROCEDURE [dbo].[ckbx_sp_Style_GetRTUsing]
(
   @TemplateID int
)
AS
    SELECT 
      ResponseTemplateID 
    FROM 
       ckbx_ResponseTemplate  rt
       INNER JOIN ckbx_Template t ON t.TemplateID = rt.ResponseTemplateID
    WHERE 
       (rt.StyleTemplateID = @TemplateID or rt.TabletStyleTemplateID = @TemplateID or rt.SmartPhoneStyleTemplateID = @TemplateID)
       AND (t.Deleted IS NULL OR t.Deleted = 0)
  


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_GetTemplate]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--Alter procedure
CREATE PROCEDURE [dbo].[ckbx_sp_Style_GetTemplate]
(
  @TemplateID int
  
)
AS

		SELECT TemplateID, [Name], [Type], Header, Footer, DateCreated, CreatedBy, IsPublic, IsEditable FROM ckbx_StyleTemplate WHERE TemplateID = @TemplateID
		SELECT TemplateID, ElementID, ElementName FROM ckbx_StyleTemplate_Elements WHERE TemplateID = @TemplateID
		SELECT ElementID, PropertyName, PropertyValue FROM ckbx_StyleTemplate_Properties WHERE ElementID IN (SELECT ElementID FROM ckbx_StyleTemplate_Elements WHERE TemplateID = @TemplateID)


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_InsertElement]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Style_InsertElement]
(
  @TemplateID int,
  @ElementName varchar(127),
  @ElementID int out
)
AS
  INSERT INTO ckbx_StyleTemplate_Elements (TemplateiD, ElementName) VALUES (@TemplateID, @ElementName)
  SELECT @ElementID = @@IDENTITY


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_InsertProperty]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Style_InsertProperty]
(
  @ElementID int,
  @PropertyName varchar(127),
  @PropertyValue varchar(255)
)
  AS
    INSERT INTO ckbx_StyleTemplate_Properties 
     (ElementID, PropertyName, PropertyValue)
    VALUES
     (@ElementID, @PropertyName, @PropertyValue)




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_InsertTemplate]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--Alter procedure
CREATE PROCEDURE [dbo].[ckbx_sp_Style_InsertTemplate]
(
  @Name nvarchar(255),
  @CreatedBy nvarchar(511),
  @Header ntext,
  @Footer ntext,
  @IsPublic bit,
  @IsEditable bit,
  @Type nvarchar(50),
  @TemplateID int out
  
)
AS

  INSERT INTO ckbx_StyleTemplate
    ([Name], Header, Footer, DateCreated, CreatedBy, IsPublic, IsEditable, Type)
  VALUES
    (@Name, @Header, @Footer, GetDate(), @CreatedBy, @IsPublic, @IsEditable, @Type)

  SELECT @TemplateID = @@IDENTITY

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_ListAll]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Style_ListAll]
AS
  SELECT * FROM ckbx_StyleTemplate ORDER BY [Name] ASC


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_ListForUser]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Style_ListForUser]
(
  @UniqueIdentifier nvarchar(511)
)
AS
  SELECT * FROM ckbx_StyleTemplate WHERE IsPublic = 1 OR (CreatedBy IS NOT NULL AND CreatedBy = @UniqueIdentifier) ORDER BY [Name] ASC


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_UpdateElement]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Style_UpdateElement]
(
  @ElementID INT,
  @ElementName varchar(127)
)
AS
  UPDATE ckbx_StyleTemplate_Elements SET ElementName = @ElementName WHERE ElementID = @ElementID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_UpdateProperty]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Style_UpdateProperty]
(
  @ElementID int,
  @PropertyName varchar(127),
  @PropertyValue varchar(255)
)
  AS
    UPDATE ckbx_StyleTemplate_Properties
    SET
      PropertyValue = @PropertyValue
    WHERE
      ElementID = @ElementID
      AND PropertyName = @PropertyName




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Style_UpdateTemplate]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--Alter procedure
CREATE PROCEDURE [dbo].[ckbx_sp_Style_UpdateTemplate]
(
  @TemplateID int,
  @Name nvarchar(255),
  @CreatedBy nvarchar(511),
  @Header ntext,
  @Footer ntext,
  @IsPublic bit,
  @IsEditable bit,
  @Type nvarchar(50)
  
)
AS

  UPDATE ckbx_StyleTemplate
  SET
    [Name] = @Name,
    CreatedBy = @CreatedBy,
    Header = @Header,
    Footer = @Footer,
    IsPublic = @IsPublic,
    IsEditable = @IsEditable,
    Type = @Type
  WHERE
    TemplateID = @TemplateID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Template_AddItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE  PROCEDURE [dbo].[ckbx_sp_Template_AddItem]
(
  @TemplateID int,
  @ItemID int
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_Template_Items WHERE TemplateID = @TemplateID AND ItemID = @ItemID)
    BEGIN
      INSERT INTO ckbx_Template_Items (TemplateID, ItemID) VALUES (@TemplateID, @ItemID)
    END
  
  RETURN






GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Template_CheckResponsesUpdated]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Template_CheckResponsesUpdated]
(
   @TemplateID int,
   @ReferenceDate datetime,
   @Updated bit out
)
AS
   SET @Updated = 0
   DECLARE @LastUpdated datetime

   DECLARE @Count int
   SET @Count = (SELECT COUNT(*) FROM ckbx_Response WHERE ResponseTemplateID = @TemplateId AND LastEdit > @ReferenceDate)
   
   IF(@Count > 0)
		BEGIN
			SET @Updated = 1
		END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Template_CheckUpdated]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Template_CheckUpdated]
(
   @TemplateID int,
   @ReferenceDate datetime,
   @Updated bit out
)
AS
   SET @Updated = 0
   DECLARE @LastUpdated datetime

   SELECT @LastUpdated = ModifiedDate FROM ckbx_Template WHERE TemplateId = @TemplateId

   IF @LastUpdated IS NULL OR @ReferenceDate IS NULL OR @LastUpdated  > @ReferenceDate
      BEGIN
         SET @Updated = 1
      END
   
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Template_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Template_Delete]
(
	@TemplateID int
)
AS

UPDATE ckbx_Template SET Deleted = 1 WHERE TemplateID = @TemplateID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Template_DeleteItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_Template_DeleteItem]
(
  @TemplateID int,
  @ItemID int
)
AS
begin
  DELETE FROM ckbx_Template_Items WHERE TemplateID = @TemplateID AND ItemID = @ItemID

  delete from ckbx_Timeline_Result where ObjectParentType = 'SURVEY' and ObjectParentID = @TemplateID
	  and ObjectID = @ItemID and EventID in (select EventID from ckbx_Timeline_Events where EventName like 'ITEM%')
end






GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Template_DeletePage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Template_DeletePage]
(
	@TemplateID int,
	@PageID int
)
AS
	DELETE FROM ckbx_Template_Pages WHERE TemplateID = @TemplateID AND PageID = @PageID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Template_GetAccessControllableResource]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_Template_GetAccessControllableResource]
(
  @TemplateID int
)
AS
SELECT
	AclID,
	DefaultPolicy
FROM
	ckbx_Template
WHERE
	TemplateID = @TemplateID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Template_Insert]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE    PROCEDURE [dbo].[ckbx_sp_Template_Insert]
(
  @CreatedDate DateTime,
  @CreatedBy nvarchar(255),
  @ModifiedDate DateTime,
  @DefaultPolicy int,
  @AclID int,
  @TemplateID int out
)
AS
  INSERT INTO ckbx_Template (CreatedDate, CreatedBy, ModifiedDate, DefaultPolicy, AclID) VALUES (@CreatedDate, @CreatedBy, @ModifiedDate, @DefaultPolicy, @AclID)
  SELECT @TemplateID = @@IDENTITY








GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Template_InsertPage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_Template_InsertPage]
(
	@TemplateID int,
	@PagePosition int,
	@LayoutTemplateID int,
    @Title nvarchar(32),
    @PageType varchar(32),
	@PageID int out
)
AS

	INSERT INTO ckbx_Template_Pages (TemplateID, PagePosition, LayoutTemplateID, PageType) VALUES (@TemplateID, @PagePosition, @LayoutTemplateID, @PageType)

	SET @PageID = SCOPE_IDENTITY()

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Template_SetModifiedDate]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--update ckbx_Settings SET SettingValue = 'True' Where SettingName = 'EnableResponseTemplateCaching'

CREATE PROCEDURE [dbo].[ckbx_sp_Template_SetModifiedDate]
(
   @TemplateID int,
   @ModifiedDate datetime
)
AS
  UPDATE ckbx_Template SET ModifiedDate = @ModifiedDate WHERE TemplateID = @TemplateID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Template_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[ckbx_sp_Template_Update]
(
  @TemplateID int,
  @DefaultPolicy int,
  @AclID int,
  @ModifiedDate DateTime,
  @ModifiedBy nvarchar(611)
)
AS
  UPDATE 
    ckbx_Template 
  SET 
    ModifiedDate = @ModifiedDate,
    DefaultPolicy = @DefaultPolicy,
    AclID = @AclID,
    ModifiedBy = @ModifiedBy
    
  WHERE TemplateID = @TemplateID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Template_UpdatePage]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Template_UpdatePage]
(
  @TemplateID int,
  @PageID int,
  @PagePosition int,
  @LayoutTemplateID int,
  @Title nvarchar(32),
  @PageType varchar(32)
)
AS
  UPDATE ckbx_Template_Pages 
  SET 
	PagePosition = @PagePosition,
	LayoutTemplateID = @LayoutTemplateID,
    Title = @Title,
    PageType = @PageType
  WHERE 
	TemplateID = @TemplateID
	AND PageID = @PageID
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_TemplatePage_AddItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_TemplatePage_AddItem]
(
	@PageID int,
	@ItemID int,
	@Position int
)
AS
  IF NOT EXISTS(SELECT ItemID FROM ckbx_TemplatePage_Items WHERE PageID = @PageID AND ItemID = @ItemID AND Position = @Position)
    BEGIN
      INSERT INTO ckbx_TemplatePage_Items (PageID, ItemID, [Position]) VALUES (@PageID, @ItemID, @Position)
    END

  DELETE FROM ckbx_Response_PageItemOrder WHERE PageID = @PageID



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_TemplatePage_AddRule]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_TemplatePage_AddRule]
(
	@PageID int,
	@RuleID int,
	@EventTrigger varchar (50)
)
AS

	IF NOT EXISTS (SELECT RuleID FROM ckbx_TemplatePage_Rules WHERE PageID = @PageID AND RuleID = @RuleID)
	BEGIN
		INSERT INTO ckbx_TemplatePage_Rules (PageID, RuleID, EventTrigger) VALUES (@PageID, @RuleID, @EventTrigger)
	END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_TemplatePage_DeleteItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_TemplatePage_DeleteItem]
(
 	@PageID int,
	@ItemID int
)
AS
	--Remove all order information so order will be regenerated if this response is ever reloaded
	DELETE FROM ckbx_Response_PageItemOrder WHERE @PageID = @PageID

	--Remove the item
	DELETE ckbx_TemplatePage_Items WHERE PageID = @PageID AND ItemID = @ItemID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_TemplatePage_DeleteRule]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_TemplatePage_DeleteRule]
(
	@PageID int,
	@RuleID int
)
AS
	DELETE ckbx_TemplatePage_Rules WHERE PageID = @PageID AND RuleID = @RuleID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_TemplatePage_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_TemplatePage_Get]
(
  @PageId int
)
AS
  SELECT
    TemplateId,
    PageId,
    PagePosition,
    RandomizeItems,
    LayoutTemplateId,
    Title,
    PageType
  FROM
    ckbx_Template_Pages   
  WHERE
    PageId = @PageId
GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_TemplatePage_SetItemPos]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROCEDURE [dbo].[ckbx_sp_TemplatePage_SetItemPos]
(
 	@PageID int,
	@ItemID int,
        @Position int
)
AS
	UPDATE ckbx_TemplatePage_Items SET Position = @Position WHERE PageID = @PageID AND ItemID = @ItemID






GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_TemplatePage_UpsertItem]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_TemplatePage_UpsertItem]
(
	@PageID int,
	@ItemID int,
	@Position int
)
AS
	--If item already exists, change its position
	IF EXISTS(Select ItemId FROM ckbx_TemplatePage_Items WHERE PageId = @PageId AND ItemId = @ItemId)
		BEGIN
			UPDATE ckbx_TemplatePage_Items SET [Position] = @Position WHERE PageId = @PageId AND ItemId = @ItemId
		END
	ELSE
		BEGIN
			INSERT INTO ckbx_TemplatePage_Items (PageID, ItemID, [Position]) VALUES (@PageID, @ItemID, @Position)
		END

	--Clear any page order used for randomizing page position
	DELETE FROM ckbx_Response_PageItemOrder WHERE PageID = @PageID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Text_GetAll]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE  PROCEDURE [dbo].[ckbx_sp_Text_GetAll]
(
  @LanguageCode varchar(5) = null
)
AS
  IF @LanguageCode IS NULL
    BEGIN
      /* Get all language codes */
      SELECT DISTINCT LanguageCode FROM ckbx_Text

      /* Get all text ids */
      SELECT DISTINCT TextID FROM ckbx_Text

      /* Get all text items */
      SELECT TextID, LanguageCode, TextValue FROM ckbx_Text
    END
  ELSE
    BEGIN
      SELECT TextID, LanguageCode, TextValue FROM ckbx_Text WHERE LanguageCode = @LanguageCode
    END





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Text_GetAllTextIds]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE  PROCEDURE [dbo].[ckbx_sp_Text_GetAllTextIds]
AS
	/* Get all text ids */
	SELECT DISTINCT TextID FROM ckbx_Text ORDER BY TextId ASC





GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Text_GetByID]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_Text_GetByID]
(
	@TextID varchar(255),
	@LanguageCode varchar(5) = null
)
AS
  IF @LanguageCode IS NULL
    BEGIN
		SELECT 
			TextID, 
			LanguageCode, 
			TextValue 
		FROM 
			ckbx_Text
		WHERE
			TextID = @TextID
    END
  ELSE
    BEGIN
		IF EXISTS(SELECT TextId FROM ckbx_Text WHERE TextId = @TextId AND LanguageCode = @LanguageCode)
			BEGIN
				SELECT 
					TextID, 
					LanguageCode, 
					TextValue 
				FROM 
					ckbx_Text
				WHERE
					TextID = @TextID
					AND LanguageCode = @LanguageCode
			END
		ELSE
			BEGIN
				SELECT 
					@TextID AS TextID,
					@LanguageCode AS LanguageCode,
					'' AS TextValue
			END
	END	

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Text_GetFiltered]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ckbx_sp_Text_GetFiltered]
(
	@PartialTextID varchar(255),
	@LanguageCode varchar(5) = null
)
AS
	IF @LanguageCode IS NULL
		BEGIN
			SELECT 
				TextID, 
				LanguageCode, 
				TextValue 
			FROM 
				ckbx_Text
			WHERE
				TextID like '%' + @PartialTextID + '%'
			END
	ELSE
		BEGIN
			--Create a temp table for results so that we can be sure to include "empty" values for 
			-- text not localized in the specified language
		    CREATE TABLE #tmpTextIds(TextId varchar(255))

			--Insert all text ids			
			INSERT INTO #tmpTextIds (TextID) SELECT DISTINCT TextID FROM ckbx_Text WHERE TextID LIKE '%' + @PartialTextID + '%'

			SELECT 
				tt.TextId AS TextID,
				@LanguageCode AS LanguageCode,
				t.TextValue AS TextValue
			FROM 
				#tmpTextIds tt
				LEFT OUTER JOIN ckbx_Text t ON t.TextId = tt.TextId And t.LanguageCode = @LanguageCode
		END
		
  




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Text_GetText]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[ckbx_sp_Text_GetText]
(
  @TextID varchar(255),
  @LanguageCode varchar(5)
)
AS
  SELECT TextValue FROM ckbx_Text WHERE TextID = @TextID AND LanguageCode = @LanguageCode
  RETURN




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Text_Set]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE  PROCEDURE [dbo].[ckbx_sp_Text_Set]
(
  @TextID varchar(255),
  @LanguageCode varchar(5),
  @TextValue ntext
)
AS
  IF NOT EXISTS (SELECT TextID FROM ckbx_Text WHERE TextID = @TextID AND LanguageCode = @LanguageCode)
    BEGIN
      INSERT INTO ckbx_Text (TextID, LanguageCode, TextValue) VALUES (@TextID, @LanguageCode, @TextValue)
    END
  ELSE
    BEGIN
      UPDATE ckbx_Text SET TextValue = @TextValue WHERE TextID = @TextID AND LanguageCode = @LanguageCode
    END  

  RETURN




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Ticket_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[ckbx_sp_Ticket_Delete]
(
  @TicketGUID uniqueidentifier
)
AS
  DELETE FROM ckbx_Tickets WHERE TicketGUID = @TicketGUID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Ticket_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Ticket_Get]
(
  @TicketGUID uniqueidentifier
)
AS
  SELECT TOP 1 TicketGuid, Expiration FROM ckbx_Tickets WHERE TicketGUID = @TicketGUID ORDER BY Expiration DESC

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Ticket_Insert]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Ticket_Insert]
(
  @TicketGUID uniqueidentifier,
  @Expiration datetime
)
AS
  IF NOT EXISTS(Select TicketGUID from ckbx_Tickets WHERE TicketGUID = @TicketGUID)
    BEGIN
      INSERT INTO ckbx_Tickets (TicketGUID, Expiration) VALUES (@TicketGuid, @Expiration)
    END
  ELSE
    BEGIN
      UPDATE ckbx_Tickets SET Expiration = @Expiration WHERE TicketGUID = @TicketGUID
    END

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Timeline_Aggregate]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Timeline_Aggregate]
(
  @UserID nvarchar(611),
  @RequestID bigint,
  @ParentObjectID bigint,
  @ParentObjectType nvarchar(100)
)
AS
begin
	declare @Status as nvarchar(100)
	declare @Manager as nvarchar(100)
	declare @query as nvarchar(4000)
	select @Status = RequestStatus, @Manager = Manager from ckbx_Timeline_Request 
		where RequestID = @RequestID and lower(Creator) = lower(@UserID)
		 
	if @Status is null
	begin
		RAISERROR (N'The user %s doesn''t have access to request with id %d.', 
           10,
           1,
           @UserID, 
           @RequestID);
	end
	
	if @Status <> 'Succeeded' 
	begin
		return
	end		
		
	create table #Aggregated (EventID int, UserID nvarchar(611), ObjectID nvarchar(611), 
		ObjectGUID uniqueidentifier, ObjectParentID bigint, 
		Cnt bigint, 
		Period int,
		[Date] datetime,
		ObjectParentName nvarchar(255));

	--insert preaggregated results
	insert into #Aggregated	(EventID, UserID, ObjectID, ObjectGUID, ObjectParentID, Cnt, Period, [Date])
		select tr.EventID, null, null, null, max(ObjectParentID), sum(tr.EventCount), tr.PeriodID, null
			from ckbx_Timeline_Result tr
			inner join ckbx_Timeline_Settings s on tr.EventID = s.EventID 
		where lower(tr.Creator) = lower(@UserID) and tr.Manager = @Manager and 
				(Monthly = 1 and tr.PeriodID = 4
				or Weekly = 1 and tr.PeriodID = 3
				or Daily = 1 and tr.PeriodID = 2)				
				and 		
				 ((tr.PeriodID = 4 and DATEADD(month, 1, Occured) > getdate())
				or (tr.PeriodID = 3 and DATEADD(week, 1, Occured) > getdate()) 
				or (tr.PeriodID = 2 and DATEADD(day, 1, Occured) > getdate()) 
				 )
			and (@ParentObjectID = 0 or @ParentObjectID = ObjectParentID) and (@ParentObjectType is null or @ParentObjectType = ObjectParentType)
			and tr.PeriodID > 1
		group by tr.EventID, s.EventOrder, tr.PeriodID
		order by s.EventOrder

	--aggregate monthly events
	insert into #Aggregated	(EventID, UserID, ObjectID, ObjectGUID, ObjectParentID, Cnt, Period, [Date])
		select tr.EventID, null, null, null, max(ObjectParentID), count(distinct ObjectID), 4, null
			from ckbx_Timeline_Result tr
			inner join ckbx_Timeline_Settings s on tr.EventID = s.EventID 
		where lower(tr.Creator) = lower(@UserID) and tr.Manager = @Manager and Monthly = 1 and DATEADD(month, 1, Occured) > getdate()
			and (@ParentObjectID = 0 or @ParentObjectID = ObjectParentID) and (@ParentObjectType is null or @ParentObjectType = ObjectParentType)
			and tr.PeriodID = 1
		group by tr.EventID, s.EventOrder
		order by s.EventOrder

	--aggregate weekly events
	insert into #Aggregated	(EventID, UserID, ObjectID, ObjectGUID, ObjectParentID, Cnt, Period, [Date])
		select tr.EventID, null, null, null, max(ObjectParentID), count(distinct ObjectID), 3, null
			from ckbx_Timeline_Result tr
			inner join ckbx_Timeline_Settings s on tr.EventID = s.EventID 
		where lower(tr.Creator) = lower(@UserID) and tr.Manager = @Manager and Weekly = 1 and DATEADD(week, 1, Occured) > getdate()
			and (@ParentObjectID = 0 or @ParentObjectID = ObjectParentID) and (@ParentObjectType is null or @ParentObjectType = ObjectParentType)
			and tr.PeriodID = 1
		group by tr.EventID, s.EventOrder
		order by s.EventOrder

	--aggregate daily events
	insert into #Aggregated	(EventID, UserID, ObjectID, ObjectGUID, ObjectParentID, Cnt, Period, [Date])
		select tr.EventID, null, null, null, max(ObjectParentID), count(distinct ObjectID), 2, null
			from ckbx_Timeline_Result tr
			inner join ckbx_Timeline_Settings s on tr.EventID = s.EventID 
		where lower(tr.Creator) = lower(@UserID) and tr.Manager = @Manager and Daily = 1 and DATEADD(day, 1, Occured) > getdate()
			and (@ParentObjectID = 0 or @ParentObjectID = ObjectParentID) and (@ParentObjectType is null or @ParentObjectType = ObjectParentType)
			and tr.PeriodID = 1
		group by tr.EventID, s.EventOrder
		order by s.EventOrder

	--aggregate single events
	insert into #Aggregated	(EventID, UserID, ObjectID, ObjectGUID, ObjectParentID, Cnt, Period, [Date])
		select top 50 with ties tr.EventID, UserID, ObjectID, ObjectGUID, ObjectParentID, 1 as Cnt, 1, Occured
			from ckbx_Timeline_Result tr
			inner join ckbx_Timeline_Settings s on tr.EventID = s.EventID 
			where lower(tr.Creator) = lower(@UserID) and tr.Manager = @Manager and Single = 1 and UserID is not null
			and (@ParentObjectID = 0 or @ParentObjectID = ObjectParentID) and (@ParentObjectType is null or @ParentObjectType = ObjectParentType)
			and tr.PeriodID = 1
		order by row_number() over(partition by tr.EventID order by Occured desc), s.EventOrder
	
	delete from #Aggregated where Cnt = 0

	if @Manager = 'SurveyManager'
		update #Aggregated set ObjectParentName = (select top 1 TemplateName from ckbx_ResponseTemplate 
			where ckbx_ResponseTemplate.ResponseTemplateID = #Aggregated.ObjectParentID)

select a.*, e.EventName, c.[Image], c.URL from (
		
	select distinct EventID, UserID, ObjectID, ObjectGUID, max(ObjectParentID) as ObjectParentID, 
		max(cast (Cnt as bigint)) as Cnt, min(Period) as Period, min([Date]) as [Date], max(ObjectParentName) as ObjectParentName
		from #Aggregated
		group by EventID, UserID, ObjectID, ObjectGUID, Period) a
		inner join ckbx_Timeline_Events e on a.EventID = e.EventID
		inner join ckbx_Timeline_Config c on a.EventID = c.EventID and a.Period = c.PeriodID
	order by [Date] desc, Period
end



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Timeline_ClearByEntry]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create PROCEDURE [dbo].[ckbx_sp_Timeline_ClearByEntry]
(
  @EntryType varchar(255),
  @EntryName nvarchar(611)
)
AS
begin
	if (@EntryType = 'Prezza.Framework.Security.ExtendedPrincipal')
	begin
		delete from ckbx_Timeline_Result where RequestID in
			(select RequestID from ckbx_Timeline_Request req 
			where req.Creator = @EntryName)		
			
		update ckbx_Timeline_Request set Created = Created - 1, RequestStatus = 'Created'
			where Creator = @EntryName
	end
	else
	if (@EntryType = 'Checkbox.Users.Group')
	begin
		delete from ckbx_Timeline_Result where RequestID in
			(select RequestID from ckbx_Timeline_Request req 
			inner join ckbx_GroupMembers gm on req.Creator = gm.MemberUniqueIdentifier
			where gm.GroupID = cast(@EntryName as int))				
		update ckbx_Timeline_Request set Created = Created - 1, RequestStatus = 'Created'
			where Creator in (select MemberUniqueIdentifier from ckbx_GroupMembers
				where GroupID = cast(@EntryName as int))
	end	
end


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Timeline_ClearByPolicy]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[ckbx_sp_Timeline_ClearByPolicy]
(
  @PolicyID int
)
AS
begin
	if exists(select top 1 GroupID from ckbx_Group
		where GroupID = 1 and DefaultPolicy = @PolicyID)
	begin
		--delete everything for UserManager
		delete from ckbx_Timeline_Result where RequestID in
			(select RequestID from ckbx_Timeline_Request req 
				where req.Manager = 'UserManager')

		update dbo.ckbx_Timeline_Request set Created = Created - 1, RequestStatus = 'Created'
			where Manager = 'UserManager'
	end
	else
	begin
		delete from ckbx_Timeline_Result where RequestID in
			(select RequestID from ckbx_Timeline_Request req 
			inner join ckbx_AccessControlEntry ace on req.Creator = ace.EntryIdentifier and EntryType = 'Prezza.Framework.Security.ExtendedPrincipal'
			where ace.PolicyID = @PolicyID)		

		update dbo.ckbx_Timeline_Request set Created = Created - 1, RequestStatus = 'Created'
			where Creator in 
			(select EntryIdentifier from ckbx_AccessControlEntry 			
			where PolicyID = @PolicyID and EntryType = 'Prezza.Framework.Security.ExtendedPrincipal')		

		delete from ckbx_Timeline_Result where RequestID in
			(select RequestID from ckbx_Timeline_Request req 
			inner join ckbx_GroupMembers gm on req.Creator = gm.MemberUniqueIdentifier
			inner join ckbx_AccessControlEntry ace on EntryType = 'Checkbox.Users.Group' and gm.GroupID = cast(ace.EntryIdentifier as int) 
			where ace.PolicyID = @PolicyID)		

		update dbo.ckbx_Timeline_Request set Created = Created - 1, RequestStatus = 'Created'
			where Creator in 
			(select MemberUniqueIdentifier from ckbx_GroupMembers gm 			
			inner join ckbx_AccessControlEntry ace on EntryType = 'Checkbox.Users.Group' and gm.GroupID = cast(ace.EntryIdentifier as int)
			where PolicyID = @PolicyID)	
	end	
end


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Timeline_ClearByPrincipal]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[ckbx_sp_Timeline_ClearByPrincipal]
(
  @UniqueIdentifier nvarchar(611)
)
AS
begin
	--delete everything for UserManager
	delete from ckbx_Timeline_Result where RequestID in
		(select RequestID from ckbx_Timeline_Request req 
			where req.Creator = @UniqueIdentifier)

	update dbo.ckbx_Timeline_Request set Created = Created - 1, RequestStatus = 'Created'
		where Creator = @UniqueIdentifier	
end


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Timeline_Collect_SurveyManager]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Timeline_Collect_SurveyManager]
(
  @RequestID bigint
)
AS
begin
	begin try
		declare @Creator as nvarchar(611)
		declare @Manager as nvarchar(100)
		declare @StartDate as datetime
		declare @RoleID as int
		
		set @StartDate = getdate() - 30 --collect the event data for the last month in worst case
		
		select @Creator = Creator, @Manager = Manager from ckbx_Timeline_Request where RequestID = @RequestID
		
		--search for the date from which the events will be collected
		declare @LastEventDate as datetime

		select @LastEventDate = max(Occured) from ckbx_Timeline_Result
			where lower(Creator) = lower(@Creator) and @Manager = Manager
		
		if @LastEventDate is not null and @LastEventDate > @StartDate
			set @StartDate = @LastEventDate

		--check if the user is a System Admin
		select @RoleID = ir.RoleID from ckbx_IdentityRoles ir
			inner join ckbx_Role r on ir.RoleID = r.RoleID
			where ir.uniqueidentifier = @Creator and r.RoleName = 'System Administrator'
		
		--structure is the same as for ckbx_ResponseTemplate table
		create table #Surveys 
		(
			[ResponseTemplateID] [int] NOT NULL,
			[CreatedBy] [nvarchar](611) NULL,
			[TemplateName] [nvarchar](611) NULL,
			[NameTextID] [varchar](611) NULL,
			[TitleTextID] [varchar](611) NULL,
			[DescriptionTextID] [varchar](611) NULL,
			[IsActive] [bit] NULL,
			[ActivationStart] [datetime] NULL,
			[ActivationEnd] [datetime] NULL,
			[MaxTotalResponses] [int] NULL,
			[MaxResponsesPerUser] [int] NULL,
			[AllowContinue] [bit] NULL,
			[AllowEdit] [bit] NULL,
			[DisableBackButton] [bit] NULL,
			[StyleTemplateID] [int] NULL,
			[ShowPageNumbers] [bit] NULL,
			[ShowProgressBar] [bit] NULL,
			[ShowItemNumbers] [bit] NULL,
			[ShowTitle] [bit] NULL,
			[RandomizeItemsInPages] [bit] NULL,
			[MobileCompatible] [bit] NULL,
			[ButtonContinueTextID] [nvarchar](611) NULL,
			[ButtonBackTextID] [nvarchar](611) NULL,
			[CompletionType] [int] NULL,
			[SupportedLanguages] [nvarchar](1023) NULL,
			[DefaultLanguage] [nvarchar](5) NULL,
			[LanguageSourceToken] [nvarchar](100) NULL,
			[SecurityType] [int] NULL,
			[GuestPassword] [nvarchar](611) NULL,
			[LoginUrl] [nvarchar](500) NULL,
			[ReportSecurityType] [int] NULL,
			[EnableScoring] [bit] NULL,
			[GUID] [uniqueidentifier] NULL,
			[ShowValidationMessage] [bit] NULL,
			[RequiredFieldsAlert] [bit] NULL,
			[LanguageSource] [nvarchar](25) NULL,
			[EnableDynamicPageNumbers] [bit] NULL,
			[EnableDynamicItemNumbers] [bit] NULL,
			[ShowSaveAndQuit] [bit] NULL,
			[AllowSurveyEditWhileActive] [bit] NULL,
			[IsPoll] [bit] NULL,
			[ChartStyleID] [int] NULL,
			[Height] [int] NULL,
			[Width] [int] NULL,
			[BorderWidth] [int] NULL,
			[BorderColor] [varchar](63) NULL,
			[BorderStyle] [varchar](63) NULL,
			[AnonymizeResponses] [bit] NULL,
			[TabletStyleTemplateID] [int] NULL,
			[SmartPhoneStyleTemplateID] [int] NULL,
			[AllowFormReset] [bit] NULL,
			[ShowAsterisks] [bit] NULL,
			[HideFooterHeader] [bit] NULL,
			[MobileStyleId] [int] NULL,
			[ProgressBarOrientation] [int] NULL,
			[GoogleAnalyticsTrackingID] [varchar](32) NULL
		)
			
		--get all available surveys
		if @RoleID is not null
			insert into #Surveys exec ckbx_sp_Security_ListAccessibleSurveysAdmin 
				@PageNumber=-1,
				@ResultsPerPage=-1,
				@SortField=N'ItemName',
				@SortAscending=1,
				@FilterField=N'Name',
				@FilterValue=N'', 
				@AncestorFolder=null,
				@DisplayCount = 0
		
		declare @EventID int
		
		
		if @RoleID is not null or exists(select top 1 * from ckbx_IdentityRoles ir 
			inner join ckbx_RolePermissions rp on ir.RoleID = rp.RoleID
			inner join ckbx_Permission p on rp.PermissionID = p.PermissionID
			where ir.[UniqueIdentifier] = @Creator and PermissionName = 'Form.Administer'
		)
		begin	
			if @RoleID is null
			begin
				delete from #Surveys 
				insert into #Surveys exec ckbx_sp_Security_ListAccessibleSurveys @UniqueIdentifier=@Creator, @FirstPermissionName='Form.Administer', 
				@SecondPermissionName=null, 
				@RequireBothPermissions=0,
				@UseAclExclusion=1,	
				@PageNumber=-1,@ResultsPerPage=-1,@SortField=N'ItemName',@SortAscending=1,@FilterField=N'Name',@FilterValue=N'',@AncestorFolder=null,
				@DisplayCount = 0
			end
			
			set @EventID = null
			select @EventID = EventID from ckbx_Timeline_Events where 
				EventName = 'SURVEY_CREATED'		
			
			--collect all recently created surveys
			if @EventID is not null
			begin
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, Manager, Creator, ObjectParentID, ObjectParentType)		
					select @RequestID, @EventID, t.CreatedDate, t.CreatedBy, t.TemplateID, s.[GUID], @Manager, @Creator, t.TemplateID, 'SURVEY' from #Surveys s
						inner join ckbx_Template t on s.ResponseTemplateID = t.TemplateID
					where t.CreatedDate > @StartDate and (t.Deleted is null or t.Deleted = 0)
			end

			--collect all recently modified surveys
			set @EventID = null
			select @EventID = EventID from ckbx_Timeline_Events where 
				EventName = 'SURVEY_EDITED'		
			if @EventID is not null
			begin			
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, Manager, Creator, ObjectParentID, ObjectParentType)		
					select @RequestID, @EventID, t.ModifiedDate, t.ModifiedBy, t.TemplateID, s.[GUID], @Manager, @Creator, t.TemplateID, 'SURVEY' from #Surveys s
						inner join ckbx_Template t on s.ResponseTemplateID = t.TemplateID
					where t.ModifiedDate > @StartDate and (t.Deleted is null or t.Deleted = 0)
			end		
			
			--collect all recently created invitations
			set @EventID = null
			select @EventID = EventID from ckbx_Timeline_Events where 
				EventName = 'INVITATION_CREATED'		
			if @EventID is not null
			begin			
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, ObjectParentID, Manager, Creator, ObjectParentType)		
					select @RequestID, @EventID, i.DateCreated, i.CreatedBy, i.InvitationID, i.[GUID], s.[ResponseTemplateID], @Manager, @Creator, 'SURVEY' from #Surveys s
						inner join ckbx_Invitation i on s.ResponseTemplateID = i.ResponseTemplateID
					where i.DateCreated > @StartDate
			end		
			
			--collect all recently created invitations
			set @EventID = null
			select @EventID = EventID from ckbx_Timeline_Events where 
				EventName = 'INVITATION_SENT'		
			if @EventID is not null
			begin			
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, ObjectParentID, Manager, Creator, ObjectParentType)		
					select @RequestID, @EventID, i.LastSentOn, i.CreatedBy, i.InvitationID, i.[GUID], s.[ResponseTemplateID], @Manager, @Creator, 'SURVEY' from #Surveys s
						inner join ckbx_Invitation i on s.ResponseTemplateID = i.ResponseTemplateID
					where i.LastSentOn > @StartDate
			end		

		end
		
		if @RoleID is not null or exists(select top 1 * from ckbx_IdentityRoles ir 
			inner join ckbx_RolePermissions rp on ir.RoleID = rp.RoleID
			inner join ckbx_Permission p on rp.PermissionID = p.PermissionID
			where ir.[UniqueIdentifier] = @Creator and PermissionName = 'Form.Edit'
		)
		begin	
			if @RoleID is null
			begin
				delete from #Surveys 
				insert into #Surveys exec ckbx_sp_Security_ListAccessibleSurveys @UniqueIdentifier=@Creator, @FirstPermissionName='Form.Edit', 
				@SecondPermissionName=null, 
				@RequireBothPermissions=0,
				@UseAclExclusion=1,	
				@PageNumber=-1,@ResultsPerPage=-1,@SortField=N'ItemName',@SortAscending=1,@FilterField=N'Name',@FilterValue=N'',@AncestorFolder=null,
				@DisplayCount = 0
			end
			
			--collect all recently created items 
			set @EventID = null
			select @EventID = EventID from ckbx_Timeline_Events where 
				EventName = 'ITEM_CREATED'		
			if @EventID is not null
			begin
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, ObjectParentID, Manager, Creator, ObjectParentType)		
					select @RequestID, @EventID, i.CreatedDate, i.CreatedBy, i.ItemID, null, s.[ResponseTemplateID], @Manager, @Creator, 'SURVEY' from #Surveys s
						inner join ckbx_Template_Items ti on s.ResponseTemplateID = ti.TemplateID
						inner join ckbx_Item i on ti.ItemID = i.ItemID
					where i.CreatedDate > @StartDate and (i.Deleted is null or i.Deleted = 0)
			end		
			
			--collect all recently edited items
			set @EventID = null
			select @EventID = EventID from ckbx_Timeline_Events where 
				EventName = 'ITEM_EDITED'		
			if @EventID is not null
			begin
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, ObjectParentID, Manager, Creator, ObjectParentType)		
					select @RequestID, @EventID, i.ModifiedDate, i.ModifiedBy, i.ItemID, null, s.[ResponseTemplateID], @Manager, @Creator, 'SURVEY' from #Surveys s
						inner join ckbx_Template_Items ti on s.ResponseTemplateID = ti.TemplateID
						inner join ckbx_Item i on ti.ItemID = i.ItemID
					where i.ModifiedDate > @StartDate and (i.Deleted is null or i.Deleted = 0)
			end	
			
			--collect all recently opt outed users			
			set @EventID = null
			select @EventID = EventID from ckbx_Timeline_Events where 
				EventName = 'INVITEE_OPT_OUT'		
			if @EventID is not null
			begin			
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, ObjectParentID, Manager, Creator, ObjectParentType)		
					select @RequestID, @EventID, opt.DateOccur, opt.EmailAddress, opt.OptedOutEmailID, s.[GUID], s.ResponseTemplateID, @Manager, @Creator, 'SURVEY' from #Surveys s
						inner join ckbx_Invitation_OptedOutEmails opt on s.ResponseTemplateID = opt.ResponseTemplateId
					where opt.DateOccur > @StartDate
			end		
		end	
		else
		begin
			--user's role can not Form.Edit
			if @RoleID is null
			begin
				delete from #Surveys 
				insert into #Surveys exec ckbx_sp_Security_ListAccessibleSurveys @UniqueIdentifier=@Creator, @FirstPermissionName='Analysis.Create', 
				@SecondPermissionName='Form.View', 
				@RequireBothPermissions=0,
				@UseAclExclusion=1,	
				@PageNumber=-1,@ResultsPerPage=-1,@SortField=N'ItemName',@SortAscending=1,@FilterField=N'Name',@FilterValue=N'',@AncestorFolder=null,
				@DisplayCount = 0
			end
		end
		
		CREATE TABLE #Reports(
			[AnalysisTemplateID] [int] NOT NULL,
			[StyleTemplateID] [int] NULL,
			[ResponseTemplateID] [int] NULL,
			[AnalysisName] [nvarchar](255) NULL,
			[NameTextID] [nvarchar](255) NULL,
			[GUID] [uniqueidentifier] NULL,
			[DateFilterStart] [datetime] NULL,
			[DateFilterEnd] [datetime] NULL,
			[ChartStyleID] [int] NULL,
			[DisplaySurveyTitle] [bit] NOT NULL,
			[DisplayPdfExportButton] [bit] NOT NULL,
			[IncludeIncompleteResponses] [bit] NULL,
			[IncludeTestResponses] [bit] NULL,
			[TemplateID] [int] NOT NULL,
			[ModifiedDate] [datetime] NULL,
			[Deleted] [bit] NULL,
			[DefaultPolicy] [int] NULL,
			[AclID] [int] NULL,
			[CreatedDate] [datetime] NULL,
			[CreatedBy] [nvarchar](611) NULL,
			[ModifiedBy] [nvarchar](611) NULL)

		insert into #Reports
			exec ckbx_sp_Security_ListAccessibleAnalyses @UniqueIdentifier=@Creator,
				@FirstPermissionName=N'Analysis.Run',@SecondPermissionName=N'Analysis.Edit',@RequireBothPermissions=0,@UseAclExclusion=1,
				@PageNumber=0,@ResultsPerPage=0,@SortField=N'AnalysisName',@SortAscending=1,@FilterField=N'',@FilterValue=null, @DisplayCount = 0

		--collect all recently created reports
		set @EventID = null
		select @EventID = EventID from ckbx_Timeline_Events where 
			EventName = 'REPORT_CREATED'		
		if @EventID is not null
		begin			
			insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, Manager, Creator, ObjectParentID, ObjectParentType)		
				select distinct @RequestID, @EventID, CreatedDate, CreatedBy, TemplateID, [GUID], @Manager, @Creator, ResponseTemplateID, 'SURVEY' from 
					#Reports
				where CreatedDate > @StartDate and (Deleted is null or Deleted = 0)
		end		
		

		--collect all recently modified reports
		set @EventID = null
		select @EventID = EventID from ckbx_Timeline_Events where 
			EventName = 'REPORT_EDITED'		
		if @EventID is not null
		begin			
			insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, Manager, Creator, ObjectParentID, ObjectParentType)		
				select distinct @RequestID, @EventID, ModifiedDate, CreatedBy, TemplateID, [GUID], @Manager, @Creator, ResponseTemplateID, 'SURVEY' from 
					#Reports
				where ModifiedDate > @StartDate and (Deleted is null or Deleted = 0)
		end		
		

		if @RoleID is not null or exists(select top 1 * from ckbx_IdentityRoles ir 
			inner join ckbx_RolePermissions rp on ir.RoleID = rp.RoleID
			inner join ckbx_Permission p on rp.PermissionID = p.PermissionID
			where ir.[UniqueIdentifier] = @Creator and PermissionName = 'Analysis.Responses.Edit'
		)
		begin
			if @RoleID is null	
			begin
				--remove surveys which doesn't have Analysis.Responses.View in ACL for the given user
				delete from #Surveys where 
					ResponseTemplateID not in (
					  SELECT t.TemplateID
					  FROM	ckbx_Template t 
						INNER JOIN ckbx_AccessControlEntries ace ON ace.AclId = t.AclId
						INNER JOIN ckbx_AccessControlEntry ent ON ent.EntryId = ace.EntryId
						INNER JOIN ckbx_PolicyPermissions pp ON pp.PolicyId = ent.PolicyId
						INNER JOIN ckbx_Permission p ON p.PermissionId = pp.PermissionId
					  WHERE
						ent.EntryIdentifier = @Creator
						AND p.PermissionName = 'Analysis.Responses.View'
					)
			end
		
			--collect all recently created responses
			set @EventID = null
			select @EventID = EventID from ckbx_Timeline_Events where 
				EventName = 'RESPONSE_CREATED'		
			if @EventID is not null
			begin
				-- select immediate event
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, ObjectParentID, Manager, Creator, ObjectParentType)		
					select top 1 @RequestID, @EventID, r.Ended, r.[UniqueIdentifier], r.ResponseID, r.[GUID], s.[ResponseTemplateID], @Manager, @Creator, 'SURVEY'  from #Surveys s
						inner join ckbx_Response r on s.ResponseTemplateID = r.ResponseTemplateID					
					where r.Ended > @StartDate and (r.Deleted is null or r.Deleted = 0)
					order by r.Ended desc
				
				--cleanup previously collected results
				delete from ckbx_Timeline_Result
					where Manager = @Manager and Creator = @Creator and EventID = @EventID and PeriodID > 1

				-- select daily event
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, ObjectParentID, Manager, Creator, ObjectParentType, EventCount, PeriodID)		
					select @RequestID, @EventID, coalesce(min(r.Ended), getdate()), null, null, null, r.ResponseTemplateID, @Manager, @Creator, 'SURVEY', count(*) as EventCount, 2 as PeriodID  from #Surveys s
						inner join ckbx_Response r on s.ResponseTemplateID = r.ResponseTemplateID					
					where DATEADD(day, 1, r.Ended) > getdate() and (r.Deleted is null or r.Deleted = 0)
					group by r.ResponseTemplateID
					
				-- select weekly event
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, ObjectParentID, Manager, Creator, ObjectParentType, EventCount, PeriodID)		
					select @RequestID, @EventID, coalesce(min(r.Ended), getdate()), null, null, null, r.ResponseTemplateID, @Manager, @Creator, 'SURVEY', count(*) as EventCount, 3 as PeriodID  from #Surveys s
						inner join ckbx_Response r on s.ResponseTemplateID = r.ResponseTemplateID					
					where DATEADD(week, 1, r.Ended) > getdate() and (r.Deleted is null or r.Deleted = 0)
					group by r.ResponseTemplateID
					
				-- select monthly event
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, ObjectParentID, Manager, Creator, ObjectParentType, EventCount, PeriodID)		
					select @RequestID, @EventID, coalesce(min(r.Ended), getdate()), null, null, null, r.ResponseTemplateID, @Manager, @Creator, 'SURVEY', count(*) as EventCount, 4 as PeriodID  from #Surveys s
						inner join ckbx_Response r on s.ResponseTemplateID = r.ResponseTemplateID					
					where DATEADD(month, 1, r.Ended) > getdate() and (r.Deleted is null or r.Deleted = 0)
					group by r.ResponseTemplateID
			end		
		end
		
		update ckbx_Timeline_Request set RequestStatus = 'Succeeded' where RequestID = @RequestID
		
		
		drop table #Surveys
		drop table #Reports
	end try
	begin catch
		update ckbx_Timeline_Request set Message = ERROR_MESSAGE(), RequestStatus = 'Error' 
			where RequestID = @RequestID
	end catch
	
end

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Timeline_Collect_UserManager]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--collect events for UserManager for the last month or from the latest request up to now
Create PROCEDURE [dbo].[ckbx_sp_Timeline_Collect_UserManager]
(
  @RequestID bigint
)
AS
begin
		declare @Creator as nvarchar(611)
		declare @Manager as nvarchar(100)
		declare @StartDate as datetime
		declare @RoleID as int
		
		set @StartDate = getdate() - 30 --collect the event data for the last month in worst case
		
		select @Creator = Creator, @Manager = Manager from ckbx_Timeline_Request where RequestID = @RequestID
		
		--search for the date from which the events will be collected
		declare @LastEventDate as datetime

		select @LastEventDate = max(Occured) from ckbx_Timeline_Result
			where lower(Creator) = lower(@Creator) and @Manager = Manager
		
		if @LastEventDate is not null and @LastEventDate > @StartDate
			set @StartDate = @LastEventDate

		--check if the user is a System Admin
		select @RoleID = ir.RoleID from ckbx_IdentityRoles ir
			inner join ckbx_Role r on ir.RoleID = r.RoleID
			where ir.uniqueidentifier = @Creator and r.RoleName = 'System Administrator'
		
		declare @CanViewAllUsers int
		set @CanViewAllUsers = 0
		
		if @RoleID is not null
		begin
			set @CanViewAllUsers = 1 --system admin can
		end	
		else
		begin
			--check if Everyone group is available for everyone
			select @CanViewAllUsers = count(*) from ckbx_Group g
				inner join ckbx_PolicyPermissions pp on g.DefaultPolicy = pp.PolicyID
				inner join ckbx_Permission p on pp.PermissionID = p.PermissionID
				where PermissionName = 'Group.View' and g.GroupId = 1
			
			if @CanViewAllUsers = 0
			begin
				--check if regular user can view Everyone group
				select @CanViewAllUsers = count(*) from ckbx_Group g
					inner join ckbx_AccessControlEntries aces on g.AclID = aces.AclID
					inner join ckbx_AccessControlEntry ace on aces.EntryID = ace.EntryID
					inner join ckbx_PolicyPermissions pp on ace.PolicyID = pp.PolicyID
					inner join ckbx_Permission p on pp.PermissionID = p.PermissionID
					where GroupId = 1 and EntryType like '%ExtendedPrincipal%' and EntryIdentifier = @Creator and PermissionName like '%Group%'
				
				if @CanViewAllUsers = 0
				begin
					--check if the user is a member of the group
					select @CanViewAllUsers = count(*) from ckbx_Group g
						inner join ckbx_AccessControlEntries aces on g.AclID = aces.AclID
						inner join ckbx_AccessControlEntry ace on aces.EntryID = ace.EntryID
						inner join ckbx_PolicyPermissions pp on ace.PolicyID = pp.PolicyID
						inner join ckbx_Permission p on pp.PermissionID = p.PermissionID
						inner join ckbx_GroupMembers gm on EntryType like '%Group%' and gm.GroupID = cast(EntryIdentifier as int)
						where g.GroupId = 1 and gm.MemberUniqueIdentifier = @Creator and PermissionName = 'Group.View'
				end
			end
		end
	
		if @CanViewAllUsers > 0
		begin		
			declare @EventID int

			set @EventID = null
			select @EventID = EventID from ckbx_Timeline_Events where 
				EventName = 'USER_CREATED'		
			
			--collect all recently created users
			if @EventID is not null
			begin
				--select * from ckbx_Credential
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, Manager, Creator)
					select @RequestID, @EventID, c.Created, c.CreatedBy, c.[UniqueIdentifier], c.[GUID], @Manager, @Creator from ckbx_Credential c					
					where c.Created > @StartDate
			end


			set @EventID = null
			select @EventID = EventID from ckbx_Timeline_Events where 
				EventName = 'USER_EDITED'		
			
			--collect all recently edited users
			if @EventID is not null
			begin
				--select * from ckbx_Credential
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, Manager, Creator)		
					select @RequestID, @EventID, c.ModifiedDate, c.ModifiedBy, c.[UniqueIdentifier], c.[GUID], @Manager, @Creator from ckbx_Credential c					
					where c.ModifiedDate > @StartDate
			end
		end
		else
		begin
			--find available group members
			create table #accesibleUsers
			(GroupID int, [UniqueIdentifier] nvarchar(611), Email nvarchar(255))

			insert into #accesibleUsers
				exec ckbx_sp_Security_ListAccessibleGroupMembers 'sa', 'Group.View', 'Group.Edit', 0, 0, 0, 0, '', 1, '', '', 0			
				
			
			--collect all recently created users
			if @EventID is not null
			begin
				--select * from ckbx_Credential
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, Manager, Creator)
					select @RequestID, @EventID, c.Created, c.CreatedBy, c.[UniqueIdentifier], c.[GUID], @Manager, @Creator from ckbx_Credential c
					inner join #accesibleUsers au on c.[UniqueIdentifier] = au.[UniqueIdentifier]
					where c.Created > @StartDate
			end


			set @EventID = null
			select @EventID = EventID from ckbx_Timeline_Events where 
				EventName = 'USER_EDITED'		
			
			--collect all recently edited users
			if @EventID is not null
			begin
				--select * from ckbx_Credential
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, Manager, Creator)		
					select @RequestID, @EventID, c.ModifiedDate, c.ModifiedBy, c.[UniqueIdentifier], c.[GUID], @Manager, @Creator from ckbx_Credential c					
					inner join #accesibleUsers au on c.[UniqueIdentifier] = au.[UniqueIdentifier]
					where c.ModifiedDate > @StartDate
			end
		end
			
		--collect group information
		declare @GroupEventCount int
		
		select @GroupEventCount = count(*) from ckbx_Timeline_Events 
			where EventName like 'GROUP%'
		
		if @GroupEventCount > 0 
		begin	
			CREATE TABLE #Groups (
				[GroupID] [int] NOT NULL,
				[GroupName] [nvarchar](510) NULL,
				[Description] [nvarchar](510) NULL,
				[DateCreated] [datetime] NULL,
				[CreatedBy] [nvarchar](611) NULL,
				[AclID] [int] NULL,
				[DefaultPolicy] [int] NULL,
				[ModifiedDate] [datetime] NULL,
				[ModifiedBy] [nvarchar](611) NULL
				)
			
			if @RoleID is not null
			begin
				insert into #Groups ([GroupID],[GroupName],[Description],[DateCreated],[CreatedBy],[AclID],[DefaultPolicy],[ModifiedDate],[ModifiedBy])			
					exec ckbx_sp_Security_ListAllGroups @PageNumber=-1,@ResultsPerPage=-1,@SortField=N'GroupName',@SortAscending=1,@FilterField=N'GroupName',@FilterValue=N'',@IncludeEveryoneGroup=0, @DisplayCount=0
			end
			else
			begin
				insert into #Groups ([GroupID],[GroupName],[Description],[DateCreated],[CreatedBy],[AclID],[DefaultPolicy],[ModifiedDate],[ModifiedBy])			
					exec ckbx_sp_Security_ListAccessibleGroups @UniqueIdentifier=@Creator,@FirstPermissionName=N'Group.View',@SecondPermissionName=N'',@RequireBothPermissions=1,@UseAclExclusion=1,@PageNumber=-1,@ResultsPerPage=-1,@SortField=N'GroupName',@SortAscending=1,@FilterField=N'GroupName',@FilterValue=N'',@IncludeEveryoneGroup=0,@DisplayCount=0
			end 
			
			
			set @EventID = null
			select @EventID = EventID from ckbx_Timeline_Events where 
				EventName = 'GROUP_CREATED'		
			
			--collect all recently created groups
			if @EventID is not null
			begin
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, Manager, Creator)		
					select @RequestID, @EventID, g.[DateCreated], g.CreatedBy, g.GroupID, null, @Manager, @Creator from #Groups g					
					where g.[DateCreated] > @StartDate
			end

			set @EventID = null
			select @EventID = EventID from ckbx_Timeline_Events where 
				EventName = 'GROUP_EDITED'		

			--collect all recently created groups
			if @EventID is not null
			begin
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectGUID, Manager, Creator)		
					select @RequestID, @EventID, g.ModifiedDate, g.ModifiedBy, g.GroupID, null, @Manager, @Creator from #Groups g					
					where g.ModifiedDate > @StartDate
			end

		end
		
		--collect email list information
		declare @emailListEventCount int
		
		select @emailListEventCount = count(*) from ckbx_Timeline_Events 
			where EventName like 'EMAILLIST%'

		if @emailListEventCount > 0 
		begin	
			CREATE TABLE #emailLists (
				[PanelID] [int] NOT NULL,
				[Name] [nvarchar](510) NOT NULL,
				[Description] [nvarchar](510) NULL,
				[DateCreated] [datetime] NOT NULL,
				[CreatedBy] [nvarchar](611) NOT NULL,
				[PanelTypeID] [int] NOT NULL,
				[Deleted] [bit] NULL,
				[AclID] [int] NULL,
				[DefaultPolicy] [int] NULL,
				[ModifiedDate] [datetime] NULL,
				[ModifiedBy] [nvarchar](611) NULL
			) 
			if @RoleID is not null
			begin
				CREATE TABLE #emailListsAdmin (
					[PanelID] [int] NOT NULL
					)
				insert into #emailListsAdmin
					([PanelID]) 
					exec ckbx_sp_Security_ListAccessibleEmailListsAdmin @PageNumber=-1,@ResultsPerPage=-1,@SortField=N'Name',@SortAscending=1,@FilterField=N'',@FilterValue=N'', @DisplayCount=0 
				
				insert into #emailLists
					select p.PanelID, p.Name, cast(p.Description as nvarchar(511)) as Description, p.DateCreated, p.CreatedBy, p.PanelTypeID, p.Deleted, p.AclID, p.DefaultPolicy, p.ModifiedDate, p.ModifiedBy as Description  from ckbx_Panel p  inner join #emailListsAdmin a on p.PanelId = a.PanelId
			end
			else
			begin
				insert into #emailLists 
					([PanelID],[Name],[Description],[DateCreated],[CreatedBy],[PanelTypeID],[Deleted],[AclID],[DefaultPolicy],[ModifiedDate],[ModifiedBy]) 				
					exec ckbx_sp_Security_ListAccessibleEmailLists @UniqueIdentifier=@Creator,@FirstPermissionName=N'EmailList.View',@SecondPermissionName=N'',@RequireBothPermissions=1,@UseAclExclusion=1,@PageNumber=-1,@ResultsPerPage=-1,@SortField=N'Name',@SortAscending=1,@FilterField=N'',@FilterValue=N'', @DisplayCount=0
			end 
			
			set @EventID = null
			select @EventID = EventID from ckbx_Timeline_Events where 
				EventName = 'EMAILLIST_CREATED'		
			
			--collect all recently created groups
			
			if @EventID is not null
			begin
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectParentID, ObjectGUID, Manager, Creator)		
					select @RequestID, @EventID, e.[DateCreated], e.CreatedBy, e.PanelID, e.PanelID, null, @Manager, @Creator from #emailLists e					
					where e.[DateCreated] > @StartDate
			end
			set @EventID = null
			select @EventID = EventID from ckbx_Timeline_Events where 
				EventName = 'EMAILLIST_EDITED'		

			--collect all recently created groups
			
			if @EventID is not null
			begin
				insert into ckbx_Timeline_Result (RequestID, EventID, Occured, UserID, ObjectID, ObjectParentID, ObjectGUID, Manager, Creator)		
					select @RequestID, @EventID, e.ModifiedDate, e.ModifiedBy, e.PanelID, e.PanelID, null, @Manager, @Creator from #emailLists e					
					where e.ModifiedDate > @StartDate
			end
		end



		update ckbx_Timeline_Request set RequestStatus = 'Succeeded' where RequestID = @RequestID
end




GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Timeline_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Timeline_Get]
(
  @UserID nvarchar(255),
  @Manager nvarchar(100),
  @ExpirationPeriodSeconds int
)
AS
begin
	declare @RequestID as bigint
	declare @PrevRequestID as bigint
	declare @RequestStatus as varchar(100)
	
	select top 1 @RequestID = RequestID, @RequestStatus = RequestStatus from ckbx_Timeline_Request 
		where lower(Creator) = lower(@UserID) and Manager = @Manager and DATEDIFF(SECOND,Created,GETDATE()) <= @ExpirationPeriodSeconds
		order by Created desc	
		
	if @RequestID is null
	begin
		select top 1 @PrevRequestID = RequestID from ckbx_Timeline_Request 
			where lower(Creator) = lower(@UserID) and Manager = @Manager and RequestStatus = 'Succeeded'
			and DATEDIFF(SECOND,Created,GETDATE()) > @ExpirationPeriodSeconds * 2 + 1
			order by Created desc
		
		if @PrevRequestID is not null
		begin
			--reuse old request
			set @RequestStatus = 'Created'
			update ckbx_Timeline_Request set RequestStatus = @RequestStatus, Created = getdate()
				where RequestID = @PrevRequestID
			
			set @RequestID = @PrevRequestID
		end
		else
		begin
			set @RequestStatus = 'Created'
			insert into ckbx_Timeline_Request (Created, Creator, Manager, RequestStatus)
				values (getdate(), @UserID, @Manager, @RequestStatus)
			select @RequestID = @@identity
		end
	end
	
	select @RequestID as RequestID, @RequestStatus as RequestStatus
end
            


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Timeline_GetStatus]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Timeline_GetStatus]
(
  @UserID nvarchar(611),
  @RequestID bigint
)
AS
begin
	select RequestStatus, [Message] from ckbx_Timeline_Request 
		where lower(Creator) = lower(@UserID) and RequestID = @RequestID 
end
  

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Timeline_GetVisibleEvents]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[ckbx_sp_Timeline_GetVisibleEvents] 
(@Manager varchar(100))  
as 
  select EventName from [ckbx_Timeline_Settings] s  
	inner join ckbx_Timeline_Events e on s.EventID = e.EventID
 where s.Manager = @Manager

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Timeline_Run]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Timeline_Run]
(
  @RequestID bigint
)
AS
begin
	declare @Status as nvarchar(100)
	declare @Manager as nvarchar(100)
	declare @query as nvarchar(4000)
	select @Status = RequestStatus, @Manager = Manager from ckbx_Timeline_Request where RequestID = @RequestID
	if @Status <> 'Created' 
	begin
		return
	end		
	
	update ckbx_Timeline_Request set RequestStatus  = 'Pending' where RequestID = @RequestID
	--set @query = 'exec ckbx_Timeline_Collect_' + @Manager + ' ' + cast(@RequestID as nvarchar(100)) + ',''' + cast(@StartDate as nvarchar(100)) + ''''
	set @query = 'ckbx_sp_Timeline_Collect_' + @Manager + ' ' + cast(@RequestID as nvarchar(100))
	exec(@query)
end



GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Timeline_Settings_Get]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_Timeline_Settings_Get] 
	@Manager nvarchar(100)
AS
BEGIN
	SELECT te.EventName,ts.Manager, ts.Single, ts.Daily, ts.Weekly, ts.Monthly, ts.EventOrder FROM ckbx_Timeline_Settings ts 
	INNER JOIN ckbx_Timeline_Events	te ON te.EventID=ts.EventID 
	WHERE ts.Manager=@Manager
END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Timeline_Settings_UpdateEventOrder]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Timeline_Settings_UpdateEventOrder] 
	@Manager nvarchar(100),
	@EventName nvarchar(100),
	@Value int
AS
BEGIN
	Declare @sql nvarchar(1000)
	DECLARE @QueryParams nvarchar(500)
	SET @QueryParams = '@Manager nvarchar(100),@EventID int, @Value int'
	DECLARE @EventID int
	SELECT @EventID=EventID from ckbx_Timeline_Events where EventName=@EventName
	SET @sql='UPDATE ckbx_Timeline_Settings set EventOrder=@Value
				 where EventID=@EventID and Manager=@Manager'
	exec sp_executesql @sql, @QueryParams, @Manager = @Manager, @Value=@Value, @EventID=@EventID
END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Timeline_Settings_UpdateEventPeriod]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_Timeline_Settings_UpdateEventPeriod] 
	@Manager nvarchar(100),
	@EventName nvarchar(100),
	@PeriodName nvarchar(100),
	@Value bit
AS
BEGIN
	DECLARE @sql nvarchar(1000)
	DECLARE @QueryParams nvarchar(500)
	SET @QueryParams = '@Manager nvarchar(100)'
	DECLARE @EventID int
	SELECT @EventID=EventID from ckbx_Timeline_Events where EventName=@EventName
	SET @sql= 'UPDATE ckbx_Timeline_Settings set ' + @PeriodName + '=' +  Cast(@Value as varchar) +
	' where EventID=' + Cast(@EventID as varchar) +' and Manager=@Manager'
	exec sp_executesql @sql, @QueryParams, @Manager = @Manager
END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_Upgrade_ListWebChartItemIDs]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_Upgrade_ListWebChartItemIDs]
AS
  SELECT
	idf.ItemID
  FROM
  	ckbx_ItemData_Frequency idf
	INNER JOIN ckbx_ItemAppearances ia ON ia.ItemID = idf.ItemID
	INNER JOIN ckbx_ItemAppearance ia2 ON ia2.AppearanceID = ia.AppearanceID
  WHERE
	ia2.GraphType <> 'SummaryTable'
	AND ia2.AppearanceCode <> 'ANALYSIS_SUMMARY_DUNDAS'


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_UrlMappings_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_UrlMappings_Delete]
(
  @SourceUrl nvarchar(1000)
)
AS
  DELETE FROM ckbx_UrlMappings WHERE SourceUrl = @SourceUrl


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_UrlMappings_DestinationExists]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_UrlMappings_DestinationExists]
(
   @DestinationUrlToCheck varchar(255),
   @MappingExists bit out
)
AS
   IF EXISTS(Select DestinationUrl FROM ckbx_UrlMappings WHERE DestinationUrl = @DestinationUrlToCheck)
     BEGIN
        SET @MappingExists = 1
     END
   ELSE
     BEGIN
		SET @MappingExists = 0
     END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_UrlMappings_GetAll]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ckbx_sp_UrlMappings_GetAll]
AS
   SELECT
     SourceUrl,
     DestinationUrl
   FROM
     ckbx_UrlMappings

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_UrlMappings_GetDestination]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_UrlMappings_GetDestination]
(
   @SourceUrl varchar(255)
)
AS
   SELECT SourceUrl, DestinationUrl FROM ckbx_UrlMappings WHERE SourceUrl = @SourceUrl


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_UrlMappings_GetSource]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_UrlMappings_GetSource]
(
   @DestinationUrl varchar(255)
)
AS
   SELECT SourceUrl, DestinationUrl FROM ckbx_UrlMappings WHERE DestinationUrl = @DestinationUrl


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_UrlMappings_SourceExists]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_UrlMappings_SourceExists]
(
   @SourceUrlToCheck varchar(255),
   @MappingExists bit out
)
AS
   IF EXISTS(Select SourceUrl FROM ckbx_UrlMappings WHERE SourceUrl = @SourceUrlToCheck)
     BEGIN
        SET @MappingExists = 1
     END
   ELSE
     BEGIN
		SET @MappingExists = 0
     END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_UrlMappings_Upsert]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_UrlMappings_Upsert]
(
   @SourceUrl nvarchar(1000),
   @DestinationUrl nvarchar(1000)
)
AS
  IF EXISTS(Select SourceUrl FROM ckbx_UrlMappings WHERE SourceUrl = @SourceUrl)
    BEGIN
      UPDATE ckbx_UrlMappings SET DestinationUrl = @DestinationUrl WHERE SourceUrl = @SourceUrl      
    END
  ELSE
    BEGIN
      --Ensure only one mapping to destiation
      DELETE FROM ckbx_UrlMappings WHERE DestinationUrl = @DestinationUrl

      --Update
	  INSERT INTO ckbx_UrlMappings 
        (SourceUrl, DestinationUrl)
      VALUES
		(@SourceUrl, @DestinationUrl)
    END


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ValueOperand_Create]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ValueOperand_Create]
(
	@OperandID int,
	@ItemID int = null,
	@OptionID int = null,
	@AnswerValue nvarchar (255) = null
)
AS

	INSERT INTO ckbx_ValueOperand (OperandID, ItemID, OptionID, AnswerValue) VALUES (@OperandID, @ItemID, @OptionID, @AnswerValue)

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ValueOperand_Delete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ValueOperand_Delete]
(
	@OperandID int
)
AS

DELETE ckbx_ValueOperand WHERE OperandID = @OperandID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ValueOperand_GetOperand]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[ckbx_sp_ValueOperand_GetOperand]
(
	@OperandID int
)
AS

	SELECT OperandID, ItemID, OptionID, AnswerValue FROM ckbx_ValueOperand WHERE OperandID = @OperandID

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ValueOperand_Update]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[ckbx_sp_ValueOperand_Update]
(
	@OperandID int,
	@ItemID int = null,
	@OptionID int = null,
	@AnswerValue nvarchar (255) = null
)
AS
	UPDATE 
		ckbx_ValueOperand
	SET
		ItemID = @ItemID,
		OptionID = @OptionID,
		AnswerValue = @AnswerValue
	WHERE
		OperandID = @OperandID


GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ViewStateDelete]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[ckbx_sp_ViewStateDelete] (
	@SessionId varchar(255) = NULL
)
AS
	SET NOCOUNT ON

	DELETE FROM [ckbx_ViewStateData] WHERE [SessionID] = @SessionId
	
	RETURN @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ViewStateLoad]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[ckbx_sp_ViewStateLoad] (
	@GUID char(128) = NULL
)
AS
	SET NOCOUNT ON

	SELECT [ViewState] FROM [ckbx_ViewStateData] WHERE [GUID] = @GUID
	
	RETURN @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[ckbx_sp_ViewStateSave]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[ckbx_sp_ViewStateSave] (
	@GUID char(128) = NULL,
	@SessionId varchar(255) = NULL,
	@ViewState text = NULL
)
AS
	SET NOCOUNT ON

	IF (SELECT [SessionID] FROM [ckbx_ViewStateData] WHERE [GUID] = @GUID) IS NULL
	BEGIN
		INSERT INTO [ckbx_ViewStateData] ([GUID], [SessionID], [ViewState], [Created]) VALUES (@GUID, @SessionId, @ViewState, GetDate())
	END 
	ELSE 
	BEGIN
		UPDATE [ckbx_ViewStateData] 
		SET 
			[ViewState] = @ViewState,
			[Created] = GetDate() 
		WHERE
			[GUID] = @GUID 
	END
	
	RETURN @@ERROR

GO
/****** Object:  StoredProcedure [dbo].[DeleteCompletedScope]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DeleteCompletedScope]
@completedScopeID uniqueidentifier
AS
DELETE FROM [CompletedScope] WHERE completedScopeID=@completedScopeID

GO
/****** Object:  StoredProcedure [dbo].[InsertCompletedScope]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[InsertCompletedScope]
@instanceID uniqueidentifier,
@completedScopeID uniqueidentifier,
@state image
As

SET TRANSACTION ISOLATION LEVEL READ COMMITTED
SET NOCOUNT ON

		UPDATE [CompletedScope] WITH(ROWLOCK UPDLOCK) 
		    SET state = @state,
		    modified = GETUTCDATE()
		    WHERE completedScopeID=@completedScopeID 

		IF ( @@ROWCOUNT = 0 )
		BEGIN
			--Insert Operation
			INSERT INTO [CompletedScope] WITH(ROWLOCK)
			VALUES(@instanceID, @completedScopeID, @state, GETUTCDATE()) 
		END

		RETURN
RETURN

GO
/****** Object:  StoredProcedure [dbo].[InsertInstanceState]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[InsertInstanceState]
@uidInstanceID uniqueidentifier,
@state image,
@status int,
@unlocked int,
@blocked int,
@info ntext,
@ownerID uniqueidentifier = NULL,
@ownedUntil datetime = NULL,
@nextTimer datetime,
@result int output,
@currentOwnerID uniqueidentifier output
As
    declare @localized_string_InsertInstanceState_Failed_Ownership nvarchar(256)
    set @localized_string_InsertInstanceState_Failed_Ownership = N'Instance ownership conflict'
    set @result = 0
    set @currentOwnerID = @ownerID
    declare @now datetime
    set @now = GETUTCDATE()

    SET TRANSACTION ISOLATION LEVEL READ COMMITTED
    set nocount on

    IF @status=1 OR @status=3
    BEGIN
	DELETE FROM [InstanceState] WHERE uidInstanceID=@uidInstanceID AND ((ownerID = @ownerID AND ownedUntil>=@now) OR (ownerID IS NULL AND @ownerID IS NULL ))
	if ( @@ROWCOUNT = 0 )
	begin
		set @currentOwnerID = NULL
    		select  @currentOwnerID=ownerID from [InstanceState] Where uidInstanceID = @uidInstanceID
		if ( @currentOwnerID IS NOT NULL )
		begin	-- cannot delete the instance state because of an ownership conflict
			-- RAISERROR(@localized_string_InsertInstanceState_Failed_Ownership, 16, -1)				
			set @result = -2
			return
		end
	end
	else
	BEGIN
		DELETE FROM [CompletedScope] WHERE uidInstanceID=@uidInstanceID
	end
    END
    
    ELSE BEGIN

  	    if not exists ( Select 1 from [InstanceState] Where uidInstanceID = @uidInstanceID )
		  BEGIN
			  --Insert Operation
			  IF @unlocked = 0
			  begin
			     Insert into [InstanceState] 
			     Values(@uidInstanceID,@state,@status,@unlocked,@blocked,@info,@now,@ownerID,@ownedUntil,@nextTimer) 
			  end
			  else
			  begin
			     Insert into [InstanceState] 
			     Values(@uidInstanceID,@state,@status,@unlocked,@blocked,@info,@now,null,null,@nextTimer) 
			  end
		  END
		  
		  ELSE BEGIN

				IF @unlocked = 0
				begin
					Update [InstanceState]  
					Set state = @state,
						status = @status,
						unlocked = @unlocked,
						blocked = @blocked,
						info = @info,
						modified = @now,
						ownedUntil = @ownedUntil,
						nextTimer = @nextTimer
					Where uidInstanceID = @uidInstanceID AND ((ownerID = @ownerID AND ownedUntil>=@now) OR (ownerID IS NULL AND @ownerID IS NULL ))
					if ( @@ROWCOUNT = 0 )
					BEGIN
						-- RAISERROR(@localized_string_InsertInstanceState_Failed_Ownership, 16, -1)
						select @currentOwnerID=ownerID from [InstanceState] Where uidInstanceID = @uidInstanceID  
						set @result = -2
						return
					END
				end
				else
				begin
					Update [InstanceState]  
					Set state = @state,
						status = @status,
						unlocked = @unlocked,
						blocked = @blocked,
						info = @info,
						modified = @now,
						ownerID = NULL,
						ownedUntil = NULL,
						nextTimer = @nextTimer
					Where uidInstanceID = @uidInstanceID AND ((ownerID = @ownerID AND ownedUntil>=@now) OR (ownerID IS NULL AND @ownerID IS NULL ))
					if ( @@ROWCOUNT = 0 )
					BEGIN
						-- RAISERROR(@localized_string_InsertInstanceState_Failed_Ownership, 16, -1)
						select @currentOwnerID=ownerID from [InstanceState] Where uidInstanceID = @uidInstanceID  
						set @result = -2
						return
					END
				end
				
		  END


    END
		RETURN
Return

GO
/****** Object:  StoredProcedure [dbo].[RetrieveAllInstanceDescriptions]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[RetrieveAllInstanceDescriptions]
As
	SELECT uidInstanceID, status, blocked, info, nextTimer
	FROM [InstanceState]

GO
/****** Object:  StoredProcedure [dbo].[RetrieveANonblockingInstanceStateId]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[RetrieveANonblockingInstanceStateId]
@ownerID uniqueidentifier = NULL,
@ownedUntil datetime = NULL,
@uidInstanceID uniqueidentifier = NULL output,
@found bit = NULL output
AS
 BEGIN
		--
		-- Guarantee that no one else grabs this record between the select and update
		SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
		BEGIN TRANSACTION

SET ROWCOUNT 1
		SELECT	@uidInstanceID = uidInstanceID
		FROM	[InstanceState] WITH (updlock) 
		WHERE	blocked=0 
		AND	status NOT IN ( 1,2,3 )
 		AND	( ownerID IS NULL OR ownedUntil<GETUTCDATE() )
SET ROWCOUNT 0

		IF @uidInstanceID IS NOT NULL
		 BEGIN
			UPDATE	[InstanceState]  
			SET		ownerID = @ownerID,
					ownedUntil = @ownedUntil
			WHERE	uidInstanceID = @uidInstanceID

			SET @found = 1
		 END
		ELSE
		 BEGIN
			SET @found = 0
		 END

		COMMIT TRANSACTION
 END

GO
/****** Object:  StoredProcedure [dbo].[RetrieveCompletedScope]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[RetrieveCompletedScope]
@completedScopeID uniqueidentifier,
@result int output
AS
BEGIN
    SELECT state FROM [CompletedScope] WHERE completedScopeID=@completedScopeID
	set @result = @@ROWCOUNT;
End

GO
/****** Object:  StoredProcedure [dbo].[RetrieveExpiredTimerIds]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[RetrieveExpiredTimerIds]
@ownerID uniqueidentifier = NULL,
@ownedUntil datetime = NULL,
@now datetime
AS
    SELECT uidInstanceID FROM [InstanceState]
    WHERE nextTimer<@now AND status<>1 AND status<>3 AND status<>2 -- not blocked and not completed and not terminated and not suspended
        AND ((unlocked=1 AND ownerID IS NULL) OR ownedUntil<GETUTCDATE() )

GO
/****** Object:  StoredProcedure [dbo].[RetrieveInstanceState]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[RetrieveInstanceState]
@uidInstanceID uniqueidentifier,
@ownerID uniqueidentifier = NULL,
@ownedUntil datetime = NULL,
@result int output,
@currentOwnerID uniqueidentifier output
As
Begin
    declare @localized_string_RetrieveInstanceState_Failed_Ownership nvarchar(256)
    set @localized_string_RetrieveInstanceState_Failed_Ownership = N'Instance ownership conflict'
    set @result = 0
    set @currentOwnerID = @ownerID

	SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
	BEGIN TRANSACTION
	
    -- Possible workflow status: 0 for executing; 1 for completed; 2 for suspended; 3 for terminated; 4 for invalid

	if @ownerID IS NOT NULL	-- if id is null then just loading readonly state, so ignore the ownership check
	begin
		  Update [InstanceState]  
		  set	ownerID = @ownerID,
				ownedUntil = @ownedUntil
		  where uidInstanceID = @uidInstanceID AND (    ownerID = @ownerID 
													 OR ownerID IS NULL 
													 OR ownedUntil<GETUTCDATE()
													)
		  if ( @@ROWCOUNT = 0 )
		  BEGIN
			-- RAISERROR(@localized_string_RetrieveInstanceState_Failed_Ownership, 16, -1)
			select @currentOwnerID=ownerID from [InstanceState] Where uidInstanceID = @uidInstanceID 
			if (  @@ROWCOUNT = 0 )
				set @result = -1
			else
				set @result = -2
			GOTO DONE
		  END
	end
	
    Select state from [InstanceState]  
    Where uidInstanceID = @uidInstanceID
    
	set @result = @@ROWCOUNT;
    if ( @result = 0 )
	begin
		set @result = -1
		GOTO DONE
	end
	
DONE:
	COMMIT TRANSACTION
	RETURN

End

GO
/****** Object:  StoredProcedure [dbo].[RetrieveNonblockingInstanceStateIds]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[RetrieveNonblockingInstanceStateIds]
@ownerID uniqueidentifier = NULL,
@ownedUntil datetime = NULL,
@now datetime
AS
    SELECT uidInstanceID FROM [InstanceState] WITH (TABLOCK,UPDLOCK,HOLDLOCK)
    WHERE blocked=0 AND status<>1 AND status<>3 AND status<>2 -- not blocked and not completed and not terminated and not suspended
 		AND ( ownerID IS NULL OR ownedUntil<GETUTCDATE() )
    if ( @@ROWCOUNT > 0 )
    BEGIN
        -- lock the table entries that are returned
        Update [InstanceState]  
        set ownerID = @ownerID,
	    ownedUntil = @ownedUntil
        WHERE blocked=0 AND status<>1 AND status<>3 AND status<>2
 		AND ( ownerID IS NULL OR ownedUntil<GETUTCDATE() )
	
    END

GO
/****** Object:  StoredProcedure [dbo].[UnlockInstanceState]    Script Date: 11/10/2016 8:45:37 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[UnlockInstanceState]
@uidInstanceID uniqueidentifier,
@ownerID uniqueidentifier = NULL
As

SET TRANSACTION ISOLATION LEVEL READ COMMITTED
set nocount on

		Update [InstanceState]  
		Set ownerID = NULL,
		     unlocked = 1,
			ownedUntil = NULL
		Where uidInstanceID = @uidInstanceID AND ((ownerID = @ownerID AND ownedUntil>=GETUTCDATE()) OR (ownerID IS NULL AND @ownerID IS NULL ))

GO
USE [master]
GO
ALTER DATABASE [checkbox] SET  READ_WRITE 
GO
COMMIT

INSERT INTO changelog (change_number, complete_dt, applied_by, description)
VALUES (1, GetDate(), SYSTEM_USER, ' ')

COMMIT TRANSACTION
GO

--------------- Fragment ends: C:\Users\jimto\Projects\survey-platform\CheckboxDB\.\Scripts\Deployed Scripts\0001 CreateInitialDatabase.sql ---------------
GO

-- Script generation completed at 11/14/2016 11:01 PM
