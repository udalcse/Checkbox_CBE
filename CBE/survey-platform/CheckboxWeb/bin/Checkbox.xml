<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Checkbox</name>
    </assembly>
    <members>
        <member name="T:Checkbox.Analytics.Analysis">
            <summary>
            Contains business logic for running instance of an analysis template.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Analysis._skipFreshnessChecks">
            <summary>
            Indiates whether to skip freshness checks when loading answer data
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Analysis.#ctor">
            <summary>
            Default constructor that initializes member collections.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Analysis.ID">
            <summary>
            Get the ID of the analysis.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Analysis.SetId(System.Int32)">
            <summary>
            Manually set id of analysis
            </summary>
            <param name="analysisId"></param>
        </member>
        <member name="P:Checkbox.Analytics.Analysis.Filters">
            <summary>
            Get the collection of filters associated with this analysis, excluding the min/max completion date values which are available via
            the <see cref="P:Checkbox.Analytics.Analysis.MinResponseDate"/> and <see cref="P:Checkbox.Analytics.Analysis.MaxResponseDate"/> properties respectively.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Analysis.LanguageCode">
            <summary>
            Get language code for analysis
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Analysis.MinResponseDate">
            <summary>
            Get/set earliest date for completed results to include in the Analysis.  When this property is set, only completed responses finished on or after this date OR 
            incomplete responses modified on or after this date will be modified.
            </summary>
            <remarks>A NULL value indicates that no responses should be excluded for not meeting a minimum completed date criterion.</remarks>
        </member>
        <member name="P:Checkbox.Analytics.Analysis.MaxResponseDate">
            <summary>
            Get/set latest date for completed results to include in the Analysis.  When this property is set, only completed responses finished on or before this date OR 
            incomplete responses modified on or before this date will be modified.
            </summary>
            <remarks>A NULL value indicates that no responses should be excluded for not meeting a maximum completed date criterion.</remarks>
        </member>
        <member name="P:Checkbox.Analytics.Analysis.IncludeIncompleteResponses">
            <summary>
            Get whether incomplete responses should be included in the analysis.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Analysis.IncludeTestResponses">
            <summary>
            Get whether test responses should be included in the analysis.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Analysis.ProgressKey">
            <summary>
            Get progress key used for progress tracking.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Analysis.Data">
            <summary>
            Get the <see cref="T:Checkbox.Analytics.Data.AnalysisAnswerData"/> object associated with this Analysis.  This object contains all item and option text and aliases as well as information about
            each response (and associated answers) included in the analysis.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Analysis.FillData(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            </summary>
            <param name="itemIDs"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Analysis.Name">
            <summary>
            Get/set the name of the analysis.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Analysis.Initialize(Checkbox.Analytics.Filters.AnalysisFilterCollection,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Boolean,System.Nullable{System.DateTime})">
            <summary>
            Initialize the analysis with specified language and filter information.
            </summary>
            <param name="filterCollection">Collection of non-completion-date dependent response filters.</param>
            <param name="languageCode">Language code for the analysis.</param>
            <param name="startFilter">Minimum date filter for response completion date.</param>
            <param name="endFilter">Maximum date filter for response completion date.</param>
            <param name="includeIncompleteResponses">Specify whether incomplete responses should be included or not.</param>
            <param name="includeTestResponses">Specify whether test responses should be included or not.</param>
            <param name="progressKey">Key to use for tracking progress.</param>
            <param name="analysisModifiedDate">Date/Time analysis was last modified</param>
        </member>
        <member name="P:Checkbox.Analytics.Analysis.ResponseTemplateIDs">
            <summary>
            List response template ids for items reported on by this analysis.
            </summary>
            <remarks>Currently, Checkbox only supports reporting on items from a single response template in an analysis, though this may change in the future.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Analysis.AddResponseTemplateID(System.Int32)">
            <summary>
            Add a response template id to the list of response templates reported on by this analysis.
            </summary>
            <param name="responseTemplateID">ID of response template to add to the list.</param>
            <remarks>Currently, Checkbox only supports reporting on items from a single response template in an analysis, though this may change in the future.  As
            a result, only the first value added will be used.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Analysis.LoadAnswerData(System.Boolean,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Load analysis data, optionally with data for incomplete responses. 
            </summary>
            <param name="includeIncompleteResponses"></param>
            <param name="itemIDs"></param>
        </member>
        <member name="P:Checkbox.Analytics.Analysis.Pages">
            <summary>
            Get a list of pages contained in this analysis.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Analysis.AddPage(Checkbox.Analytics.AnalysisPage)">
            <summary>
            Add a page to the analysis.
            </summary>
            <param name="page">Page to add to the analysis.</param>
        </member>
        <member name="M:Checkbox.Analytics.Analysis.AddItem(Checkbox.Forms.Items.Item)">
            <summary>
            Add an item to the collection of items contained in this analysis.
            </summary>
            <param name="item">Item to add to the collection.</param>
            <remarks>Only analysis items or display-only items are supported in analyses.  Items that expect user input will not work if added to an analysis.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Analysis.GetItem(System.Int32)">
            <summary>
            Get the item with the specified id from the analysis' item collection.
            </summary>
            <param name="itemID">ID of item to retrieve.</param>
            <returns>Item with the specified ID, or NULL if the item is not found.</returns>
        </member>
        <member name="P:Checkbox.Analytics.Analysis.Items">
            <summary>
            Get a listing of items contained in the analysis.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateDataSet.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="owningObjectTypeName"></param>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplateDataSet.IdentityColumnName">
            <summary>
            Set identity column
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Computation.AverageScoreByPageDataCalculator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.AverageScoreByPageDataCalculator.#ctor(Checkbox.Forms.ResponseTemplate,System.Boolean)">
            <summary>
            
            </summary>
            <param name="responseTemplate"></param>
            <param name="includeTotalSurveyScore"></param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.AverageScoreByPageDataCalculator.Aggregate(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            
            </summary>
            <param name="answerAggregator"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Computation.NetPromoterScoreItemDataCalculator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.NetPromoterScoreItemDataCalculator.Aggregate(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            
            </summary>
            <param name="answerAggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.NetPromoterScoreItemDataCalculator.Calculate(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Calculate responses, means, medians, modes and standard deviations and set 
            result into answer aggregator.
            </summary>
            <param name="answerAggregator">Aggregated answers to rating scale items
            to use for the computations.</param>
            <returns>DataTable containing calculated results.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.NetPromoterScoreItemDataCalculator.Calculate(System.Collections.Generic.IEnumerable{Checkbox.Analytics.Data.ItemAnswer})">
            <summary>
            Calculate responses, means, medians, modes and standard deviations and set 
            result into answer aggregator.
            </summary>
            <param name="answers"></param>
            <returns>DataTable containing calculated results.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.NetPromoterScoreItemDataCalculator.AddResultToResultList(System.Collections.Generic.List{Checkbox.Wcf.Services.Proxies.CalculateResult},System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Help function to add calculate result to result list
            </summary>
            <param name="resultList"></param>
            <param name="itemId"></param>
            <param name="detractors"></param>
            <param name="passive"></param>
            <param name="promoters"></param>
            <param name="score"></param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.NetPromoterScoreItemDataCalculator.GetItemResult(System.Collections.Generic.IEnumerable{Checkbox.Analytics.Data.ItemAnswer})">
            <summary>
            Overridden GetItemResult(...) method that returns a custom item result class
            with average and standard deviation values.
            </summary>
            <returns>RatingScaleItemResult data object.</returns>
        </member>
        <member name="T:Checkbox.Analytics.Computation.NetPromoterScoreStatisticsItemDataCalculator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.NetPromoterScoreStatisticsItemDataCalculator.TotalResponsesCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.NetPromoterScoreStatisticsItemDataCalculator.Aggregate(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            
            </summary>
            <param name="answerAggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.NetPromoterScoreStatisticsItemDataCalculator.Calculate(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            </summary>
            <param name="answerAggregator">Aggregated answers to rating scale items
            to use for the computations.</param>
            <returns>DataTable containing calculated results.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.NetPromoterScoreStatisticsItemDataCalculator.Calculate(System.Collections.Generic.IEnumerable{Checkbox.Analytics.Data.ItemAnswer})">
            <summary>
            </summary>
            <param name="answers"></param>
            <returns>DataTable containing calculated results.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.NetPromoterScoreStatisticsItemDataCalculator.AddResultToResultList(System.Collections.Generic.List{Checkbox.Wcf.Services.Proxies.CalculateResult},System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Help function to add calculate result to result list
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.NetPromoterScoreStatisticsItemDataCalculator.GetItemResult(System.Collections.Generic.IEnumerable{Checkbox.Analytics.Data.ItemAnswer})">
            <summary>
            Overridden GetItemResult(...) method that returns a custom item result class
            with average and standard deviation values.
            </summary>
            <returns>RatingScaleItemResult data object.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.NetPromoterScoreStatisticsItemDataCalculator.ComputeStandardDeviation(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32)">
            <summary>
            Compute standard deviation for result set.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Computation.PointsDataCalculator">
            <summary>
            Data calculator for RankOrderSummary item.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.PointsDataCalculator.Aggregate(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Aggregate the points
            </summary>
            <param name="answerAggregator"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Computation.StatisticsItemDataCalculator">
            <summary>
            Data calculator for the statistics report item.  The calculator computes responses, mean,
            median, mode and standard deviations for responses to rating scale questions.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.StatisticsItemDataCalculator.MinPossibleAnswerValue">
            <summary>
            Get minimum possible answer value for set of items in aggregator.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.StatisticsItemDataCalculator.MaxPossibleAnswerValue">
            <summary>
            Get maximum possible answer value for set of items in aggregator.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.StatisticsItemDataCalculator.Aggregate(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            
            </summary>
            <param name="answerAggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.StatisticsItemDataCalculator.Calculate(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Calculate responses, means, medians, modes and standard deviations and set 
            result into answer aggregator.
            </summary>
            <param name="answerAggregator">Aggregated answers to rating scale items
            to use for the computations.</param>
            <returns>DataTable containing calculated results.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.StatisticsItemDataCalculator.AddResultToResultList(System.Collections.Generic.List{Checkbox.Wcf.Services.Proxies.CalculateResult},System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Help function to add calculate result to result list
            </summary>
            <param name="resultList"></param>
            <param name="itemId"></param>
            <param name="responses"></param>
            <param name="mean"></param>
            <param name="median"></param>
            <param name="mode"></param>
            <param name="stdDev"></param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.StatisticsItemDataCalculator.GetItemResult(System.Int32,Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Overridden GetItemResult(...) method that returns a custom item result class
            with average and standard deviation values.
            </summary>
            <param name="itemId">ID of item to get result for.</param>
            <param name="answerAggregator">Answer aggregator containing survey answer data.</param>
            <returns>RatingScaleItemResult data object.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Checkbox.Analytics.Computation.StatisticsItemDataCalculator.GetAnswerValues(System.Int32,Checkbox.Analytics.Computation.ItemAnswerAggregator)" -->
        <member name="M:Checkbox.Analytics.Computation.StatisticsItemDataCalculator.ComputeMean(System.Collections.Generic.List{System.Double})">
            <summary>
            Compute the mean for a set of answer values.
            </summary>
            <param name="answerValues">List of answer values.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.StatisticsItemDataCalculator.ComputeStandardDeviation(System.Collections.Generic.List{System.Double},System.Double)">
            <summary>
            Compute standard deviation for result set.
            </summary>
            <param name="answerValues">List of answer values.</param>
            <param name="averageValue">Average value of answers.</param>
            <returns>Standard deviation for values.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.StatisticsItemDataCalculator.ComputeMedian(System.Collections.Generic.List{System.Double})">
            <summary>
            Compute the median for the list of answer values
            </summary>
            <param name="answerValues">List of answer values.</param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.StatisticsItemDataCalculator.ComputeMode(System.Collections.Generic.List{System.Double})">
            <summary>
            Compute the mode for the list of answer values
            </summary>
            <param name="answerValues">List of answer values.</param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.StatisticsItemDataCalculator.GetItemAnswerCountWithoutNA(System.Int32,Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Compute count of answers on item without N/A active options
            </summary>
            <param name="itemId">ID of item to get result for.</param>
            <param name="answerAggregator">Answer aggregator containing item meta data
            and response answer information.</param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.StatisticsItemDataCalculator.Calculate(System.Collections.Generic.IEnumerable{Checkbox.Analytics.Data.ItemAnswer},Checkbox.Analytics.Items.StatisticsItemReportingOption,System.Nullable{System.Double}@,System.Nullable{System.Double}@)">
            <summary>
            </summary>
            <param name="answers"></param>
            <param name="option"></param>
            <param name="minPossibleAnswerValue"></param>
            <param name="maxPossibleAnswerValue"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Computation.AverageScoreDataCalculator">
            <summary>
            Calculator for getting average score information for reports
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.AverageScoreDataCalculator.Aggregate(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Aggregate and return the analysis data
            </summary>
            <param name="answerAggregator"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Computation.CrossTabReportDataCalculator">
            <summary>
            Perform calculations for cross-tab data.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.CrossTabReportDataCalculator.Aggregate(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Aggregate the data
            </summary>
            <param name="answerAggregator"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Computation.DetailsItemAnswerAggregator">
            <summary>
            Answer aggregator specific to the details item that provides specific handling for
            checkboxes.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.DetailsItemAnswerAggregator.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="preferAlias"></param>
        </member>
        <member name="T:Checkbox.Analytics.Computation.FrequencyDataCalculator">
            <summary>
            Data calculator for frequency items
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.FrequencyDataCalculator.Aggregate(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Aggregate the frequencies
            </summary>
            <param name="answerAggregator"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Computation.MatrixReportDataCalculator">
            <summary>
            Data calculator for matrix analysis that includes average scores
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.MatrixReportDataCalculator.#ctor">
            <summary>
            Constructor -- Initializes internal data store
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.MatrixReportDataCalculator.RatingScaleAveragesTableName">
            <summary>
            Get the name of the table containing rating scale item averages
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.MatrixReportDataCalculator.SumTotalAveragesTableName">
            <summary>
            Get the name of the table containing sum total item averages
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.MatrixReportDataCalculator.GetData(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Get the calculated data for the matrix summary
            </summary>
            <param name="aggregator">Item answer aggregator</param>
            <returns>DataSet containing data</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.MatrixReportDataCalculator.Aggregate(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Aggregate the frequencies
            </summary>
            <param name="answerAggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.MatrixReportDataCalculator.GetOptionResult(System.Int32,System.Int32,Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Get the answer count/percentage for a particular option id.
            </summary>
            <param name="optionID">option ID</param>
            <param name="answerAggregator">Aggregated data</param>
            <returns>Result value</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.MatrixReportDataCalculator.CalculateRatingScaleAverages(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Calculate the average scores for the rating scale items in the matrix
            </summary>
            <param name="aggregator">Answer aggregator</param>
            <returns>DataTable with average score information</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.MatrixReportDataCalculator.CalculateSumTotalAverages(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Calculate the averages for the sum total items in the matrix
            </summary>
            <param name="aggregator">Answer aggregator</param>
            <returns>DataTable with average score information</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.MatrixReportDataCalculator.CalculateSliderAverages(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Calculate the averages for the slider items in the matrix
            </summary>
            <param name="aggregator">Answer aggregator</param>
            <returns>DataTable with average score information</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.MatrixReportDataCalculator.AddRatingScaleItem(System.Int32)">
            <summary>
            Add an item id to the list of rating scale item ids
            </summary>
            <param name="itemID">ID of the rating scale item</param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.MatrixReportDataCalculator.AddSumTotalItem(System.Int32)">
            <summary>
            Add an item id to the list of sum total item ids
            </summary>
            <param name="itemID">ID of the item</param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.MatrixReportDataCalculator.AddSliderItem(System.Int32)">
            <summary>
            Add an item id to the list of slider item ids
            </summary>
            <param name="itemID">ID of the item</param>
        </member>
        <member name="T:Checkbox.Analytics.Computation.ReportDataCalculator">
            <summary>
            Aggregate report data based on item answers.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ReportDataCalculator.GetData(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Get the report data which includes details data and report data
            </summary>
            <param name="aggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ReportDataCalculator.GetData(System.Collections.Generic.IEnumerable{Checkbox.Analytics.Data.ItemAnswer})">
            <summary>
            Get the report data which includes details data and report data
            </summary>
            <param name="answers"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ReportDataCalculator.Aggregate(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Aggregate report data based on the provided answers. 
            </summary>
            <param name="answerAggregator">Item Answer aggregator with answers</param>
            <returns>Array of aggregated data.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ReportDataCalculator.Aggregate(System.Collections.Generic.IEnumerable{Checkbox.Analytics.Data.ItemAnswer})">
            <summary>
            Aggregate report data based on the provided answers. 
            </summary>
            <returns>Array of aggregated data.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ReportDataCalculator.Calculate(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Calculate report data based on the provided answers. 
            </summary>
            <param name="answerAggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ReportDataCalculator.Calculate(System.Collections.Generic.IEnumerable{Checkbox.Analytics.Data.ItemAnswer})">
            <summary>
            Calculate report data based on the provided answers. 
            </summary>
            <param name="answers"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ReportDataCalculator.CountResponses(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Count all responses for items.
            </summary>
            <param name="answerAggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ReportDataCalculator.CountAnswers(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Count all answers for items.
            </summary>
            <param name="answerAggregator"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ReportDataCalculator.GetItemResult(System.Int32,Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Get the answer count/percentage for a particular item id.
            </summary>
            <param name="itemID">Item ID</param>
            <param name="answerAggregator">Aggregated data</param>
            <returns>Result value</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ReportDataCalculator.GetItemResult(System.Int32,System.String,Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Get the answer count/percentage for a particular item id and answer text
            </summary>
            <param name="itemID">Item ID</param>
            <param name="answerText"></param>
            <param name="answerAggregator">Aggregated data</param>
            <returns>Result value</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ReportDataCalculator.GetOptionResult(System.Int32,Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Get the answer count/percentage for a particular option id.
            </summary>
            <param name="optionID">option ID</param>
            <param name="answerAggregator">Aggregated data</param>
            <returns>Result value</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ReportDataCalculator.GetOptionSumPoints(System.Int32,Checkbox.Analytics.Computation.ItemAnswerAggregator,System.Double)">
            <summary>
            Get the sum points of the options across all the answers.
            </summary>
            <param name="optionID"></param>
            <param name="answerAggregator"></param>
            <param name="totalSumOptionsForItem"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Computation.ItemResult">
            <summary>
            Item result
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemResult.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemResult.#ctor(System.Int32,System.Decimal)">
            <summary>
            Construct an item result with a count and percentage.
            </summary>
            <param name="count">Number of answers.</param>
            <param name="percentage">Percentage.</param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemResult.#ctor(System.Double,System.Decimal)">
            <summary>
            Construct an item result with a sum points
            </summary>
            <param name="sumPoints">Sum Points</param>
            <param name="percentage">Percentage.</param>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemResult.Count">
            <summary>
            Number of answers for this result.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemResult.SumPoints">
            <summary>
            Get/Set sum point for this result.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemResult.Percentage">
            <summary>
            Answer percentage for the result.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Computation.ItemAnswerAggregator">
            <summary>
            Implementation class for item answer aggregation
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Computation.ItemAnswerAggregator.GroupedReportItemData">
            <summary>
            Extension of report item data class to include grouping information
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.GroupedReportItemData.GroupName">
            <summary>
            Get/set the name of the group the item belongs 
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.GroupedReportItemData.Position">
            <summary>
            Get/set the item's "position" relative other items.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Computation.ItemAnswerAggregator.GroupedReportOptionData">
            <summary>
            Extension of report option data class to include grouping information
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.GroupedReportOptionData.GroupName">
            <summary>
            Get/set the group name
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.#ctor(System.Boolean)">
            <summary>
            Construct a new item answer aggregator
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.AnswerData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.PreferAlias">
            <summary>
            Get whether aliases are used
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.GroupNames">
            <summary>
            Get the list of group names
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.ItemAnswers">
            <summary>
            Get a dictionary containing a list of answer ids for a given
            item.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.OptionAnswers">
            <summary>
            Get a dictionary containing a list of answers for a given
            item option.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.ItemOptionAnswerCounts">
            <summary>
            Get a dictionary containing a list of answers counts for a given
            item and given option.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.ItemResponses">
            <summary>
            Get the item response ids.  Key is the id of the item and
            The value is a dictionary instead of a list so that fast "contains" 
            access can be used.  Value is a dictionary of response ids and # of 
            answers for the item for the response id
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.OptionResponses">
            <summary>
            Get the option response ids.  Key is the id of the option and
            The value is a dictionary instead of a list so that fast "contains" 
            access can be used.  Value is a dictionary of response ids and # of 
            answers for the option for the response id
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.ItemGroups">
            <summary>
            Get a list of group names
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.ItemOptionDictionary">
            <summary>
            Get the item options dictionary
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.OptionDictionary">
            <summary>
            Get the dictionary of options
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.ItemDictionary">
            <summary>
            Get the item dictionary
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.ResponseAnswerDictionary">
            <summary>
            Get the response answer dictionary
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Computation.ItemAnswerAggregator.AnswerDictionary">
            <summary>
            Get the answer dictionary
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.InitializeAnswerData">
            <summary>
            Initialize the data store
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.AddAnswerGroup(System.String)">
            <summary>
            Add an answer group.
            </summary>
            <param name="groupName">Name of the group to add.</param>
            <remarks>The group will be added to the end of the list</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.AddItem(System.Int32,System.String,System.String)">
            <summary>
            Add an item.
            </summary>
            <param name="itemID">ID of the item to add.</param>
            <param name="itemText">Text associated with the item.</param>
            <param name="itemType">Type of the item.</param>
            <remarks>The item will not be in a group and will be added to the end of the list.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.AddItem(System.Int32,System.String,System.String,System.String)">
            <summary>
            Add an item and insert the item into an item group.
            </summary>
            <param name="itemID">ID of the item to add.</param>
            <param name="itemText">Text of the item.</param>
            <param name="itemType">Type of the item.</param>
            <param name="groupName">Name of the group.</param>
            <remarks>The item will be added to the end  of the list of items in the group.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.AddItemOption(System.Int32,System.Int32,System.String)">
            <summary>
            Add an item option to the data
            </summary>
            <param name="itemID">ID of the item the option is associated with.</param>
            <param name="optionID">ID of the option to add.</param>
            <param name="optionText">Text of the option to add.</param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.AddItemOption(System.Int32,System.Int32,System.String,System.Nullable{System.Double},System.Boolean)">
            <summary>
            Add an item option to the data.
            </summary>
            <param name="itemID">ID of the item the option is associated with.</param>
            <param name="optionID">ID of the option to add.</param>
            <param name="optionText">Text of the option to add.</param>
            <param name="points">Point value for the option</param>
            <param name="isOther">Specify whether the option is an "other" option or not.</param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.AddAnswer(System.Int64,System.Int64,System.Int32,System.String)">
            <summary>
            Add an open-ended answer to the data.
            </summary>
            <param name="answerId">ID of the answer</param>
            <param name="responseID">ID of the response associated with the item.</param>
            <param name="itemID">ID of the item.</param>
            <param name="answer">Answer text</param>
            <remarks>This method should be used only for open-ended items, such as single and multi line texts.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.UpdateAnswer(System.Int64,System.String)">
            <summary>
            Update the answer to an item
            </summary>
            <param name="answerId">Answer id to update.</param>
            <param name="answer">New answer</param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.AddAnswer(System.Int64,System.Int64,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Add an option answer to the data.
            </summary>
            <param name="answerId">ID of the answer</param>
            <param name="responseID">ID of the response.</param>
            <param name="itemID">ID of the answer.</param>
            <param name="optionID">ID of the option.</param>
            <remarks>This method should be used for item options that are NOT other options.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.AddAnswer(System.Int64,System.Int64,System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            Add an other option to the answer data.
            </summary>
            <param name="answerId">ID of the answer</param>
            <param name="responseID">ID of the response.</param>
            <param name="itemID">ID of the item.</param>
            <param name="optionID">ID of the option.</param>
            <param name="answer">Answer</param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.AddAnswer(System.Int64,System.Int64,System.Nullable{System.Guid},System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            Add an other option to the answer data.
            </summary>
            <param name="answerId">ID of the answer</param>
            <param name="responseID">ID of the response.</param>
            <param name="responseGuid">GUID of the response</param>
            <param name="itemID">ID of the item.</param>
            <param name="optionID">ID of the option.</param>
            <param name="answer">Answer</param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.AddAnswer(System.Int64,System.Int64,System.Nullable{System.Guid},System.Int32,System.Nullable{System.Int32},System.String,System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Add an other option to the answer data.
            </summary>
            <param name="answerId">ID of the answer</param>
            <param name="responseID">ID of the response.</param>
            <param name="responseGuid">GUID of the response</param>
            <param name="itemID">ID of the item.</param>
            <param name="optionID">ID of the option.</param>
            <param name="answer">Answer</param>
            <param name="points">Points of the answer</param>
            <param name="pageId"></param>
            <param name="count"></param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.AddAnswer(System.Int64,System.Int64,System.Nullable{System.Guid},System.Int32,System.Nullable{System.Int32},System.String,System.Nullable{System.Double},System.Nullable{System.Int32})">
            <summary>
            Add an other option to the answer data.
            </summary>
            <param name="answerId">ID of the answer</param>
            <param name="responseID">ID of the response.</param>
            <param name="responseGuid">GUID of the response</param>
            <param name="itemID">ID of the item.</param>
            <param name="optionID">ID of the option.</param>
            <param name="answer">Answer</param>
            <param name="points">Points of the answer</param>
            <param name="pageId"></param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.AddAnswer(Checkbox.Analytics.Data.ItemAnswer)">
            <summary>
            Store the provided answer data object in the answer dictionary and 
            also update the other dictionaries and list used internally for quicker
            data access.
            </summary>
            <param name="answerData"></param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.AddResponseAnswer(System.Int64,System.Int64)">
            <summary>
            Add a value to the response answers dictionary
            </summary>
            <param name="responseId"></param>
            <param name="answerId"></param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.AddItemResponse(System.Int32,System.Nullable{System.Int32},System.Int64)">
            <summary>
            Link a response to an item and also link the response to an
            option, if applicable
            </summary>
            <param name="itemId"></param>
            <param name="optionId"></param>
            <param name="responseId"></param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.AddItemAnswer(System.Int32,System.Nullable{System.Int32},System.Int64)">
            <summary>
            Link an answer to an item and option
            </summary>
            <param name="itemId"></param>
            <param name="optionId"></param>
            <param name="answerId"></param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetResponseCount(System.Nullable{System.Int32})">
            <summary>
            Get a count of the total number of responses for an item.  If itemid is
            null, total response count is returned.
            </summary>
            <returns>Number of unique response ids.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetItemSumPoints(System.Int32)">
            <summary>
            Get sum points for the specified item
            </summary>
            <param name="itemID">ID of item to get sum points for.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetItemAnswerCount(System.Int32)">
            <summary>
            Get the number of answers for an item
            </summary>
            <param name="itemId">ID of item to get number of answers for.</param>
            <returns>Number of answers for the item.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetItemAnswerCount(System.Int32,System.String)">
            <summary>
            Get the number of answers to the item with the specified answer text.
            </summary>
            <param name="itemId">ID of item to get answer count for.</param>
            <param name="answerText">Text of answer to count.</param>
            <returns>Number of answers for the item with the specified answer text.  Non-open-ended answers (i.e. select item) are not included in this total.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetOptionAnswerCount(System.Int32)">
            <summary>
            Get the number of answers for an option.
            </summary>
            <param name="optionId">ID of option to get answer count for.</param>
            <returns>Number of answers for the option.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetOptionSumPoints(System.Int32)">
            <summary>
            Get the points sum of the specified option across all the answers.
            </summary>
            <param name="optionId">ID of option to get sum points for.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetOptionAnswerCount(System.Int32,System.Int32)">
            <summary>
            Get the number of answers for an option.
            </summary>
            <param name="optionId">ID of option to get answer count for.</param>
            <returns>Number of answers for the option.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetGroupCount">
            <summary>
            Get the number of groups
            </summary>
            <returns>Number of item groups.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetGroupName(System.Int32)">
            <summary>
            Get the group text based on group position.
            </summary>
            <param name="position">Position of the group</param>
            <returns>Group name</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetGroupPosition(System.String)">
            <summary>
            Get a group's position based on it's name
            </summary>
            <param name="groupName">Name of the group.</param>
            <returns>Position</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetGroupNameForItem(System.Int32)">
            <summary>
            Get the group text based on group position.
            </summary>
            <param name="itemID">ItemID</param>
            <returns>Group name</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetItemPosition(System.Int32)">
            <summary>
            Get the position of an item.
            </summary>
            <param name="itemID">ItemID</param>
            <returns>Group name</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetItemType(System.Int32)">
            <summary>
            Get the type of the item.
            </summary>
            <param name="itemID">ID of item to get type of.</param>
            <returns>Type name of item.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetItemText(System.Int32)">
            <summary>
            Get the text for an item.
            </summary>
            <param name="itemID">ID of an item.</param>
            <returns>Item's text.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetItemID(System.Int32)">
            <summary>
            Get the id of the parent item of an option.
            </summary>
            <param name="optionID">ID of the option.</param>
            <returns>Item ID</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetOptionPosition(System.Int32)">
            <summary>
            Get the position of an option
            </summary>
            <param name="optionID">ID of the option.</param>
            <returns>Option position</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetOptionText(System.Int32)">
            <summary>
            Get the text of an option
            </summary>
            <param name="optionID">ID of the option.</param>
            <returns>Option text</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetOptionPoints(System.Int32)">
            <summary>
            Get the point value for an option
            </summary>
            <param name="optionID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetOptionIsOther(System.Int32)">
            <summary>
            Return a boolean value indicating if the specified option is an "other" 
            option.
            </summary>
            <param name="optionID">ID of option to check.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetResponseIDs">
            <summary>
            Get a list of response ids
            </summary>
            <returns>List of response ids</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetOptionIDs(System.Int32)">
            <summary>
            Get a list of option ids, ordered by position
            </summary>
            <param name="itemID">ID of options' parent item.</param>
            <returns>List of option ids</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetItemIDs">
            <summary>
            Get a list of all item ids ordered by position
            </summary>
            <returns>List of item ids.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetItemIDs(System.String)">
            <summary>
            Get a list of item ids
            </summary>
            <param name="groupName">Name of the group.  If null, all items not in groups are returned, if empty all items are returned.</param>
            <returns>List of item ids.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetAggregatedAnswerData">
            <summary>
            Get the answer data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.PopulateAggregatedAnswerDataProtected">
            <summary>
            Get the aggregated answer data
            </summary>
            <returns>DataTable with all data in a single table.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.GetAnswerTexts(System.Int32)">
            <summary>
            Get a list of answer texts for an item
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.ItemAnswerAggregator.ListResponseAnswers(System.Int64)">
            <summary>
            List answers for a response
            </summary>
            <param name="responseId"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Computation.TabularReportDataCalculator">
            <summary>
            Aggregate data and return the information in tabular format, that is, data has row/column information associated
            with it.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.TabularReportDataCalculator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Computation.TabularReportDataCalculator.Aggregate(Checkbox.Analytics.Computation.ItemAnswerAggregator)">
            <summary>
            Aggregate the totals and return the result.
            </summary>
            <param name="answerAggregator">Aggregated answer data.</param>
            <returns>Summed and totalled data</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.TabularReportDataCalculator.SetOptionResultsPosition(System.Int32,Prezza.Framework.Common.Coordinate)">
            <summary>
            Set the position of an option's results in the grid.
            </summary>
            <param name="optionID">Option ID</param>
            <param name="position">Results position</param>
        </member>
        <member name="M:Checkbox.Analytics.Computation.TabularReportDataCalculator.GetOptionResultPosition(System.Int32)">
            <summary>
            Get the position of an option's results in the grid.
            </summary>
            <param name="optionID">Option to get the position of.</param>
            <returns>Position of the result</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.TabularReportDataCalculator.GetOptionResultPositionA(System.Int32)">
            <summary>
            Get the position of an option's results in the grid.
            </summary>
            <param name="optionID">Option to get the position of.</param>
            <returns>Position of the result</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.TabularReportDataCalculator.GetOptionIDAtPosition(Prezza.Framework.Common.Coordinate)">
            <summary>
            Get the ID of the option at the specified position
            </summary>
            <param name="position">Position to check.</param>
            <returns>Option ID</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.TabularReportDataCalculator.GetRowCount">
            <summary>
            Get the number of rows
            </summary>
            <returns>Number of rows</returns>
        </member>
        <member name="M:Checkbox.Analytics.Computation.TabularReportDataCalculator.GetColumnCount">
            <summary>
            Get the number of columns.
            </summary>
            <returns>Number of columns.</returns>
        </member>
        <member name="T:Checkbox.Analytics.Configuration.ReportPerformanceConfiguration">
            <summary>
             Reports settings for best performance
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Configuration.ReportPerformanceConfiguration.MaxResponseCountForUserInputItemsVisibility">
            <summary>
             Max response count for user input items visibility
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Configuration.ReportPerformanceConfiguration.MaxResponseDetailsItemRowsForPdfExport">
            <summary>
             Max response rows count for details table
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Configuration.ReportPerformanceConfiguration.#ctor">
            <summary>
             Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Configuration.ReportPerformanceConfiguration.#ctor(System.String)">
            <summary>
             Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Checkbox.Analytics.Data.AnalysisAnswerData">
            <summary>
            Container for item, option, and answer data associated with a running analysis.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Data.AnalysisAnswerData._preloadedProfileRtIds">
            <summary>
            Indicates profile data has been preloaded or not for a response
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Data.AnalysisAnswerData._itemAnswersDictionary">
            <summary>
            Dictionary of answers to particular items across all responses
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Data.AnalysisAnswerData._itemResponseAnswersDictionary">
            <summary>
            Dictionary of answers to a particular item in a given response
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Data.AnalysisAnswerData._itemOptionResponseAnswersDictionary">
            <summary>
            Dictionary of answers to a particular item option in a given response
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Data.AnalysisAnswerData._responseAnswerObjectsDictionary">
            <summary>
            Dictionary of answer objects on a per-response basis
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Data.AnalysisAnswerData._answersDictionary">
            <summary>
            Dictionary of answers
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Data.AnalysisAnswerData._responsePropertiesDictionary">
            <summary>
            Dictionary of response-releated properties
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Data.AnalysisAnswerData._responsePropertyNames">
            <summary>
            Get the collection of response property names
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Data.AnalysisAnswerData._answerReaderOrdinals">
            <summary>
            Dictionary to map ResponseProperties.PropertyName values to ordinals in the data reader.
            Using GetOrdinal on a reader is inefficient, AND not all properties are in the reader. This
            dictionary serves as a cache for the ordinals and as a flag to indicate if field names
            are present in the answer data reader.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Data.AnalysisAnswerData._filterPassedResponseIds">
            <summary>
            Store list of response ids that pass given filter criteria
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisAnswerData.FilterPassedResponseIds">
            <summary>
            Store list of responses that pass filters associated with items.  Responses that don't pass
            report-level filters are not included to begin with.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisAnswerData.ResponsePropertyNames">
            <summary>
            Get the list of response property names which are cached locally
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisAnswerData.AnswerReaderOrdinals">
            <summary>
            Get answer reader field to ordinal mapping
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisAnswerData.ResponsePropertiesDictionary">
            <summary>
            Get the response properties dictionary
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisAnswerData.AnswerDictionary">
            <summary>
            Get the answers dictionary
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisAnswerData.ResponseAnswerObjectDictionary">
            <summary>
            Get the dictionary linking response ids to response answer objects.
            </summary>
            <remarks>This dictionary is lazy-loaded by calls to GetResponseAnswers(...)
            method.</remarks>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisAnswerData.ItemAnswersDictionary">
            <summary>
            Get the dictionary linking items to answer objects.
            </summary>
            <remarks>This dictionary is lazy-loaded by calls to ListItemAnswers(int itemId)
            method.</remarks>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisAnswerData.ItemResponseAnswersDictionary">
            <summary>
            Get the dictionary linking items to answer objects.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisAnswerData.ItemOptionResponseAnswersDictionary">
            <summary>
            Get the dictionary linking item options to answer objects.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisAnswerData.SkipFreshnessChecks">
            <summary>
            Boolean indicating templates for items these answers refer to have been validated as not having
            been modified, so calls to survey meta data proxy don't need to do a freshness check.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisAnswerData.AnswerDataLoaded">
            <summary>
            Return a boolean value indicating whether this answer data object has loaded data for the analysis.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisAnswerData.LanguageCode">
            <summary>
            Get language code used by this analysis data for retrieving item and option tests.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisAnswerData.ProgressKey">
            <summary>
            Get key for in-progress load
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.Initialize(System.String)">
            <summary>
            Initialize the analysis data with the specified language code.
            </summary>
            <param name="languageCode"></param>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.#ctor(System.Boolean)">
            <summary>
            Construct answer data object, and specify whether or not to skip
            freshness checks.
            </summary>
            <param name="skipDateModifiedChecks"></param>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.AddAnswerToDictionaries(Checkbox.Analytics.Data.ItemAnswer)">
            <summary>
            Add an answer to answer dictionaries
            </summary>
            <param name="answer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.RemoveAnswerFromDictionaries(Checkbox.Analytics.Data.ItemAnswer)">
            <summary>
            Remove an answer from answer dictionaries
            </summary>
            <param name="answer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.RemoveResponsesFromDictionaries(System.Int64)">
            <summary>
            Remove respnoses from answer dictionaries
            </summary>
            <param name="responseId"></param>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.EnsureProfileDataPreloaded(System.Int32)">
            <summary>
            Preload profile data
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.Load(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,Checkbox.Analytics.Filters.AnalysisFilterCollection,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Boolean,System.String)">
            <summary>
            Load analysis answer data
            </summary>
            <param name="itemIds"></param>
            <param name="responseTemplateId"></param>
            <param name="filterCollection"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="includeIncompleteResponses"></param>
            <param name="includeTestResponses"> </param>
            <param name="progressKey"></param>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.AddItemAnswerObject(System.Data.IDataReader)">
            <summary>
            Add an answer data object to the internal dictionary
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.CreateItemAnswerObject(System.Data.IDataReader)">
            <summary>
            Create an answer data object for the given row
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.PopulateResponseProperties(System.Data.IDataReader)">
            <summary>
            Populate the report data answer with additional response properties
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.FilterResponseData(System.Collections.Generic.List{Checkbox.Analytics.Filters.Filter})">
            <summary>
            Return a filtered dictionary containing data rows for response ids.
            </summary>
            <param name="filters">Filter information.</param>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.ValidateResponse(System.Int64,System.Collections.Generic.List{Checkbox.Analytics.Filters.Filter})">
            <summary>
            Valiate answer rows for a specific response.
            </summary>
            <param name="responseId">Response to validate.</param>
            <param name="filters">Filters to apply.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.ListResponseIds">
            <summary>
            Get a list loaded responses ids.
            </summary>
            <returns>List of response ids.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.ListAnswerIds">
            <summary>
            Get a list of loaded answer ids.
            </summary>
            <returns>List of answer ids.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.GetResponseProperties(System.Int64)">
            <summary>
            Get the properties object for a response.  The properties contains started time, end time,
            and other properties of the response.
            </summary>
            <param name="responseId">ID of response to get properties for.</param>
            <returns>Response properties object or NULL if properties object not found.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.GetResponseAnswers(System.Int64)">
            <summary>
            Get a list of answer data objects for a given response.
            </summary>
            <param name="responseId">ID of the response to list answers for.</param>
            <returns>List of answer data objects.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.ListItemAnswers(System.Int32)">
            <summary>
            List all answers for an item
            </summary>
            <param name="itemId">Id of the item.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.ListItemAnswers(System.Int32,System.Int32,System.Collections.Generic.List{Checkbox.Analytics.Filters.Filter})">
            <summary>
            Get a filtered list of answers to a specific item.
            </summary>
            <param name="itemId">Id of the item.</param>
            <param name="responseTemplateId"></param>
            <param name="filtersToApply">Filters to apply before returning list of answers.</param>
            <returns>List of item answer objects maching the supplied filters.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.ListItemResponseAnswers(System.Int64,System.Int32)">
            <summary>
            Get answers for the given response and item.
            </summary>
            <param name="responseId">ID of the response.</param>
            <param name="itemId">ID of item to get answers for.</param>
            <returns>List of answers to the item from the specified response.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.ListItemResponseAnswers(System.Int64,System.Int32,System.Int32)">
            <summary>
            Get answers for the given response and item.
            </summary>
            <param name="responseId">ID of the response.</param>
            <param name="itemId">ID of item to get answers for.</param>
            <param name="responseTemplateId"> </param>
            <returns>List of answers to the item from the specified response.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.GetOptionAnswer(System.Int64,System.Int32,System.Int32)">
            <summary>
            Get answers for the given response and item option.
            </summary>
            <param name="responseId">ID of the response.</param>
            <param name="itemId"></param>
            <param name="optionId">ID of the option.</param>
            <returns>List of answers for the selected option in the specified response.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.CalculateResponseScore(System.Int64,System.Collections.Generic.List{Checkbox.Forms.Items.Item})">
            <summary>
            Calculate the "score" for a given response id.
            </summary>
            <param name="responseId">ID of response to calculate score of.</param>
            <param name="specifiedItems"></param>
            <returns>Total score for the response.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisAnswerData.CalculateResponseDetailedScoreData(Checkbox.Forms.Response,System.Int64,Checkbox.Forms.ResponseTemplate)">
            <summary>
            Calculate detailed score info for a given response id.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisAnswerData.DateRangeStart">
            <summary>
            Get set range start
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisAnswerData.DateRangeEnd">
            <summary>
            Get/set range end
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Data.AnalysisDataProxy">
            <summary>
            Provide access to analysis data through reporting service or directly to Checkbox DB depending on application
            configuration.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisDataProxy.#cctor">
            <summary>
            Constructor to initialize the data cache
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisDataProxy.GenerateResultCacheKey(System.Int32,System.String,System.String)">
            <summary>
            Generate a cache key for the results based on item id and language code.
            </summary>
            <param name="itemId"></param>
            <param name="languageCode"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisDataProxy.AddResultToCache``1(System.Int32,System.String,System.String,``0)">
            <summary>
            Cache the specified analysis item result 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="analysisItemId"></param>
            <param name="languageCode"></param>
            <param name="key"></param>
            <param name="result"></param>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisDataProxy.GetResultFromCache``1(System.Int32,System.String,System.String)">
            <summary>
            Cache the specified analysis item result
            </summary>
            <typeparam name="T"></typeparam>
            <param name="analysisItemId"></param>
            <param name="languageCode"></param>
            <param name="key"></param>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisDataProxy.ValidateItemResultData(System.Int32,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Validate that the result data associated with this item is
            current.  Returns false if data not in cache or data's reference
            date is earlier than specified date. 
            If reference date arg. is null, result is always considered
            valid if it is in the cache. 
            </summary>
            <param name="analysisItemId"></param>
            <param name="languageCode"></param>
            <param name="dataKey"></param>
            <param name="referenceDate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Data.AnalysisDataProxy.GetSurveyReferenceDate(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            For the given list of response templates, return a reference date to use for freshness-checking
            report item data.  Freshness date will be latest modified response date among all specified
            templates.
            </summary>
            <param name="sourceResponseTemplateIds"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Data.AnalysisDataProxyCacheItem`1">
            <summary>
            Representation of an analysis data cache item which simply supports storing
            an <see cref="!:AnalysisData"/> object and a last-accessed date.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisDataProxyCacheItem`1.Data">
            <summary>
            Get/set data for the cache item
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisDataProxyCacheItem`1.ReferenceDate">
            <summary>
            Get/set reference date for item.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Data.AnalysisItemResult">
            <summary>
            Generated result data for a given analysis item.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisItemResult.ItemResponseCounts">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisItemResult.ItemAnswerCounts">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisItemResult.IsPreview">
            <summary>
            Gets or sets a value indicating whether this instance is preview.
            </summary>
            <value>
            <c>true</c> if this instance is preview; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisItemResult.DetailResults">
            <summary>
            Answer details
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisItemResult.AggregateResults">
            <summary>
            Aggregate results
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisItemResult.CalculateResults">
            <summary>
            Calculate results
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisItemResult.GroupedDetailResults">
            <summary>
            Grouped details results
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisItemResult.GroupedAggregateResults">
            <summary>
            Grouped aggregate results
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisItemResult.HeatMapAnalysisResult">
            <summary>
            Gets or sets the heat map analysis result.
            </summary>
            <value>
            The heat map analysis result.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Data.AnalysisItemResult.GradientColorDirectorMatrixResult">
            <summary>
            Gets or sets the heat map analysis result.
            </summary>
            <value>
            The heat map analysis result.
            </value>
        </member>
        <member name="T:Checkbox.Analytics.Data.DetailedScoreData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Data.PageScoreData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Data.MatrixSummaryAnalysisItemResult">
            <summary>
            Extension of analysis item result to get matrix summary specific data.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.MatrixSummaryAnalysisItemResult.SumTotalAverages">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.MatrixSummaryAnalysisItemResult.RatingScaleAverages">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Data.MatrixSummaryAnalysisItemResult.SliderAverages">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.Configuration.SourceItemFilterData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.SourceItemFilterData.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            
            </summary>
            <param name="sourceItemIds"></param>
        </member>
        <member name="T:Checkbox.Analytics.Filters.Configuration.FilterDataSet">
            <summary>
            Data container for filter data objects
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterDataSet.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectTypeName"></param>
            <param name="dataTableName"></param>
            <param name="identityColumnName"></param>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.FilterDataSet.DataTableName">
            <summary>
            Get data table name
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.FilterDataSet.IdentityColumnName">
            <summary>
            Get identity column name
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Checkbox.Analytics.Filters.Configuration.ItemFilterTextPrefixCallback" -->
        <member name="T:Checkbox.Analytics.Filters.Configuration.ItemFilterData">
            <summary>
            Meta data and factory for item-based filters, which compare answers to survey items against a
            specified value, which may be open-ended text or the ID of an item option.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.ItemFilterData.ObjectTypeName">
            <summary>
            Item filter
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.ItemFilterData.LoadSprocName">
            <summary>
            Get name of load data sproc
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ItemFilterData.CreateConfigurationDataSet">
            <summary>
            Create a configuration data set
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.ItemFilterData.ItemId">
            <summary>
            Get/set id of item to use for comparison.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ItemFilterData.RegisterTextCallback(Checkbox.Analytics.Filters.Configuration.ItemFilterTextPrefixCallback)">
            <summary>
            Register a callback method for getting item text
            </summary>
            <param name="callback">Text callback method with signature matching the <see cref="T:Checkbox.Analytics.Filters.Configuration.ItemFilterTextPrefixCallback"/> delegate signature.</param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ItemFilterData.UnRegisterTextCallback">
            <summary>
            Clear the current text callback
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ItemFilterData.CreateFilterObject">
            <summary>
            Instantiate the filter object associated with this filter meta data.
            </summary>
            <returns>Instance of a <see cref="T:Checkbox.Analytics.Filters.Filter"/> object configured with this object's meta data.</returns>
            <remarks>The exact type of <see cref="T:Checkbox.Analytics.Filters.Filter"/> object may vary depending on the Operator for the filter.  Possible types are:
            <see cref="T:Checkbox.Analytics.Filters.AnsweredFilter"/>, <see cref="T:Checkbox.Analytics.Filters.EqualFilter"/>, <see cref="T:Checkbox.Analytics.Filters.NotAnsweredFilter"/>, <see cref="T:Checkbox.Analytics.Filters.NotEqualFilter"/>, or <see cref="T:Checkbox.Analytics.Filters.ItemFilter"/>.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ItemFilterData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the filter data from the specified <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="data"><see cref="T:System.Data.DataRow"/> containing filter configuration.</param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ItemFilterData.Update(System.Data.IDbTransaction)">
            <summary>
            Update the configuration of the item filter.
            </summary>
            <param name="t">Transaction to participate in for the update.</param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ItemFilterData.Create(System.Data.IDbTransaction)">
            <summary>
            Insert the configuration of the item filter into the database.
            </summary>
            <param name="t">Transaction to participate in for the insertion.</param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ItemFilterData.Delete(System.Data.IDbTransaction)">
            <summary>
            Delete the configuration of the item filter.
            </summary>
            <param name="t">Transaction to participate in for the deletion.</param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ItemFilterData.GetFilterLeftOperandText(System.String)">
            <summary>
            Get the left operand text for the filter. 
            </summary>
            <param name="languageCode">Language code to use for the text.</param>
            <returns>Localized text for filter left operand.</returns>
            <remarks>The operand text is the concatenation of the text prefix returned by the text prefix callback method and the 
            localized text of the item associated with this filter data.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ItemFilterData.GetFilterRightOperandText(System.String)">
            <summary>
            Get the text of the filter's right operand.
            </summary>
            <param name="languageCode">Language code for the filter operand.</param>
            <returns>Operand text.</returns>
            <remarks>The text returned will either be open-ended text or the text of the option associated with the right operand for the filter.</remarks>
        </member>
        <member name="T:Checkbox.Analytics.Filters.Configuration.ProfileFilterData">
            <summary>
            Meta data container and factory for filters that compare respondent profile attribute values.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.ProfileFilterData.DataTableName">
            <summary>
            Get the name of the <see cref="T:System.Data.DataTable"/> in the filter data configuration <see cref="T:System.Data.DataSet"/> containing the configuration information
            for this type of filter.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.ProfileFilterData.IdentityColumnName">
            <summary>
            Get the name of the <see cref="T:System.Data.DataColumn"/> in the filter data configuration <see cref="T:System.Data.DataTable"/> containing the identities of 
            this type of filter.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.ProfileFilterData.PropertyFieldName">
            <summary>
            Get the name of the configuration <see cref="T:System.Data.DataColumn"/> containing the name of the profile attribute this filter uses to compare.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.ProfileFilterData.LoadSprocName">
            <summary>
            Load filter sproc.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ProfileFilterData.CreateFilterObject">
            <summary>
            Create an instance of a <see cref="T:Checkbox.Analytics.Filters.ProfileFilter"/> object.
            </summary>
            <returns><see cref="T:Checkbox.Analytics.Filters.ProfileFilter"/> object configured with this object's data.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ProfileFilterData.GetCreateCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get a <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> configured to update the filter configuration int the
            database.
            </summary>
            <param name="db"><see cref="T:Prezza.Framework.Data.Database"/> object used to create the command wrapper object.</param>
            <returns><see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> configured to update the filter configuration in the
            database.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ProfileFilterData.GetDeleteCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get a <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> configured to delete the filter configuration from the
            database.
            </summary>
            <param name="db"><see cref="T:Prezza.Framework.Data.Database"/> object used to create the command wrapper object.</param>
            <returns><see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> configured to delete the filter configuration from the
            database.</returns>
        </member>
        <member name="T:Checkbox.Analytics.Filters.Configuration.ResponseFilterData">
            <summary>
            Meta data and factory for filters applied at the response level, rather than at the specific answer level.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.ResponseFilterData.PropertyName">
            <summary>
            Get/set the name of the response property to filter on.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.ResponseFilterData.ObjectTypeName">
            <summary>
            Get type name of object
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.ResponseFilterData.DataTableName">
            <summary>
            Get the name of the <see cref="T:System.Data.DataTable"/> in the filter data configuration <see cref="T:System.Data.DataSet"/> containing the configuration information
            for this type of filter.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.ResponseFilterData.IdentityColumnName">
            <summary>
            Get the name of the <see cref="T:System.Data.DataColumn"/> in the filter data configuration <see cref="T:System.Data.DataTable"/> containing the identities of 
            this type of filter.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.ResponseFilterData.PropertyFieldName">
            <summary>
            Get the name of the configuration <see cref="T:System.Data.DataColumn"/> containing the name of the response attribute this filter uses for comparisons.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ResponseFilterData.CreateFilterObject">
            <summary>
            Create an instance of the <see cref="T:Checkbox.Analytics.Filters.ResponseFilter"/> object.
            </summary>
            <returns><see cref="T:Checkbox.Analytics.Filters.ResponseFilter"/> object configured with this object's data.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ResponseFilterData.CreateConfigurationDataSet">
            <summary>
            Create data set used to store this object's data.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.ResponseFilterData.LoadSprocName">
            <summary>
            Get procedure to load sproc
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ResponseFilterData.GetFilterLeftOperandText(System.String)">
            <summary>
            Get the left operand text for displaying the filter as text
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ResponseFilterData.GetCreateCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get a <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> configured to update the filter configuration int the
            database.
            </summary>
            <param name="db"><see cref="T:Prezza.Framework.Data.Database"/> object used to create the command wrapper object.</param>
            <returns><see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> configured to update the filter configuration in the
            database.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ResponseFilterData.GetDeleteCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get a <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> configured to delete the filter configuration from the
            database.
            </summary>
            <param name="db"><see cref="T:Prezza.Framework.Data.Database"/> object used to create the command wrapper object.</param>
            <returns><see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> configured to delete the filter configuration from the
            database.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ResponseFilterData.Create(System.Data.IDbTransaction)">
            <summary>
            Insert the filter configuration information into the database.
            </summary>
            <param name="t">Transaction to participate in for the insertion.</param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ResponseFilterData.Delete(System.Data.IDbTransaction)">
            <summary>
            Delete the filter configuration information from the database.
            </summary>
            <param name="t">Transaction to participate in for the deletion.</param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.ResponseFilterData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the filter configuration from the specified <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="data"><see cref="T:System.Data.DataRow"/> containing filter configuration information.</param>
        </member>
        <member name="T:Checkbox.Analytics.Filters.Configuration.FilterData">
            <summary>
            Metadata container for report filter objects.  This container also acts as a factory for the <see cref="T:Checkbox.Analytics.Filters.Filter"/> objects themselves, which
            contain the implementation of the filter logic itself.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.FilterData.FilterTypeName">
            <summary>
            Get the filter type name.
            </summary>
            <remarks>Checkbox supports three filter types:
              Item          --  Filter based on answers to a question.
              Profile       --  Filter based on profile attributes of the respondent.
              Response      --  Filter based on properties of the response.
            </remarks>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.FilterData.Operator">
            <summary>
            Get/set <see cref="T:Checkbox.Forms.Logic.LogicalOperator"/> used by the filter for comparing values.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.FilterData.Value">
            <summary>
            Get/set value to use for comparison
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterData.Initialize(System.Int32)">
            <summary>
            Initialize the filter data object with the specified ID.
            </summary>
            <param name="filterId">ID of the filter.</param>
            <remarks>This method is used by the FilterFactory class to initialize instances of FilterData objects for EXISTING filters.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterData.Initialize(System.String)">
            <summary>
            Initialize the filter data object with the specified type name.
            </summary>
            <param name="filterTypeName">ID of the filter.</param>
            <remarks>This method is used by the FilterFactory class to initialize instances of FilterData objects for NEW filters.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterData.CreateFilter(System.String)">
            <summary>
            Factory method to create an instance of a <see cref="T:Checkbox.Analytics.Filters.Filter"/> object to do the work of evaluating filters.
            </summary>
            <param name="languageCode">Language code for the Filter to use when it's ToString() method is called.</param>
            <returns><see cref="T:Checkbox.Analytics.Filters.Filter"/> object configured with this data object.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterData.CreateFilterObject">
            <summary>
            Overridable method to create the actual instance of the <see cref="T:Checkbox.Analytics.Filters.Filter"/> object this data class
            is associated with.
            </summary>
            <returns>Instance of a <see cref="T:Checkbox.Analytics.Filters.Filter"/> object.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterData.GetFilterLeftOperandText(System.String)">
            <summary>
            Get the left operand text for the filter.  If operand has no value
            an empty string should be returned.
            </summary>
            <param name="languageCode">Language code to use for localizing the operand text.</param>
            <returns>Text representation of the filter's left operand.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterData.GetFilterRightOperandText(System.String)">
            <summary>
            Get text for filter right operand.  If operand has no value, an empty
            string should be returned.
            </summary>
            <param name="languageCode">Language code to use for localizing the operand text.</param>
            <returns>Text representation of the filter's right operand.</returns>
            <remarks>Unless overridden, this method will return the string returned by the ToString() method of the 
            <see cref="P:Checkbox.Analytics.Filters.Configuration.FilterData.Value"/> property.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterData.ToString(System.String)">
            <summary>
            Get a string representation of the filter configuration.
            </summary>
            <param name="languageCode">Language code to use for localizing the operator and operand text.</param>
            <returns>Text representation of the filter configuration.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load filter configuration information from the specified <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="data"><see cref="T:System.Data.DataRow"/> containing configuration information for the filter.</param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterData.Create(System.Data.IDbTransaction)">
            <summary>
            Insert an entry for the filter in the base filter data table.
            </summary>
            <param name="t">Transaction context to participate in for the insertion.</param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterData.Update(System.Data.IDbTransaction)">
            <summary>
            Update the entry for the filter in the base filter data table.
            </summary>
            <param name="t">Transaction context to participate in for the update.</param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterData.Delete(System.Data.IDbTransaction)">
            <summary>
            Delete an entry for the filter in the base filter data table.
            </summary>
            <param name="t">Transaction context to participate in for the deletion.</param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterData.Equals(Checkbox.Analytics.Filters.Configuration.FilterData)">
            <summary>
            Compare one <see cref="T:Checkbox.Analytics.Filters.Configuration.FilterData"/> object with another <see cref="T:Checkbox.Analytics.Filters.Configuration.FilterData"/> object.
            </summary>
            <param name="other">Other <see cref="T:Checkbox.Analytics.Filters.Configuration.FilterData"/> object to compare to.</param>
            <returns>Boolean indicating if the objects are equal.</returns>
            <remarks>Comparison is performed by comparing the IDs of the <see cref="T:Checkbox.Analytics.Filters.Configuration.FilterData"/> objects.</remarks>
        </member>
        <member name="T:Checkbox.Analytics.Filters.Configuration.FilterFactory">
            <summary>
            Factory for creating and loading filter data objects through reflection based on type information maintained the database.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Configuration.FilterFactory.TypeCache">
            <summary>
            Get a reference to the type cache
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterFactory.GetFilterType(System.String)">
            <summary>
            Based on a filter type name, get the filter type
            </summary>
            <param name="filterTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterFactory.GetTypeAQN(System.String)">
            <summary>
            Get the AQN of the filter type
            </summary>
            <param name="filterTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterFactory.GetFilterTypeName(System.Int32)">
            <summary>
            Get a filter's type name from its id
            </summary>
            <param name="filterId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterFactory.CreateFilterData(System.String)">
            <summary>
            Instantiate a <see cref="T:Checkbox.Analytics.Filters.Configuration.FilterData"/> object of the specified type (Item, Profile, Response).
            </summary>
            <param name="filterTypeName">Type of filter to create.</param>
            <returns><see cref="T:Checkbox.Analytics.Filters.Configuration.FilterData"/> object for the specified type of filter.</returns>
            <exception cref="T:System.Exception">Exceptions are thrown if the type name can't be matched to a FilterData class.</exception>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterFactory.CreateFilterData(System.Int32)">
            <summary>
            Create the unloaded filter data for the filter with the specified id.
            </summary>
            <param name="filterId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterFactory.GetFilterData(System.Int32)">
            <summary>
            Load a filter data object with the specified filter ID.  The type of filter returned will depend on the type information 
            stored for the filter data in the database, which will be determined through a lookup in the main filter type table.
            </summary>
            <param name="filterId">ID of filter to load.</param>
            <returns><see cref="T:Checkbox.Analytics.Filters.Configuration.FilterData"/> object for the filter with the specified ID, or NULL if no filter data is found
            for the specified Id.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Configuration.FilterFactory.CreateFilterData(System.String,Checkbox.Forms.Logic.LogicalOperator,System.Object)">
            <summary>
            Create a new <see cref="T:Checkbox.Analytics.Filters.Configuration.FilterData"/> object.
            </summary>
            <param name="filterTypeName">Type name of <see cref="T:Checkbox.Analytics.Filters.Configuration.FilterData"/> object to create.</param>
            <param name="op"><see cref="T:Checkbox.Forms.Logic.LogicalOperator"/> for filter.</param>
            <param name="value">Comparison value to used.</param>
            <returns><see cref="T:Checkbox.Analytics.Filters.Configuration.FilterData"/> object initialized with the specified values.</returns>
        </member>
        <member name="T:Checkbox.Analytics.Filters.ContainsFilter">
            <summary>
            Filter to evaluate whether values are equivalent.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.ContainsFilter.Mode">
            <summary>
            Any answer can match for "equal" to be true
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.ContainsFilter.GetValueFilterClause">
            <summary>
            Get the value filter clause for the query filter.
            </summary>
            <returns>String clause suitable for addition to a SQL where clause.</returns>
        </member>
        <member name="P:Checkbox.Analytics.Filters.ContainsFilter.UseNotIn">
            <summary>
            Specify whether filter is a "NOT IN" or "IN" filter for purposes of construction a SQL where clause.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.DoesntContainFilter">
            <summary>
            Filter to evaluate whether values are equivalent.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.DoesntContainFilter.Mode">
            <summary>
            Any answer can match for "equal" to be true
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.DoesntContainFilter.GetValueFilterClause">
            <summary>
            Get the value filter clause for the query filter.
            </summary>
            <returns>String clause suitable for addition to a SQL where clause.</returns>
        </member>
        <member name="P:Checkbox.Analytics.Filters.DoesntContainFilter.UseNotIn">
            <summary>
            Specify whether filter is a "NOT IN" or "IN" filter for purposes of construction a SQL where clause.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.GreaterEqualFilter">
            <summary>
            Filter to evaluate whether values are equivalent.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.GreaterEqualFilter.Mode">
            <summary>
            Any answer can match for "equal" to be true
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.GreaterEqualFilter.GetValueFilterClause">
            <summary>
            Get the value filter clause for the query filter.
            </summary>
            <returns>String clause suitable for addition to a SQL where clause.</returns>
        </member>
        <member name="P:Checkbox.Analytics.Filters.GreaterEqualFilter.UseNotIn">
            <summary>
            Specify whether filter is a "NOT IN" or "IN" filter for purposes of construction a SQL where clause.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.GreaterFilter">
            <summary>
            Filter to evaluate whether values are equivalent.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.GreaterFilter.Mode">
            <summary>
            Any answer can match for "equal" to be true
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.GreaterFilter.GetValueFilterClause">
            <summary>
            Get the value filter clause for the query filter.
            </summary>
            <returns>String clause suitable for addition to a SQL where clause.</returns>
        </member>
        <member name="P:Checkbox.Analytics.Filters.GreaterFilter.UseNotIn">
            <summary>
            Specify whether filter is a "NOT IN" or "IN" filter for purposes of construction a SQL where clause.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.LessEqualFilter">
            <summary>
            Filter to evaluate whether values are equivalent.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.LessEqualFilter.Mode">
            <summary>
            Any answer can match for "equal" to be true
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.LessEqualFilter.GetValueFilterClause">
            <summary>
            Get the value filter clause for the query filter.
            </summary>
            <returns>String clause suitable for addition to a SQL where clause.</returns>
        </member>
        <member name="P:Checkbox.Analytics.Filters.LessEqualFilter.UseNotIn">
            <summary>
            Specify whether filter is a "NOT IN" or "IN" filter for purposes of construction a SQL where clause.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.LessFilter">
            <summary>
            Filter to evaluate whether values are equivalent.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.LessFilter.Mode">
            <summary>
            Any answer can match for "equal" to be true
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.LessFilter.GetValueFilterClause">
            <summary>
            Get the value filter clause for the query filter.
            </summary>
            <returns>String clause suitable for addition to a SQL where clause.</returns>
        </member>
        <member name="P:Checkbox.Analytics.Filters.LessFilter.UseNotIn">
            <summary>
            Specify whether filter is a "NOT IN" or "IN" filter for purposes of construction a SQL where clause.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.SourceItemFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.SourceItemFilter.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            
            </summary>
            <param name="sourceItemIds"></param>
        </member>
        <member name="P:Checkbox.Analytics.Filters.SourceItemFilter.FilterString">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.SourceItemFilter.UseNotIn">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.Validators.NumericSliderFilterValidator">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Validators.NumericSliderFilterValidator.Validate(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.String@)">
            <summary>
            </summary>
            <param name="value"></param>
            <param name="errorMessage"></param>
            <param name="itemData"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Checkbox.Analytics.Filters.AnalysisFilterCollection">
            <summary>
            Collection of filters associated with an analysis.  The collection class supports grouping of filters for display, evaluation,
            or (depending on the contained filter types) generating a SQL where clause for extracting answer data.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.AnalysisFilterCollection.ParentType">
            <summary>
            Get the name of the parent type for the <see cref="T:Checkbox.Analytics.Filters.FilterDataCollection"/>
            </summary>
            <remarks>This value has a static value of "AnalysisTemplate".</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Filters.AnalysisFilterCollection.BuildFilterStrings">
            <summary>
            Build filter string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.AnalysisFilterCollection.AppendFilterString(System.String,System.String)">
            <summary>
            Append a string to the specified filter string with an appropriate joiner and return the result.
            </summary>
            <param name="existingFilterString">String to append filter string to.</param>
            <param name="toAppend">String to append to the existing filter string.</param>
            <returns>Updated filter string with SQL joiner (AND)</returns>
            <remarks>Analysis filters only support AND operations, but this may change in the future.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Filters.AnalysisFilterCollection.AppendFilterInClause(System.String,System.String,System.Boolean)">
            <summary>
            Append a SQL IN clause to the specified filter string.
            </summary>
            <param name="existingFilterString">Existing filter string to append clause to.</param>
            <param name="clause">Filter clause to append.</param>
            <param name="negated">Specify whether the clause should be append as a NOT IN clause.</param>
            <returns>Updated filter SQL with appended clause.,</returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.AnalysisFilterCollection.AppendFilterString(System.Text.StringBuilder,System.String)">
            <summary>
            Append a string to the specified filter string with an appropriate joiner and return the result.
            </summary>
            <param name="existingFilterString">String to append filter string to.</param>
            <param name="toAppend">String to append to the existing filter string.</param>
            <returns>Updated filter string with SQL joiner (AND)</returns>
            <remarks>Analysis filters only support AND operations, but this may change in the future.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Filters.AnalysisFilterCollection.AppendFilterInClause(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Append a SQL IN clause to the specified filter string.
            </summary>
            <param name="existingFilterString">Existing filter string to append clause to.</param>
            <param name="clause">Filter clause to append.</param>
            <param name="negated">Specify whether the clause should be append as a NOT IN clause.</param>
            <returns>Updated filter SQL with appended clause.,</returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.AnalysisFilterCollection.GetLastModifiedDate">
            <summary>
             Returns date of the last modified filter
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.AnalysisItemFilterCollection">
            <summary>
            Collection of filters associated with individual report items rather than entire reports.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.AnalysisItemFilterCollection.ParentType">
            <summary>
            Always returns "AnalysisItem" as the value since this type of filter collection applies only to report items.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.AnsweredFilter">
            <summary>
            Filter that checks whether a question has been answered or not.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.AnsweredFilter.ValueRequired">
            <summary>
            This filter requires an answer value to evaluate to true
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.AnsweredFilter.GetValueFilterClause">
            <summary>
            Get a where clause suitable to append to a load answer datq query for more efficient report-wide filter evaluation.
            </summary>
            <returns>String suitable for addition to a SQL where clause.</returns>
        </member>
        <member name="P:Checkbox.Analytics.Filters.AnsweredFilter.UseNotIn">
            <summary>
            Determines if in/not in should be used when constructing the query used to filter results.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.AnswerDataObjectFilter">
            <summary>
            Base class representation of a filter that is capable of operating on <see cref="T:Checkbox.Analytics.Data.ItemAnswer"/> objects directly.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.AnswerDataObjectFilter.FilterMode">
            <summary>
            Used to specify whether all answer objects or any answer
            object must pass the filter to succeed
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Filters.AnswerDataObjectFilter.FilterMode.All">
            <summary>
            All answer rows must match filter
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Filters.AnswerDataObjectFilter.FilterMode.Any">
            <summary>
            Any answer row match is sufficient
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.AnswerDataObjectFilter.EvaluateFilter(System.Collections.Generic.List{Checkbox.Analytics.Data.ItemAnswer},Checkbox.Analytics.Data.AnalysisAnswerData,System.Collections.Generic.Dictionary{System.Int64,Checkbox.Forms.ResponseProperties})">
            <summary>
            Evaluate the filter for the specified answer objects.
            </summary>
            <param name="answers">Answers to evaluate.</param>
            <param name="answerData"> </param>
            <param name="responseProperties">Response properties to use for evaluating response property filters or to look up the respondent information
            to evaluate user profile filters.</param>
            <returns>Boolean value indicating if the provided answers meet the filter's criteria.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.AnswerDataObjectFilter.EvaluateFilter(Checkbox.Analytics.Data.ItemAnswer,Checkbox.Analytics.Data.AnalysisAnswerData,Checkbox.Forms.ResponseProperties,System.Boolean@)">
            <summary>
            Evaluate a filter for a single answer and provide an indication whether the provided answer had a value or not.
            </summary>
            <param name="answer">Answer to evaluate.</param>
            <param name="answerData"> </param>
            <param name="responseProperties">Response properties to use for evaluating response property filters or to look up the respondent information
            to evaluate user profile filters.</param>
            <param name="answerHasValue">Boolean value indicating whether the input answer parameter contained an answer value or not.</param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Filters.AnswerDataObjectFilter.ValueRequired">
            <summary>
            Determine if the filter can only evaluate to "true" (i.e. success) if the provided answer object has an answer value.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.AnswerDataObjectFilter.Mode">
            <summary>
            Determine filter mode based on the logical operator associated with the filter.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.EqualFilter">
            <summary>
            Filter to evaluate whether values are equivalent.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.EqualFilter.Mode">
            <summary>
            Any answer can match for "equal" to be true
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.EqualFilter.GetValueFilterClause">
            <summary>
            Get the value filter clause for the query filter.
            </summary>
            <returns>String clause suitable for addition to a SQL where clause.</returns>
        </member>
        <member name="P:Checkbox.Analytics.Filters.EqualFilter.UseNotIn">
            <summary>
            Specify whether filter is a "NOT IN" or "IN" filter for purposes of construction a SQL where clause.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.Filter">
            <summary>
            Filter
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Filter.LanguageCode">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Filter.FilterId">
            <summary>
            Get the filter id
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Filter.Value">
            <summary>
            Get the object value
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Filter.Operator">
            <summary>
            Get/set the logical operator
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Filter.FilterText">
            <summary>
            Get the filter text
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Filter.Configure(Checkbox.Analytics.Filters.Configuration.FilterData,System.String)">
            <summary>
            Configure the filter with its data
            </summary>
            <param name="filterData"></param>
            <param name="languageCode"></param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.Filter.CompareValue(System.Object)">
            <summary>
            Compare the filter value against the specified value to compare
            </summary>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Filters.Filter.FilterParameter">
            <summary>
            Parameter name for stored procedure to extract data
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.FilterDataCollection">
            <summary>
            Collection of filter configuration objects.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.FilterDataCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.FilterDataCollection.InitializeData">
            <summary>
            Initialize the filter data
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.FilterDataCollection.ParentID">
            <summary>
            Get/set filter parent id.
            </summary>
            <remarks>Typically the parent of a filter collection is an <see cref="T:Checkbox.Analytics.Analysis"/> when running a report or is a <see cref="T:Checkbox.Forms.ResponseTemplate"/> when editing 
            a survye, so this value will represent the ID of the <see cref="T:Checkbox.Analytics.Analysis"/> or <see cref="T:Checkbox.Forms.ResponseTemplate"/> this filter collection is associated with.</remarks>
        </member>
        <member name="P:Checkbox.Analytics.Filters.FilterDataCollection.ParentType">
            <summary>
            Get/set the type of a parent for this filter collection.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.FilterDataCollection.FilterData">
            <summary>
            Get the raw data in <see cref="T:System.Data.DataSet"/> form for the filter data collection.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.FilterDataCollection.Load(System.Int32)">
            <summary>
            Retrieve configuration information for the filter collection from the database and populate the list of <see cref="P:Checkbox.Analytics.Filters.FilterDataCollection.FilterData"/> objects
            contained in the collection.
            </summary>
            <param name="parentID">ID of the parent object (see <see cref="P:Checkbox.Analytics.Filters.FilterDataCollection.ParentID"/>) for the filter collection.</param>
            <returns><see cref="T:System.Data.DataSet"/> containing configuration information for the filter collection.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.FilterDataCollection.Import(System.Data.DataSet,System.Int32)">
            <summary>
            Import filters from the specified <see cref="T:System.Data.DataSet"/>.  This clears internal collections so it should
            only be called on a new filter collection.
            </summary>
            <param name="ds"><see cref="T:System.Data.DataSet"/> containing filter information to import.</param>
            <param name="parentID">ID of parent object of the filter collection.</param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.FilterDataCollection.Save(System.Data.IDbTransaction,Prezza.Framework.Data.Database,System.Boolean)">
            <summary>
            Persist the filter collection data to the database as part of the specified transaction contect.
            </summary>
            <param name="t">Transaction to participate in when persisting data to the database.</param>
            <param name="db"> </param>
            <param name="clearMapping"> </param>
            <remarks>This method does NOT create a container transaction if no transaction context is passed, meaning all updates to contained filter data objects
            will occur one at time.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Filters.FilterDataCollection.GetFilterDataObjects">
            <summary>
            Get the list of filter data objects contained in this collection.
            </summary>
            <returns>List of filter data objects.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.FilterDataCollection.GetFilters(System.String)">
            <summary>
            Get a list of a filter data objects contained in this collection initialized with the specified language.
            </summary>
            <returns>List of filter data objects.</returns>
            <param name="languageCode">Language parameter is used when the ToString() method is filters is called to display a human-readable version of the 
            filter objects settings.</param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.FilterDataCollection.AddFilter(System.Int32)">
            <summary>
            Add a filter with the specified ID of the filter collection.
            </summary>
            <param name="filterId">ID of filter to add to the collection.</param>
            <remarks>Filter with specified ID is loaded from the database then associated <see cref="P:Checkbox.Analytics.Filters.FilterDataCollection.FilterData"/> is added to the internal collection
            of <see cref="P:Checkbox.Analytics.Filters.FilterDataCollection.FilterData"/> objects.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Filters.FilterDataCollection.AddFilter(Checkbox.Analytics.Filters.Configuration.FilterData)">
            <summary>
            Add a <see cref="P:Checkbox.Analytics.Filters.FilterDataCollection.FilterData"/> object to the collection.
            </summary>
            <param name="filter"><see cref="P:Checkbox.Analytics.Filters.FilterDataCollection.FilterData"/> object to add.</param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.FilterDataCollection.DeleteFilterMap(System.Int32)">
            <summary>
            Delete the filter map
            </summary>
            <param name="filterID"></param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.FilterDataCollection.DeleteFilter(System.Int32)">
            <summary>
            Remove the association between a filter and this filter collection.
            </summary>
            <param name="filterID">ID of filter to remove from the collection.</param>
            <remarks>The filter is not removed from the database, but the associations between it and this collection are removed.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Filters.FilterDataCollection.DeleteFilter(Checkbox.Analytics.Filters.Configuration.FilterData)">
            <summary>
            Remove the association between a filter and this filter collection.
            </summary>
            <param name="filter"><see cref="P:Checkbox.Analytics.Filters.FilterDataCollection.FilterData"/> object to remove from the collection.</param>
            <remarks>The filter is not removed from the database, but the associations between it and this collection are removed.</remarks>
        </member>
        <member name="P:Checkbox.Analytics.Filters.FilterDataCollection.FilterMapTableName">
            <summary>
            Get the name of the <see cref="T:System.Data.DataTable"/> in the collection's configuration <see cref="T:System.Data.DataSet"/> that maps filters to their containing collections.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.FilterDataCollection.FilterMapTable">
            <summary>
            Get a reference to the filter mapping <see cref="T:System.Data.DataTable"/> in the collection's configuration <see cref="T:System.Data.DataSet"/>.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.FilterDataCollection.GetInsertFilterMapCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get a command to insert a filter/parent mapping
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.FilterDataCollection.GetDeleteFilterMapCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get a command to delete a filter/parent mapping
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Filters.IAnswerDataObjectFilter">
            <summary>
            IAnswerDataObjectFilter are capable of filtering answer data objects for analysis reports for 
            an individual response
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.IAnswerDataObjectFilter.EvaluateFilter(System.Collections.Generic.List{Checkbox.Analytics.Data.ItemAnswer},Checkbox.Analytics.Data.AnalysisAnswerData,System.Collections.Generic.Dictionary{System.Int64,Checkbox.Forms.ResponseProperties})">
            <summary>
            Return a boolean indicating if the specified answers for a response fulfill the filter parameters.
            </summary>
            <param name="answers"></param>
            <param name="answerData"> </param>
            <param name="responseProperties"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Filters.IQueryFilter">
            <summary>
            IQueryFilter objects are capable of providing filter strings suitable for use in a "where ResponseID in" or "not in" clause.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.IQueryFilter.FilterString">
            <summary>
            Get the query filter clause
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.IQueryFilter.UseNotIn">
            <summary>
            Specify whether to join this filter's clause to other clauses with IN or NOT IN
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.ItemFilter">
            <summary>
            Filter to compare item values against filter value
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.ItemFilter.ItemID">
            <summary>
            Get/set the id of the filter item source
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.ItemFilter.Configure(Checkbox.Analytics.Filters.Configuration.FilterData,System.String)">
            <summary>
            Configure the filter
            </summary>
            <param name="filterData"></param>
            <param name="languageCode"></param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.ItemFilter.EvaluateFilter(Checkbox.Analytics.Data.ItemAnswer,Checkbox.Analytics.Data.AnalysisAnswerData,Checkbox.Forms.ResponseProperties,System.Boolean@)">
            <summary>
            Evaluate the filter for an answer row
            </summary>
            <param name="answer"></param>
            <param name="answerData"> </param>
            <param name="responseProperties"></param>
            <param name="answerHasValue"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Filters.ItemQueryFilter">
            <summary>
            Item filter that supports querying in the database for more efficient querying
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.ItemQueryFilter.FilterString">
            <summary>
            Get the item filter string
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.ItemQueryFilter.GetEscapedValueString">
            <summary>
            Get the value as an escaped string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.ItemQueryFilter.GetFilterString">
            <summary>
            Get
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Filters.ItemQueryFilter.GetValueFilterClause">
            <summary>
            Get the filter clause for the value portion
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Filters.ItemQueryFilter.UseNotIn">
            <summary>
            Get whether to use not-in syntax
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.NotAnsweredFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.NotAnsweredFilter.UseNotIn">
            <summary>
            Query is same as answered, but using NOT IN instead of IN
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.NotAnsweredFilter.ValueRequired">
            <summary>
            Get whether a value is required or not
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.NotEqualFilter">
            <summary>
            Filter for not equal
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.NotEqualFilter.GetValueFilterClause">
            <summary>
            Get the value filter clause for the query filter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Filters.NotEqualFilter.UseNotIn">
             <summary>
            
             </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.ProfileFilter">
            <summary>
            Filter based on respondent profile information
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.ProfileFilter.EvaluateFilter(Checkbox.Analytics.Data.ItemAnswer,Checkbox.Analytics.Data.AnalysisAnswerData,Checkbox.Forms.ResponseProperties,System.Boolean@)">
            <summary>
            Evaluate the filter
            </summary>
            <param name="answer"></param>
            <param name="answerData"> </param>
            <param name="responseProperties"></param>
            <param name="answerHasValue"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Filters.ProfileFilter.FilterParameter">
            <summary>
            Filter parameter for user profile properties
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.ProfileFilter.FilterString">
            <summary>
            Filter string for profile properties
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Filters.ResponseFilter">
            <summary>
            Filter based on response properties.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.ResponseFilter.PropertyName">
            <summary>
            Get the profile property name
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Filters.ResponseFilter.Configure(Checkbox.Analytics.Filters.Configuration.FilterData,System.String)">
            <summary>
            Configure the filter
            </summary>
            <param name="filterData"></param>
            <param name="languageCode"></param>
        </member>
        <member name="M:Checkbox.Analytics.Filters.ResponseFilter.EvaluateFilter(Checkbox.Analytics.Data.ItemAnswer,Checkbox.Analytics.Data.AnalysisAnswerData,Checkbox.Forms.ResponseProperties,System.Boolean@)">
            <summary>
            Evaluate the filterf for the row
            </summary>
            <param name="answer"></param>
            <param name="answerData"> </param>
            <param name="responseProperties"></param>
            <param name="hasValue"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Filters.ResponseFilter.UseNotIn">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.ResponseFilter.FilterString">
            <summary>
            Filter string to be used in SQL
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.ResponseFilter.OperatorAsString">
            <summary>
            Operator as SQL string
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Filters.ResponseFilter.WrappedValue">
            <summary>
            Wrapped and purified value
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Export.XmlDataExporter">
            <summary>
            Survey data exporter that writes results data to a XML file.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.XmlDataExporter.StartFieldIndex">
            <summary>
            Get/set field index to start with when writing a row of data
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.XmlDataExporter.EndFieldIndex">
            <summary>
            Get/set field index to end with when writing a row of data.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.XmlDataExporter.NewLineReplacement">
            <summary>
            Get/set newline replacement character
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.XmlDataExporter.ReplaceNewLines">
            <summary>
            Get/set whether to replace newlines
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Export.XmlDataExporter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Export.XmlDataExporter.CreateAnalysisTemplate">
            <summary>
            Create the analysis template to use for the exporter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Export.XmlDataExporter.PopulateFieldNames(System.Boolean)">
            <summary>
            Populate field names.
            </summary>
            <remarks>This override figures out which columns to include when splitting the
            export across files.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Export.XmlDataExporter.WriteToFile(System.String)">
            <summary>
            Write the export data to the specified file path.
            </summary>
            <param name="filePath">File path to write export to.</param>
        </member>
        <member name="M:Checkbox.Analytics.Export.XmlDataExporter.WriteToTextWriter(System.IO.TextWriter)">
            <summary>
            Write export to text writer.
            </summary>
            <param name="writer">Text writer to write export data to.</param>
        </member>
        <member name="M:Checkbox.Analytics.Export.XmlDataExporter.WriteToXmlWriter(System.Xml.XmlTextWriter)">
            <summary>
            Write export to XML text writer.
            </summary>
            <param name="writer">Text writer to write export data to.</param>
        </member>
        <member name="M:Checkbox.Analytics.Export.XmlDataExporter.WriteExportData(System.IO.TextWriter)">
            <summary>
            Perform the actual working of writing export data to the specified text
            writer.
            </summary>
            <param name="writer">Text writer to write dtata to.</param>
        </member>
        <member name="M:Checkbox.Analytics.Export.XmlDataExporter.WriteExportData(System.Xml.XmlTextWriter)">
            <summary>
            Write exported data to the specified text writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Export.XmlDataExporter.WriteHeaders(System.Xml.XmlTextWriter,Checkbox.Forms.Template,System.String)">
            <summary>
            Write headers to the writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Export.XmlDataExporter.WriteMatrixItem(System.Xml.XmlTextWriter,Checkbox.Forms.TemplatePage,Checkbox.Forms.Items.Configuration.MatrixItemData,Checkbox.Forms.Items.Configuration.ItemData,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="page"></param>
            <param name="matrix"></param>
            <param name="item"></param>
            <param name="row"></param>
            <param name="column"></param>
        </member>
        <member name="M:Checkbox.Analytics.Export.XmlDataExporter.WriteItem(System.Xml.XmlTextWriter,Checkbox.Forms.TemplatePage,Checkbox.Forms.Items.Configuration.ItemData,System.Int32)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="page"></param>
            <param name="item"></param>
            <param name="pos"></param>
        </member>
        <member name="M:Checkbox.Analytics.Export.XmlDataExporter.WriteItemOptions(System.Xml.XmlTextWriter,Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="item"></param>
        </member>
        <member name="M:Checkbox.Analytics.Export.XmlDataExporter.WriteResponses(System.Xml.XmlTextWriter)">
            <summary>
            Write responses
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Export.XmlDataExporter.WriteCData(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="elementName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Checkbox.Analytics.Export.XmlDataExporter.WriteValue(System.String,System.IO.TextWriter)">
            <summary>
            Write a value to the writer with property quote escaping.
            </summary>
            <param name="value"></param>
            <param name="tw"></param>
        </member>
        <member name="T:Checkbox.Analytics.Export.CsvDataExporter">
            <summary>
            Survey data exporter that writes results data to a CSV file.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.CsvDataExporter.StartFieldIndex">
            <summary>
            Get/set field index to start with when writing a row of data
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.CsvDataExporter.EndFieldIndex">
            <summary>
            Get/set field index to end with when writing a row of data.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.CsvDataExporter.NewLineReplacement">
            <summary>
            Get/set newline replacement character
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.CsvDataExporter.ReplaceNewLines">
            <summary>
            Get/set whether to replace newlines
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.CsvDataExporter.ChunkSize">
            <summary>
            Get/set chunk size (# line between buffer flushes) for export.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Export.CsvDataExporter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Export.CsvDataExporter.CreateAnalysisTemplate">
            <summary>
            Create the analysis template to use for the exporter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Export.CsvDataExporter.PopulateFieldNames(System.Boolean)">
            <summary>
            Populate field names.
            </summary>
            <remarks>This override figures out which columns to include when splitting the
            export across files.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Export.CsvDataExporter.CalculateStartAndEndIndices">
            <summary>
            Calculate indices of first and last fields for writing data.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Export.CsvDataExporter.WriteExportData(System.IO.TextWriter)">
            <summary>
            Write exported data to the specified text writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Export.CsvDataExporter.WriteHeaders(System.IO.TextWriter)">
            <summary>
            Write headers to the writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Export.CsvDataExporter.WriteResponses(System.IO.TextWriter)">
            <summary>
            Write responses
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Export.CsvDataExporter.GetResponseData(System.Collections.Generic.IList{System.String},Checkbox.Forms.ResponseProperties)">
            <summary>
            Get a list of response property values converted to string format.
            </summary>
            <param name="responseHeaders">List of response property headers for the export.</param>
            <param name="props">Response property values for a response.</param>
            <returns>List of property values.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Export.CsvDataExporter.GetUserData(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            List user field values for a response.
            </summary>
            <param name="profileHeaders">List of user fields.</param>
            <param name="uniqueIdentifier">Unique identifier of user that completed the response.</param>
        </member>
        <member name="M:Checkbox.Analytics.Export.CsvDataExporter.GetAnswerData(System.Int32,System.Int64,Checkbox.Analytics.Analysis,System.Boolean,Checkbox.Forms.ResponseTemplate)">
            <summary>
            List answer values for a specific response.
            </summary>
            <param name="expectedAnswerCount">Expected number of values to return.</param>
            <param name="responseId">ID of response to list answer values for.</param>
            <param name="analysis">Analysis containing export item object and response answer data.</param>
            <param name="stripHtmlTags">Are we need to strip all html tags in answers?</param>
            <param name="rt"></param>
        </member>
        <member name="M:Checkbox.Analytics.Export.CsvDataExporter.WriteValue(System.String,System.IO.TextWriter)">
            <summary>
            Write a value to the writer with property quote escaping.
            </summary>
            <param name="value"></param>
            <param name="tw"></param>
        </member>
        <member name="T:Checkbox.Analytics.Export.SpssCompatibleCsvDataExporter">
            <summary>
            CSV exporter that can export a CSV format readable by SPSS.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Export.SpssCompatibleCsvDataExporter.CreateAnalysisTemplate">
            <summary>
            Create the analysis to use
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Export.SpssCompatibleCsvDataExporter.GetActualTextForField(System.String)">
            <summary>
            Get actual text name for field name
            </summary>
            <param name="fieldName">Name of field to list actual text for. (SPSS fields are named Q1, Q2, etc. and the method returns
            actual question text)</param>
            <returns>Question text associated with the specific field.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Export.SpssCompatibleCsvDataExporter.GetItemIdForField(System.String)">
            <summary>
            Get id of item associated with a field.  Does not include SelectMany items.
            </summary>
            <param name="fieldName">SPSS named field (Q1, Q2, etc.)</param>
            <returns>ID of item associated with field.</returns>
        </member>
        <member name="T:Checkbox.Analytics.Export.NativeSpssDataExporter">
            <summary>
            Exporter for writing survey results data to native SPSS format.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Export.NativeSpssDataExporter.WriteToFile(System.String)">
            <summary>
            Write SPSS data to file.
            </summary>
            <param name="filePath">File to write SPSS data to.</param>
        </member>
        <member name="M:Checkbox.Analytics.Export.NativeSpssDataExporter.DataRowCallback(System.Int32)">
            <summary>
            Callback for getting a specific row of results.
            </summary>
            <param name="rowNumber">Row of results to list data for.</param>
            <returns>Answers for a specific row of the export.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Export.NativeSpssDataExporter.MetaDataCallback(Spss.VarMetaData)">
            <summary>
            Callback for populating metadata for a specific question or options.
            </summary>
            <param name="metaData"></param>
        </member>
        <member name="M:Checkbox.Analytics.Export.NativeSpssDataExporter.GetOptionTextsForField(System.String)">
            <summary>
            Get actual text name for field name
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Export.NativeSpssDataExporter.ListAllQuestionFieldNames">
            <summary>
            List all answer field names to include.  Specific list and values are
            affected by whether hidden items and open-ended items are included, whether
            checkbox answers are merged, aliases are used, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Export.NativeSpssDataExporter.WriteExportData(System.IO.TextWriter)">
            <summary>
            Write export data to the specified writer.  Not supported for SPSS
            native format which writes directly to file as required by the underlying
            COM component supplied by SPSS.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Checkbox.Analytics.Export.SurveyDataExporter">
            <summary>
            Abstract base class for data exporters (CSV, SPSS CSV, SPSS Native, etc.) for survey
            data.  This base class assumes the use of an analysis to load answer data, generate column
            headers, etc.  In the future this may not be the case and some refactoring will be done as
            necessary.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Export.SurveyDataExporter.MAX_COLUMN_COUNT_PER_FILE">
            <summary>
            Max export columns per file when splitting files
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Export.SurveyDataExporter._analysis">
            <summary>
            Backing field for analysis used by exporter
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Export.SurveyDataExporter._responseTemplate">
            <summary>
            Backing field for response template
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.SurveyDataExporter.Options">
            <summary>
            Get/set options to use
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.SurveyDataExporter.ResponseTemplateId">
            <summary>
            Get/set response template id
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.SurveyDataExporter.ProgressKey">
            <summary>
            Get/set progress key
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.SurveyDataExporter.LanguageCode">
            <summary>
            Language code for export
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.SurveyDataExporter.AllFieldNames">
            <summary>
            Get/set list of all data field names
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.SurveyDataExporter.ResponseFieldNames">
            <summary>
            Get/set list of response data field names
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.SurveyDataExporter.UserFieldNames">
            <summary>
            Get/set list of user data data field names
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.SurveyDataExporter.QuestionFieldNames">
            <summary>
            Get/set list of question data field names
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.SurveyDataExporter.AnalysisDataLoaded">
            <summary>
            Get/set whether analysis data is loaded or not.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Export.SurveyDataExporter.ListAllFieldNames">
            <summary>
            List all field names for the item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Export.SurveyDataExporter.Analysis">
            <summary>
            Get the analysis used as the basis for the export.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Export.SurveyDataExporter.ResponseTemplate">
            <summary>
            Get the response template
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Export.SurveyDataExporter.CreateAnalysisTemplate">
            <summary>
            Create template for the analysis to use for export.
            </summary>
            <returns>Analysis template configured with an export item suitable for type of export to create.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Export.SurveyDataExporter.Initialize(System.Int32,System.String,Checkbox.Analytics.Export.ExportOptions,System.String)">
            <summary>
            Initialize the exporter class.
            </summary>
            <param name="responseTemplateId">ID of response template to export data for.</param>
            <param name="languageCode">Language code to use for quesiton and option texts.</param>
            <param name="options">Additional options for the export.</param>
            <param name="progressKey">Key to use for tracking progress when working asynchronously.</param>
            <remarks>When using progress tracking, the export will only set progress to 99%.  It's up to the caller
            to mark the progress as complete.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.Export.SurveyDataExporter.WriteToFile(System.String)">
            <summary>
            Write the export data to the specified file path.
            </summary>
            <param name="filePath">File path to write export to.</param>
        </member>
        <member name="M:Checkbox.Analytics.Export.SurveyDataExporter.WriteToTextWriter(System.IO.TextWriter)">
            <summary>
            Write export to text writer.
            </summary>
            <param name="writer">Text writer to write export data to.</param>
        </member>
        <member name="M:Checkbox.Analytics.Export.SurveyDataExporter.WriteExportData(System.IO.TextWriter)">
            <summary>
            Perform the actual working of writing export data to the specified text
            writer.
            </summary>
            <param name="writer">Text writer to write dtata to.</param>
        </member>
        <member name="M:Checkbox.Analytics.Export.SurveyDataExporter.PopulateFieldNames(System.Boolean)">
            <summary>
            Populate names of fields
            </summary>
            <param name="forceColumnReload">Force reload of column names.</param>
        </member>
        <member name="M:Checkbox.Analytics.Export.SurveyDataExporter.GetIncompleteResponses(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param name="responseTemplateId"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Export.SurveyDataExporter.ListAllResponseFieldNames">
            <summary>
            Get list of all export fields that are included when "Include Detailed
            Response Information" option is used.
            </summary>
            <returns>List of response field names.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Export.SurveyDataExporter.ListAllUserFieldNames">
            <summary>
            List all user field names to include when "Include Detailed User
            Info" options is enabled.
            </summary>
            <returns>List of user fields to include.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Export.SurveyDataExporter.ListAllQuestionFieldNames">
            <summary>
            List all answer field names to include.  Specific list and values are
            affected by whether hidden items and open-ended items are included, whether
            checkbox answers are merged, aliases are used, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Export.SurveyDataExporter.FormatResponseData(System.String,Checkbox.Forms.ResponseProperties)">
            <summary>
            Format a specific response property field value for the export.
            </summary>
            <param name="headerValue">Response property to format.</param>
            <param name="responseProperties">Collection of response property values for a response.</param>
            <remarks>Checks for DBNull values and calculates TotalTime field.</remarks>
        </member>
        <member name="T:Checkbox.Analytics.Export.ExportManager">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Export.ExportManager.WriteNativeSpssExportToFile(System.Int32,Checkbox.Analytics.Export.ExportOptions,System.String,System.String,System.String)">
            <summary>
            Create a native SPSS export for responses to the provided survey.
            </summary>
            <param name="responseTemplateId">Survey to export response data for.</param>
            <param name="exportOptions">Options for exporting</param>
            <param name="languageCode">Language code for exported data.</param>
            <param name="progressKey">Progress tracking key.</param>
            <param name="outputFileName">Name of output file to write.</param>
        </member>
        <member name="M:Checkbox.Analytics.Export.ExportManager.WriteCommonExportToFile(System.Int32,Checkbox.Analytics.Export.ExportOptions,System.String,System.String,System.String)">
            <summary>
            Export results to a CSV file
            </summary>
            <param name="responseTemplateId"></param>
            <param name="options"></param>
            <param name="languageCode"></param>
            <param name="progressKey"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Export.ExportManager.WriteExportToFile(Checkbox.Analytics.Export.SurveyDataExporter,System.String,System.String)">
            <summary>
            Use the passed-in exporter to write data to a file.  This facilitates reusing an exporter, such as
            when splitting files, to prevent multiple loadings of answers, etc.
            </summary>
            <param name="exporter">Exporter to use.</param>
            <param name="outputFilePath"></param>
            <param name="progressKey"></param>
        </member>
        <member name="M:Checkbox.Analytics.Export.ExportManager.WriteExportToTextWriter(Checkbox.Analytics.Export.SurveyDataExporter,System.IO.TextWriter,System.String)">
            <summary>
            Use the passed-in exporter to write data to a text writer.  This facilitates reusing an exporter, such as
            when splitting files, to prevent multiple loadings of answers, etc.
            </summary>
            <param name="exporter">Exporter to use.</param>
            <param name="tw"></param>
            <param name="progressKey"></param>
        </member>
        <member name="M:Checkbox.Analytics.Export.ExportManager.WriteCommonExportToTextWriter(System.IO.TextWriter,System.Int32,Checkbox.Analytics.Export.ExportOptions,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tw"></param>
            <param name="responseTemplateId"></param>
            <param name="options"></param>
            <param name="languageCode"></param>
            <param name="progressKey"></param>
        </member>
        <member name="T:Checkbox.Analytics.Export.ExportOptions">
            <summary>
            Simple container for passing export options.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Import.XmlDataImporter">
            <summary>
            XmlDataImporter class
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Import.XmlDataImporter.ParseAndValidate(System.Xml.XmlTextReader,Checkbox.Forms.ResponseTemplate,System.Collections.Generic.List{Checkbox.Analytics.Import.ItemInfo}@,System.Collections.Generic.List{Checkbox.Analytics.Import.ResponseInfo}@)">
            <summary>
            Parse XML and validate responses and survey items
            </summary>
            <param name="reader"></param>
            <param name="survey"></param>
            <param name="items"></param>
            <param name="responses"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Import.XmlDataImporter.Import(Checkbox.Forms.ResponseTemplate,System.Collections.Generic.List{Checkbox.Analytics.Import.ItemInfo},System.Collections.Generic.List{Checkbox.Analytics.Import.ResponseInfo},System.String,Checkbox.Analytics.Import.StateImportInfo)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="survey"></param>
            <param name="progress"></param>
        </member>
        <member name="T:Checkbox.Analytics.Import.ResponseInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Import.OptionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Import.StateImportInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Import.StateImportInfo.IsCanceled">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Import.ItemInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Import.XmlDataValidator">
            <summary>
            Class that performs XML import validation
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Import.XmlDataValidator.MoveToNextElement(System.Xml.XmlTextReader,System.String)">
            <summary>
            Advances XmlTextReader to next element with given name
            </summary>
            <param name="reader"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Import.XmlDataValidator.Validate(System.Xml.XmlTextReader,System.Boolean)">
            <summary>
            Performs XML validation
            </summary>
            <param name="reader"></param>
            <param name="throwExceptions"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.AverageScoreByPageItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.AverageScoreByPageItem.SourcePageIds">
            <summary>
            Get list of source page ids
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.AverageScoreByPageItem.GetSourcePage(System.Int32,Checkbox.Forms.ResponseTemplate)">
            <summary>
            Get source page data for report item
            </summary>
            <param name="pageId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AverageScoreByPageItem.ProcessPreviewData">
            <summary>
            Process the data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AverageScoreByPageItem.HandleItem(Checkbox.Analytics.Computation.ItemAnswerAggregator,System.Int32,System.Nullable{System.Int32},System.Int64)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.AverageScoreByPageItem.RetrieveData(System.Collections.Generic.List{System.Int32})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AverageScoreByPageItem.AggregatedData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.AnalysisItemDataSet">
            <summary>
            Data container for analysis items
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemDataSet.#ctor(System.String,System.String)">
            <summary>
            Dataset contstructore
            </summary>
            <param name="itemTypeName"></param>
            <param name="dataTableName"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemDataSet.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="owningObjectTypeName"></param>
            <param name="dataTableName"></param>
            <param name="identityColumnName"></param>
            <param name="additionalTableNames"></param>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.AnalysisItemDataSet.IdentityColumnName">
            <summary>
            Identity column of analysis template.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.AnalysisItemDataSet.AnalysisItemIdentityColumnName">
            <summary>
            Identity column of analysis template.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.AnalysisItemDataSet.SourceItemsTable">
            <summary>
            Get the table containing source items for this analysis item
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.AnalysisItemDataSet.ResponseTemplatesTable">
            <summary>
            Get the table containing response template data
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemDataSet.InitializeDataTables">
            <summary>
            Initialize data store
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemDataSet.GetSourceItems">
            <summary>
            Get data rows for source items in order of position
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemDataSet.GetResponseTemplates">
            <summary>
            Get dta rows for templates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemFactory.GetItem(Checkbox.Forms.Items.Configuration.ItemData,System.Int32,Checkbox.Analytics.Items.Configuration.AnalysisWizardOptions,Checkbox.Forms.Items.UI.AppearanceData,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="responseTemplateId"></param>
            <param name="options"></param>
            <param name="chartStyleAppearance"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.AverageScoreByPageItemData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AverageScoreByPageItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.AverageScoreByPageItemData.SourcePageIds">
            <summary>
            List source item ids
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.AverageScoreByPageItemData.DefaultAverageScoreCalculationValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AverageScoreByPageItemData.LoadAdditionalData(Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Load the item from the database
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AverageScoreByPageItemData.UpdateSourceItemTables(System.Data.IDbTransaction)">
            <summary>
            Update source item tables
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AverageScoreByPageItemData.GetInsertSourcePageCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get a command to insert a source page association
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AverageScoreByPageItemData.GetDeleteSourcePageCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get a command to delete a source page association
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AverageScoreByPageItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AverageScoreByPageItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.GradientColorDirectorSkillsMatrixGraphData.ItemDataTableName">
            <summary>
            Get the data table name
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.GradientColorDirectorSkillsMatrixGraphData.LoadSprocName">
            <summary>
            Get name of load data stored procedure
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Checkbox.Analytics.Items.Configuration.GradientColorDirectorSkillsMatrixGraphData.Create(System.Data.IDbTransaction)" -->
        <!-- Badly formed XML comment ignored for member "M:Checkbox.Analytics.Items.Configuration.GradientColorDirectorSkillsMatrixGraphData.Update(System.Data.IDbTransaction)" -->
        <member name="M:Checkbox.Analytics.Items.Configuration.GradientColorDirectorSkillsMatrixGraphData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.HeatMapData.Update(System.Data.IDbTransaction)">
            <summary>
            Update the item
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.HeatMapData.InsertHeatMapESigma(Prezza.Framework.Data.Database,System.Data.IDbTransaction)">
            <summary>
            Insert heatmap eSigma values
            </summary>
            <param name="t"></param>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.NetPromoterScoreItemData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.NetPromoterScoreItemData.ItemDataTableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.NetPromoterScoreItemData.LoadSprocName">
            <summary>
            Get sproc name to load item
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.NetPromoterScoreItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of the item data in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.NetPromoterScoreItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of the item data in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.NetPromoterScoreItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.NetPromoterScoreStatisticsItemData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.NetPromoterScoreStatisticsItemData.ItemDataTableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.NetPromoterScoreStatisticsItemData.LoadSprocName">
            <summary>
            Get sproc name to load item
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.NetPromoterScoreStatisticsItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of the item data in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.NetPromoterScoreStatisticsItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of the item data in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.NetPromoterScoreStatisticsItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.RankOrderSummaryTableData">
            <summary>
            Configuration data object for rank order summary analysis item. 
            It shows the sum of points across all responses for each answer.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.RankOrderSummaryTableData.ItemDataTableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.RankOrderSummaryTableData.LoadSprocName">
            <summary>
            Get sproc name to load item
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.RankOrderSummaryTableData.ReportOption">
            <summary>
            Get/set option calculation point
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.RankOrderSummaryTableData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of the item data in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.RankOrderSummaryTableData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of the item data in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.RankOrderSummaryTableData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.CrossTabItemDataSet">
            <summary>
            Data container for cross tab item configuration.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.Configuration.CrossTabItemDataSet.AxisItemTableName">
            <summary>
            Get the name of the table containing item-axis relationships
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemDataSet.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="itemTypeName"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemDataSet.#ctor(System.String,System.String)">
            <summary>
            Constructor for data set.
            </summary>
            <param name="itemTypeName"></param>
            <param name="dataTableName"></param>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.CrossTabItemDataSet.AxisItemTable">
            <summary>
            Get the table containing axis item data
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemDataSet.InitializeDataTables">
            <summary>
            Initialize data
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemDataSet.GetXAxisItems">
            <summary>
            Get x axis items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemDataSet.GetYAxisItems">
            <summary>
            Get y axis items
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.AnalysisItemConfigurationManager">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemConfigurationManager.GetTextItem(Checkbox.Forms.Items.Configuration.ItemData,System.Int32,Checkbox.Analytics.Items.Configuration.AnalysisWizardOptions,Checkbox.Forms.Items.UI.AppearanceData,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            </summary>
            <param name="item"></param>
            <param name="responseTemplateId"></param>
            <param name="options"></param>
            <param name="chartStyleAppearance"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemConfigurationManager.GetHiddenItem(Checkbox.Forms.Items.Configuration.ItemData,System.Int32,Checkbox.Analytics.Items.Configuration.AnalysisWizardOptions,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            </summary>
            <param name="item"></param>
            <param name="responseTemplateId"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemConfigurationManager.GetMatrixItem(Checkbox.Forms.Items.Configuration.ItemData,System.Int32,Checkbox.Analytics.Items.Configuration.AnalysisWizardOptions,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            </summary>
            <param name="item"></param>
            <param name="responseTemplateId"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemConfigurationManager.GetSelectItem(Checkbox.Forms.Items.Configuration.ItemData,System.Int32,Checkbox.Analytics.Items.Configuration.AnalysisWizardOptions,Checkbox.Forms.Items.UI.AppearanceData,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            </summary>
            <param name="item"></param>
            <param name="responseTemplateId"></param>
            <param name="options"></param>
            <param name="chartStyleAppearance"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemConfigurationManager.GetFrequencyItem(Checkbox.Forms.Items.Configuration.ItemData,System.Int32,Checkbox.Analytics.Items.Configuration.AnalysisWizardOptions,Checkbox.Forms.Items.UI.AppearanceData,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Creates a new report item for the one item in the survey
            
            Note: ugly code, must be rewritten.
            </summary>
            <param name="item"></param>
            <param name="responseTemplateId"></param>
            <param name="options"></param>
            <param name="chartStyleAppearance"></param>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemConfigurationManager.GetGraphType(Checkbox.Forms.Items.Configuration.ItemData,Checkbox.Analytics.Items.Configuration.AnalysisWizardOptions)">
            <summary>
            
            </summary>
            <param name="itemData"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemConfigurationManager.GetGraphType(System.String)">
            <summary>
            
            </summary>
            <param name="graphType"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.AnalysisWizardOptions">
            <summary>
            Simple container for passing report wizard options.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.RankOrderSummaryItemData">
            <summary>
            Configuration data object for rank order summary analysis item. 
            It shows the sum of points across all responses for each answer.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.RankOrderSummaryItemData.ItemDataTableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.RankOrderSummaryItemData.LoadSprocName">
            <summary>
            Get sproc name to load item
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.RankOrderSummaryItemData.ReportOption">
            <summary>
            Get/set option calculation point
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.RankOrderSummaryItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of the item data in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.RankOrderSummaryItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of the item data in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.RankOrderSummaryItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Checkbox.Analytics.Items.Configuration.StatisticsItemData" -->
        <member name="P:Checkbox.Analytics.Items.Configuration.StatisticsItemData.ItemDataTableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.StatisticsItemData.LoadSprocName">
            <summary>
            Get sproc name to load item
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.StatisticsItemData.ReportOption">
            <summary>
            Get/set option calculation point
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.StatisticsItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load item data from the specified data row
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.StatisticsItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of the item data in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.StatisticsItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of the item data in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.StatisticsItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.StatisticsItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.StatisticsItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.GovernancePriorityGraphData">
            <summary>
            GovernancePriorityGraphData
            </summary>
            <seealso cref="T:Checkbox.Analytics.Items.Configuration.AnalysisItemData" />
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.GovernancePriorityGraphData.ItemDataTableName">
            <summary>
            Get the data table name
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.GovernancePriorityGraphData.LoadSprocName">
            <summary>
            Get name of load data stored procedure
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Checkbox.Analytics.Items.Configuration.GovernancePriorityGraphData.Create(System.Data.IDbTransaction)" -->
        <!-- Badly formed XML comment ignored for member "M:Checkbox.Analytics.Items.Configuration.GovernancePriorityGraphData.Update(System.Data.IDbTransaction)" -->
        <member name="M:Checkbox.Analytics.Items.Configuration.GovernancePriorityGraphData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.CSVExportItemData">
            <summary>
            Item data for on-the-fly CSV Exporting
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CSVExportItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.DetailsItemData">
            <summary>
            Data for analysis item to display answer detail information in reports
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.DetailsItemData.ItemDataTableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.DetailsItemData.LoadSprocName">
            <summary>
            Get sproc name to load item
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.DetailsItemData.GroupAnswers">
            <summary>
            Get/set whether to group answers or not
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.DetailsItemData.LinkToResponseDetails">
            <summary>
            Get/set whether to link to response details
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.DetailsItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load item data from the specified data row
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.DetailsItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of the item data in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.DetailsItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of the details item in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.DetailsItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.DetailsItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.DetailsItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.SPSSExportItemData">
            <summary>
            Item data for spss export
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.SPSSExportItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.AnalysisItemData">
            <summary>
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.Configuration.AnalysisItemData._filters">
            <summary>
            The <see cref="T:Checkbox.Analytics.Filters.AnalysisItemFilterCollection"/> to be applied.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.AnalysisItemData.ItemDataTableName">
            <summary>
            Get name of analysis item data table
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.AnalysisItemData.IsExportable">
            <summary>
            Do not allow export of analysis item data
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.AnalysisItemData.SourceItemIds">
            <summary>
            List source item ids
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.AnalysisItemData.ResponseTemplateIds">
            <summary>
            List source response templates
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.InitializeItem(Checkbox.Forms.Items.Item,System.String,System.Nullable{System.Int32})">
            <summary>
            Override initialize to initialize analysis items with filters
            </summary>
            <param name="item"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.InitializeItem(Checkbox.Forms.Items.Item,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Override initialize to initialize analysis items with filters
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.ImportFilters(System.Data.DataSet,System.Int32)">
            <summary>
            Import filters from the data set
            </summary>
            <param name="ds"></param>
            <param name="oldItemID"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.EnsureFilterCollection">
            <summary>
            Ensure filter collection is not null
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.AnalysisItemData.UseAliases">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.AddFilter(System.Int32)">
            <summary>
            Add a filter to the item's filter collection
            </summary>
            <param name="filterID"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.AddFilter(Checkbox.Analytics.Filters.Configuration.FilterData)">
            <summary>
            Add a filter to the item's filter collection
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.DeleteFilter(System.Int32)">
            <summary>
            Remove a filter from the item's filter collection
            </summary>
            <param name="filterID"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.ClearFilters">
            <summary>
            Remove the mapping between all filter and the analysis template.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.DeleteFilter(Checkbox.Analytics.Filters.Configuration.FilterData)">
            <summary>
            Remove a filter from the item's filter collection
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.CreateConfigurationDataSet">
            <summary>
            Create analysis item configuration data set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.SaveFilters">
            <summary>
            Save the item filters
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.AddSourceItem(System.Int32)">
            <summary>
            Add a source item association
            </summary>
            <param name="sourceItemID"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.RemoveSourceItem(System.Int32)">
            <summary>
            Remove a source item association
            </summary>
            <param name="sourceItemID"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.AddResponseTemplate(System.Int32)">
            <summary>
            Add a response template association
            </summary>
            <param name="responseTemplateID"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.RemoveResponseTemplate(System.Int32)">
            <summary>
            Remove a source item association
            </summary>
            <param name="responseTemplateID"></param>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.AnalysisItemData.Filters">
            <summary>
            Get the filters for this item
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load from datarow
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.LoadAdditionalData(Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Load the item from the database
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.UpdateSourceItemTables(System.Data.IDbTransaction)">
            <summary>
            Update source item tables
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.GetInsertSourceItemCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get a command to insert a source item association
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.GetDeleteSourceItemCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get a command to delete a source item association
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.GetInsertRtCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get a command to insert a response template association
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.GetDeleteRtCommand(Prezza.Framework.Data.Database)">
            <summary>
             Get a command to delete a response template association
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.CreateDataTransferObject">
            <summary>
            Create data transfer object for viewing analysis item configuration remotely.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemMetadata)">
            <summary>
            
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AnalysisItemData.UpdatePipes(Checkbox.Forms.Items.Configuration.ItemData.UpdatePipesCallback)">
            <summary>
            Do nothing for Analysis
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.AverageScoreCalculation">
            <summary>
            Type of averaging to perform on scores.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.Configuration.AverageScoreCalculation.Aggregate">
            <summary>
            Add value of all selected options for all items together and divide by total responses
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.Configuration.AverageScoreCalculation.AverageOfItemScores">
            <summary>
            For each item, add value of all selected options together and divide by total responses, then divide result by number of items.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.Configuration.AverageScoreCalculation.ItemAverages">
            <summary>
            For each item, add value of all selected options together and divide by total responses.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.Configuration.AverageScoreCalculation.PageAverages">
            <summary>
            For each page, add value of sum of all points on the page and divide by total responses.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.Configuration.AverageScoreCalculation.PageAveragesWithTotalScore">
            <summary>
            For each page, add value of sum of all points on the page and divide by total responses.
            And calculate total survey score 
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.AverageScoreItemData">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.AverageScoreItemData.ItemDataTableName">
            <summary>
            Get the data table name
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.AverageScoreItemData.AverageScoreCalculation">
            <summary>
            Aggregate the scores of the items when calculating the average or display individually
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.AverageScoreItemData.DefaultAverageScoreCalculationValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AverageScoreItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create the average score item data
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AverageScoreItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update the average score item data
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AverageScoreItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load from datarow
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AverageScoreItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AverageScoreItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.AverageScoreItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.CrossTabItemData">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.CrossTabItemData.LoadSprocName">
            <summary>
            Get name of load stored procedure
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.CrossTabItemData.YAxisItemIds">
            <summary>
            Get list of items on y axis of cross tab
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.CrossTabItemData.XAxisItemIds">
            <summary>
            Get list of items on x axis of cross tab
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemData.CreateConfigurationDataSet">
            <summary>
            Create data container for cross tab item data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemData.LoadAdditionalData(Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Load item to axis mappings
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemData.AddXAxisItem(System.Int32)">
            <summary>
            Add an item to the x-axis of the cross tab
            </summary>
            <param name="itemID"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemData.AddYAxisItem(System.Int32)">
            <summary>
            Add an item to the y-axis of the cross tab
            </summary>
            <param name="itemID"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemData.RemoveXAxisItem(System.Int32)">
            <summary>
            Remove an item from the x-axis
            </summary>
            <param name="itemID"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemData.RemoveYAxisItem(System.Int32)">
            <summary>
            Remove an item from the y-axis
            </summary>
            <param name="itemID"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of a crosstab item in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Create an instance of a crosstab item in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemData.SaveSourceAndAxisMappings(System.Data.IDbTransaction)">
            <summary>
            Save source item and axis mappings
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemData.GetInsertAxisItemCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get a command
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemData.GetDeleteAxisItemCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get a command
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.CrossTabItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.ExportItemData">
            <summary>
            Base class for export items
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.ExportItemData.IncludeOpenEnded">
            <summary>
            Get/set whether to include open ended
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.ExportItemData.ExportRankOrderPoints">
            <summary>
            Get/set whether to include open ended
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.ExportItemData.MergeSelectMany">
            <summary>
            Get/set whether to merge select many
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.ExportItemData.IncludeHidden">
            <summary>
            Get/set whether to include hidden items
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.ExportItemData.ItemDataTableName">
            <summary>
            Get name of export item config table, though this value is never used
            at run time since export items are usually only created/destroyed at run time
            and not persisted to the database.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.ExportItemData.LoadSprocName">
            <summary>
            Items are not persisted, so return empty string
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.FrequencyItemData">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.FrequencyItemData.OtherOption">
            <summary>
            Get/set the other option
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.FrequencyItemData.ItemDataTableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.FrequencyItemData.LoadSprocName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.FrequencyItemData.PrimarySourceItemID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.FrequencyItemData.DisplayStatistics">
            <summary>
            Show statistics table below the chart or not
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.FrequencyItemData.DisplayAnswers">
            <summary>
            Show summary answers table below the chart or not
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.FrequencyItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load from datarow
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.FrequencyItemData.LoadAdditionalData(Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Loads additional data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.FrequencyItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create the item
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.FrequencyItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update the item
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.FrequencyItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.FrequencyItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.FrequencyItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.MatrixSummaryItemData">
            <summary>
            Matrix summary data
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.MatrixSummaryItemData.LoadSprocName">
            <summary>
            Get load sproc name
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.MatrixSummaryItemData.ItemDataTableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.MatrixSummaryItemData.MatrixSourceItem">
            <summary>
            Get the matrix source item
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.MatrixSummaryItemData.AddSourceItem(System.Int32)">
            <summary>
            Only allow one source item at a time
            </summary>
            <param name="sourceItemID"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.MatrixSummaryItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.MatrixSummaryItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of the item in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.MatrixSummaryItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of the item
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.MatrixSummaryItemData.CreateItem">
            <summary>
            Create a matrix summary item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.MatrixSummaryItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.MatrixSummaryItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.OtherOption">
            <summary>
            Option for handling "other" responses in a report.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.Configuration.OtherOption.Aggregate">
            <summary>
            Aggregate all other responses into one "other" option line item.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.Configuration.OtherOption.Display">
            <summary>
            Display "other" answers separately but not with the rest of the answers.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.Configuration.OtherOption.AggregateAndDisplay">
            <summary>
            Aggregate all other responses into one "other" option line item
            and display "other" answers separately but not with the rest of the answers.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.Configuration.TotalScoreItemData">
            <summary>
            Item data for total score item
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.TotalScoreItemData.ItemDataTableName">
            <summary>
            Data table name
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.Configuration.TotalScoreItemData.LoadSprocName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.TotalScoreItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Insert an instance of a total score item into the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.TotalScoreItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of a total score item in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.Configuration.TotalScoreItemData.CreateItem">
            <summary>
            Create an instance of a total score item
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.GovernancePrioritySummaryItem">
            <summary>
            GovernancePrioritySummaryItem
            </summary>
            <seealso cref="T:Checkbox.Analytics.Items.AnalysisItem" />
        </member>
        <member name="M:Checkbox.Analytics.Items.GovernancePrioritySummaryItem.ProcessData">
            <summary>
            Process data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.GovernancePrioritySummaryItem.GeneratePreviewData">
            <summary>
            Generate preview data for the report
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.GovernancePrioritySummaryItem.ProcessPreviewData">
            <summary>
            Process the data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.GovernancePrioritySummaryItem.RetrieveData(System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.GovernancePrioritySummaryItem.FilterSectionItemsByType(System.String,Checkbox.Forms.ResponseTemplate,System.Collections.Generic.List{Checkbox.Wcf.Services.Proxies.ReportableSection})">
            <summary>
            Filters the type of the section items types.
            </summary>
            <param name="type">The type.</param>
            <param name="template">The template.</param>
            <param name="reportableSections">The reportable sections.</param>
        </member>
        <member name="M:Checkbox.Analytics.Items.GovernancePrioritySummaryItem.FilterSectionsBySourceItems(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{Checkbox.Wcf.Services.Proxies.ReportableSection})">
            <summary>
            Filters the sections by source items.
            </summary>
            <param name="sourceItems">The source items.</param>
            <param name="reportableSections">The reportable sections.</param>
        </member>
        <member name="M:Checkbox.Analytics.Items.GovernancePrioritySummaryItem.AggregatedData">
            <summary>
            Aggregateds the data2.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.GovernancePriorityGraphSection">
            <summary>
            GovernancePriorityGraphSection
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.GovernancePriorityGraphSection.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.GovernancePriorityGraphSection.ItemIds">
            <summary>
            Gets or sets the item ids.
            </summary>
            <value>
            The item ids.
            </value>
        </member>
        <member name="M:Checkbox.Analytics.Items.GovernancePriorityGraphSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Checkbox.Analytics.Items.GovernancePriorityGraphSection" /> class.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.SectionItem">
            <summary>
            SectionItem
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.SectionItem.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.SectionItem.Answers">
            <summary>
            Gets or sets the answers.
            </summary>
            <value>
            The answers.
            </value>
        </member>
        <member name="F:Checkbox.Analytics.Items.GradientColorSkillsMatrixItem.NotAnsweredQuestionValue">
            <summary>
            The not answered question value
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.GradientColorSkillsMatrixItem.DefaultRatingScaleColumn">
            <summary>
            The not answered question value
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.GradientColorSkillsMatrixItem.MaxSourceItemElements">
            <summary>
            The maximum source item elements in source item data
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.GradientColorSkillsMatrixItem.ProcessData">
            <summary>
            Process data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.GradientColorSkillsMatrixItem.GeneratePreviewData">
            <summary>
            Generate preview data for the report
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.GradientColorSkillsMatrixItem.ProcessPreviewData">
            <summary>
            Process the data
            </summary>
            <returns></returns>
        </member>
        <member name="F:Checkbox.Analytics.Items.HeatMapItem.DefaultPointsValue">
            <summary>
            The default points value if there no answer
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.HeatMapItem.DefaultRaitingRange">
            <summary>
            The default points value if there no answer
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.HeatMapItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item with it's meta-data, language code for displaying text, and no filters.
            </summary>
            <param name="itemData">AnalysisItem's configuration information.</param>
            <param name="languageCode">Language code to use for fetching text.</param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.HeatMapItem.ProcessData">
            <summary>
            Process data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.HeatMapItem.GeneratePreviewData">
            <summary>
            Generate preview data for the report
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.HeatMapItem.ProcessPreviewData">
            <summary>
            Process the data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.HeatMapItem.GetFirstAnswerRatingScale(Checkbox.Analytics.Data.HeatMapAnalysisResult,Checkbox.Forms.ResponseTemplate)">
            <summary>
            Gets the first answer raiting scale.
            </summary>
            <param name="result">The result.</param>
            <param name="template">The template.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.HeatMapItem.FilterSectionsBySourceItems(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{Checkbox.Wcf.Services.Proxies.ReportableSection})">
            <summary>
            Filters the sections by source items.
            </summary>
            <param name="sourceItems">The source items.</param>
            <param name="reportableSections">The reportable sections.</param>
        </member>
        <member name="M:Checkbox.Analytics.Items.HeatMapItem.SortResponseAnswers(System.Collections.Generic.List{Checkbox.Analytics.Data.HeatMapResult})">
            <summary>
            Sorts the response answers.
            </summary>
            <param name="responses">The responses.</param>
        </member>
        <member name="M:Checkbox.Analytics.Items.HeatMapItem.FilterSectionItemsByType(System.String,Checkbox.Forms.ResponseTemplate,System.Collections.Generic.List{Checkbox.Wcf.Services.Proxies.ReportableSection})">
            <summary>
            Filters the type of the section items types.
            </summary>
            <param name="type">The type.</param>
            <param name="template">The template.</param>
            <param name="reportableSections">The reportable sections.</param>
        </member>
        <member name="M:Checkbox.Analytics.Items.HeatMapItem.FillSectionMeanValues(Checkbox.Analytics.Data.HeatMapAnalysisResult,System.Collections.Generic.List{Checkbox.Wcf.Services.Proxies.ReportableSection},System.Collections.Generic.Dictionary{System.Int32,System.Double})">
            <summary>
            Generate mean values for sections or use Sigma dictionary if it is passed
            </summary>
            <param name="result">The result.</param>
            <param name="reportableSections">The reportable sections.</param>
            <param name="eSigma">The e sigma.</param>
        </member>
        <member name="T:Checkbox.Analytics.Items.ISummaryChartItemAppearance">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.ISummaryChartItemAppearance.AdjustAutoMarginValues(System.String,System.String)">
            <summary>
            </summary>
            <param name="prevLegendAlign"></param>
            <param name="prevLegendVertAlign"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.ISummaryChartItemAppearance.AdjustTopMarginForTitle(System.Int32)">
            <summary>
            </summary>
            <param name="numberOfSourceItems"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.ISummaryChartItemAppearance.AdjustAutoMarginValuesForSpecificItems(System.Int32,System.Nullable{System.Int32})">
            <summary>
            </summary>
            <param name="numberOfSourceItems"></param>
            <param name="sourceItemId"> </param>
        </member>
        <member name="M:Checkbox.Analytics.Items.ISummaryChartItemAppearance.UpdateWrapTitleChars">
            <summary>
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.NetPromoterScoreItem">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.NetPromoterScoreItemBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.NetPromoterScoreItemBase.ProcessData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.NetPromoterScoreItemBase.GeneratePreviewData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.NetPromoterScoreItemBase.CreateCalculator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.NetPromoterScoreItemBase.AggregateAndCompute(System.Boolean)">
            <summary>
            Aggregate survey response data for items to report
            </summary>
            <param name="isPreview">Indicate if preview data should be generated
            or if actual answer data should be used.</param>
            <returns>DataSet that the report item data can be bound to.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.NetPromoterScoreItemBase.AggregateResults(System.Boolean)">
            <summary>
            Aggregate response data for source items or generate sample data 
            to be used for generating a report preview. The data will include 
            only a limited number of answers to avoid causing any performance 
            issues. 
            </summary>
            <returns>ItemAnswerAggregator containining preview data.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.NetPromoterScoreItemBase.GeneratePreviewAnswers(System.Int32)">
            <summary>
            Generate a list of answers for the report preview.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.NetPromoterScoreItemResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.NetPromoterScoreItemResult.TotalAnswers">
            <summary>
            Get/set total answers value for the result
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.NetPromoterScoreItemResult.Detractors">
            <summary>
            Get/set detractors value for the result
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.NetPromoterScoreItemResult.Passive">
            <summary>
            Get/set passive value for the result
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.NetPromoterScoreItemResult.Promoters">
            <summary>
            Get/set promoters value for the result
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.NetPromoterScoreItemResult.NetPromoterScore">
            <summary>
            Get/set net prmoter score value for the result
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.NetPromoterScoreStatisticsItem">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.NetPromoterScoreStatisticsItemResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.NetPromoterScoreStatisticsItemResult.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.NetPromoterScoreStatisticsItemResult.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.NetPromoterScoreStatisticsItemResult.AverageValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.NetPromoterScoreStatisticsItemResult.Variance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.NetPromoterScoreStatisticsItemResult.StandardDeviation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.NetPromoterScoreStatisticsItemResult.TotalResponses">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.NetPromoterScoreStatisticsItemResult.TotalRespondents">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.RankOrderSummary">
            <summary>
            Business login implementation of the rank order summary item, which shows the sum of points
            across all responses for each answer.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.RankOrderSummary.ProcessData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.RankOrderSummary.GeneratePreviewData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.RankOrderSummary.RetrieveData(System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.RankOrderSummary.AggregateResult(System.Collections.Generic.IEnumerable{Checkbox.Analytics.Data.ItemAnswer})">
            <summary>
            
            </summary>
            <param name="answers"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.StatisticsItem">
            <summary>
            Business logic implementation of report item that handles aggregation and
            calculation of data to display for report item.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.StatisticsItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the report item with its configuration data.
            </summary>
            <param name="itemData"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.StatisticsItem.GetInstanceDataValuesForSerialization">
            <summary>
            Override this method to increase InstanceData
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.StatisticsItem.ProcessData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.StatisticsItem.GeneratePreviewData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.StatisticsItem.AggregateAndCompute(System.Boolean)">
            <summary>
            Aggregate survey response data for items to report
            </summary>
            <param name="isPreview">Indicate if preview data should be generated
            or if actual answer data should be used.</param>
            <returns>DataSet that the report item data can be bound to.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.StatisticsItem.AggregateResults(System.Boolean)">
            <summary>
            Aggregate response data for source items or generate sample data 
            to be used for generating a report preview. The data will include 
            only a limited number of answers to avoid causing any performance 
            issues. 
            </summary>
            <returns>ItemAnswerAggregator containining preview data.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.StatisticsItem.GeneratePreviewAnswers(System.Int32)">
            <summary>
            Generate a list of answers for the report preview.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.StatisticsItemReportingOption">
            <summary>
            Reporting option for the statistics report item.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.StatisticsItemReportingOption.Responses">
            <summary>
            Calculate the count of responses for each source item without N/A options
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.StatisticsItemReportingOption.Mean">
            <summary>
            Calculate the mean for each source item.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.StatisticsItemReportingOption.Median">
            <summary>
            Calculate the median for each source item.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.StatisticsItemReportingOption.Mode">
            <summary>
            Calculate the mode for each source item.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.StatisticsItemReportingOption.StdDeviation">
            <summary>
            Calculate the standard deviation for each source item.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.StatisticsItemReportingOption.All">
            <summary>
            Calculate all points above described
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.StatisticsItemResult">
            <summary>
            Result for statistics item
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.StatisticsItemResult.Response">
            <summary>
            Get/set response value for the result
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.StatisticsItemResult.Mean">
            <summary>
            Get/set mean value for the result
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.StatisticsItemResult.Median">
            <summary>
            Get/set median value for the result
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.StatisticsItemResult.Mode">
            <summary>
            Get/set mode value for the result
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.StatisticsItemResult.StandardDeviation">
            <summary>
            Get/set standard deviation value for the result
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.UI.AverageScoreByPageItemAppearanceData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreByPageItemAppearanceData.AppearanceCode">
            <summary>
            Get the summary item appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.UI.GovernancePrioritySummaryAppearanceData">
            <summary>
            GovernancePrioritySummaryAppearanceData
            </summary>
            <seealso cref="T:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData" />
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.GovernancePrioritySummaryAppearanceData.AppearanceCode">
            <summary>
            Gets the string code for this AppearanceData, that represenets how this module will look like 
            <remarks>
            This would be the code used to map UI controls to the appearance, for example RADIO_BUTTONS
            </remarks>
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.UI.GovernancePrioritySummaryAppearanceData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Checkbox.Analytics.Items.UI.GovernancePrioritySummaryAppearanceData"/> class.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.GovernancePrioritySummaryAppearanceData.TitleFontSize">
            <summary>
            Gets or sets a value indicating whether enable or disable numerical labels
            </summary>
            <value>
              <c>true</c> if [numerical labels]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.GovernancePrioritySummaryAppearanceData.FontFamily">
            <summary>
            Gets or sets the font family.
            </summary>
            <value>
            The font family.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.GovernancePrioritySummaryAppearanceData.BarColor">
            <summary>
            Gets or sets a value indicating whether enable or disable numerical labels
            </summary>
            <value>
              <c>true</c> if [numerical labels]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.GovernancePrioritySummaryAppearanceData.ShowValuesOnBars">
            <summary>
            Gets or sets a value indicating whether enable or disable numerical labels
            </summary>
            <value>
              <c>true</c> if [numerical labels]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.GovernancePrioritySummaryAppearanceData.GridLine">
            <summary>
            Gets or sets a value indicating whether enable or disable grid line
            </summary>
            <value>
              <c>true</c> if [grid line]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Checkbox.Analytics.Items.UI.GradientColorDirectorSkillsMatrixAppearanceData">
            <summary>
            Represents appearence configuration settings for color director matrix chart
            </summary>
            <seealso cref="T:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData" />
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.GradientColorDirectorSkillsMatrixAppearanceData.AppearanceCode">
            <summary>
            Gets the string code for this AppearanceData
            <remarks>
            This would be the code used to map UI controls to the appearance, for example RADIO_BUTTONS
            </remarks>
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.UI.GradientColorDirectorSkillsMatrixAppearanceData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Checkbox.Analytics.Items.UI.GradientColorDirectorSkillsMatrixAppearanceData"/> class.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.GradientColorDirectorSkillsMatrixAppearanceData.DirectorAverages">
            <summary>
            Gets or sets a value indicating whether enable or disable numerical labels
            </summary>
            <value>
              <c>true</c> if [numerical labels]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.GradientColorDirectorSkillsMatrixAppearanceData.TitleFontSize">
            <summary>
            Gets or sets a value indicating whether enable or disable numerical labels
            </summary>
            <value>
              <c>true</c> if [numerical labels]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.GradientColorDirectorSkillsMatrixAppearanceData.FontFamily">
            <summary>
            Gets or sets the font family.
            </summary>
            <value>
            The font family.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.GradientColorDirectorSkillsMatrixAppearanceData.GridLine">
            <summary>
            Gets or sets a value indicating whether enable or disable grid line
            </summary>
            <value>
              <c>true</c> if [grid line]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.GradientColorDirectorSkillsMatrixAppearanceData.ItemColumnHeader">
            <summary>
            Gets or sets a value indicating whether enable or disable grid line
            </summary>
            <value>
              <c>true</c> if [grid line]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.GradientColorDirectorSkillsMatrixAppearanceData.AveragesColumnHeader">
            <summary>
            Gets or sets a value indicating whether enable or disable grid line
            </summary>
            <value>
              <c>true</c> if [grid line]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.GradientColorDirectorSkillsMatrixAppearanceData.RatingDetailsHeader">
            <summary>
            Gets or sets a value indicating whether enable or disable grid line
            </summary>
            <value>
              <c>true</c> if [grid line]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.GradientColorDirectorSkillsMatrixAppearanceData.SummaryHeader">
            <summary>
            Gets or sets a value indicating whether enable or disable grid line
            </summary>
            <value>
              <c>true</c> if [grid line]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.HeatMapSummaryAppearanceData.AppearanceCode">
            <summary>
            Get heat map summary table appearance code
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.HeatMapSummaryAppearanceData.LableFontSize">
            <summary>
            Gets or sets a value indicating whether enable or disable numerical labels
            </summary>
            <value>
              <c>true</c> if [numerical labels]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.HeatMapSummaryAppearanceData.FontFamily">
            <summary>
            Gets or sets the font family.
            </summary>
            <value>
            The font family.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.HeatMapSummaryAppearanceData.GridLine">
            <summary>
            Gets or sets a value indicating whether enable or disable grid line
            </summary>
            <value>
              <c>true</c> if [grid line]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.HeatMapSummaryAppearanceData.RespondentLabels">
            <summary>
            Gets or sets a value indicating whether enable or disable grid line
            </summary>
            <value>
              <c>true</c> if [grid line]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Checkbox.Analytics.Items.UI.NetPromoterScoreAppearanceData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.NetPromoterScoreAppearanceData.AppearanceCode">
            <summary>
            Get net promoter score table appearance code
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.UI.NetPromoterScoreAppearanceData.SetDefaults">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.UI.NetPromoterScoreStatisticsAppearanceData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.NetPromoterScoreStatisticsAppearanceData.AppearanceCode">
            <summary>
            Get net promoter score table appearance code
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.UI.NetPromoterScoreStatisticsAppearanceData.SetDefaults">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.UI.StatisticsItemAppearanceData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.StatisticsItemAppearanceData.AppearanceCode">
            <summary>
            Get statistics table appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.#ctor">
            <summary>
            Set default values
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.ItemPosition">
            <summary>
            Get/Set the position of the item
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.LegendFont">
            <summary>
            Get/Set the font used when displaying the legend.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.TitleFont">
            <summary>
            Get/Set the font used when displaying the title.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.Precision">
            <summary>
            Get/Set the level of precision used when displaying decimal numbers.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.Explosion">
            <summary>
            Get/Set the level of explosion (spacing) used when displaying pie graphs.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.ShowDataLabels">
            <summary>
            Get/Set the flag which indicates if data labels are displayed.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.AllowExporting">
            <summary>
            Get/Set the flag which allows to exprort the chart image
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.ShowDataLabelZeroValues">
            <summary>
            Get/Set the flag which indicates if data labels with no value are displayed.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.ShowDataLabelValues">
            <summary>
            Get/Set the flag which indicates if data label values are displayed.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.Separator">
            <summary>
            Get/Set the character used to separate labels.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.ShowDataLabelsXAxisTitle">
            <summary>
            Get/Set the flag which indicates if labels are displayed on the x axis.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.Width">
            <summary>
            Get/Set the graph's width.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.Height">
            <summary>
            Get/Set the graph's height.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.ShowLegend">
            <summary>
            Get/Set the flag which indicates if a legend should be displayed.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.LegendWidth">
            <summary>
            Get/Set the legends's width.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.ShowTitle">
            <summary>
            Get/Set the flag which indicates if the graph title should be displayed.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.ShowResponseCountInTitle">
            <summary>
            Get/Set the flag which indicates if the response count should be displayed in the title.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.TitleColor">
            <summary>
            Get/Set the color of the title text.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.WrapTitleChars">
            <summary>
            Get/Set the count of charactes in each line of the wrapped title.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.BackgroundColor">
            <summary>
            Get/Set the color of the background.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.PlotAreaBackgroundColor">
            <summary>
            Get/Set the color of the plot area background.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.LegendBackgroundColor">
            <summary>
            Get/Set the color of the legend background.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.BackgroundGradient">
            <summary>
            Get/Set the flag which indicates if a gradient should be used when displaying background color.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.ShowHeader">
            <summary>
            Get/Set the flag which indicates if a header should be displayed.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.GraphSpacing">
            <summary>
            Get/Set the graph spacing.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.ShowPercent">
            <summary>
            Get/Set the flag which indicates if percentages are displayed along side response counts.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.ForegroundColor">
            <summary>
            Get/Set the foreground color.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.PieGraphColors">
            <summary>
            Get/Set the color of pie graph slices.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.MaxColumnWidth">
            <summary>
            Get/Set the maximum width of graph columns.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.ShowAnswerCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.ShowPercentageInLegend">
            <summary>
            Determines if the percentage is displayed next to an option in chart legends.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.LegendLayout">
            <summary>
            Get/Set the legend layout
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.LegendAlign">
            <summary>
            Get/Set the legend horizontal align
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.LegendVerticalAlign">
            <summary>
            Get/Set the legend vertical align
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData.SupportedPieGraphColors">
            <summary>
            Returns a comma separated list of colors supported by PieGraphs
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.#ctor">
            <summary>
            Set default values
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.AppearanceCode">
            <summary>
            Get the summary item appearance code
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.ChartMarginTop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.ChartMarginBottom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.ChartMarginLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.ChartMarginRight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.FontFamily">
            <summary>
            Get/set font family for text
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.TitleFontSize">
            <summary>
            Get/set the title font size
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.BorderLineWidth">
            <summary>
            Get/set the border line width
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.BorderRadius">
            <summary>
            Get/set the border radius
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.BorderLineColor">
            <summary>
            Get/set the border line color
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.BarColor">
            <summary>
            Get the bar color for bar/column/line graphs
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.Animation">
            <summary>
            Get/set whether a chart should be animated
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.PieBorderColor">
            <summary>
            Get/Set the color of the pie border
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.LegendFontSize">
            <summary>
            Get/set the font size for the chart legend
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.TextColor">
            <summary>
            Get/set the text color
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.LegendTextColor">
            <summary>
            Get/set the text color
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.HintTextColor">
            <summary>
            Get/set the text color
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.AverageScoreItemAppearanceData.LabelFontSize">
            <summary>
            Get/set the font size for the label
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.UI.CrossTabItemAppearanceData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.CrossTabItemAppearanceData.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.UI.DetailsItemAppearanceData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.DetailsItemAppearanceData.AppearanceCode">
            <summary>
            Get appearance code for item
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.UI.GraphOptionsLoader">
            <summary>
            Load an analyis item appearance with graph options
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.UI.GraphOptionsLoader.PopulateAppearanceData(Checkbox.Analytics.Items.UI.AnalysisItemAppearanceData,System.String)">
            <summary>
            Populate an appearance data with default options from the specified file path
            </summary>
            <param name="appearance"></param>
            <param name="graphOptionsPath"></param>
        </member>
        <member name="T:Checkbox.Analytics.Items.UI.GraphType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.UI.GraphType.SummaryTable">
            <summary>
            Table of values
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.UI.GraphType.ColumnGraph">
            <summary>
            Column graph
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.UI.GraphType.PieGraph">
            <summary>
            Pie graph
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.UI.GraphType.LineGraph">
            <summary>
            Line graph
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.UI.GraphType.BarGraph">
            <summary>
            Bar graph
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.UI.GraphType.CrossTab">
            <summary>
            Cross tabulation
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.UI.GraphType.Doughnut">
            <summary>
            Doughnut
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.UI.GraphType.StatisticsTable">
            <summary>
            Statistics table
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.UI.FrequencyItemAppearanceData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.UI.FrequencyItemAppearanceData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.FrequencyItemAppearanceData.AppearanceCode">
            <summary>
            Get the summary item appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.UI.MatrixSummaryItemAppearanceData">
            <summary>
            Matrix summary item appearance
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.MatrixSummaryItemAppearanceData.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.UI.TotalScoreItemAppearanceData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.UI.TotalScoreItemAppearanceData.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.CSVExportItem">
            <summary>
            Export to CSV
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.CSVExportItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="itemData"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="P:Checkbox.Analytics.Items.CSVExportItem.IncludeOpenEnded">
            <summary>
            Get whether to include open-ended results for export
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.CSVExportItem.MergeSelectMany">
            <summary>
            Get whether to merge select many items for export
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.CSVExportItem.IncludeHidden">
            <summary>
            Get whether to export hidden items
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.CSVExportItem.ExportRankOrderPoints">
            <summary>
            Get whether to export Rank Order points
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.DetailsItem">
            <summary>
            Business logic for collecting and displaying analysis details
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.DetailsItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>v
            Configure the item
            </summary>
            <param name="itemData"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="P:Checkbox.Analytics.Items.DetailsItem.LinkToResponseDetails">
            <summary>
            Get whether to link to response details
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.DetailsItem.GroupAnswers">
            <summary>
            Get whether to group answers
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.DetailsItem.ProcessData">
            <summary>
            Process data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.DetailsItem.GeneratePreviewData">
            <summary>
            Generate preview data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.DetailsItem.ProcessData(System.Boolean)">
            <summary>
            Aggregate the data and return the result
            </summary>
            <returns>DataSet containing answer data.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.DetailsItem.RetrieveData(System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.DetailsItem.GroupAggregatedAnswers(System.Collections.Generic.List{Checkbox.Wcf.Services.Proxies.DetailResult})">
            <summary>
            Now, group the answers by response id.  A column will be created for each item in the response.
            </summary>
            <param name="aggregatedAnswers">Aggregated answer data.</param>
            <returns>Datatable with information.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.DetailsItem.AggregateAnswers(System.Boolean)">
            <summary>
            Aggregate answer data and return a data table containing the results
            </summary>
            <param name="isPreview"></param>
            <returns>DataTable with aggregated answer data</returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.DetailsItem.GetItemPreviewAnswers(System.Int32,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Get preview answers for the item
            </summary>
            <param name="itemID"></param>
            <param name="answerIdSeed"></param>
            <param name="responseIdSeed"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.DetailsItem.GetMetaDataValuesForSerialization">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.FrequencyAnalysisDataCollection">
            <summary>
            Container for collection of frequency analysis information. Each frequency item data contained herein contains frequency
            information for one survey item.  This class is also capable of aggregating across all the frequency item data it contains.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyAnalysisDataCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyAnalysisDataCollection.AddAnalysisData(System.Int32,Checkbox.Analytics.Items.FrequencyAnalysisData)">
            <summary>
            Add a data set to the collection
            </summary>
            <param name="itemID"></param>
            <param name="analysisData"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyAnalysisDataCollection.RemoveAnalysisData(System.Int32)">
            <summary>
            Remove analysis data for an item from the collection
            </summary>
            <param name="itemID"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyAnalysisDataCollection.GetAnalysisData(System.Int32)">
            <summary>
            Get the frequency data for a particular item
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyAnalysisDataCollection.GetAggregateData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.AverageScoreAnalysisData">
            <summary>
            Container for processed average score analysis data
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.AverageScoreAnalysisData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.AverageScoreAnalysisData.AddScore(System.Int32,System.String,System.Int32)">
            <summary>
            Add a score to the collection
            </summary>
            <param name="itemID"></param>
            <param name="questionText"></param>
            <param name="score"></param>
        </member>
        <member name="P:Checkbox.Analytics.Items.AverageScoreAnalysisData.AggregateAverage">
            <summary>
            Get the aggregated average score, weighted by response count, etc.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.AverageScoreAnalysisData.AverageOfItemTotals">
            <summary>
            Average score of item totals
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.AverageScoreAnalysisData.GetItemScoreSummary(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Get summary information about item scores
            </summary>
            <param name="itemID"></param>
            <param name="total"></param>
            <param name="average"></param>
            <param name="responseCount"></param>
        </member>
        <member name="P:Checkbox.Analytics.Items.AverageScoreAnalysisData.ItemAveragesTable">
            <summary>
            Get a datatable containing item totals
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.AverageScoreAnalysisData.GroupedItemScoresTable">
            <summary>
            Get a list of all responses to items, grouped by score
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.AverageScoreAnalysisData.AllItemScoresTable">
            <summary>
            Get a datatable with all items for the survey
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.AverageScoreItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.AverageScoreItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="itemData"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="P:Checkbox.Analytics.Items.AverageScoreItem.ScoreOption">
            <summary>
            Get the calculation option
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.AverageScoreItem.ProcessData">
            <summary>
            Process data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AverageScoreItem.GeneratePreviewData">
            <summary>
            Generate preview data for the report
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AverageScoreItem.ProcessPreviewData">
            <summary>
            Process the data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AverageScoreItem.RetrieveData(System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.AnalysisItem">
            <summary>
            Abstract base class for items that appear in reports and perform the task of summarizing and displaying (optionally) filtered
            response data in aggregate form for a survey.  Object lifecycle should not exceed one page execution.
            
            Analysis items are bound directly to renderers so they implement the IItemDataTransferObject interface.  At some future point
            renderers may access analysis itme data through a service layer and this abstraction will make for an easier transition at that
            time.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.AnalysisItem.TempResult">
            <summary>
            Temporary cache for data to avoid too much cache talk.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.AnalysisItem.Report">
            <summary>
            Get a reference to current report
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.#ctor">
            <summary>
            Constructor that initializes internal collections used by the item.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.AnalysisItem.SourceResponseTemplateId">
            <summary>
            Gets or sets a source response template ID
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.AnalysisItem.SourceAnalysisTemplateId">
            <summary>
            Gets or sets a source analysis template ID
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.AnalysisItem.SourceItemIds">
            <summary>
            Get list of source item ids
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.AnalysisItem.ResultValidationReferenceDate">
            <summary>
            Get/set date to use for validating result data
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetFilters">
            <summary>
            Get a read-only collection of filters applied to this report item.
            </summary>
            <remarks>This read-only collection is suitable for use by interfaces that need to view the list of associated filters.</remarks>
        </member>
        <member name="P:Checkbox.Analytics.Items.AnalysisItem.IncludeSourceDataInDto">
            <summary>
            Get whether to include source item and option data in item dto.  In most cases, this
            data is required, so default value is true.  
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.AnalysisItem.FilterCollection">
            <summary>
            Get the collection of filters applied to this report item.
            </summary>
            <remarks>Classes that extend AnalysisItem should use this method to access the filter collection.</remarks>
        </member>
        <member name="P:Checkbox.Analytics.Items.AnalysisItem.PreviewMode">
            <summary>
            Return whether the item is operating in "Preview" mode.
            </summary>
            <remarks>Preview mode use used to a display a preview of what the item will look like when rendered in a report. Live response data
            is not presented.</remarks>
        </member>
        <member name="P:Checkbox.Analytics.Items.AnalysisItem.StandaloneMode">
            <summary>
            Get/set whether running in outside the context of a report, such as when used in a 
            poll or survey.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetAnalysisData(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get the <see cref="T:Checkbox.Analytics.Data.AnalysisAnswerData" /> containing the item, option, response, and answer information this item will use
            to fetch/generate it's reporting data.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.BuildSourceIdsString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.BuildFilterStrings">
            <summary>
            Build a query to select answers for the analysis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,Checkbox.Analytics.Filters.AnalysisItemFilterCollection)">
            <summary>
            Configure the item with it's meta-data, language code for displaying text, and the collection of applied filters.
            </summary>
            <param name="itemData">AnalysisItem's configuration information.</param>
            <param name="languageCode">Language code to use for fetching text.</param>
            <param name="filters">Filters applied to the item.</param>
        </member>
        <member name="P:Checkbox.Analytics.Items.AnalysisItem.RunMode">
            <summary>
            Get/set whether the item is in run mode (i.e. part of a report or survey, not in a report editor or survey editor).
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.AnalysisItem.UseAliases">
            <summary>
            Get/set whether item and option aliases should be used in favor of item and option text values.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.CreateDataTransferObject">
            <summary>
            Get a data transfer object for report items which is the item itself.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetInstanceDataValuesForSerialization">
            <summary>
            Get instance values for serialization
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item with it's meta-data, language code for displaying text, and no filters.
            </summary>
            <param name="itemData">AnalysisItem's configuration information.</param>
            <param name="languageCode">Language code to use for fetching text.</param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetItemAnswers(System.Int32)">
            <summary>
            List all <see cref="T:Checkbox.Analytics.Data.ItemAnswer"/> for the specified item.
            </summary>
            <param name="itemId">ID of item to list answers for.</param>
            <returns>List of <see cref="T:Checkbox.Analytics.Data.ItemAnswer"/> objects corresponding to answers to the item.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetItemAnswers(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            List all <see cref="T:Checkbox.Analytics.Data.ItemAnswer"/> for the specified item.
            </summary>
            <param name="itemId">ID of item to list answers for.</param>
            <param name="includeIncompleteAnswers"></param>
            <param name="includeTestResponses"></param>
            <returns>List of <see cref="T:Checkbox.Analytics.Data.ItemAnswer"/> objects corresponding to answers to the item.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetItemText(System.Int32)">
            <summary>
            Get the text for an item
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetSourceItemTypeName(System.Int32)">
            <summary>
            Get the type name of a source item.
            </summary>
            <param name="itemID">ID of item to get type name of.</param>
            <returns>Type name of source item.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetOptionText(System.Int32,System.Int32)">
            <summary>
            Get the text for an option
            </summary>
            <param name="itemID"></param>
            <param name="optionID"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Items.AnalysisItem.Analysis">
            <summary>
            Get/set the analysis
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GenerateDataKey">
            <summary>
            Generate data key for caching
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Items.AnalysisItem.TemplatesValidated">
            <summary>
            Get/set whether source templates have not been modified since result last stored in cache
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.ValidateTemplateData">
            <summary>
            Validate template data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.ValidateResultData(Checkbox.Analytics.Data.AnalysisDataProxyCacheItem{Checkbox.Analytics.Data.AnalysisItemResult})">
            <summary>
            Validate that the result data associated with this item is
            current.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetResultData">
            <summary>
            Get data for a
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.LoadAndProcessData">
            <summary>
            Load any response/answer data this item needs and perform any 
            processing.  In most cases, data should be retrieved from the
            AnalysisAnswerData object maintained by the Analysis or from
            the Checkbox report service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.ProcessData">
            <summary>
            Process answer data to get results
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Items.AnalysisItem.ResponseCounts">
            <summary>
            Get response counts for items that are part of this analysis
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetItemResponseCount(System.Int32)">
            <summary>
            Get the response count for a particular item
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetResponseCountForItem(System.Int32)">
            <summary>
            Get the response count for an item.  It is up to concrete class to produce this value.
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetItemAliasFromConfigurationData(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.String}@)">
            <summary>
            Get item alias and corresponding option aliases from configuration data
            </summary>
            <param name="itemID"></param>
            <param name="optionAliases"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetOptionPoints(System.Int32,System.Int32)">
            <summary>
            Get the points value for an option
            </summary>
            <param name="itemID">Item ID</param>
            <param name="optionID">Option ID</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetOptionIsOther(System.Int32,System.Int32)">
            <summary>
            Get a boolean indicating if an option is an "other" option.
            </summary>
            <param name="itemID">Item ID</param>
            <param name="optionID">Option ID</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GeneratePreviewData">
            <summary>
            Populate the report item data with preview information
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetItemOptionIdsForPreview(System.Int32)">
            <summary>
            Get option ids for preview
            </summary>
            <param name="itemId">Item to list options for.</param>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetItemOptionIdsForReport(System.Int32)">
            <summary>
            Get option ids for preview
            </summary>
            <param name="itemId">Item to list options for.</param>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetItemPreviewAnswers(System.Int32,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Get preview answers for the item
            </summary>
            <param name="itemID"></param>
            <param name="answerIdSeed"></param>
            <param name="responseIdSeed"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetTitleText(System.Boolean)">
            <summary>
            Get analysis item title text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Build up data transfer object for survey item.
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.PopulateAppliedFilterData(Checkbox.Wcf.Services.Proxies.ReportItemInstanceData)">
            <summary>
            
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.PopulateItemResultData(Checkbox.Wcf.Services.Proxies.ReportItemInstanceData)">
            <summary>
            Populate results
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.PopulateSourceItems(Checkbox.Wcf.Services.Proxies.ReportItemInstanceData)">
            <summary>
            Populate source texts for items and options.  Base analysis item class
            DOES NOT populate these values since they are typically encompassed by
            results data returned from object.  For more complicated items, such as a
            cross tab, it may be necessary to have direct access to this data so IncludeTextsInDto
            should be overridden with a "true" value in child classes to add such data.
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.GetSourceItem(System.Int32)">
            <summary>
            Get source item data for report item
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.UpdateFromDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            
            </summary>
            <param name="dto"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.RetrieveData(System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <param name="responseCount"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.AggregatedData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.AnalysisItem.AggregateResult(System.Collections.Generic.IEnumerable{Checkbox.Analytics.Data.ItemAnswer})">
            <summary>
            
            </summary>
            <param name="answers"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.CrossTabAnalysisData">
            <summary>
            Container/computer for cross-tab analysis data
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabAnalysisData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabAnalysisData.InitializeData">
            <summary>
            Initialize internal data store
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabAnalysisData.AddQuestionText(System.Int32,System.String)">
            <summary>
            Add a question text
            </summary>
            <param name="itemID"></param>
            <param name="questionText"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabAnalysisData.AddXOptions(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Add question options
            </summary>
            <param name="itemID"></param>
            <param name="options"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabAnalysisData.AddYOptions(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Add question options
            </summary>
            <param name="itemID"></param>
            <param name="options"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabAnalysisData.AddAnswer(System.Int32,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Add an anser to the data collection.
            </summary>
            <param name="xAxisItemID"></param>
            <param name="xAxisItem"></param>
            <param name="yAxisItemID"></param>
            <param name="yAxisItem"></param>
            <param name="answerCount"></param>
        </member>
        <member name="P:Checkbox.Analytics.Items.CrossTabAnalysisData.ResponseCount">
            <summary>
            Get the number of responses for the item
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.CrossTabAnalysisData.ResultsData">
            <summary>
            Get a datatable with the results data
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabAnalysisData.GetXQuestionTexts">
            <summary>
            Get the texts for the questions on the xaxis
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabAnalysisData.GetYQuestionTexts">
            <summary>
            Get the texts for questions on the y axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabAnalysisData.GetOptionTexts">
            <summary>
            Get the option texts for questions
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Items.CrossTabAnalysisData.KeyColumn">
            <summary>
            Get the key column for the data
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.CrossTabItem">
            <summary>
            Cross-tab analysis item
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configuration for a cross tab item
            </summary>
            <param name="itemData"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabItem.InitializeData(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Initialize data
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.CrossTabItem.XAxisItemIDs">
            <summary>
            Get item ids for x axis
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.CrossTabItem.YAxisItemIDs">
            <summary>
            Get item ids for y axis
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabItem.ProcessData">
            <summary>
            Process report data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabItem.GeneratePreviewData">
            <summary>
            Generate data for report preview
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabItem.ProcessPreviewData">
            <summary>
            Process the data and calculate summaries
            </summary>
            <returns>Data object.</returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabItem.ConcatIds(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Concat item IDs into the string
            </summary>
            <param name="IDs"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabItem.AggregatedData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.CrossTabItem.GetInstanceDataValuesForSerialization">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Items.ExportItem">
            <summary>
            Base class for export items
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the export item
            </summary>
            <param name="itemData"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="P:Checkbox.Analytics.Items.ExportItem.MergeSelectMany">
            <summary>
            Get whether select many items should have separate columns or be merged
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.ExportItem.IncludeOpenEnded">
            <summary>
            Get whether open-end answers should be included
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.ExportItem.IncludeHidden">
            <summary>
            Get whether hidden item answers should be included
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.ExportItem.ExportRankOrderPoints">
            <summary>
            Get whether hidden item answers should be included
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.ExportItem.TemplatesValidated">
            <summary>
            Consider templates valid to avoid freshness checks on source items.  This assumes export item data
            created by AnalysisTemplateManager which loads survey items and does not skip freshness checks.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.ClearColumns">
            <summary>
            Clear columns
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.AddColumns(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Guid},System.String)">
            <summary>
            Determine the column names
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.AddColumnsForResponseTemplate(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Guid},System.String)">
            <summary>
            Add columns for the specified response template
            </summary>
            <param name="responseTemplateID">The response template identifier.</param>
            <param name="progressKey">The progress key.</param>
            <param name="languageCode">The language code.</param>
            <param name="startProgress">The start progress.</param>
            <param name="endProgress">The end progress.</param>
            <param name="responseId">The response identifier.</param>
            <param name="userName">Name of the user.</param>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.AddColumnsForItem(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.String,Checkbox.Forms.Items.Configuration.ItemData,System.Nullable{System.Guid},System.String)">
            <summary>
            Add columns for the item
            </summary>
            <param name="itemData">The item data.</param>
            <param name="prefix">The prefix.</param>
            <param name="textOverride">The text override.</param>
            <param name="prototype">The prototype.</param>
            <param name="responseId">The response identifier.</param>
            <param name="userName">Name of the user.</param>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.AddColumnsForRankOrder(Checkbox.Forms.Items.Configuration.ItemData,System.String)">
            <summary>
            
            </summary>
            <param name="itemData"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.AddColumnsForMatrixItem(Checkbox.Forms.Items.Configuration.MatrixItemData,System.String)">
            <summary>
            Add columns for a matrix item
            </summary>
            <param name="itemData"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.AddColumnsForCompositeItem(Checkbox.Forms.Items.Configuration.ICompositeItemData,System.String)">
            <summary>
            Add columns for children of composites
            </summary>
            <param name="itemData"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.AddColumnsForSelectItem(Checkbox.Forms.Items.Configuration.SelectItemData,System.String,System.String,Checkbox.Forms.Items.Configuration.SelectItemData)">
            <summary>
            Add columns for a select item
            </summary>
            <param name="itemData"></param>
            <param name="prefix"></param>
            <param name="textOverride"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.AddColumnsForSelectItemOptions(Checkbox.Forms.Items.Configuration.SelectItemData,System.String,Checkbox.Forms.Items.Configuration.SelectItemData)">
            <summary>
            This method performs two tasks. The first is to add columns for individual options
            in a select many item and the second is to store the ids of "other" fields for select
            many and rating scale options for later use. (The "Other' option in a rating scale represents
            the n/a option).
            </summary>
            <param name="itemData"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.AddColumnsForUploadItem(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.String)">
            <summary>
            Determine the column text for an upload item
            </summary>
            <param name="itemData"></param>
            <param name="prefix"></param>
            <param name="textOverride"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.AddColumnsForAddressVerifierItem(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.String)">
            <summary>
            Determine the column texts for an address verifier item
            </summary>
            <param name="itemData"></param>
            <param name="prefix"></param>
            <param name="textOverride"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.DetermineColumnTextForItem(Checkbox.Forms.Items.Configuration.ItemData,System.String)">
            <summary>
            Determine the column text for an item
            </summary>
            <param name="itemData"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.AddColumn(System.Int32,System.String,System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Add a column to the column collection
            </summary>
            <param name="columnNumber"></param>
            <param name="columnName"></param>
            <param name="itemId"></param>
            <param name="optionId"></param>
        </member>
        <member name="P:Checkbox.Analytics.Items.ExportItem.ColumnCount">
            <summary>
            Get the number of columns for the item
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.GetColumnNames(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Guid},System.String)">
            <summary>
            Get the list of column names for the export item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.EnsureColumnsAdded(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Guid},System.String)">
            <summary>
            Ensure export columns have been added
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.GetRowAnswers(System.Int64,System.Boolean,System.Boolean,System.Boolean,Checkbox.Forms.ResponseTemplate)">
            <summary>
            Get the answer row for the specified response id
            </summary>
            <param name="includeTestResponses"></param>
            <param name="rt"></param>
            <param name="responseID"></param>
            <param name="stripHtmlTags"></param>
            <param name="includeIncompleteResponses"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.GetResponseTemplateByResponseId(System.Int64)">
            <summary>
            
            </summary>
            <param name="responseID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.GetRowAnswersForNumericSlider(System.Int64,System.Boolean,System.Boolean,Checkbox.Forms.Items.Configuration.SliderItemData,Checkbox.Forms.ResponseTemplate)">
            <summary>
            
            </summary>
            <param name="responseId"></param>
            <param name="includeIncompleteResponses"></param>
            <param name="includeTestResponses"></param>
            <param name="data"> </param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.IsPageReached(System.Int64,System.Int32,Checkbox.Forms.ResponseTemplate,Checkbox.Analytics.Data.AnalysisAnswerData)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.GetRowAnswersForRankOrder(System.Int64,System.Boolean,System.Boolean,Checkbox.Forms.Items.Configuration.RankOrderItemData)">
            <summary>
            
            </summary>
            <param name="responseID"></param>
            <param name="includeIncompleteResponses"></param>
            <param name="data"> </param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.GetAnswerColumnValue(System.Int64,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get the value for a particular column
            </summary>
            <param name="responseID"></param>
            <param name="column"></param>
            <param name="stripHtmlTags"></param>
            <param name="includeIncompleteResponses"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.ExportItem.GetAnswerText(Checkbox.Analytics.Data.ItemAnswer,System.Int32)">
            <summary>
            Get the answer text from the given report answer object
            </summary>
            <param name="answerDataObject"></param>
        </member>
        <member name="T:Checkbox.Analytics.Items.FrequencyAnalysisData">
            <summary>
            Container transporting results to frequency item data.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.FrequencyAnalysisData.ResponseCount">
            <summary>
            Get the response count
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.FrequencyAnalysisData.OtherOption">
            <summary>
            Handling of "other" 
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.FrequencyAnalysisData.OtherText">
            <summary>
            Get/set the "other" text
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyAnalysisData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyAnalysisData.AddPossibleAnswer(System.String)">
            <summary>
            Add a possible answer
            </summary>
            <param name="answer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyAnalysisData.Increment(System.String)">
            <summary>
            Increment an answer count
            </summary>
            <param name="answer"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyAnalysisData.AddOtherText(System.String)">
            <summary>
            Add an other text
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Checkbox.Analytics.Items.FrequencyAnalysisData.AnswerCounts">
            <summary>
            Get the answer counts
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.FrequencyAnalysisData.OtherTexts">
            <summary>
            Get the other texts
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.FrequencyAnalysisData.TotalAnswers">
            <summary>
            Get the total answers
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.FrequencyAnalysisData.ResultsData">
            <summary>
            Get the results
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.FrequencyItem">
            <summary>
            Frequency analysis
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.FrequencyItem.OtherOption">
            <summary>
            Get/set how to handle "other" options when reporting on select items.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.FrequencyItem.PrimarySourceItemID">
            <summary>
            Get/set primary source item id
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.FrequencyItem.DisplayStatistics">
            <summary>
            Show statistics table below the chart or not
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.FrequencyItem.DisplayAnswers">
            <summary>
            Show summary answers table below the chart or not
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="itemData"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyItem.ProcessData">
            <summary>
            Process the answer data and calculate frequencies
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyItem.GeneratePreviewData">
            <summary>
            Generate preview data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyItem.ProcessPreviewData">
            <summary>
            Process data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyItem.RetrieveData(System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyItem.AggregatedData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyItem.AggregateResult(System.Collections.Generic.IEnumerable{Checkbox.Analytics.Data.ItemAnswer})">
            <summary>
            
            </summary>
            <param name="answers"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.FrequencyItem.GetMetaDataValuesForSerialization">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.MatrixSummaryAnalysisData">
            <summary>
            Container/computer for matrix summary analysis data.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.MatrixAnswer">
            <summary>
            Container for answers in a matrix summary item.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.MatrixAnswer.Row">
            <summary>
            Row position for result
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.MatrixAnswer.Column">
            <summary>
            Column position for result
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.MatrixAnswer.Answer">
            <summary>
            Answer value
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.MatrixAnswer.Count">
            <summary>
            Number of answers with same value.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.InitializeData">
            <summary>
            Initialize internal data store
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.AddColumnQuestionText(System.Int32,System.String)">
            <summary>
            Add a column question text
            </summary>
            <param name="column"></param>
            <param name="text"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.AddColumnOptionTexts(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Add
            </summary>
            <param name="column"></param>
            <param name="optionTexts"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.AddRowText(System.Int32,System.String)">
            <summary>
            Add a row text
            </summary>
            <param name="row"></param>
            <param name="text"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.AddAnswer(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Add an answer set
            </summary>
            <param name="answer"></param>
            <param name="column"></param>
            <param name="count"></param>
            <param name="row"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.AddScaleAverage(System.Int32,System.Int32,System.String,System.Double)">
            <summary>
            Add a scale average
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <param name="averageKey"></param>
            <param name="average"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.AddOtherText(System.Int64,System.Int32,System.String)">
            <summary>
            Add an "other" text
            </summary>
            <param name="responseID"></param>
            <param name="row"></param>
            <param name="otherText"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.AddOtherAnswer(System.Int64,System.Int32,System.Int32,System.String)">
            <summary>
            Add an other answer set
            </summary>
            <param name="answer"></param>
            <param name="column"></param>
            <param name="responseID"></param>
            <param name="row"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.AddDefaultOtherText(System.Int32,System.String)">
            <summary>
            Set a default other text
            </summary>
            <param name="row"></param>
            <param name="otherText"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.GetDefaultOtherText(System.Int32)">
            <summary>
            Get other texts for the row
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.ResponseCount">
            <summary>
            Get the number of responses for the item
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.AnswerCount">
            <summary>
            Get the number of responses for the item
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.OtherData">
            <summary>
            Get matrix category other data, grouped by "other" text
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.GetOtherDataTable">
            <summary>
            Get the "other" data table
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.ResultsData">
            <summary>
            Get a datatable with the results data
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.GetColumnTexts">
            <summary>
            Get the texts for a column
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.GetColumnOptions(System.Int32)">
            <summary>
            Get the options for a column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.Items.MatrixSummaryAnalysisData.KeyColumn">
            <summary>
            Get the key column for the data
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.MatrixSummaryItem">
            <summary>
            Summary item for calculating matrix summary information, which includes a table
            for option results and a table for open-ended question results.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.MatrixSummaryItem.SummaryItemProcessedData">
            <summary>
            Simple data container for caching processed data
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.MatrixSummaryItem.ProcessedData">
            <summary>
            Get reference to processed data
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item.
            </summary>
            <param name="itemData"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.IsRowOther(System.Int32)">
            <summary>
            Get a boolean indicating if a row is an "other" row.
            </summary>
            <param name="row">Row number.</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.IsColumnSumTotal(System.Int32)">
            <summary>
            Get a boolean indicating if a column is a sum total column.
            </summary>
            <param name="column">Column number.</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.IsColumnRatingScale(System.Int32)">
            <summary>
            Get a boolean indicating if a column is a rating scale column.
            </summary>
            <param name="column">Column number.</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.IsColumnSlider(System.Int32)">
            <summary>
            Get a boolean indicating if a column is a slider column.
            </summary>
            <param name="column">Column number.</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.GetItemIDAt(System.Int32,System.Int32)">
            <summary>
            Get the ID of the item at the specified location in the matrix
            </summary>
            <param name="row">Row position</param>
            <param name="column">Column position</param>
            <returns>ID of item at the position.  If no item is found, a negative number is returned</returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.ProcessData">
            <summary>
            Process the data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.GeneratePreviewData">
            <summary>
            Generate preview data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.ProcessPreviewData">
            <summary>
            Process report data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.GetItemsAndOptionsIds(Checkbox.Analytics.Items.MatrixSummaryItem.SummaryItemProcessedData)">
            <summary>
            Build parameter data
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.AggregateResult(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32}})">
            <summary>
            Aggregate result data 
            </summary>
            <param name="answers"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.GetRatingScaleID(Checkbox.Analytics.Items.MatrixSummaryItem.SummaryItemProcessedData)">
            <summary>
            Get source rating scale items
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.GetMatrixSumTotalID(Checkbox.Analytics.Items.MatrixSummaryItem.SummaryItemProcessedData)">
            <summary>
            Get source matrix sum total items
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.GetMatrixSliderID(Checkbox.Analytics.Items.MatrixSummaryItem.SummaryItemProcessedData)">
            <summary>
            Get source matrix slider items
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.SliderAverages(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32}})">
            <summary>
            Calculate rating scale averages
            </summary>
            <param name="itemIds"></param>
            <param name="answers"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.RatingScaleAverages(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32}})">
            <summary>
            Calculate rating scale averages
            </summary>
            <param name="itemIds"></param>
            <param name="answers"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.SumTotalAverages(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32}})">
            <summary>
            Calculate sum total averages
            </summary>
            <param name="itemIds"></param>
            <param name="answers"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.AggregatedData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.ProcessSourceData">
            <summary>
            Process source data for item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.LoadChildItemData(Checkbox.Forms.Data.LightweightItemMetaData,Checkbox.Analytics.Items.MatrixSummaryItem.SummaryItemProcessedData)">
            <summary>
            Load the children of the matrix item and add them to the
            internal items collection.
            </summary>
            <param name="matrixItemData"></param>
            <param name="processedData"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.LoadColumnPrototype(System.Int32,System.Nullable{System.Int32},Checkbox.Analytics.Items.MatrixSummaryItem.SummaryItemProcessedData)">
            <summary>
            Load the column prototype for a column
            </summary>
            <param name="columnNumber"></param>
            <param name="columnPrototypeId"></param>
            <param name="processedData"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.LoadRowPkItem(System.Int32,System.Nullable{System.Int32},System.String,Checkbox.Analytics.Items.MatrixSummaryItem.SummaryItemProcessedData)">
            <summary>
            Load the pk item for a row
            </summary>
            <param name="rowItemId"></param>
            <param name="rowNumber"></param>
            <param name="rowType"></param>
            <param name="processedData"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.GetItemText(System.Int32)">
            <summary>
            Get item text override
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.GetMetaDataValuesForSerialization">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Add additional data to transfer object
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.PopulateSourceItems(Checkbox.Wcf.Services.Proxies.ReportItemInstanceData)">
            <summary>
            
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.MatrixSummaryItem.GetAdditionalData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.Items.SpssExportItem">
            <summary>
            SPSS export item
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.SpssExportItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="itemData"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="P:Checkbox.Analytics.Items.SpssExportItem.OptionTextOverrides">
            <summary>
            Get container for overriding option texts for export
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.SpssExportItem.GetOptionText(System.Int32,System.Int32)">
            <summary>
            Get the text of the option, first looking in text overrides table.
            </summary>
            <param name="itemID"></param>
            <param name="optionID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.SpssExportItem.SetOptionText(System.Int32,System.Int32,System.String)">
            <summary>
            Get/set option text.
            </summary>
            <param name="itemId"></param>
            <param name="optionId"></param>
            <param name="optionText"></param>
        </member>
        <member name="P:Checkbox.Analytics.Items.SpssExportItem.MergeSelectMany">
            <summary>
            Get whether to merge select many items for export.  Always false
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.SpssExportItem.AddColumns(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Guid},System.String)">
            <summary>
            Add columns
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.SpssExportItem.IncludeOpenEnded">
            <summary>
            Get whether to include open ended items in the export.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.Items.SpssExportItem.IncludeHidden">
            <summary>
            Get whether to include hidden items in SPSS exports.  Hidden items will
            be included if open-ended inputs are included.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.SpssExportItem.DetermineColumnTextForItem(Checkbox.Forms.Items.Configuration.ItemData,System.String)">
            <summary>
            Determine the text for a column
            </summary>
            <param name="itemData"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.SpssExportItem.AddColumnsForSelectItemOptions(System.Nullable{System.Int32},Checkbox.Forms.Items.Configuration.SelectItemData,System.String)">
            <summary>
            
            </summary>
            <param name="itemIdOverride"></param>
            <param name="itemData"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.SpssExportItem.AddColumnsForSelectItemOptions(Checkbox.Forms.Items.Configuration.SelectItemData,System.String,Checkbox.Forms.Items.Configuration.SelectItemData)">
            <summary>
            Add the options for a select item
            </summary>
            <param name="itemData"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.SpssExportItem.GetActualText(System.String)">
            <summary>
            Get actual text for a column.
            </summary>
            <param name="columnHeader"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.SpssExportItem.GetItemId(System.String)">
            <summary>
            Get id of item associated with column
            </summary>
            <param name="columnHeader"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.SpssExportItem.GetAnswerText(Checkbox.Analytics.Data.ItemAnswer,System.Int32)">
            <summary>
            Get the text of an answerf
            </summary>
            <param name="answerDataObject"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.SpssExportItem.AddColumnsForUploadItem(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.String)">
            <summary>
            Only add "upload item" columns when including open-ended results.
            </summary>
            <param name="itemData"></param>
            <param name="prefix"></param>
            <param name="textOverride"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.SpssExportItem.AddColumnsForRankOrder(Checkbox.Forms.Items.Configuration.ItemData,System.String)">
            <summary>
            
            </summary>
            <param name="itemData"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:Checkbox.Analytics.Items.SpssExportItem.AddColumnsForMatrixItem(Checkbox.Forms.Items.Configuration.MatrixItemData,System.String)">
            <summary>
            Add columns for a matrix item
            </summary>
            <param name="itemData"></param>
            <param name="prefix"></param>
        </member>
        <member name="T:Checkbox.Analytics.Items.TotalScoreItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Items.TotalScoreItem.ProcessData">
            <summary>
            Process the analysis data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.TotalScoreItem.GeneratePreviewData">
            <summary>
            Generate report preview data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.Items.TotalScoreItem.ProcessData(System.Boolean)">
            <summary>
            Process data
            </summary>
            <param name="isPreview"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.LightweightAnalysisTemplate">
            <summary>
            Lightweight representation of an analysis template suitable for
            authorization, security management purposes and populating lists.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.LightweightAnalysisTemplate.DateCreated">
            <summary>
            Get/set the date the template was created
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.LightweightAnalysisTemplate.DateModified">
            <summary>
            Get/set the date the template was last updated
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.LightweightAnalysisTemplate.CreatedBy">
            <summary>
            Get/set the name of creator
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.LightweightAnalysisTemplate.ID">
            <summary>
            Get/set the template id
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.LightweightAnalysisTemplate.Guid">
            <summary>
            Get/set the template Guid
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.LightweightAnalysisTemplate.Name">
            <summary>
            Get/set the template name
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.LightweightAnalysisTemplate.NameTextId">
            <summary>
            Get/set text id for title
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.LightweightAnalysisTemplate.StyleTemplateId">
            <summary>
            Get/set style template for report.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.LightweightAnalysisTemplate.ResponseTemplateId">
            <summary>
            Get/set response template report is associated with
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.LightweightAnalysisTemplate.ChartStyleId">
            <summary>
            Get/set id of chart style
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.LightweightAnalysisTemplate.DateFilterStart">
            <summary>
            Get/set start date for date filter
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.LightweightAnalysisTemplate.DateFilterEnd">
            <summary>
            Get/set end date for date filter
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.LightweightAnalysisTemplate.#ctor(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.LightweightAnalysisTemplate.GetEditor">
            <summary>
            Get a security editor for analysis templates
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Analytics.LightweightAnalysisTemplate.SupportedPermissionMasks">
            <summary>
            Get list of permission masks supported by analysis templates
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.LightweightAnalysisTemplate.SupportedPermissions">
            <summary>
            Get list of permissions supported by analysis templates
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.LightweightAnalysisTemplate.CreatePolicy(System.String[])">
            <summary>
            Create a security policy with the specified permissions
            </summary>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.AnalysisPage">
            <summary>
            Run time representation of a group of items (page) in a report.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisPage.#ctor(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Construct an AnalysisPage object.
            </summary>
            <param name="pageId"></param>
            <param name="position"></param>
            <param name="layoutTemplateId"></param>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisPage.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisPage.LayoutTemplateId">
            <summary>
            Get the id of the page layout template used by this page.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisPage.Items">
            <summary>
            Get the list of items on the page in order of appearance.  If randomization
            is on, the list will be randomized.
            </summary>
        </member>
        <member name="T:Checkbox.Analytics.AnalysisTemplateManager">
            <summary>
            Provides create, load, delete and copy management tasks for <see cref="T:Checkbox.Analytics.AnalysisTemplate"/> objects.
            The AnalysisTemplateManager can also create a temporary <see cref="T:Checkbox.Analytics.AnalysisTemplate"/> with the 
            sole purpose of exporting form responses in CSV or SPSS-Compatible CSV format.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplateManager.TemplateCache">
            <summary>
            Template cache manager
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.AddSourceItemToExportItem(Checkbox.Forms.Items.Configuration.ItemData,Checkbox.Analytics.Items.Configuration.ExportItemData)">
            <summary>
            Add a source response template item to the source items list of an Export item for CSV
            or SPSS-compatiable CSV export.
            </summary>
            <param name="sourceItemData">Response template item to add to CSV export.</param>
            <param name="exportItemData">Export item to add source item to.</param>
            <remarks>CSV exports are actually reports that contain a single <see cref="T:Checkbox.Analytics.Items.Configuration.ExportItemData"/> 
            that handles generating the list of export columns and getting the data for rows of the 
            export.  Loading the response data from the database is handled by the <see cref="T:Checkbox.Analytics.Analysis"/>
            that contains the <see cref="T:Checkbox.Analytics.Items.ExportItem"/>.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.ShowUserInputItemsForReport(System.Int32)">
            <summary>
             Show user input items for report
            </summary>
            <param name="responseTemplateId"></param>
            <returns>true when response value less that max in config</returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.GenerateXMLExportTemplate(Checkbox.Forms.ResponseTemplate,Checkbox.Analytics.Export.ExportOptions)">
            <summary>
            Generate a blank analysis template which is used to load response data for xml data export.
            </summary>
            <param name="responseTemplate"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.GenerateCSVExportTemplate(Checkbox.Forms.ResponseTemplate,Checkbox.Analytics.Export.ExportOptions)">
            <summary>
            Generate a template for exporting response data in CSV format.
            </summary>
            <param name="responseTemplate"><see cref="T:Checkbox.Forms.ResponseTemplate"/> to export response information for.</param>
            <param name="options">Additional export options</param>
            <returns>An <see cref="T:Checkbox.Analytics.AnalysisTemplate"/> containing a CSV export item configured to export the results of
            all answerable items in the specified <see cref="T:Checkbox.Forms.ResponseTemplate"/>.</returns>
            <remarks>An analysis template containing a single <see cref="T:Checkbox.Analytics.Items.Configuration.CSVExportItemData"/> object is created
            and configured to export the results of each item in the <see cref="T:Checkbox.Forms.ResponseTemplate"/> argument.  If a NULL 
            <see cref="T:Checkbox.Forms.ResponseTemplate"/> is passed as an argument, a NULL value is returned.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.GenerateSPSSExportTemplate(Checkbox.Forms.ResponseTemplate,Checkbox.Analytics.Export.ExportOptions)">
            <summary>
            Generate an <see cref="T:Checkbox.Analytics.AnalysisTemplate"/> configured to export response data in an SPSS compatible CSV format.
            </summary>
            <param name="responseTemplate"><see cref="T:Checkbox.Forms.ResponseTemplate"/> to export response information for.</param>
            <param name="options">Specific export options.</param>
            <returns>An <see cref="T:Checkbox.Analytics.AnalysisTemplate"/> containing a SPSS compatible CSV export item configured to export the results of
            all answerable items in the specified <see cref="T:Checkbox.Forms.ResponseTemplate"/>.</returns>
            <remarks>An analysis template containing a single <see cref="T:Checkbox.Analytics.Items.Configuration.SPSSExportItemData"/> object is created
            and configured to export the results of each item in the <see cref="T:Checkbox.Forms.ResponseTemplate"/> argument.  If a NULL 
            <see cref="T:Checkbox.Forms.ResponseTemplate"/> is passed as an argument, a NULL value is returned.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.GetAnalysisTemplateId(System.Guid)">
            <summary>
            Get id of analysis template based on its GUID
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.GetAnalysisTemplate(System.Guid)">
            <summary>
            Get the <see cref="T:Checkbox.Analytics.AnalysisTemplate"/> with the specified Guid.
            </summary>
            <param name="guid">GUID associated with the <see cref="T:Checkbox.Analytics.AnalysisTemplate"/>.</param>
            <returns><see cref="T:Checkbox.Analytics.AnalysisTemplate"/> associated with the provided guid.</returns>
            <remarks>Returns NULL if an <see cref="T:Checkbox.Analytics.AnalysisTemplate"/> with the specified GUID
            can't be located.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.GetAnalysisTemplate(System.Int32,System.Boolean)">
            <summary>
            Get the <see cref="T:Checkbox.Analytics.AnalysisTemplate"/> with the specified database id.
            </summary>
            <param name="analysisTemplateID">Database ID associated with the <see cref="T:Checkbox.Analytics.AnalysisTemplate"/>.</param>
            <param name="useCache"></param>
            <returns><see cref="T:Checkbox.Analytics.AnalysisTemplate"/> associated with the provided database id.</returns>
            <remarks>Returns NULL if an <see cref="T:Checkbox.Analytics.AnalysisTemplate"/> with the specified ID
            can't be located.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.GetAnalysisTemplateId(System.Int32,System.String)">
            <summary>
            Get the ID of a response template given it's name.
            </summary>
            <param name="responseTemplateId">ID of response template analysis template is associated with.</param>
            <param name="analysisTemplateName">Name of analysis template to get id for.</param>
            <returns>ID of response template.</returns>
            <remarks>Returns null if no analysis template with name found.  If multiple templates with name exists, returns 
            first matching name.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.GetLightweightAnalysisTemplate(System.Int32)">
            <summary>
            Get a lightweight <see cref="T:Prezza.Framework.Security.IAccessControllable"/> object that can be used as a proxy
            for performing security checks against the <see cref="T:Checkbox.Analytics.AnalysisTemplate"/> with the specified ID.
            </summary>
            <param name="analysisTemplateID">ID of the analysis template to get a  <see cref="T:Prezza.Framework.Security.IAccessControllable"/> proxy
            object for.</param>
            <returns><see cref="T:Prezza.Framework.Security.IAccessControllable"/> proxy for the <see cref="T:Checkbox.Analytics.AnalysisTemplate"/> with the 
            specified ID.</returns>
            <remarks>
            Loading an <see cref="T:Checkbox.Analytics.AnalysisTemplate"/> can be a computationally expensive process. This method provides a way
            to access Access Control List and Default Policy information for an <see cref="T:Checkbox.Analytics.AnalysisTemplate"/> object without
            the expense of loading the full object, which is useful when authorization checks need to be performed iteratively
            on a number of <see cref="T:Checkbox.Analytics.AnalysisTemplate"/> objects.
            </remarks>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.CreateAnalysisTemplate(System.String,System.Int32,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Creates a new, empty analysis and associates it with a form
            </summary>
            <param name="analysisName">The desired name for the new analysis</param>
            <param name="responseTemplateID">The ID of the form to associate this analysis with</param>
            <param name="creator">User prinicipal tha</param>
            <returns>An empty analysis template.</returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.AutoGenerateAnalysisTemplate(System.String,System.Int32,Checkbox.Analytics.Items.Configuration.AnalysisWizardOptions,System.Nullable{System.Int32},System.Int32,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Generate a report according the values defined in the AnalysisWizardOptions
            </summary>
            <param name="analysisName"></param>
            <param name="responseTemplateID"></param>
            <param name="options"></param>
            <param name="styleTemplateId"></param>
            <param name="chartStyleId"></param>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.GenerateAnalysisItemData(Checkbox.Analytics.Items.Configuration.AnalysisWizardOptions,Checkbox.Forms.ResponseTemplate,Checkbox.Analytics.AnalysisTemplate,Checkbox.Forms.Items.UI.AppearanceData,System.Nullable{System.Int32}@,System.Int32,System.Int32@,Checkbox.Forms.Items.Configuration.ItemData,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Generate an analysis item data by response item data
            </summary>
            <param name="options"></param>
            <param name="responseTemplate"></param>
            <param name="analysisTemplate"></param>
            <param name="chartStyleAppearance"></param>
            <param name="newPageId"></param>
            <param name="reportPagePosition"></param>
            <param name="itemPosition"></param>
            <param name="item"></param>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.GetAnalysisCountForSurvey(Checkbox.Security.Principal.CheckboxPrincipal,System.Int32,System.Collections.Generic.List{System.String},Checkbox.Security.PermissionJoin)">
            <summary>
            Returns a count of analysis templates the specified principal can view/edit for the specified response template.
            </summary>
            <param name="currentPrincipal"></param>
            <param name="responseTemplateId"></param>
            <param name="permissions"></param>
            <param name="permissionJoin"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.ListAnalysisTemplatesForSurvey(Checkbox.Security.Principal.CheckboxPrincipal,System.Int32)">
            <summary>
            Return a list of analysis templates the specified principal can view/edit for the specified response template.
            </summary>
            <param name="principal">User principal to get the list of analyses for.</param>
            <param name="responseTemplateID">The ID of the form to list analyses for.</param>
            <returns>A DataTable containing a list of analyses</returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.CleanupAnalysisTemplatesCacheForSurvey(Checkbox.Security.Principal.CheckboxPrincipal,System.Int32)">
            <summary>
            Deletes all analysis templates from the cache in the AnalysisTemplateManager
            </summary>
            <param name="principal"></param>
            <param name="responseTemplateID"></param>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.CleanupAnalysisTemplatesCache(System.Int32)">
            <summary>
            Deletes all analysis templates from the cache in the AnalysisTemplateManager
            </summary>
            <param name="analysisTemplateID"></param>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.ListAnalysisTemplatesForSurvey(Checkbox.Security.Principal.CheckboxPrincipal,System.Int32,Checkbox.Pagination.PaginationContext)">
            <summary>
            Returns a list of analyses associated with the given form
            </summary>
            <param name="currentPrincipal"></param>
            <param name="responseTemplateId">The ID of the form</param>
            <param name="paginationContext"></param>
            <returns>A DataTable containing a list of analyses</returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.ListViewableAnalysisTemplates(Checkbox.Security.Principal.CheckboxPrincipal,Checkbox.Pagination.PaginationContext)">
            <summary>
            Get a list of reports that can be viewed by a user
            </summary>
            <param name="currentPrincipal"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.DeleteAnalysisTemplate(Checkbox.Security.Principal.CheckboxPrincipal,System.Int32)">
            <summary>
            Delete the specified analysis template
            </summary>
            <param name="analysisTemplateID">ID of analysis template to delete.</param>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.GetAvailableTemplatesAndFolders(Checkbox.Security.Principal.CheckboxPrincipal,System.Nullable{System.Int32},Checkbox.Pagination.PaginationContext,System.Int32@)">
            <summary>
            Get ResponseTemplates and folders available to the logged-in user.
            </summary>
            <param name="currentPrincipal">Logged-in user.</param>
            <param name="parentFolderId"></param>
            <param name="context"></param>
            <param name="totalItemCount"></param>
            <returns><see cref="T:System.Data.DataSet"/> containing result.</returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.FilterTemplatesAndFolders(System.Data.DataSet,Checkbox.Security.Principal.CheckboxPrincipal,Checkbox.Pagination.PaginationContext,System.Int32@)">
            <summary>
            
            </summary>
            <param name="templateDataSet"></param>
            <param name="currentPrincipal"></param>
            <param name="context"></param>
            <param name="count"></param>
            <returns></returns>
            <remarks>Assumption is made that incoming data is already sorted.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.AnalysisTemplateExists(System.String,System.Int32)">
            <summary>
            Return a boolean indicating if an analysis template with the specified name exists
            for the specified response template
            </summary>
            <param name="name">Name to check.</param>
            <param name="responseTemplateID">Survey associated with analysis template.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.AnalysisTemplateExists(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Return a boolean indicating if an analysis template with the specified name exists
            for the specified response template, other than the known analysis template
            </summary>
            <param name="name">Name to check.</param>
            <param name="responseTemplateID">Survey associated with analysis template.</param>
            <param name="analysisTemplateID">ID of analysis template to ignore when searching for name matches.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.GetUniqueName(System.Int32,System.String,System.String)">
            <summary>
            Determines if a survey name is already in use and returns the next available unique name.
            The format of the unique name is Survey_Name Copy #.
            Returns the provided survey name if it is unique.
            </summary>
            <param name="ResponseTemplateID"></param>
            <param name="reportName"></param>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.CopyTemplate(System.Int32,System.String,Checkbox.Security.Principal.CheckboxPrincipal,System.String)">
            <summary>
            Copy the specified analysis template
            </summary>
            <param name="templateID">ID of analysis template to copy.</param>
            <param name="creator">User principal copying the template.</param>
            <param name="languageCode">Language code to use for setting new template title.</param>
            <returns>New copy of the analyis template.</returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.CanBeEdited(Checkbox.Analytics.LightweightAnalysisTemplate,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Determines if the report can be edited
            </summary>
            <param name="template"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.CanBeDeleted(Checkbox.Analytics.LightweightAnalysisTemplate,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Determines if the report can be deleted
            </summary>
            <param name="template"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplateManager.ListReportsByPeriod(Checkbox.Security.Principal.CheckboxPrincipal,Checkbox.Pagination.PaginationContext)">
            <summary>
            
            </summary>
            <param name="userPrincipal"></param>
            <param name="paginationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.AnalysisTemplate">
            <summary>
            Configuration data for reports associated with a survey.  At runtime, an analysis template acts as a factory for creating
            <see cref="T:Checkbox.Analytics.Analysis"/> objects that load and summarize response data for a survey.
            </summary>
        </member>
        <member name="F:Checkbox.Analytics.AnalysisTemplate._filters">
            <summary>
            A collection of <see cref="T:Checkbox.Analytics.Filters.AnalysisFilterCollection"/> applied at the top-level of analysis
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplate.ObjectTypeName">
            <summary>
            Object type name
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplate.LoadSprocName">
            <summary>
            Load sproc name
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.CreateConfigurationDataSet">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.#ctor">
            <summary>
            Construct a new instance of analysis template.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplate.Guid">
            <summary>
            Get the GUID associated with the analysis.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplate.StyleTemplateID">
            <summary>
            Get the ID of the style template associated with this analysis
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplate.ResponseTemplateID">
            <summary>
            Get/set response template id this analysis reports on responses to.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplate.DisplaySurveyTitle">
            <summary>
            Get whether the analysis template displays survey title
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplate.DisplayPdfExportButton">
            <summary>
            Get whether the analysis template displays pdf export button
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplate.IncludeIncompleteResponses">
            <summary>
            Get whether the analysis template includes incomplete responses
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplate.IncludeTestResponses">
            <summary>
            Get whether the analysis template includes test responses
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplate.IsDeleted">
            <summary>
            Get whether the analysis template has been deleted
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplate.NameTextID">
            <summary>
            Get the text id of the analysis name
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load analysis template data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.Create(System.Data.IDbTransaction)">
            <summary>
            Create a new analysis template in the database
            </summary>
            <param name="t">Transaction to participate in when inserting data.</param>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.Update(System.Data.IDbTransaction)">
            <summary>
            Update the analysis item in the database
            </summary>
            <param name="t">Transaction to participate in when updating data.</param>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.Delete(System.Data.IDbTransaction)">
            <summary>
            Delete the analysis from the database.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.GetEditor">
            <summary>
            Get a security editor object that can be used to modify the ACL and Default Policy for the analysis template.
            </summary>
            <returns>Security editor object initialized with the analysis template as it's secured resource.</returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.CreatePolicy(System.String[])">
            <summary>
            Create a policy for storing permissions for the analysis template.
            </summary>
            <param name="permissions">Permissions to add to the new policy.</param>
            <returns><see cref="T:Prezza.Framework.Security.Policy"/> configured with the specified filter.</returns>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplate.FilterStartDate">
            <summary>
            Minimum timestamp for completed responses to include in the analysis.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplate.FilterEndDate">
            <summary>
            Maximum timestamp for completed responses to include in the analysis.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplate.ChartStyleID">
            <summary>
            Get/set chart style id for chart style associated with the analysis tempate.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.CreateAnalysis(System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an instance of an analysis configured from this analysis template.
            </summary>
            <param name="languageCode">Language code to use for getting analysis text.</param>
            <param name="includeIncompleteResponses">Specify whether incomplete responses should be included in results.</param>
            <param name="includeTestResponses">Specify whether test responses should be included in results.</param>
            <returns>Loaded and configured <see cref="T:Checkbox.Analytics.Analysis"/> object.</returns>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.InitializeAccess(Prezza.Framework.Security.Policy,Prezza.Framework.Security.AccessControlList)">
            <summary>
            Initialize the access for the object
            </summary>
            <param name="defaultPolicy"></param>
            <param name="acl"></param>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.EnsureFilterCollection">
            <summary>
            Ensure filter collection exists and is initialized with report id
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.GetFilterDataObjects">
            <summary>
            Get a readonly collection containing analysis filters associated with this response template
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.AddFilter(Checkbox.Analytics.Filters.Configuration.FilterData)">
            <summary>
            Add a repoort-level filter to the analysis template.
            </summary>
            <param name="filter">Filter to add to the collection.</param>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.AddFilter(System.Int32)">
            <summary>
            Associated an  existing filter with the analysis tempate.
            </summary>
            <param name="filterID">Database ID of filter to associated with the template.</param>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.DeleteFilter(Checkbox.Analytics.Filters.Configuration.FilterData)">
            <summary>
            Remove the mapping between a filter and the analysis template.
            </summary>
            <param name="filter">Filter to remove mapping for.</param>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.DeleteFilter(System.Int32)">
            <summary>
            Remove the mapping between a filter and the analysis template.
            </summary>
            <param name="filterID">ID of filter to remove mapping for.</param>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.ClearFilters">
            <summary>
            Remove the mapping between all filter and the analysis template.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.SaveFilters">
            <summary>
            Save filter objects associated with this analysis template and save the filter to analysis template mapping information for
            this analysis template.
            </summary>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplate.DataTableName">
            <summary>
            Get the name of the data table for response template data
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.WriteTemplateData(System.Xml.XmlWriter)">
            <summary>
            Writes template data to the XML writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.WriteCustomTextData(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Checkbox.Analytics.AnalysisTemplate.ExportElementName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.LoadTemplateData(System.Xml.XmlNode)">
            <summary>
            Reads template data from the XML
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Analytics.AnalysisTemplate.LoadTemplateCustomTextData(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="T:Checkbox.Analytics.ResponseManager">
            <summary>
            Utility class for managing survey responses, including getting paged/filtered lists of responses for a survey, deleting responses, and counting responses.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetResponseList(System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,Checkbox.Pagination.PaginationContext,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32)">
             <summary>
             Return a <see cref="T:System.Data.DataTable"/> listing all survey responses that match the specified criteria.
             </summary>
             <param name="responseTemplateID">ID of the <see cref="T:Checkbox.Forms.ResponseTemplate"/> to list responses floor.</param>
            <param name="includeComplete"></param>
            <param name="includeIncomplete">Flag indicating if incomplete responses should be included in the list.</param>
            <param name="includeTest"></param>
            <param name="context"></param>
            <param name="minResponseCompletedDate"></param>
            <param name="maxResponseCompletedDate"></param>
            <param name="profileFieldId"></param>
            <returns>The following columns are contained the <see cref="T:System.Data.DataTable"/> returned by this query:
                 ResponseID              -- bigint               -- ID of the response
                 GUID                    -- uniqueidentifier     -- GUID associated with the response.
                 ResponseTemplateID      -- int                  -- Survey response is assciated with.
                 IsComplete              -- bit                  -- Flag indicating if the response is complete.
                 LastPageViewed          -- int                  -- Database ID of last page viewed by respondent.
                 Started                 -- datetime             -- Timestamp response was started.
                 Ended                   -- datetime             -- Timestamp response was completed.
                 IP                      -- varchar              -- IP Address of the respondent.
                 LastEdit                -- datetime             -- Timestamp marking when response was last saved.
                 NetworkUser             -- varchar              -- AD login of the network user principal 
                 Language                -- varchar              -- Language code for the response
                 UniqueIdentifier        -- varchar              -- Unique identifier of user taking the survey.
                 IsTest                  -- bit                  -- Flag indicating if the response was made in test mode.
            </returns>
            <remarks>Filtering is done using a LIKE %FilterValue% text comparison, so attempting to filter on numeric fields may not work as expected.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.ListResponsesForRespondent(Checkbox.Security.Principal.CheckboxPrincipal,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="userPrincipal"></param>
            <param name="responseTemplateId"></param>
            <param name="anonymizeResponses"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetPaginationContextForRespondent(Checkbox.Security.Principal.CheckboxPrincipal,System.Boolean)">
            <summary>
            
            </summary>
            <param name="userPrincipal"></param>
            <param name="anonymizeResponses"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetTestResponseList(System.Int32,System.Boolean,System.Boolean,Checkbox.Pagination.PaginationContext,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param name="responseTemplateID"></param>
            <param name="includeIncomplete"></param>
            <param name="includeComplete"></param>
            <param name="context"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetPageNumberByResponseId(System.Int64,System.Int32,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.String,System.Boolean,System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetPageNumberByResponseId(System.Int64,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.String,System.Boolean,System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetResponseListForInvitation(System.Int32,System.Boolean,Checkbox.Pagination.PaginationContext)">
            <summary>
            Get a list of responses for a specific survey invitation.
            </summary>
            <param name="invitationId"></param>
            <param name="includeIncomplete"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.BuildResponseList(System.Data.IDataReader)">
            <summary>
            Build response list from data reader
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.ResponseTemplateHasNonTestResponses(System.Int32)">
            <summary>
            Return a boolean indicating if the response template has any non-test (complete or not) 
            responses.
            </summary>
            <param name="responseTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetResponseCount(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Count the number of responses matching the specified filter information.
            </summary>
            <param name="responseTemplateID">ID of the <see cref="T:Checkbox.Forms.ResponseTemplate"/> to list responses floor.</param>
            <param name="includeIncomplete">Flag indicating if incomplete responses should be included in the list.</param>
            <param name="includeTest">Indicate whether to include "Test" responses in count.</param>
            <returns>Count of the number of responses matching the filter.</returns>
            <remarks>This method is mostly useful for user intefaces that display paged lists of respones where the number of matching
            responses is needed to calculate the total number of pages of results.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.DeleteResponses(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete the responses specified in the input list.
            </summary>
            <param name="responseIDs">IDs corresponding to responses to delete.</param>
            <remarks>Responses are "soft deleted" from the database, meaning they are flagged as deleted, but rows are not removed from the ckbx_Response
            or ckbx_ResponseAnswers tables.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.DeleteAllResponses(System.Int32)">
            <summary>
            Delete all responses for the specified survey.
            </summary>
            <param name="responseTemplateID">ID of survey to delete responses for.</param>
            <remarks>Responses are "soft deleted" from the database, meaning they are flagged as deleted, but rows are not removed from the ckbx_Response
            or ckbx_ResponseAnswers tables.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.DeleteAllTestResponses(System.Int32)">
            <summary>
            Delete all test responses for the specified survey.
            </summary>
            <param name="responseTemplateID">ID of survey to delete responses for.</param>
            <remarks>Responses are "soft deleted" from the database, meaning they are flagged as deleted, but rows are not removed from the ckbx_Response
            or ckbx_ResponseAnswers tables.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.DeleteUserResponses(System.String)">
            <summary>
            Delete all responses for the specified user.
            </summary>
            <param name="uniqueIdentifier">Unique identifier of the user.</param>
            <remarks>Responses are "soft deleted" from the database, meaning they are flagged as deleted, but rows are not removed from the ckbx_Response
            or ckbx_ResponseAnswers tables.</remarks>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.DoesAnswerBelongToResponse(System.Int64,System.Int64)">
            <summary>
             Check if the answer belongs to the response
            </summary>
            <param name="responseId">Response Id</param>
            <param name="answerId">Answer Id</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.ListResponseAnswers(System.Int64)">
            <summary>
            List all answers for a given response.
            </summary>
            <param name="responseId">Id of response to list answers for.</param>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.ListResponseAnswers(System.Guid)">
            <summary>
            List all answers for a given response.
            </summary>
            <param name="responseGuid">Guid of response to list answers for.</param>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.UpdateResponseAnswer(System.Int64,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Updates response answers
            </summary>
            <param name="answerId"></param>
            <param name="answerText"></param>
            <param name="optionID"></param>
            <param name="dateCreated"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetResponseDataRow(System.Int64)">
            <summary>
            Get a row of data for a specific response.
            </summary>
            <param name="responseId">Id of response to get data row for.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetResponseDataRow(System.Guid)">
            <summary>
            Get a row of data for a specific response.
            </summary>
            <param name="responseGuid">Guid of response to get data row for.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetSurveyIdFromResponseId(System.Int64)">
            <summary>
            Get the id of a survey based on the id of a response.
            </summary>
            <param name="responseId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetSurveyIdFromResponseGuid(System.Guid)">
            <summary>
            Get the id of a survey based on the id of a response.
            </summary>
            <param name="responseGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetSurveyIdFromWorkflowSessionGuid(System.Guid)">
            <summary>
            Get the id of a survey based on the id of a response.
            </summary>
            <param name="responseGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetMinMaxResponseDates(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime}@,System.Nullable{System.DateTime}@)">
            <summary>
            Get min/max response dates for a survey.
            </summary>
            <param name="responseTemplateId"></param>
            <param name="invitationId"></param>
            <param name="minDate"></param>
            <param name="maxDate"></param>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetResponseHistogram(System.Nullable{System.Int32},System.Nullable{System.Int32},System.DateTime,System.DateTime,System.String)">
            <summary>
            Get a data set containing a response count historam.
            </summary>
            <param name="responseTemplateId"></param>
            <param name="invitationId"></param>
            <param name="minDate"></param>
            <param name="maxDate"></param>
            <param name="granularity"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetResponseGuidBySessionGuid(System.Guid)">
            <summary>
            Get a response guid by session guid
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetSessionIdByResponseGuid(System.Guid)">
            <summary>
            Get a response guid by session guid
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetResponseData(System.Guid)">
            <summary>
            Get a response data using the response GUID
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Analytics.ResponseManager.GetResponseData(System.Int64)">
            <summary>
            Get a response data using the response GUID
            </summary>
            <param name="responseId"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Analytics.Security.AnalysisPolicy">
            <summary>
            Summary description for AnalysisPolicy.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Security.AnalysisPolicy.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Security.AnalysisPolicy.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="permissions">permissions set for this instance</param>
        </member>
        <member name="T:Checkbox.Analytics.Security.AnalysisSecurityEditor">
            <summary>
            Summary description for AnalysisSecurityEditor.
            </summary>
        </member>
        <member name="M:Checkbox.Analytics.Security.AnalysisSecurityEditor.#ctor(Prezza.Framework.Security.IAccessControllable)">
            <summary>
            Default constructor.
            </summary>
            <param name="analysis">Analysis object to edit security for.</param>
        </member>
        <member name="P:Checkbox.Analytics.Security.AnalysisSecurityEditor.RequiredEditorPermission">
            <summary>
            Get required permission to manage report security
            </summary>
        </member>
        <member name="T:Checkbox.Configuration.StaticConfiguration">
            <summary>
            Stores unchangable settings
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.StaticConfiguration.DisableForeighMembershipProviders">
            <summary>
            Restricts using of any providers except native CheckboxMembershipProviders
            </summary>
        </member>
        <member name="T:Checkbox.Configuration.Install.ApplicationInstaller">
            <summary>
            </summary>
        </member>
        <member name="F:Checkbox.Configuration.Install.ApplicationInstaller._rootFolder">
            <summary>
            Version to install information
            </summary>
        </member>
        <member name="F:Checkbox.Configuration.Install.ApplicationInstaller._installedVersion">
            <summary>
            Currently installed version information
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.#ctor(System.String)">
            <summary>
            Default constructor, automatically determines whether this is a new install or upgrade
            </summary>
            <param name="rootFolder"></param>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Construct a new application installer
            </summary>
            <param name="root"></param>
            <param name="forceNew"></param>
            <param name="provider"></param>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.InstallType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.RootFolder">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.DatabaseProvider">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.LoadExistingInstallInformation">
            <summary>
            Load information about the current installation (if any)
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.LoadInstallFilesAndScripts">
            <summary>
            Load information from the install files
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.LoadFilesAndScriptsByType(System.String,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{Checkbox.Configuration.Install.InstallFileInfo}@)">
            <summary>
            Load files by type
            </summary>
            <param name="installType">Type of the files. Describes node name that contains a group of scripts</param>
            <param name="dbInstallScripts"></param>
            <param name="installFiles"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.WasUpgradedFromUltimateSurvey3">
            <summary>
            Return a boolean indicating if checkbox was upgraded from ultimate survey.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.IsModuleInstalled(System.String,System.String)">
            <summary>
            Get the information for the installed module information
            </summary>
            <param name="productName"></param>
            <param name="moduleName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.SetupDatabase(System.String@)">
            <summary>
            Perform the database portion of the product install
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.ValidateAndRunScripts(System.String,System.Collections.Generic.List{System.String},System.String@)">
            <summary>
            Validates and runs all scripts using the given connection string
            </summary>
            <param name="dbInstallScripts"></param>
            <param name="status"></param>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.SaveSettings(System.String@)">
            <summary>
            Saves the settings
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="F:Checkbox.Configuration.Install.ApplicationInstaller._dbSettings">
            <summary>
            Dictionary with all settings that should be set to the database
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.AddSetting(System.String,System.String)">
            <summary>
            Adds a setting
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.ReadScriptBlocks(System.String)">
            <summary>
            Read all blocks from sql file
            </summary>
            <param name="sqlScript"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.RunDBScriptFile(System.String,System.String,System.String@)">
            <summary>
            Run the specified script file
            </summary>
            <param name="sqlScript"></param>
            <param name="status"></param>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.ExecuteSqlString(System.String,System.String)">
            <summary>
            Execute the specified SQL string
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.UpdateConfigurationFiles(System.String@)">
            <summary>
            Update the application configuration files.
            </summary>
            <param name="status">Status of the operation.</param>
            <returns>Boolean indicating if the operation was successful.</returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.MarkInstallSuccess(System.String@)">
            <summary>
            Update the application configuration files.
            </summary>
            <param name="status">Status of the operation.</param>
            <returns>Boolean indicating if the operation was successful.</returns>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.InstallSuccess">
            <summary>
            Get install success
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.UpdateWebConfig(System.String@)">
            <summary>
            
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.UpdateWebConfigSetting(System.String,System.String)">
            <summary>
            Update the web.config
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.UpdateWebConfigConnectionStringSetting(System.String,System.String)">
            <summary>
            Update the web.config connection string with the specified name
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.AddDefaultAdminUser(System.String,System.String,System.String,System.String@)">
            <summary>
            Add admin user
            </summary>
            <param name="name"></param>
            <param name="password"></param>
            <param name="status"></param>
            <param name="scriptFile"></param>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.UpdateWebConfigServiceHostUrls">
            <summary>
            Update the web.config connection string with the specified name
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.UpdateWebConfigServiceClientUrls">
            <summary>
            Update the web.config connection string with the specified name
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.Name">
            <summary>
            Get the name of the product.
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.IsSlaAccepted">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.Version">
            <summary>
            Get the version of the product
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.IsNewInstall">
            <summary>
            Get whether this is a new install
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.InstalledProductID">
            <summary>
            Get the id of the installed product
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.InstalledModules">
            <summary>
            Get a list of installed modules
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.GetInstalledModuleInfo(System.String)">
            <summary>
            Get the information for the specified module
            </summary>
            <param name="moduleName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.GetAvailableModuleInfo(System.String)">
            <summary>
            Get the information for the specified module
            </summary>
            <param name="moduleName"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.AvailableModules">
            <summary>
            Get a list of modules available to install
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.InstalledPatches">
            <summary>
            Get a list of installed patches
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.AvailablePatches">
            <summary>
            Get a list of patches available for this installation
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.InstallConnectionString">
            <summary>
            Get/set the connection string for the install
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.EmailDBConnectionString">
            <summary>
            Get/set the connection string for the Messaging Service Database
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.AppConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.ApplicationURL">
            <summary>
            Get/set the URL of the application.
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.ApplicationRoot">
            <summary>
            Get/set the application virtual folder name
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.ProductName">
            <summary>
            The product name
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.AdminUserName">
            <summary>
            Admin user name
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.AdminPassword">
            <summary>
            Admin password
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.ProductVersion">
            <summary>
            The product version
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.ApplicationAssemblyShortVersion">
            <summary>
            The application assembly short version
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.ApplicationAssemblyVersion">
            <summary>
            The application assembly version
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.InstallDatabase">
            <summary>
            Installation behavior flags
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.SQLServerName">
            <summary>
            SQL Server-specific install properties
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.CheckPrerequisite(System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean)">
            <summary>
            Check the specified prerequisite
            </summary>
            <param name="preReqName"></param>
            <param name="preReqVersions"></param>
            <param name="installedProductName"></param>
            <param name="installedProductVersion"></param>
            <param name="requireVersionMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.CompareVersions(System.String,System.String,System.Boolean)">
            <summary>
            Compares the version number required to the currently installed version number
            </summary>
            <param name="preReqVersion"></param>
            <param name="installedProductVersion"></param>
            <param name="requireExactMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.TestDBConnectivity(System.String,System.String@)">
            <summary>
            Tests that database is available
            </summary>
            <param name="connectionString"></param>
            <param name="statusMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.TestForExistingMailDatabase(System.String)">
            <summary>
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.TestForExistingDatabase(System.String,System.Nullable{System.Int32}@)">
            <summary>
            Test for the presence of an existing Checkbox database
            </summary>
            <param name="connectionString">Connection string to the database</param>
            <param name="previousVersion"> </param>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.CreateDbInstallSelector(System.String)">
            <summary>
            Create a List database provider names that contain the sql scripts to for installation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.LoadInstallEmailFilesAndScripts(System.String)">
            <summary>
            Loads files and scripts for email database setup
            </summary>
            <param name="installType"></param>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.UpgradeIsNeededForEmailDB">
            <summary>
            Checks if the update is needed for email db
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.InstallIsNeededForEmailDB">
            <summary>
            Checks if the install is needed for email db
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.ApplicationAssemblyFullVersion">
            <summary>
             The application assembly full version
             </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.DropEmailDatabaseData(System.String@)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ApplicationInstaller.RunEMailDatabaseScripts(System.String@)">
            <summary>
            Runs email db install scripts
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.CurrentPatchVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ApplicationInstaller.CachedApplicationInstaller">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Configuration.Install.InstallFileInfo">
            <summary>
            Container for information about files to copy, etc.
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.InstallFileInfo.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="sourcePath">Source path of the file(s) to copy.</param>
            <param name="destinationPath">Destination path of the file(s) to copy.</param>
        </member>
        <member name="P:Checkbox.Configuration.Install.InstallFileInfo.SourcePath">
            <summary>
            Source Path of the file(s) to copy.
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.InstallFileInfo.DestinationPath">
            <summary>
            Destination path of the file(s) to copy.
            </summary>
        </member>
        <member name="T:Checkbox.Configuration.Install.ModuleInfo">
            <summary>
            Container and getter for available modules
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.ModuleInfo.GetAvailableModules(System.String)">
            <summary>
            Static Get of Available Modules
            </summary>
            <param name="rootSearchPath"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ModuleInfo.GetModuleInfo(System.String,System.String,System.String)">
            <summary>
            Get an instance of a module info based on the name/version passed
            </summary>
            <param name="moduleName"></param>
            <param name="moduleVersion"></param>
            <param name="searchPath"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ModuleInfo.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor of a module info object
            </summary>
            <param name="doc"></param>
        </member>
        <member name="P:Checkbox.Configuration.Install.ModuleInfo.Name">
            <summary>
            Get the module name
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ModuleInfo.Description">
            <summary>
            Get a short description of the module
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ModuleInfo.Version">
            <summary>
            Get the version of the module
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ModuleInfo.Features">
            <summary>
            Get a list of features of the installed module
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ModuleInfo.SetupURL">
            <summary>
            Get the URL to use as the setup URL
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ModuleInfo.SetupInstructionsUrl">
            <summary>
            Get the URL for the setup instructions
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ModuleInfo.Files">
            <summary>
            Files associated with module installation
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ModuleInfo.DatabaseScripts">
            <summary>
            DB scripts to run
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ModuleInfo.PreRequisiteProduct">
            <summary>
            Get the product prerequisite for this module
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ModuleInfo.PreRequisiteProductVersions">
            <summary>
            Get the version prerequisite for this module
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.ModuleInfo.CompareTo(Checkbox.Configuration.Install.ModuleInfo)">
            <summary>
            Compare
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.ModuleInfo.CompareTo(System.String)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Configuration.Install.PatchInfo">
            <summary>
            Container class and getter for available patch information.
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.PatchInfo.GetAvailablePatches(System.String)">
            <summary>
            Get a list of patches available in the specified path.
            </summary>
            <param name="rootSearchPath"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.PatchInfo.GetPatchInfo(System.String,System.String)">
            <summary>
            Get a patch info object with the specified name/description
            </summary>
            <param name="name"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.PatchInfo.#ctor(System.Xml.XmlDocument)">
            <summary>
            Private constructor
            </summary>
            <param name="doc"></param>
        </member>
        <member name="P:Checkbox.Configuration.Install.PatchInfo.PatchInfoDoc">
            <summary>
            Get an XML document for patch info.
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.PatchInfo.Name">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.PatchInfo.Description">
            <summary>
            Get the description of the patch
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.PatchInfo.SetupURL">
            <summary>
            Get the setup URL for the patch
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.PatchInfo.SetupInstructionsUrl">
            <summary>
            Get the URL for the setup instructions
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.PatchInfo.Fixes">
            <summary>
            Get the list of items fixed for the patch
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.PatchInfo.KnownIssues">
            <summary>
            Get the list of known issue for the patch
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.PatchInfo.PreRequisiteProduct">
            <summary>
            Get the product prerequisite for this patch
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.PatchInfo.PreRequisiteProductVersions">
            <summary>
            Get the version prerequisite for this patch
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.PatchInfo.PreRequisiteModule">
            <summary>
            Get the product prerequisite for this patch
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.PatchInfo.PreRequisiteModuleVersions">
            <summary>
            Get the version prerequisite for this patch
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.PatchInfo.GetFiles(System.String)">
            <summary>
            Files associated with module installation
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.PatchInfo.GetDatabaseScripts(System.String)">
            <summary>
            DB scripts to run
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.PatchInfo.Version">
            <summary>
            Version patch upgrades to
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.PatchInfo.UpdateGraphs(System.String)">
            <summary>
            Update WebChart graphs to Dundas charts
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.PatchInfo.UpdateGlobalizationConfig(System.String)">
            <summary>
            Update Globalization configuration if necessary
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.PatchInfo.InstallStyles(System.String)">
            <summary>
            Install style templates if necessary
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.PatchInfo.UpdateDbProfileSecurityConfig(System.String)">
            <summary>
            Update Config/Security.xml file to remove DbProfileProvider
            </summary>
            <param name="currentVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.PatchInfo.UpdateLdapSecurityConfig(System.String)">
            <summary>
            Update Config/Security.xml file to include LDAPAuthenticationProvider
            </summary>
            <param name="currentVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.Install.PatchInfo.CompareTo(Checkbox.Configuration.Install.PatchInfo)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Configuration.Install.ProductInfo">
            <summary>
            Simple container for product information
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.ProductInfo.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="version"></param>
        </member>
        <member name="P:Checkbox.Configuration.Install.ProductInfo.Name">
            <summary>
            Get/set the name of the product
            </summary>
        </member>
        <member name="P:Checkbox.Configuration.Install.ProductInfo.Version">
            <summary>
            Get/set the version of the product
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.Install.ProductInfo.CompareTo(Checkbox.Configuration.Install.ProductInfo)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Configuration.ConfigurationValidator">
            <summary>
            Validator for checkbox framework and application configuration files.
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.ConfigurationValidator.ValidateConfiguration(System.String,System.String@)">
            <summary>
            Validate all checkbox XML configuration files.  Only files currently part of the active configuration will
            be validated, i.e. only files referenced by the web.config or other configuration files will be validated.
            </summary>
            <param name="appRoot">Path to the application web.config</param>
            <param name="status">String that will contain status messages.</param>
            <returns>True of the configuration is successfully validated, false otherwise.</returns>
            <remarks>The output status string will provide detail for any success or failures.</remarks>
        </member>
        <member name="M:Checkbox.Configuration.ConfigurationValidator.LoadClass(System.String,System.String@)">
            <summary>
            Attempt to create an instance of the specified type.
            </summary>
            <param name="typeName">Fully qualified type name for the type.</param>
            <param name="loadStatus">Status message populated on error.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Checkbox.Configuration.ConfigurationValidator.ValidateFile(System.String,System.String,System.Xml.XmlNamespaceManager,System.String@)">
            <summary>
            Validte the configuration of a specific file.
            </summary>
            <param name="appRoot"></param>
            <param name="filePath">Path to the configuration file.</param>
            <param name="fileStatus">Status of the operation.</param>
            <param name="ns">XmlNamespace Manager</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="T:Checkbox.Configuration.ConfigurationWriter">
            <summary>
            Class to modify system configuration
            </summary>
        </member>
        <member name="M:Checkbox.Configuration.ConfigurationWriter.UpdateConfigFiles(System.String,System.String,System.String,System.String,System.String@)">
            <summary>
            Set the file paths to be in the applicationConfigFolder
            </summary>
            <param name="applicationFolder">Folder where the application is installed.</param>
            <param name="applicationConfigFolder">Folder where the appliation configuration files are placed.</param>
            <param name="connectionString">The database connection string.</param>
            <param name="dbProvider"></param>
            <param name="status">Status of the operation</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Checkbox.Configuration.ConfigurationWriter.UpdateDatabaseConfiguration(System.String,System.String,System.String@)">
            <summary>
            Updates the database provider in the database configuration file
            </summary>
            <param name="applicationConfigFolder"></param>
            <param name="dbProvider"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.ConfigurationWriter.UpdateWebConfig(System.String,System.String,System.String@)">
            <summary>
            Updates references from the web.config file to external configuration files to reflect the local environment
            </summary>
            <param name="applicationFolder"></param>
            <param name="applicationConfigFolder"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Configuration.ConfigurationWriter.UpdateFilePath(System.Xml.XmlNode,System.String,System.String@)">
            <summary>
            Update file path
            </summary>
            <param name="configNode"></param>
            <param name="applicationConfigFolder"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.AutocompleteListManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.AutocompleteListManager.ListPredefinedLists">
            <summary>
            Returns a dictionary with listIds and list names
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.AutocompleteListManager.ListCustomListNames">
            <summary>
            Returns a dictionary with listIds and list names
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.AutocompleteListManager.ListAllListNames">
            <summary>
            Returns a dictionary with listIds and list names
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.AutocompleteListManager.ListItems(System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.AutocompleteListManager.CreateList(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.AutocompleteListManager.EditList(System.Int32,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="listId"></param>
            <param name="name"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.CachableResponse.ResponseState">
            <summary>
            The state
            </summary>
        </member>
        <member name="P:Checkbox.Forms.CachableResponse.RulesEngine">
            <summary>
            The rules
            </summary>
        </member>
        <member name="P:Checkbox.Forms.CachableResponse.Respondent">
            <summary>
            Respondent
            </summary>
        </member>
        <member name="P:Checkbox.Forms.CachableResponse.VisitedPages">
            <summary>
            Visited Pages
            </summary>
        </member>
        <member name="P:Checkbox.Forms.CachableResponse.ResponsePipes">
            <summary>
            Response Pipes
            </summary>
        </member>
        <member name="P:Checkbox.Forms.CachableResponse.PipeMediator">
            <summary>
            Pipe Mediator
            </summary>
        </member>
        <member name="P:Checkbox.Forms.CachableResponse.NextPagePump">
            <summary>
            Next page number
            </summary>
        </member>
        <member name="P:Checkbox.Forms.CachableResponse.LanguageCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.CachableResponse.CurrentPageIndex">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.CacheContext">
            <summary>
            Cache context for the one request to the server
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Data.BasicItemMetaData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Data.LightweightItemMetaData">
            <summary>
            Lightweight container to store meta data information for items contained in a survey being reported on.
            </summary>
            <remarks><see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/> and <see cref="T:Checkbox.Forms.Items.Configuration.ListData" /> objects are fairly
            heavyweight and often contain internal <see cref="T:System.Data.DataSet"/> to store their data.  Since report data may be cached, and therefore serialized in
            multi-machine/process environments, this serves as a more efficient container class to use for reporting.</remarks>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.TextDictionary">
            <summary>
            Text dictionary
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.Options">
            <summary>
            Get a list containing the database Ids of all options associated with the item.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.PopulatedLanguages">
            <summary>
            Get list of languages populated for the item. For sake of efficiency, items are only populated with text of "active" survey
            languages and this value is used to validate item text in cases where active languages list has changed between when item
            is cached and when item is accessed.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.Children">
            <summary>
            Get a list containing the database Ids of all children of this item.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.IsAnswerable">
            <summary>
            Get/set whether item supports answers or not
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.RequiresAnswer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.IsScored">
            <summary>
            Get/set whether item supports score values
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.PagePosition">
            <summary>
            Get/set position of page containing item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.ItemPosition">
            <summary>
            Get/set position of item on containing page
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.Coordinate">
            <summary>
            Get/set item coordinate if item is a child.  NULL for non-child items
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.GetMatrixRowText(System.String)">
            <summary>
            Get/set text of row containing this item, if item is child of a matrix
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.SetMatrixRowText(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="languageCode"></param>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.MatrixRowAlias">
            <summary>
            Get/set alias of row containing this item, if item is child of matrix
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.PositionText">
            <summary>
            Get position text for item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.ItemId">
            <summary>
            Get/set the database Id of the item.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.GetText(System.String)">
            <summary>
            Get  the text of the item.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.SetDescription(System.String,System.String)">
            <summary>
            Set item descrpition
            </summary>
            <param name="languageCode"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.GetDescription(System.String)">
            <summary>
            Get  the description of the item.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.SetText(System.String,System.String)">
            <summary>
            Set item text
            </summary>
            <param name="languageCode"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.TemplateId">
            <summary>
            Get/set id of template item belongs to
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.Alias">
            <summary>
            Get/set item alias.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.ItemType">
            <summary>
            Get/set the type of the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.AncestorId">
            <summary>
            Get/set id of this item's parent.
            </summary>
            <remarks>In a non-customized environment, this value represents the ID of a matrix item that contains this child item.  If this item is a 
            standalone item, the ancestor id value will be 0 or negative.</remarks>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.AllowOther">
            <summary>
            Get/set whether this item supports "other" options.
            </summary>
            <remarks>This is applicable only to Select items, such as Drop Down Lists, Checkboxes, Radio Buttons, and Rating Scales.</remarks>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.RowCount">
            <summary>
            Matrix only
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.ColumnCount">
            <summary>
            Matrix only
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.GetColumnType(System.Int32)">
            <summary>
            Matrix only
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.GetColumnPrototypeID(System.Int32)">
            <summary>
            Matrix only
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.GetRowPkItemId(System.Int32)">
            <summary>
            Matrix only
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.GetRowType(System.Int32)">
            <summary>
            Matrix only
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.RowTypes">
            <summary>
            Get row types dictionary
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.ColumnTypes">
            <summary>
            Get column types dictionary
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.ColumnPrototypeIds">
            <summary>
            Get column types dictionary
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.RowKeyItems">
            <summary>
            Get column types dictionary
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.ChildCoordinates">
            <summary>
            Get column types dictionary
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.AddColumn(System.Int32,System.Int32,System.String)">
            <summary>
            Add column type
            </summary>
            <param name="columnNumber"></param>
            <param name="columnPrototypeId"></param>
            <param name="type"></param>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.AddRow(System.Int32,System.Int32,System.String)">
            <summary>
            Add row type
            </summary>
            <param name="rowNumber"></param>
            <param name="rowKeyItemId"></param>
            <param name="type"></param>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.SetChildCoordinate(System.Int32,Prezza.Framework.Common.Coordinate)">
            <summary>
            Get child coordinates
            </summary>
            <param name="childItemId"></param>
            <param name="coordinate"></param>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.GetChildCoordinate(System.Int32)">
            <summary>
            Get coordinate of child item
            </summary>
            <param name="childItemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.GetAlias">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.GetText(System.Boolean,System.String)">
            <summary>
            Get the text or alias of the item, depending in the <paramref name="preferAlias"/> parameter value.  If the text is requested, but not found
            the method will fall back to returning the description and, if no description exists, returning the alias.
            </summary>
            <param name="preferAlias">Indicate whether the alias is the prefered value to return.</param>
            <param name="languageCode">Language code for teaxt</param>
            <returns>Item text or alias as indicated by <paramref name="preferAlias"/> parameter value.</returns>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightItemMetaData.LastModified">
            <summary>
            Get/set last-modified date for the item.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.Validate">
            <summary>
            Validate that the data is not out of date.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightItemMetaData.Clone">
            <summary>
            Clone item
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Data.LightweightOptionMetaData">
            <summary>
            Lightweight container to store meta data information for item options contained in a survey being reported on.
            </summary>
            <remarks><see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/> and <see cref="T:Checkbox.Forms.Items.Configuration.ListData" /> objects are fairly
            heavyweight and often contain internal <see cref="T:System.Data.DataSet"/> to store their data.  Since report data may be cached, and therefore serialized in
            multi-machine/process environments, this serves as a more efficient container class.</remarks>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightOptionMetaData.TextDictionary">
            <summary>
            Text dictionary
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightOptionMetaData.ItemId">
            <summary>
            Get/set the database Id of the item the option is associated with.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightOptionMetaData.OptionId">
            <summary>
            Get/set the id of the option.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightOptionMetaData.Position">
            <summary>
            Option position
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightOptionMetaData.GetText(System.String)">
            <summary>
            Get/set the text of the option.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightOptionMetaData.SetText(System.String,System.String)">
            <summary>
            Set option text
            </summary>
            <param name="languageCode"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightOptionMetaData.Points">
            <summary>
            Get/set the point value of the option.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightOptionMetaData.IsOther">
            <summary>
            Get/set whether the option is an "other" option or not.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Data.LightweightOptionMetaData.Alias">
            <summary>
            Get/set the option alias.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.LightweightOptionMetaData.GetText(System.Boolean,System.String)">
            <summary>
            Get the text or alias of the option, depending in the <paramref name="preferAlias"/> parameter value.  If the text is requested, but not found
            the method will fall back to returning the alias and vice versa.
            </summary>
            <param name="preferAlias">Indicate whether the alias is the prefered value to return.</param>
            <param name="languageCode">Language for text.</param>
            <returns>Option text or alias as indicated by <paramref name="preferAlias"/> parameter value.</returns>
        </member>
        <member name="T:Checkbox.Forms.Data.SurveyMetaDataProxy">
            <summary>
            Proxy class for faster, cached access to survey item and option meta data used
            in many places in the application where full item or response template configuration
            is not necessary.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.#cctor">
            <summary>
            Static constructor to initialize cache manager
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GenerateItemCacheKey(System.Int32)">
            <summary>
            Generate a cache key for survey items
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GenerateSurveyRulesCacheKey(System.Int32)">
            <summary>
            Generate a cache key for survey items
            </summary>
            <param name="surveyId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GenerateRuleDataServiceCacheKey(System.Int32)">
            <summary>
            Generate a cache key for survey items
            </summary>
            <param name="surveyId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GenerateItemOptionCacheKey(System.Int32)">
            <summary>
            Generate a cache key for item options.
            </summary>
            <param name="optionId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GenerateListOptionDataCacheKey(System.Int32)">
            <summary>
            Generate a cache key for item options.
            </summary>
            <param name="optionId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetItemFromCache(System.Int32,System.Boolean)">
            <summary>
            Check to see if an item is valid.  An item will be considered invalid if the template
            that contains it has a modified date later than the reference date of the item's mapping.
            If the item is valid and contained in the cache, it will be returned.  Otherwise
            a null value will be returned.
            </summary>
            <param name="itemId"></param>
            <param name="skipDateValidation"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetListOptionDataFromCache(System.Int32)">
            <summary>
            Get an option from the option cache.  An option will be considered invalid if the template
            that contains the item that contains it has a modified date later than the reference date 
            of the item's mapping.   If the item is valid and contained in the cache, it will be
            returned.  Otherwise a null value will be returned.
            </summary>
            <param name="optionId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.AddListOptionDataToCache(Checkbox.Forms.Items.Configuration.ListOptionData)">
            <summary>
            Add a lightweight item to the cache.
            </summary>
            <param name="listOptionData"></param>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.AddItemToCache(Checkbox.Forms.Data.LightweightItemMetaData)">
            <summary>
            Add a lightweight item to the cache.
            </summary>
            <param name="lightweightItem"></param>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetOptionFromCache(System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Get an option from the option cache.  An option will be considered invalid if the template
            that contains the item that contains it has a modified date later than the reference date 
            of the item's mapping.   If the item is valid and contained in the cache, it will be
            returned.  Otherwise a null value will be returned.
            </summary>
            <param name="optionId"></param>
            <param name="itemId">If null, do not check item freshness</param>
            <param name="skipDateValidation"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.AddOptionToCache(Checkbox.Forms.Data.LightweightOptionMetaData)">
            <summary>
            Add a lightweight item to the cache.
            </summary>
            <param name="lightweightOption"></param>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.RemoveItemFromCache(System.Int32)">
            <summary>
            Remove an item and it's options from the cache.  Child
            item are not automatically removed.
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetItemData(System.Int32,System.Boolean,Checkbox.Forms.ResponseTemplate)">
            <summary>
            Attempt to more efficiently get item data by loading item data object from template.  Assumes that all children will be retrieved after parents
            are loaded and children will therefore be in the cache.  Makes no provision for loading children not yet in cache.
            </summary>
            <param name="itemId"></param>
            <param name="skipDateValidation"></param>
            <param name="containingTemplate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetItemData(System.Int32,System.Boolean)">
            <summary>
            Get data for an item.
            </summary>
            <param name="itemId"></param>
            <param name="skipDateValidation"></param>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetItemData(System.Int32,System.Boolean,Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Get data for an item.
            </summary>
            <param name="itemId"></param>
            <param name="skipDateValidation"></param>
            <param name="itemData"></param>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.LoadItemData(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Given an item data object, load
            </summary>
            <param name="itemData"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetOptionData(System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Get data for an option.
            </summary>
            <param name="itemId">ID of parent item.</param>
            <param name="optionId">ID of option.</param>
            <param name="skipDateValidation"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetListOptionData(System.Int32)">
            <summary>
            Get data for an option.
            </summary>
            <param name="optionId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.LoadItemData(Checkbox.Forms.Items.Configuration.ItemData,System.Boolean)">
            <summary>
            Load data for an item
            </summary>
            <param name="itemData"></param>
            <param name="populateText"></param>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.PopulateMatrixItemDetails(Checkbox.Forms.Data.LightweightItemMetaData,Checkbox.Forms.Items.Configuration.MatrixItemData)">
            <summary>
            
            </summary>
            <param name="lightweightItemMetaData"></param>
            <param name="itemData"></param>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.PopulateItemText(Checkbox.Forms.Data.LightweightItemMetaData,Checkbox.Forms.Items.Configuration.ItemData,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Populate text for items.  Should generally not be called for children of matrix items.  Children should be loaded with the matrix item
            which loads text data more efficiently.
            </summary>
            <param name="lightweightItemMetaData"></param>
            <param name="itemData"></param>
            <param name="languageCodes"></param>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.CreateLightweightItemMetaDataObject(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Create a report item data object for the given item data
            </summary>
            <param name="itemData">Data to create</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.CreateLightweightOptionMetaDataObject(Checkbox.Forms.Items.Configuration.ListOptionData)">
            <summary>
            Create a report option data object based on the list option data.
            </summary>
            <param name="listOptionData"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.LoadItemChildren(Checkbox.Forms.Data.LightweightItemMetaData,Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Load the ancestors table for this item
            </summary>
            <param name="lightweightParentItemData"></param>
            <param name="parentItemData"></param>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.CheckIfItemIsMatrixSubheader(Checkbox.Forms.Data.LightweightItemMetaData,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.LoadMatrixItemChildren(Checkbox.Forms.Items.Configuration.MatrixItemData,Checkbox.Forms.Data.LightweightItemMetaData)">
            <summary>
            Load children of a matrix item
            </summary>
            <param name="matrixItemData"></param>
            <param name="lightweightMatrixItemData"></param>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetOptionPoints(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the point value for an option.
            </summary>
            <param name="itemId"></param>
            <param name="optionId">ID of the option.</param>
            <param name="skipDateValidation"></param>
            <returns>Point value of the specified option.</returns>
            <remarks>If the option is not found in the internal options collection, 0 is returned.</remarks>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetOptionIsOther(System.Int32,System.Boolean)">
            <summary>
            Get a boolean value indicating if an option is an "other" option.
            </summary>
            <param name="optionId">ID of the option.</param>
            <param name="skipDateValidation"></param>
            <returns>Boolean value indicating if the option is an "other" option.</returns>
            <remarks>If the option is not found in the internal options collection, false is returned.</remarks>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetOptionIsOther(System.Int32)">
            <summary>
            Get a boolean value indicating if an option is an "other" option.
            </summary>
            <param name="optionId">ID of the option.</param>
            <returns>Boolean value indicating if the option is an "other" option.</returns>
            <remarks>If the option is not found in the internal options collection, false is returned.</remarks>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.LoadListOptionData(System.Int32)">
            <summary>
            
            </summary>
            <param name="optionId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetItemTypeName(System.Int32,System.Boolean)">
            <summary>
            Get the type name of an item.
            </summary>
            <param name="itemId">ID of item to get type name of.</param>
            <param name="skipDateValidation"></param>
            <returns>ID of type name.</returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetItemText(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get the text of an item
            </summary>
            <param name="itemId">ID of item to get text for.</param>
            <param name="languageCode"></param>
            <param name="preferAlias">Specify whether to return the item alias, if it exists.  If no alias exists, fall back to the item's text.</param>
            <param name="skipDateValidation"></param>
            <returns>Text for the item.</returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetAlias(System.Int32)">
            <summary>
            Get the alias of an item
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetOptionText(System.Nullable{System.Int32},System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get the text of an option
            </summary>
            <param name="itemId"></param>
            <param name="optionId">ID of option to get text for.</param>
            <param name="languageCode"></param>
            <param name="preferAlias">Specify whether to return the option alias if it exists.  If no alias exists, fall back to the option text.</param>
            <param name="skipDateValidation"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.ListOptionIdsForItem(System.Int32,System.Boolean)">
            <summary>
            List ids of all options for the specified item.
            </summary>
            <param name="itemId">ID of item to list options for.</param>
            <param name="skipDateValidation"></param>
            <returns>List of option ids.</returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.PopulateItemPosition(Checkbox.Forms.Data.LightweightItemMetaData)">
            <summary>
            Populate item position text
            </summary>
            <param name="itemMetaData"></param>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetRulesEngineFromCache(System.Int32)">
            <summary>
            
            </summary>
            <param name="surveyId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.AddRulesEngineToCache(System.Int32,Checkbox.Forms.Logic.RulesEngine)">
            <summary>
            
            </summary>
            <param name="surveyId"></param>
            <param name="engine"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.RemoveRulesEngineFromCache(System.Int32)">
            <summary>
            
            </summary>
            <param name="surveyId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.GetRuleDataServiceFromCache(System.Int32)">
            <summary>
            
            </summary>
            <param name="surveyId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.AddRuleDataServiceToCache(System.Int32,Checkbox.Forms.Logic.Configuration.RuleDataService)">
            <summary>
            
            </summary>
            <param name="surveyId"></param>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Data.SurveyMetaDataProxy.RemoveRuleDataServiceFromCache(System.Int32)">
            <summary>
            
            </summary>
            <param name="surveyId"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.JavascriptItemData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.JavascriptItemData.LoadSprocName">
            <summary>
            Get name of load data stored procedure
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.JavascriptItemData.ItemDataTableName">
            <summary>
            Get name of an item's data table when loading data from a data set.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.JavascriptItemData.CreateItem">
            <summary>
            Create an instance of an item to be initialized with its configuration
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.JavascriptItemData.Script">
            <summary>
            Get/Set script text
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.JavascriptItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load configuration data for this item from the supplied <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.JavascriptItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create the item
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.JavascriptItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of a RankOrder configuration in the persistent store
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.JavascriptItemData.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemMetadata)">
            <summary>
            Add text data to metadata object
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.JavascriptItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.JavascriptItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.NetPromoterScoreItemData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.NetPromoterScoreItemData.CreateItem">
            <summary>
            Create an instance of a radio button scale business object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.NetPromoterScoreItemData.ItemDataTableName">
            <summary>
            Get name of table containing data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.NetPromoterScoreItemData.SetDefaults(Checkbox.Forms.Template)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.NetPromoterScoreItemData.SetDefaultTexts">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.NetPromoterScoreItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load item data from the provided data row
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.CategorizedMatrixItemData">
            <summary>
            Class to represent categorized matrix item data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CategorizedMatrixItemData.CreateItem">
            <summary>
            Create an instance of a matrix item based on this item type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CategorizedMatrixItemData.CreateTextDecorator(System.String)">
            <summary>
            Create a text decorator for an item
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CategorizedMatrixItemData.GetCategorizedColumnIndexes">
            <summary>
            Returns the list of column indexes for all questions which can be categorized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CategorizedMatrixItemData.GetDistinctCategoriesByColumn(System.Int32)">
            <summary>
            Returns the distinct list of categories contained within a specified column.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.CategorizedMatrixItemTextDecorator">
            <summary>
            Text decorator for a matrix item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CategorizedMatrixItemTextDecorator.#ctor(Checkbox.Forms.Items.Configuration.CategorizedMatrixItemData,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="itemData"></param>
            <param name="language"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CategorizedMatrixItemTextDecorator.Data">
            <summary>
            Get the data
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.AddressVerifierItemData">
            <summary>
            Container for configuration of <see cref="T:Checkbox.Forms.Items.Configuration.AddressVerifierItemData"/> items.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.AddressVerifierItemData.ItemDataTableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.AddressVerifierItemData.LoadSprocName">
            <summary>
            Get load item sproc name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.AddressVerifierItemData.Region">
            <summary>
            Get/set the region where address should be selected from
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.AddressVerifierItemData.SearchType">
            <summary>
            Get/set the search type how address should be shown
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.AddressVerifierItemData.Rule">
            <summary>
            Get/set the search rule how address should be searched
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.AddressVerifierItemData.Rural">
            <summary>
            Get/set the type of the address: rural, urban or both
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.AddressVerifierItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of single line text item configuration in the persistent data store.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.AddressVerifierItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an existing single line text item configuration in the database.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.AddressVerifierItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the configuration data for this item from the specified <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.AddressVerifierItemData.CreateItem">
            <summary>
            Create an instance of a single-line text item based on this data
            </summary>
            <returns>the Item</returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.AddressVerifierItemData.CreateTextDecorator(System.String)">
            <summary>
            Create a text item text decorator
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.AddressVerifierItemData.Copy">
            <summary>
            Copy the item data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.AddressVerifierItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.AddressVerifierItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.CalculatorItemData">
            <summary>
            Container for configuration information associated with Calculator items.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CalculatorItemData.ItemDataTableName">
            <summary>
            Data table name for Calculator item configuration data
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CalculatorItemData.LoadSprocName">
            <summary>
            Load procedure name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CalculatorItemData.RoundToPlaces">
            <summary>
            Get/Set Round to decimal places
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CalculatorItemData.Formula">
            <summary>
            Get/Set Formula
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CalculatorItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load configuration data for this item from the supplied <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CalculatorItemData.CreateItem">
            <summary>
            Create an instance of a Calculator item based on this configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CalculatorItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create the item
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CalculatorItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of a Calculator configuration in the persistent store
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CalculatorItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            Writes an XML to the given writer
            </summary>
            <param name="writer">XML Writer</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CalculatorItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            Reads the data from XML Node
            </summary>
            <param name="xmlNode">XML Node</param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.DisplayAnalysisTextDecorator">
            <summary>
            Localized text decorator for a Display Analysis
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayAnalysisTextDecorator.#ctor(Checkbox.Forms.Items.Configuration.DisplayAnalysisItemData,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data"></param>
            <param name="language"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayAnalysisTextDecorator.Data">
            <summary>
            Get the data for the item
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.EmailResponseItemTextDecorator">
            <summary>
            Text decorator for email items
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailResponseItemTextDecorator.#ctor(Checkbox.Forms.Items.Configuration.EmailResponseItemData,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data"></param>
            <param name="language"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailResponseItemTextDecorator.Data">
            <summary>
            Get the item data
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.RankOrderItemData">
            <summary>
            Container for configuration information associated with RankOrder items.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RankOrderItemData.ItemDataTableName">
            <summary>
            Data table name for slider item configuration data
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RankOrderItemData.LoadSprocName">
            <summary>
            Load procedure name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RankOrderItemData.RankOrderType">
            <summary>
            Get/Set Type of the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RankOrderItemData.RankOrderOptionType">
            <summary>
            Get/Set type of rank order option
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RankOrderItemData.N">
            <summary>
            N, top N items will be selected
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RankOrderItemData.ItemIsIScored">
            <summary>
            Rank order doesn't support scoring
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RankOrderItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load configuration data for this item from the supplied <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RankOrderItemData.CreateItem">
            <summary>
            Create an instance of a slider item based on this configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RankOrderItemData.SetDefaults(Checkbox.Forms.Template)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RankOrderItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create the item
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RankOrderItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of a RankOrder configuration in the persistent store
            </summary>
            <param name="t"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RankOrderItemData.Options">
            <summary>
            Ensure a max of one option is selected by default
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RankOrderItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RankOrderItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RankOrderItemData.Clone">
            <summary>
            Ruturns the clone of the object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.RankOrderType">
            <summary>
            Rank Order Type that describes the behavior of the question item
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.RankOrderOptionType">
            <summary>
            Rank Order Option Type
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ICompositeXmlSerializable">
            <summary>
            Interface for serialization item data that contain child item datas.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ICompositeXmlSerializable.Load(System.Xml.XmlNode,Checkbox.Forms.Logic.Configuration.RuleDataService,System.Collections.Generic.Dictionary{System.Int32,Checkbox.Forms.Items.Configuration.ItemData},System.Collections.Generic.Dictionary{System.Int32,Checkbox.Forms.Items.Configuration.ListOptionData},System.Collections.Generic.List{Checkbox.Forms.Logic.Configuration.RuleData},System.Object)">
            <summary>
            Generates an item from its XML presentation. Restores all the rules related to the item.
            </summary>
            <param name="xmlNode"></param>
            <param name="rules"></param>
            <param name="itemTable"></param>
            <param name="options"></param>
            <param name="itemConditions"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ICompositeXmlSerializable.WriteXml(System.Xml.XmlWriter,Checkbox.Forms.Logic.Configuration.RuleDataService)">
            <summary>
            Converts an item into its XML representation. Includes rules related to the item.
            </summary>
            <param name="writer"></param>
            <param name="rules"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ItemImportReader">
            <summary>
            Class to handle some housecleaning tasks for importing items, including updating rules so that pre-import item/option ids
            are mapped to corresponding item/option ids in imported surveys. For standalone mode, passing NULL rule data service to
            constructor will prevent rule operations.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemImportReader.OptionIdMap">
            <summary>
            Map of item options by position to the option ids.  This is used later to update conditions
            on import to map old item/option ids to new item/option ids.  The map key is pre-import option id
            and value is position of option.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemImportReader.ItemIdMap">
            <summary>
            Map pre-import item ids to post-import item ids
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemImportReader.PrototypesMap">
            <summary>
            Map cell item it to it's prototype id for the matrix
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemImportReader.#ctor(Checkbox.Forms.Logic.Configuration.RuleDataService)">
            <summary>
            
            </summary>
            <param name="rds"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemImportReader.ReadItemData(Checkbox.Common.PersistedDomainObject,System.Xml.XmlNode,System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemImportReader.ReadChildData(Checkbox.Common.PersistedDomainObject,System.Xml.XmlNode,System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemImportReader.ReadChildRowData(Checkbox.Forms.Items.Configuration.MatrixItemData,System.Xml.XmlNode)">
            <summary>
            Read child rows
            </summary>
            <param name="matrixObj"></param>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemImportReader.ReadChildColumnData(Checkbox.Forms.Items.Configuration.MatrixItemData,System.Xml.XmlNode,System.Object)">
            <summary>
            
            </summary>
            <param name="matrixObj"></param>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemImportReader.ReadChildCellData(Checkbox.Forms.Items.Configuration.MatrixItemData,System.Xml.XmlNode)">
            <summary>
            Reads child cells and saves tem ID and it's coordinates to the dictionary
            </summary>
            <param name="matrixObj"></param>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemImportReader.UpdateRules(Checkbox.Forms.Logic.Configuration.RuleData[])">
            <summary>
            Update page rules to update mappings between pre-import page/item/option ids and post-import page/item/option
            ids.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ItemImportReader.AddResponsePipeDelegate">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="itemID"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemImportReader.UpdatePipes(Checkbox.Forms.Items.Configuration.ItemImportReader.AddResponsePipeDelegate)">
            <summary>
            Updates all items' pipes
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemImportReader.ResolveIdDependencies">
            <summary>
            Resolves dependencies 
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemImportReader.RegExp">
            <summary>
            Regexp for the pipes tokens
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemImportReader.updatePipes(System.String@)">
            <summary>
            Callback that replaces old item ID's with new ones
            </summary>
            <param name="pipedText">Old piped text</param>
            <returns>New piped text</returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ListDataSet">
            <summary>
            Data container for lists of options.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.Configuration.ListDataSet.TextTableName">
            <summary>
            Get the name of the text table
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.Configuration.ListDataSet.OptionsTableName">
            <summary>
            Get the name of the table containing item options
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListDataSet.ParentDataTableName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListDataSet.CreateAbstractDataCommand(Prezza.Framework.Data.Database,System.Int32)">
            <summary>
            Get data for abstract ("List") data.
            </summary>
            <param name="db"></param>
            <param name="owningObjectId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListDataSet.#ctor(System.String)">
            <summary>
            </summary>
            <param name="objectTypeName"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListDataSet.InitializeDataTables">
            <summary>
            Init data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListDataSet.InitializeTextTables">
            <summary>
            Initialize text tables
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListDataSet.GetOptionRows">
            <summary>
            Get data rows for item options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListDataSet.GetOptionRows(System.Int32)">
            <summary>
            Get data rows for item options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ItemDataSet">
            <summary>
            Base data set for item data class
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemDataSet.#ctor(System.String,System.String)">
            <summary>
            Construct new item data set
            </summary>
            <param name="itemTypeName"></param>
            <param name="dataTableName"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemDataSet.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="owningObjectTypeName"></param>
            <param name="dataTableName"></param>
            <param name="identityColumnName"></param>
            <param name="additionalTableNames"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemDataSet.ParentDataTableName">
            <summary>
            Parent data table name
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemDataSet.GetParentDataRow">
            <summary>
            Get the datarow for the parent data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemDataSet.CreateAbstractDataCommand(Prezza.Framework.Data.Database,System.Int32)">
            <summary>
            Command for getting abstract item data
            </summary>
            <param name="db"></param>
            <param name="owningObjectId"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemDataSet.TextTableName">
            <summary>
            Get the name of the text table
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemDataSet.InitializeTextTables">
            <summary>
            Create text tables
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.MatrixDataSet">
            <summary>
            Data container for matrix item data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixDataSet.#ctor(System.String,System.String)">
            <summary>
            Construct new item data set
            </summary>
            <param name="itemTypeName"></param>
            <param name="dataTableName"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixDataSet.InitializeDataTables">
            <summary>
            Initialize data tables for data set
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixDataSet.GetChildPositions">
            <summary>
            Get data row for child positions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixDataSet.GetRowData">
            <summary>
            Get data row for child positions sorted in ascending order by row position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixDataSet.GetColumnData">
            <summary>
            Get data for matrix columns sorted in ascending order by column position.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.RowSelectData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RowSelectData.AllowMultipleSelection">
            <summary>
            Determine if this row selector allows multiple selection or not.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RowSelectData.MinToSelect">
            <summary>
            Get/set the minimum number of items to select.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RowSelectData.MaxToSelect">
            <summary>
            Get/set the maximum number of items to select.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RowSelectData.LoadSprocName">
            <summary>
            Load procedure name
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RowSelectData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of a Select1 configuration in the persistent store
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RowSelectData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of a Select1 configuration in the persistent store
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RowSelectData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load configuration data for this item from the supplied <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RowSelectData.CreateItem">
            <summary>
            Create an instance of a row select item based on this configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RowSelectData.CreateTextDecorator(System.String)">
            <summary>
            Create a text decorator for the item that can be used to localize texts for the item
            and it's options.
            </summary>
            <param name="languageCode">Language for the text decorator.</param>
            <returns><see cref="T:Checkbox.Forms.Items.Configuration.SelectItemTextDecorator"/></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RowSelectData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RowSelectData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ScoreMessage">
            <summary>
            Simple container for score messages
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ScoreMessage.MessageId">
            <summary>
            Get/set message id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ScoreMessage.LowScore">
            <summary>
            Get/set low end of score range
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ScoreMessage.HighScore">
            <summary>
            Get/set high end of score range
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ScoreMessageDictionary">
            <summary>
            Dictionary container for score messages, keyed by message id
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageDictionary.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageDictionary.GetMessageForScoreValue(System.Double)">
            <summary>
            Get a message based on score
            </summary>
            <param name="scoreValue"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageDictionary.GetMessageForScoreRange(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Access message based on score range
            </summary>
            <param name="lowScore"></param>
            <param name="highScore"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageDictionary.GetNextTempMessageId">
            <summary>
            Get a temporary, negative id for a new message
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.SliderItemData">
            <summary>
            Container for configuration information associated with Slider items.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SliderItemData.ItemDataTableName">
            <summary>
            Data table name for slider item configuration data
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SliderItemData.LoadSprocName">
            <summary>
            Load procedure name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SliderItemData.ValueType">
            <summary>
            Get/Set Value Type
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SliderItemData.MinValue">
            <summary>
            Get/Set Min Value
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SliderItemData.MaxValue">
            <summary>
            Get/Set Max Value
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SliderItemData.StepSize">
            <summary>
            Size of a given “step” when moving the slider.  
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SliderItemData.DefaultValue">
            <summary>
            Initial starting value for the slider. Uses only in NumberRange value type.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SliderItemData.ValueListOptionType">
            <summary>
            Get/set value list option type
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SliderItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load configuration data for this item from the supplied <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SliderItemData.CreateItem">
            <summary>
            Create an instance of a slider item based on this configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SliderItemData.SetDefaults(Checkbox.Forms.Template)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SliderItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create the item
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SliderItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of a Slider configuration in the persistent store
            </summary>
            <param name="t"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SliderItemData.Options">
            <summary>
            Ensure a max of one option is selected by default
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SliderItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SliderItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SliderItemData.Clone">
            <summary>
            Ruturns the clone of the object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.SliderValueType">
            <summary>
            Describes slider's value types
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.Configuration.SliderValueType.NumberRange">
            <summary>
            Survey editor chooses minimum and maximum values for slider.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.Configuration.SliderValueType.ValueList">
            <summary>
            Survey editor specifies possible values.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.Configuration.SliderValueType.Text">
            <summary>
            Each option of value list is a simple text value
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.Configuration.SliderValueType.Image">
            <summary>
            Each option of value list is an image
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.SliderValueListOptionType">
            <summary>
            Describes slider's value list option types
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.Configuration.SliderValueListOptionType.Text">
            <summary>
            Each option of value list is a simple text value
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.Configuration.SliderValueListOptionType.Image">
            <summary>
            Each option of value list is an image
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.CaptchaItemData">
            <summary>
            MetaData for Captcha Items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CaptchaItemData.ItemDataTableName">
            <summary>
            Get data table name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CaptchaItemData.LoadSprocName">
            <summary>
            Get sproc for loading item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CaptchaItemData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CaptchaItemData.MaxCodeLength">
            <summary>
            Get/set the maximum length for the CAPTCHA code.
            </summary>
            <remarks>Value must be greater than the minimum value and must be greater than 0.</remarks>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CaptchaItemData.MinCodeLength">
            <summary>
            Get/set the minimum code length.
            </summary>
            <remarks>Value must be less than the maximum value and must be greater than 0.</remarks>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CaptchaItemData.CodeType">
            <summary>
            Get/set the type of code to use.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CaptchaItemData.ImageHeight">
            <summary>
            Get/set the height of the image to generate.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CaptchaItemData.ImageWidth">
            <summary>
            Get/set the width of the image to generate
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CaptchaItemData.ImageFormat">
            <summary>
            Get/set the image format
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CaptchaItemData.EnableSound">
            <summary>
            Get/set whether sound is enabled for the control.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CaptchaItemData.TextStyles">
            <summary>
            Get a list of text styles supported.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CaptchaItemData.RemoveTextStyle(System.String)">
            <summary>
            Remove the text style with the specified name from the list of supported styles.
            </summary>
            <param name="textStyleName">Name of the style to remove.  Should conform to a TextStyleEnum value.</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CaptchaItemData.RemoveTextStyle(Checkbox.Common.Captcha.Image.TextStyleEnum)">
            <summary>
            Remove the specified style from the list of supported styles
            </summary>
            <param name="textStyle">Text style to remove from the list.</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CaptchaItemData.AddTextStyle(System.String)">
            <summary>
            Add the text style with the specified name to the list of supported styles.
            </summary>
            <param name="textStyleName">Name of the text style to add.  This name must correspond to an value of the TextTypeEnum.</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CaptchaItemData.AddTextStyle(Checkbox.Common.Captcha.Image.TextStyleEnum)">
            <summary>
            Add the specified text style to the list of supported styles.
            </summary>
            <param name="textStyle">Style to add.</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CaptchaItemData.SetTextStyles(System.Collections.Generic.List{Checkbox.Common.Captcha.Image.TextStyleEnum})">
            <summary>
            Replace the list of text styles with the specified list.
            </summary>
            <param name="textStyles">List of styles to set.</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CaptchaItemData.SetTextStyles(System.Collections.Generic.List{System.String})">
            <summary>
            Replace the list of text styles with the specified list.
            </summary>
            <param name="textStyleNames">List of styles to set.</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CaptchaItemData.CreateItem">
            <summary>
            Create an instance of a hidden item based on this configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CaptchaItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the item's configuration from the specified data row.
            </summary>
            <param name="data">DataRow containing configuration information for this item.</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CaptchaItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create a new entry for captcha item data in the database.
            </summary>
            <param name="t">Database transaction to participate in for database updates.</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CaptchaItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an entry for captcha item data in the database.
            </summary>
            <param name="t">Database transaction to participate in for database updates.</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CaptchaItemData.AddParams(Prezza.Framework.Data.DBCommandWrapper)">
            <summary>
            Add parameters to the 
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CaptchaItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CaptchaItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.CloseWindowItemData">
            <summary>
            Data for item to close the survey window
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CloseWindowItemData.ItemDataTableName">
            <summary>
            Item has no specific configuration data, so just reference a dummy name as table name.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CloseWindowItemData.LoadSprocName">
            <summary>
            Get load sproc name.  This type of item has no special configuration data, so there is no load sproc.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CloseWindowItemData.DataTableName">
            <summary>
            Item has no specific configuration data, so just reference parent table as data
            table name.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CloseWindowItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CloseWindowItemData.LoadAdditionalData(Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Since item has no configuration, override this method to set item type name
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CloseWindowItemData.CreateDataTransferObject">
            <summary>
            Get data transfer object for item.  Since item has no configuration state, return empty item.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.CurrentScoreItemData">
            <summary>
            Item to display the current score of a survey
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CurrentScoreItemData.PageId">
            <summary>
            Get/set id of page to print score of.  If value is null, all items in survey before
            score item are used.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CurrentScoreItemData.CreateItem">
            <summary>
            Create an instance of the business object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.CurrentScoreItemData.LoadSprocName">
            <summary>
            Get name of load sproc.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CurrentScoreItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load item data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CurrentScoreItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Insert data into db
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CurrentScoreItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update data in db
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CurrentScoreItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CurrentScoreItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.CurrentScoreItemData.UpdateImportId(System.Collections.Generic.Dictionary{System.Int32,Checkbox.Forms.Items.Configuration.ItemData},System.Collections.Generic.Dictionary{System.Int32,Checkbox.Forms.TemplatePage})">
            <summary>
            
            </summary>
            <param name="itemIdMap"></param>
            <param name="pageIdMap"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.DisplayAnalysisItemData">
            <summary>
            Data class for display analysis option
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayAnalysisItemData.ItemDataTableName">
            <summary>
            Get data table name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayAnalysisItemData.LoadSprocName">
            <summary>
            Get load data sproc
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayAnalysisItemData.AnalysisGUID">
            <summary>
            Get/set the id of the analysis to display
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayAnalysisItemData.RestartSurvey">
            <summary>
            Always return false
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayAnalysisItemData.URL">
            <summary>
            Get the URL to redirect to
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayAnalysisItemData.ShowInNewTab">
            <summary>
            Show in a new browser tab
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayAnalysisItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the item data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayAnalysisItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create the data in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayAnalysisItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update the data in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayAnalysisItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayAnalysisItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayAnalysisItemData.CreateItem">
            <summary>
            Create an instance of the display analysis item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayAnalysisItemData.CreateTextDecorator(System.String)">
            <summary>
            Get a text decorator for the Display Analysis>
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.DisplayResponseItemData">
            <summary>
            Item that displays the survey response
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.#ctor">
            <summary>
            Default constructor to initialize DisplayInlineResponse to be true
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.ItemDataTableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.LoadSprocName">
            <summary>
            Get "load" procedure name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.DisplayInlineResponse">
            <summary>
            Show the response inline
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.IncludeResponseDetails">
            <summary>
            Get/set whether to include response details or not
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.ShowPageNumbers">
            <summary>
            Get/set whether to show page numbers or not
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.ShowQuestionNumbers">
            <summary>
            Get/set whether to show item numbers or not
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.IncludeMessageItems">
            <summary>
            Get/set whether include message items or not
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.ShowHiddenItems">
            <summary>
            Get/set whether show hidden items or not
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.LinkTextID">
            <summary>
            Get the text id for the view response link
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Do nothing for now
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Do nothing for now
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the item from data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.GetTextIdSuffixes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.CreateTextDecorator(System.String)">
            <summary>
            Create a text decoroator for the display response item
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayResponseItemData.CreateItem">
            <summary>
            Create an instance of a data item based on this configuration information.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.DisplayResponseItemTextDecorator">
            <summary>
            Text decorator for display response item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayResponseItemTextDecorator.#ctor(Checkbox.Forms.Items.Configuration.DisplayResponseItemData,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data"></param>
            <param name="language"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayResponseItemTextDecorator.Data">
            <summary>
            Get the data for the item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayResponseItemTextDecorator.SetLocalizedTexts">
            <summary>
            Set the localized texts for the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.DisplayResponseItemTextDecorator.LinkText">
            <summary>
            Get/set the text for the link
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.DisplayResponseItemTextDecorator.CopyLocalizedText(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Copy the text associated with the passed-in item to this item
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.EmailItemData">
            <summary>
            Base class for items that send emails
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailItemData.ItemDataTableName">
            <summary>
            Data table name.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailItemData.LoadSprocName">
            <summary>
            Get load sproc name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailItemData.SendOnce">
            <summary>
            Get/set whether to send the email only once
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailItemData.From">
            <summary>
            Get/set the from field
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailItemData.MessageFormat">
            <summary>
            Format of the message.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailItemData.StyleTemplateID">
            <summary>
            Gets or sets the Style Template ID associated with this email
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailItemData.To">
            <summary>
            To address for the email.  This field may contain survey tokens and semi-colon separated email addresses.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailItemData.BCC">
            <summary>
            Blind carbon-copy recipients address for the email.  This field may contain survey tokens and semi-colon separated email addresses.
            A separate email message will be created for each recipient so that they are unaware of each other.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailItemData.SubjectTextID">
            <summary>
            TextID for the subject of the email
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailItemData.BodyTextID">
            <summary>
            TextID for the body of the email
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailItemData.CreateTextDecorator(System.String)">
            <summary>
            
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of the item in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of the item in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the item from the specified data row
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailItemData.GetTextIdSuffixes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailItemData.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemMetadata)">
            <summary>
            
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailItemData.UpdatePipes(Checkbox.Forms.Items.Configuration.ItemData.UpdatePipesCallback)">
            <summary>
            Updates pipes
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.EmailItemTextDecorator">
            <summary>
            Text decorator for email items
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailItemTextDecorator.#ctor(Checkbox.Forms.Items.Configuration.EmailItemData,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data"></param>
            <param name="language"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailItemTextDecorator.Data">
            <summary>
            Get the item data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailItemTextDecorator.SetLocalizedTexts">
            <summary>
            Set the item localized texts
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailItemTextDecorator.Body">
            <summary>
            Get/set the body
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailItemTextDecorator.Subject">
            <summary>
            Get/set the subject
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailItemTextDecorator.CopyLocalizedText(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Copy the localized text for an item
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.EmailResponseItemData">
            <summary>
            Configuration for survey item to generate and send email messages
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailResponseItemData.IncludeResponseDetails">
            <summary>
            Get/set whether to include response details or not
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailResponseItemData.ShowPageNumbers">
            <summary>
            Get/set whether to show page numbers or not
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailResponseItemData.ShowQuestionNumbers">
            <summary>
            Get/set whether to show question numbers or not
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailResponseItemData.IncludeMessageItems">
            <summary>
            Get/set whether include message items or not
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailResponseItemData.ShowHiddenItems">
            <summary>
            Get/set whether show hidden items or not
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailResponseItemData.ItemDataTableName">
            <summary>
            Get name of table containing email response item configuration
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.EmailResponseItemData.LoadSprocName">
            <summary>
            Get load sproc name
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailResponseItemData.CreateItem">
            <summary>
            Create an instance of an email response item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailResponseItemData.CreateTextDecorator(System.String)">
            <summary>
            Create an instance of a text decorator for the item
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailResponseItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of the item in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailResponseItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of the item in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailResponseItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the item from the specified data row
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailResponseItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.EmailResponseItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.UploadItemData">
            <summary>
            MetaData for Upload Items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.UploadItemData.LoadSprocName">
            <summary>
            Get load sproc name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.UploadItemData.FileSize">
            <summary>
            Get/Set the file size of an uploaded file in bytes.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.UploadItemData.AllowedFileTypes">
            <summary>
            Get/Set the list of files types which are approved for upload.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.UploadItemData.AllowedFileTypesCSV">
            <summary>
            Get the list of files types which are approved for upload as a comma separated list.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.UploadItemData.ItemIsIAnswerable">
            <summary>
            Get an indication of whether the item created by CreateItem(...) supports
            the IAnswerable interface.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.UploadItemData.ItemDataTableName">
            <summary>
            Data table name
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.UploadItemData.CreateItem">
            <summary>
            Create an instance of a hidden item based on this configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.UploadItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the item's configuration from the specified data row.
            </summary>
            <param name="data">DataRow containing configuration information for this item.</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.UploadItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create a new entry for upload item data in the database.
            </summary>
            <param name="t">Database transaction to participate in for database updates.</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.UploadItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an entry for Update Item data in the database.
            </summary>
            <param name="t">Database transaction to participate in for database updates.</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.UploadItemData.AddParams(Prezza.Framework.Data.DBCommandWrapper)">
            <summary>
            Add parameters to the 
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.UploadItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.UploadItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.HorizontalLineItemData">
            <summary>
            Data container for horizontal line items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HorizontalLineItemData.ItemDataTableName">
            <summary>
            Get name of data table containing configuration information for the item.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HorizontalLineItemData.LoadSprocName">
            <summary>
            Get name of load item sproc.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HorizontalLineItemData.LineWidth">
            <summary>
            Get/set the width of the line
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HorizontalLineItemData.WidthUnit">
            <summary>
            Get set the units to use for line width
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HorizontalLineItemData.Color">
            <summary>
            Get set the color of line
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HorizontalLineItemData.Thickness">
            <summary>
            Get/set the thickness of the line
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HorizontalLineItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create the item in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HorizontalLineItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an existing instance of the item
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HorizontalLineItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HorizontalLineItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HorizontalLineItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load this item data from the datarow
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HorizontalLineItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.HtmlItemData">
            <summary>
            Container for HTML messages
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HtmlItemData.ItemDataTableName">
            <summary>
            Get data table name for html item data
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HtmlItemData.DataTableName">
            <summary>
            Get data table name for html item data
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HtmlItemData.LoadSprocName">
            <summary>
            Get load sproc for item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HtmlItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of the item.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HtmlItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an existing item.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HtmlItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HtmlItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HtmlItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            For this item, data can also include token data, which is stored separately
            </summary>
            <param name="itemDataRow"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HtmlItemData.HTML">
            <summary>
            Get/set the HTML for the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HtmlItemData.InlineCSS">
            <summary>
            Get/set the CSS for the item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HtmlItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HtmlItemData.CreateTextDecorator(System.String)">
            <summary>
            Create a text decorator for the HTML item.
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HtmlItemData.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemMetadata)">
            <summary>
            Add text data to metadata object
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HtmlItemData.UpdatePipes(Checkbox.Forms.Items.Configuration.ItemData.UpdatePipesCallback)">
            <summary>
            Updates pipes
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.HtmlItemTextDecorator">
            <summary>
            Text decorator for HTML items.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HtmlItemTextDecorator.#ctor(Checkbox.Forms.Items.Configuration.HtmlItemData,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data"></param>
            <param name="language"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HtmlItemTextDecorator.Data">
            <summary>
            Get the underlying data object
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ICompositeItemData">
            <summary>
            Interface for item data that contain child item datas
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ICompositeItemData.GetChildItemDataIDs">
            <summary>
            Get the ids of any child item data objects.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ImageItemTextDecorator">
            <summary>
            Text decorator for localized image item alt texts.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ImageItemTextDecorator.#ctor(Checkbox.Forms.Items.Configuration.ImageItemData,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="itemData"></param>
            <param name="language"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ImageItemTextDecorator.Data">
            <summary>
            Get the associated item data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ImageItemTextDecorator.SetLocalizedTexts">
            <summary>
            Set the localized text for the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ImageItemTextDecorator.AlternateText">
            <summary>
            Get/set the alternate text for the image
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ImageItemTextDecorator.CopyLocalizedText(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Copy localized text for the item
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ItemTextDecorator">
            <summary>
            Decorator for item data to use to store/set localized data.  Localized fields will
            be exposed as public accessors on the classes that extend the item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemTextDecorator.#ctor(Checkbox.Forms.Items.Configuration.ItemData,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data"></param>
            <param name="language"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemTextDecorator.SetLocalizedTexts">
            <summary>
            Set localized texts...does nothing for base item editor
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemTextDecorator.Data">
            <summary>
            Item data getter
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemTextDecorator.CopyLocalizedText(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Copy the localized text for an item
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemTextDecorator.Copy(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Copy the underlying item text into a new copy
            </summary>
            <param name="data">The ItemData copy</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemTextDecorator.Save">
            <summary>
            Save the item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemTextDecorator.Save(System.Data.IDbTransaction)">
            <summary>
            Save the item as part of a transaction
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemTextDecorator.OnCommit(System.Object,System.EventArgs)">
            <summary>
            Call commit action on child 
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemTextDecorator.OnAbort(System.Object,System.EventArgs)">
            <summary>
            Call abort on children
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemTextDecorator.OnRollback">
            <summary>
            Rollback
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.LabelledItemTextDecorator">
            <summary>
            Base text decorator for localizing item text and description.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LabelledItemTextDecorator.#ctor(Checkbox.Forms.Items.Configuration.LabelledItemData,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="itemData"></param>
            <param name="language"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.LabelledItemTextDecorator.Data">
            <summary>
            Utility getter
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LabelledItemTextDecorator.SetLocalizedTexts">
            <summary>
            Set the item localized texts
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LabelledItemTextDecorator.CopyLocalizedText(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Copy the localized text for the item
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LabelledItemTextDecorator.EnsureTextsLoaded">
            <summary>
            Ensure texts loaded, optionally can be overridden by children
            for batch text loading.  It is up to child to prevent multiple
            text loadings.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.LabelledItemTextDecorator.Text">
            <summary>
            Get/set the text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.LabelledItemTextDecorator.SubText">
            <summary>
            Get/set the sub text
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ListData">
            <summary>
            Container for list data
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListData.LoadSprocName">
            <summary>
            Get name of load data procedure
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListData.ObjectTypeName">
            <summary>
            Get name of object type
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListData.#ctor">
            <summary>
            List data constructor.  Accepts data table name and identity column name as parameters.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListData.LoadAdditionalData(Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Load options data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListData.CreateConfigurationDataSet">
            <summary>
            Get configuration data for this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListData.ItemID">
            <summary>
            Get the ID of the item this list is associated with
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.Configuration.ListData.TextIdPrefix">
            <summary>
            Get the name text id
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListData.GetOptionAt(System.Int32)">
            <summary>
            Get the option at the specified position
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListData.ListOptions">
            <summary>
            Get the list of options for the list
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListData.RemoveOption(System.Int32)">
            <summary>
            Remove an option from the list
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListData.AddOption(System.Int32,System.String,System.String,System.Boolean,System.Int32,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Int32,System.Nullable{System.Guid})">
            <summary>
            Add a list option
            </summary>
            <param name="alias"></param>
            <param name="category"></param>
            <param name="isDefault"></param>
            <param name="isOther"></param>
            <param name="itemID"></param>
            <param name="points"></param>
            <param name="position"></param>
            <param name="isNoneOfAbove"></param>
            <param name="contentID"></param>
            <param name="optionID">Can be set a real option ID when we perform option cloning</param>
            <param name="temporaryGuid"> </param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListData.UpdateOption(System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Int32,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Guid})">
            <summary>
            Update an option
            </summary>
            <param name="optionID"></param>
            <param name="itemID"></param>
            <param name="alias"></param>
            <param name="category"></param>
            <param name="isDefault"></param>
            <param name="position"></param>
            <param name="points"></param>
            <param name="isOther"></param>
            <param name="isNoneOfAbove"></param>
            <param name="contentID"></param>
            <param name="temporaryGuid"> </param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListData.Delete(System.Data.IDbTransaction)">
            <summary>
            Delete the list
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListData.Create(System.Data.IDbTransaction)">
            <summary>
            Create the list item data.
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListData.Update(System.Data.IDbTransaction)">
            <summary>
            Update the item data
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListData.UpsertOptions(System.Data.IDbTransaction)">
            <summary>
            Insert new options
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListData.DeleteRemovedOptions(System.Data.IDbTransaction)">
            <summary>
            Delete removed options
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListData.Clone">
            <summary>
            Clone the option list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListData.Equals(Checkbox.Forms.Items.Configuration.ListData)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListData.Equals(System.Int32)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ListOptionData">
            <summary>
            Meta data for list options in surveys
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListOptionData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListOptionData.#ctor(System.Data.DataRow)">
            <summary>
            Initialize
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListOptionData.Deleted">
            <summary>
            Get whether option is deleted.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListOptionData.Load(System.Data.DataRow)">
            <summary>
            Load the item from the data
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListOptionData.OptionID">
            <summary>
            Get the ID of this option
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListOptionData.Alias">
            <summary>
            Get/set the option alias
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListOptionData.Category">
            <summary>
            Get/set the option Category
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListOptionData.IsDefault">
            <summary>
            Get/set whether this option is a default value
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListOptionData.IsOther">
            <summary>
            Get/set whether this option is an "other" option
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListOptionData.IsNoneOfAbove">
            <summary>
            Get/set whether this option is an "none of above" option
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListOptionData.Position">
            <summary>
            Get/set the position of the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListOptionData.Points">
            <summary>
            Get/set the points value for the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListOptionData.Disabled">
            <summary>
            Item is not enabled
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListOptionData.ContentID">
            <summary>
            Get/set image ID
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ListOptionData.TextID">
            <summary>
            Get the text id for the option
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ListOptionData.CompareTo(Checkbox.Forms.Items.Configuration.ListOptionData)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.LocalizableResponseItemData">
            <summary>
            Class for localizable item data.  Provides basic support needed for import/export, etc.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LocalizableResponseItemData.GetTextID(System.String)">
            <summary>
            Get a textID for the item
            </summary>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LocalizableResponseItemData.GetTextIdSuffixes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LocalizableResponseItemData.WriteItemTexts(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LocalizableResponseItemData.WriteItemTextValues(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LocalizableResponseItemData.WriteTextValue(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="textId"></param>
            <param name="textKey"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LocalizableResponseItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LocalizableResponseItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LocalizableResponseItemData.ReadItemTexts(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LocalizableResponseItemData.ReadItemTextsWithoutTextId(System.Xml.XmlNode,System.String[])">
            <summary>
            Early 5.x exports did not have text ids with text data so the order was the determining factor. This attempts to reproduce
            that logic
            </summary>
            <param name="xmlNode"></param>
            <param name="args"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LocalizableResponseItemData.LoadTextFromNode(System.Xml.XmlNode,System.String)">
            <summary>
            
            </summary>
            <param name="textNode"></param>
            <param name="textId"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.LocalizableResponseItemTextDecorator">
            <summary>
            Base text decorator for survey items that support localized text values.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LocalizableResponseItemTextDecorator.#ctor(Checkbox.Forms.Items.Configuration.ItemData,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data"></param>
            <param name="languageCode"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator">
            <summary>
            Text decorator for a matrix item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.#ctor(Checkbox.Forms.Items.Configuration.MatrixItemData,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="itemData"></param>
            <param name="language"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.Data">
            <summary>
            Get the data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.SetData(Checkbox.Forms.Items.Configuration.MatrixItemData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.GetColumnPrototypeItemData(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.SetLocalizedTexts">
            <summary>
            Set localized texts associated with this item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.SetColumnPrototypeItemTexts(Checkbox.Forms.Items.Configuration.ItemData,System.Int32)">
            <summary>
            Set the texts for the item data
            </summary>
            <param name="itemData"></param>
            <param name="column"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.SetColumnDefaultText(System.Int32,System.String)">
            <summary>
            Set the default text for a column, useful only for text item columns
            </summary>
            <param name="column"></param>
            <param name="text"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.GetColumnDefaultText(System.Int32)">
            <summary>
            Get the default text for a text item column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.SetColumnText(System.Int32,System.String)">
            <summary>
            Set text for a column
            </summary>
            <param name="column"></param>
            <param name="text"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.GetColumnText(System.Int32)">
            <summary>
            Get the text for a column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.SetRowText(System.Int32,System.String)">
            <summary>
            Set the text for a row
            </summary>
            <param name="row"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.GetRowText(System.Int32)">
            <summary>
            Get the text for a row
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.SetScaleText(System.Int32,System.String,System.String)">
            <summary>
            Set the text for a scale
            </summary>
            <param name="column"></param>
            <param name="position"></param>
            <param name="text"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.GetScaleText(System.Int32,System.String)">
            <summary>
            Get the text for a scale
            </summary>
            <param name="column"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.SetOptionText(System.Int32,System.Int32,System.String)">
            <summary>
            Set the text of the option at specified column / option position
            </summary>
            <param name="column"></param>
            <param name="position"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.GetOptionText(System.Int32,System.Int32)">
            <summary>
            Get the text for the specified option
            </summary>
            <param name="column"></param>
            <param name="position"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.GetOptionTexts(System.Int32)">
            <summary>
            Get the text for the specified option
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.RemoveRow(System.Int32)">
            <summary>
            Remove a row from the matrix
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.MoveRow(System.Int32,System.Int32)">
            <summary>
            Move a row from one position to another.
            </summary>
            <param name="currentRowPosition"></param>
            <param name="newRowPosition"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.MoveColumn(System.Int32,System.Int32)">
            <summary>
            Move a column from one position to another.
            </summary>
            <param name="currentColumnPosition"></param>
            <param name="newColumnPosition"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.MoveRowUp(System.Int32)">
            <summary>
            Move the specified row up one position
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.MoveRowDown(System.Int32)">
            <summary>
            Move the specified row down one position
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.MoveColumnRight(System.Int32)">
            <summary>
            Move the column to the right and associated text data
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.MoveColumnLeft(System.Int32)">
            <summary>
            Move the colmn to the left and associated text data
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.SetColumnOrder(System.Collections.Generic.List{System.Int32})">
            <summary>
            Set order of columns as function of current positions.  For example, in a 5 column matrix, passing order of
            1,2,3,5,4 would have effect of swapping last two column positions.
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.RemoveColumn(System.Int32)">
            <summary>
            Remove the specified column
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.SwapRowTextValues(System.Int32,System.Int32)">
            <summary>
            Swap text data for the specified rows
            </summary>
            <param name="row1"></param>
            <param name="row2"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.SwapColumnTextValues(System.Int32,System.Int32)">
            <summary>
            Swap the texts for two columns
            </summary>
            <param name="column1"></param>
            <param name="column2"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.SwapOptionTextValues(System.Int32,System.Int32)">
            <summary>
            Swap option texts
            </summary>
            <param name="column1"></param>
            <param name="column2"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.SwapRatingScaleTextValues(System.Int32,System.Int32)">
            <summary>
            Swap text values for rating scales
            </summary>
            <param name="column1"></param>
            <param name="column2"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.SwapTextValues``1(``0,``0,System.Collections.Generic.IDictionary{``0,System.String},System.Collections.Generic.IDictionary{``0,System.Boolean})">
            <summary>
            Swap text values
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="textDict"></param>
            <param name="modDict"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.SwapTextValues``2(``0,``0,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Do the swap
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="dict"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemTextDecorator.SetRowOrder(System.Collections.Generic.List{System.Int32})">
            <summary>
            Sets new order for the Matrix Item Data and for the temporary structures like rowTexts
            </summary>
            <param name="newOrder"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.MatrixSumTotalItemData">
            <summary>
            Item data for matrix sum total items
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixSumTotalItemData.#ctor">
            <summary>
            Load data for the matrix sum total item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MatrixSumTotalItemData.ItemDataTableName">
            <summary>
            Get data table name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MatrixSumTotalItemData.LoadSprocName">
            <summary>
            Get load sproc name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MatrixSumTotalItemData.ComparisonOperator">
            <summary>
            Get/set the operator to use when 
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MatrixSumTotalItemData.TotalValue">
            <summary>
            Get/set the total value to use when comparing matrix column totals
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MatrixSumTotalItemData.Format">
            <summary>
            Only numeric format is supported
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixSumTotalItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of the item in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixSumTotalItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of the item in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixSumTotalItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the item data from the data row
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixSumTotalItemData.CreateItem">
            <summary>
            Create a matrix sum total item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixSumTotalItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="externalDataCallback"> </param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixSumTotalItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
            <param name="callback"> </param>
            <param name="creator"> </param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.MessageItemTextDecorator">
            <summary>
            Text decorator for localizing message item text.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MessageItemTextDecorator.#ctor(Checkbox.Forms.Items.Configuration.MessageItemData,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data"></param>
            <param name="language"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MessageItemTextDecorator.Data">
            <summary>
            Get the item's data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MessageItemTextDecorator.SetLocalizedTexts">
            <summary>
            Set message localized texts
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MessageItemTextDecorator.CopyLocalizedText(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Copy localized text for the item.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MessageItemTextDecorator.Message">
            <summary>
            Get set the message
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MessageItemTextDecorator.ReportableSectionBreak">
            <summary>
            Get set the message
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.MultiLineTextItemData">
            <summary>
            Container for multi-line text item data
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MultiLineTextItemData.BindinedPropertyId">
            <summary>
            Gets or sets the bindined property identifier.
            </summary>
            <value>
            The bindined property identifier.
            </value>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MultiLineTextItemData.BindedFieldName">
            <summary>
            Gets or sets the name of the binded field.
            </summary>
            <value>
            The name of the binded field.
            </value>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MultiLineTextItemData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MultiLineTextItemData.ItemDataTableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MultiLineTextItemData.LoadSprocName">
            <summary>
            Get procedure used to load data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MultiLineTextItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MultiLineTextItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of multi line text item configuration in the persistent data store.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MultiLineTextItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an existing multi line text item configuration in the database.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MultiLineTextItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the configuration data for this item from the specified <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MultiLineTextItemData.CreateTextDecorator(System.String)">
            <summary>
            Get the text decorator for this item
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MultiLineTextItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MultiLineTextItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData">
            <summary>
            Data for an item designed to update user profile properties
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.ProfileUpdaterProperty">
            <summary>
            Private container class
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.ProfileUpdaterProperty.SourceItemId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.ProfileUpdaterProperty.ProviderName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.ProfileUpdaterProperty.PropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.ProfileUpdaterProperty.#ctor(System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sourceItemID"></param>
            <param name="providerName"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.ProfileUpdaterProperty.Equals(Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.ProfileUpdaterProperty)">
            <summary>
            Compare updater properties
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.Properties">
            <summary>
            List of profile properties
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.UpdatedPropertiesTableName">
            <summary>
            Get name of profile updating data table name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.ItemDataTableName">
            <summary>
            No item data table for pu props exists in 4.x.  The only table is the property mapping table, so return a table name, though
            this table is not used anywhere.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.LoadSprocName">
            <summary>
            Get name of procedure to use to load data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.GeneratePropertyKey(System.Int32,System.String,System.String)">
            <summary>
            Generate a key to use to lookup properties in props dictionary
            </summary>
            <param name="sourceItemId"></param>
            <param name="providerName"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.AddProperty(System.Int32,System.String,System.String)">
            <summary>
            Add a property to be updated
            </summary>
            <param name="sourceItemId"></param>
            <param name="providerName"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.RemoveProperty(System.Int32,System.String,System.String)">
            <summary>
            Remove a property to be updated
            </summary>
            <param name="sourceItemId"></param>
            <param name="providerName"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.CreateConfigurationDataSet">
            <summary>
            Get configuration data set for this item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.LoadAdditionalData(Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Load additional data from the profile updater data set
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create the item in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update the item in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.UpSert(System.Data.IDbTransaction)">
            <summary>
            Upsert data
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.ReadItemImportData(Checkbox.Forms.Items.Configuration.ItemImportReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.GetPropertyInsertCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get a command to insert a property
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.GetPropertyDeleteCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get a command to delete a property
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.IsExportable">
            <summary>
            Returns false since this item depends on other survey items, so it does not make sense to have it
            be individually exportable
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.ResolveIdDependencies(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            
            </summary>
            <param name="itemIdMap"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ProfileUpdaterItemData.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemMetadata)">
            <summary>
            
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.RedirectItemData">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RedirectItemData.ItemDataTableName">
            <summary>
            Get name of data table
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RedirectItemData.LoadSprocName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RedirectItemData.RedirectAutomatically">
            <summary>
            Get/set whether to redirect automatically or to display a link
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RedirectItemData.AutoRedirectDelayTime">
            <summary>
            Get/set whether to redrect automatically or to display a link
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RedirectItemData.RestartSurvey">
            <summary>
            Restart the survey
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RedirectItemData.OpenInNewWindow">
            <summary>
            Get/set whether to open in the same window or tab
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RedirectItemData.URL">
            <summary>
            Get/set the URL to redirect to
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RedirectItemData.URLTextID">
            <summary>
            Get/set the URL text to display
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RedirectItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load item data from the specified data row
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RedirectItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of the <see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/> in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RedirectItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of the <see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/> in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RedirectItemData.GetTextIdSuffixes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RedirectItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RedirectItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RedirectItemData.CreateItem">
            <summary>
            Create the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RedirectItemData.CreateTextDecorator(System.String)">
            <summary>
            Get a text decorator for the <see cref="T:Checkbox.Forms.Items.RedirectItem"/>
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RedirectItemData.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemMetadata)">
            <summary>
            
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.RedirectItemTextDecorator">
            <summary>
            Localized text decorator for a Redirect Item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RedirectItemTextDecorator.#ctor(Checkbox.Forms.Items.Configuration.RedirectItemData,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data"></param>
            <param name="language"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RedirectItemTextDecorator.Data">
            <summary>
            Get the data for the item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RedirectItemTextDecorator.SetLocalizedTexts">
            <summary>
            Set the localized texts for the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RedirectItemTextDecorator.LinkText">
            <summary>
            Get/set the text for the link
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RedirectItemTextDecorator.CopyLocalizedText(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Copy the localized text associated with thisitem
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ResponseItemData">
            <summary>
            Abstract base class for item meta data for items that store information in a survey response.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ResponseItemData.IsRequired">
            <summary>
            Get/set whether an item must be answered.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ResponseItemData.Copy">
            <summary>
            Copy the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ResponseItemData.CreateDataTransferObject">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ResponseItemData.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemMetadata)">
            <summary>
            
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ResponseItemData.Save">
            <summary>
            Save.  A transaction will be created
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ResponseItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ResponseItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ResponseItemData.UpdatePipes(Checkbox.Forms.Items.Configuration.ItemData.UpdatePipesCallback)">
            <summary>
            Do nothing
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.MessagesUpdatedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MessagesUpdatedEventArgs.OldId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MessagesUpdatedEventArgs.NewId">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.MessagesDeletedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MessagesDeletedEventArgs.Id">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.MessagesUpdated">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.MessagesDeleted">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ScoreMessageItemData">
            <summary>
            Scoring message
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.MessageTableName">
            <summary>
            
            </summary>
        </member>
        <member name="E:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.MessagesUpdated">
            <summary>
            
            </summary>
        </member>
        <member name="E:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.MessagesDeleted">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.PageId">
            <summary>
            Get/set id of page to print score of.  If value is null, all items in survey before
            score item are used.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.Messages">
            <summary>
            Get sorted list of messages
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.DeletedMessages">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.MessageDictionary">
            <summary>
            Get message dictionary
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.GetMessageTextId(System.Int32)">
            <summary>
            Get the score message text id
            </summary>
            <param name="scoreMessageId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.AddScoreRange(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Add a message
            </summary>
            <param name="lowScore"></param>
            <param name="highScore"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.RemoveScoreRange(System.Int32)">
            <summary>
            Remove a message
            </summary>
            <param name="scoreMessageId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.UpdateScoreRange(System.Int32,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Update an existing score range
            </summary>
            <param name="scoreMessageId"></param>
            <param name="lowScore"></param>
            <param name="highScore"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.LoadSprocName">
            <summary>
            Get name of load proc
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load item data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.CreateConfigurationDataSet">
            <summary>
            Create dataset to contain item data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.LoadAdditionalData(Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Load from data set
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of the item in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of the item in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.UpdateScoreMessages(Prezza.Framework.Data.Database,System.Data.IDbTransaction)">
            <summary>
            Update scoring messages
            </summary>
            <param name="db"></param>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.UpdateImportId(System.Collections.Generic.Dictionary{System.Int32,Checkbox.Forms.Items.Configuration.ItemData},System.Collections.Generic.Dictionary{System.Int32,Checkbox.Forms.TemplatePage})">
            <summary>
            
            </summary>
            <param name="itemIdMap"></param>
            <param name="pageIdMap"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.CreateItem">
            <summary>
            Create an instance of a score message
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.CreateTextDecorator(System.String)">
            <summary>
            Create an instance of a score item text decorator
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageItemData.UpdatePipes(Checkbox.Forms.Items.Configuration.ItemData.UpdatePipesCallback)">
            <summary>
            Updates pipes
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ScoreMessageTextDecorator">
            <summary>
            Text decorator for localizing messages in a score message item.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageTextDecorator.#ctor(Checkbox.Forms.Items.Configuration.ItemData,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data"></param>
            <param name="language"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ScoreMessageTextDecorator.Data">
            <summary>
            Get the object data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageTextDecorator.SetLocalizedTexts">
            <summary>
            Get the texts asscociated with this item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageTextDecorator.SetMessageText(System.Int32,System.String)">
            <summary>
            Get the message text
            </summary>
            <param name="scoreMessageID"></param>
            <param name="text"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageTextDecorator.GetMessageText(System.Int32)">
            <summary>
            Get the text of a score message
            </summary>
            <param name="scoreMessageID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ScoreMessageTextDecorator.CopyLocalizedText(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Copy texts for this item
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.TabularItemData">
            <summary>
            Represents an item that contains child items in a table (full or sparse) format.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.TabularItemData.RowCount">
            <summary>
            Get the number of rows for the table
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.TabularItemData.ColumnCount">
            <summary>
            Get the number of columns for the table
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.TabularItemData.GetItemIdAt(System.Int32,System.Int32)">
            <summary>
            Get the item data for the specific location in the table
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.TabularItemData.GetItemCoordinate(System.Int32)">
            <summary>
            Gets the coordinate position of an item with a table where the x-coordinate is the 
            column index of the item and the y-coordinate is the row index
            </summary>
            <param name="itemId">the id of the item</param>
            <returns>the location within the table as an Coordinate</returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.TabularItemData.GetChildItemDataIDs">
            <summary>
            Get the ids of any child item data objects.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.TextItemDecorator">
            <summary>
            Text decorator for a text item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.TextItemDecorator.#ctor(Checkbox.Forms.Items.Configuration.TextItemData,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data"></param>
            <param name="language"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.TextItemDecorator.Data">
            <summary>
            Get the data for the decorator
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.TextItemDecorator.DefaultText">
            <summary>
            Get/set the default text for the item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.TextItemDecorator.SetLocalizedTexts">
            <summary>
            Set the localized texts for the item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.TextItemDecorator.CopyLocalizedText(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Copy localized text associated with this item
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.RatingScaleItemData">
            <summary>
            Item data for a radio button scale
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RatingScaleItemData.ItemDataTableName">
            <summary>
            Get name of table containing data
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RatingScaleItemData.LoadSprocName">
            <summary>
            Load data
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RatingScaleItemData.StartValue">
            <summary>
            Get/set the scale start value
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RatingScaleItemData.EndValue">
            <summary>
            Get/set the scale end value
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RatingScaleItemData.DisplayNotApplicable">
            <summary>
            Get/set whethere or not the N/A option is enabled.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RatingScaleItemData.StartTextID">
            <summary>
            Get text id of the scale start text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RatingScaleItemData.MidTextID">
            <summary>
            Get text id of the scale mid text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RatingScaleItemData.EndTextID">
            <summary>
            Get text id of the scale end text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RatingScaleItemData.NotApplicableTextID">
            <summary>
            Get text id of the n/a text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RatingScaleItemData.Randomize">
            <summary>
            Get/set whether options are randomized
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RatingScaleItemData.AllowOther">
            <summary>
            Get/set whether "other" options are allowed
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemData.UpdateOtherOption(Checkbox.Forms.Items.Configuration.ListOptionData)">
            <summary>
            
            </summary>
            <param name="otherOption"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemData.SetDefaults(Checkbox.Forms.Template)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of radio button scale data
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update existing radio button scale data
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemData.GetTextIdSuffixes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemData.GenerateOptions">
            <summary>
            Generate options for the item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemData.GenerateNotApplicableOption">
            <summary>
            Generate N/A option for the item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemData.NextOptionPosition">
            <summary>
            Returns the next avialable option postion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load item data from the provided data row
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemData.CreateItem">
            <summary>
            Create an instance of a radio button scale business object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemData.CreateTextDecorator(System.String)">
            <summary>
            Create a text decorator for the item
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemData.Copy">
            <summary>
            Copy the rating scale item data
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.RatingScaleItemTextDecorator">
            <summary>
            Text decorator for localizing rating scale item texts
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemTextDecorator.#ctor(Checkbox.Forms.Items.Configuration.RatingScaleItemData,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RatingScaleItemTextDecorator.Data">
            <summary>
            Get a properly cast instance of item data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemTextDecorator.SetLocalizedTexts">
            <summary>
            Set localized texts
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemTextDecorator.PopulateOptionTexts">
            <summary>
            Populate rating scale options with text values
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemTextDecorator.GetAllTexts(System.String)">
            <summary>
            Get text in all languages for the specified text id. If textID is null, return null.
            </summary>
            <param name="textID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.RatingScaleItemTextDecorator.CopyLocalizedText(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Copy localized texts
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RatingScaleItemTextDecorator.StartText">
            <summary>
            Get/set the scale start textfs
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RatingScaleItemTextDecorator.MidText">
            <summary>
            Get/set the scale mid text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RatingScaleItemTextDecorator.EndText">
            <summary>
            Get/set the scale end text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.RatingScaleItemTextDecorator.NotApplicableText">
            <summary>
            Get/set the scale end text
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.SelectItemTextDecorator">
            <summary>
            Decorator for select items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemTextDecorator.TextsLoaded">
            <summary>
            Get/set whether texts have been batch loaded for the item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemTextDecorator.#ctor(Checkbox.Forms.Items.Configuration.SelectItemData,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data"></param>
            <param name="language"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemTextDecorator.Data">
            <summary>
            Get properly casted item data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemTextDecorator.SetLocalizedTexts">
            <summary>
            Set localized texts for this item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemTextDecorator.CopyLocalizedText(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Copy localized text to another item
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemTextDecorator.OtherText">
            <summary>
            Get/set other text for the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemTextDecorator.NoneOfAboveText">
            <summary>
            Get/set none of above text for the item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemTextDecorator.SetOptionText(System.Int32,System.String)">
            <summary>
            Set the text of the option with the specified position
            </summary>
            <param name="position"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemTextDecorator.GetOptionText(System.Int32)">
            <summary>
            Get the text of the option with the 
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemTextDecorator.EnsureTextsLoaded">
            <summary>
            Load option texts
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ItemCategoryInfo">
            <summary>
            Simple container for item category information
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemCategoryInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemCategoryInfo.ParentCategory">
            <summary>
            Get parent category. Always returns empty string.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemCategoryInfo.CategoryName">
            <summary>
            Name of item category
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemCategoryInfo.CategoryId">
            <summary>
            Database id of item category
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemCategoryInfo.NameTextId">
            <summary>
            Text id of category name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemCategoryInfo.DescriptionTextId">
            <summary>
            Text id of category description
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemCategoryInfo.CategoryPosition">
            <summary>
            Position of category relative to other categories
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemCategoryInfo.ItemTypes">
            <summary>
            List of item types in the categories
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ItemTypeInfo">
            <summary>
            Simple container for storing type information
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemTypeInfo.TypeName">
            <summary>
            Short name of item type
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemTypeInfo.TypeId">
            <summary>
            Database id of item type
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemTypeInfo.ClassName">
            <summary>
            Class name of item type's data object
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemTypeInfo.AssemblyName">
            <summary>
            Assembly containing types data class
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemTypeInfo.ParentCategory">
            <summary>
            Item category item belongs to
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemTypeInfo.SurveyCompatible">
            <summary>
            Specifies whether item can be included in web surveys
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemTypeInfo.MobileCompatible">
            <summary>
            Specifies whether item can be included in mobile surveys
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemTypeInfo.ReportCompatible">
            <summary>
            Specifies whether item can be included in reports
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemTypeInfo.LibraryCompatible">
            <summary>
            Specifies whether item can be included in item libraries
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemTypeInfo.TextIdPrefix">
            <summary>
            Specifies the prefix of textID for an item
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ItemConfigurationManager">
            <summary>
            Manages the retrieval and caching of ItemConfigurations
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.Configuration.ItemConfigurationManager._typeCategories">
            <summary>
            Ordered list of type category names
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.Configuration.ItemConfigurationManager._lockObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.#cctor">
            <summary>
            Initialize the hashtable
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetTypeInfoByName(System.String)">
            <summary>
            
            </summary>
            <param name="itemTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetTypeInfoById(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetTypeNameFromId(System.Int32)">
            <summary>
            Get numeric if a type from its text name.
            </summary>
            <param name="typeId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetTypeIdFromName(System.String)">
            <summary>
            Get string name of a type from its numeric id
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.CreateConfigurationData(System.String)">
            <summary>
            Create an instance of an item with the specified type name
            </summary>
            <param name="itemTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.CreateConfigurationData(Checkbox.Forms.Items.Configuration.ItemTypeInfo)">
            <summary>
             Create an instance of an item with the specified type name
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.CreateConfigurationData(System.Int32)">
            <summary>
            Get a new configuration data for an item data of the specified type.
            </summary>
            <param name="itemTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetConfigurationData(System.Int32,System.Boolean)">
            <summary>
            Gets the configuration for the ItemData with the specified identity.  Looks up the correct assembly/class type for the data object in from the 
            database.  
            </summary>
            <param name="identity">the unique identity of the ItemData</param>
            <param name="useCache">allow to use cache</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetConfigurationData(System.Int32,System.Boolean,Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Gets the configuration for the ItemData with the specified identity.  Looks up the correct assembly/class type for the data object in from the 
            database.  
            </summary>
            <param name="identity">the unique identity of the ItemData</param>
            <param name="useCache"></param>
            <param name="ds">Data set to try to load configuration data from first.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.InvalidateCachedItemData(System.Int32)">
            <summary>
            
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetItemTypeName(System.Int32)">
            <summary>
            Get the type name of an item based on its id
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.ListTypeInfoForItems(System.Collections.Generic.List{System.Int32})">
            <summary>
            
            </summary>
            <param name="itemIds"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.ListDataForItems(System.Collections.Generic.List{System.Int32})">
            <summary>
            
            </summary>
            <param name="itemIds"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetItemTypeInfo(System.Int32)">
            <summary>
            Get the type name of an item based on its id
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetConfigurationData(System.String,System.Int32)">
            <summary>
            Get the configuration of the specified type for an item with the specified identity.
            </summary>
            <param name="itemType"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetConfigurationData(System.String,System.Int32,Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Get configuration data for an item.  If a <see cref="T:System.Data.DataSet"/> is passed, the item configuration is loaded from the 
            DataSet, otherwise the item configuration loads itself from the persistent store.
            </summary>
            <param name="itemName">the Type of the ItemData to get</param>
            <param name="identity">the database ID of the ItemData</param>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.ListBasicItemsData(System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            This method collects basic item data up to the specified page.
            It excludes non-answerable and composite(matrix) items, but includes child items
            </summary>
            <param name="responseTemplateId"></param>
            <param name="maxPagePosition"></param>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.MarkBasicItemsDataUpdated(Checkbox.Forms.ResponseTemplate)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.MarkBasicItemsDataUpdated(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.ListResponseTemplateItems(System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.String,System.Nullable{System.Int32})">
            <summary>
            List items in the survey.
            </summary>
            <param name="responseTemplateId">ID of template</param>
            <param name="maxPagePosition">Max position of items to include.</param>
            <param name="includeNonAnswerable"></param>
            <param name="includeComposites"></param>
            <param name="includeChildren">Include child items in the list.  If false, only top-level items will be included.</param>
            <param name="languageCode">Language code for item text.</param>
            <param name="dependentItemId">ID of the row item. Helps to exclude the same row items</param>
            <returns>List of item ids.</returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.ListResponseTemplateCategorizedItems(System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            List categorized items of the survey
            </summary>
            <param name="responseTemplateId">ID of template</param>
            <param name="maxPagePosition">Max position of items to include.</param>
            <param name="languageCode">Language code for item text</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.ListItemTypes">
            <summary>
            Get a list of item type ids
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetItemCategoryList">
            <summary>
            Get a datatable with a list of item categories
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.CopyItemData(Checkbox.Forms.Items.Configuration.ItemData,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Copy an item by exporting / importing it
            </summary>
            <param name="itemData"></param>
            <returns>Copied item, otherwise null if import was not successful</returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.CopyItem(Checkbox.Forms.Items.Configuration.ItemData,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Copy an item's data, appearance, and text
            </summary>
            <param name="itemData"></param>
            <returns>Copied item, otherwise null if import was not successful</returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetItemOptionText(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Retrieve the text for an item, up to a maximum length.   If the length is exceeded,
            the text will be truncated and ellipsis appended.  Use alias instead of text if so
            specified.
            </summary>
            <param name="itemId"></param>
            <param name="optionId"></param>
            <param name="languageCode"></param>
            <param name="maxLength"></param>
            <param name="preferAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetItemOptionText(Checkbox.Forms.Items.Configuration.ItemData,Checkbox.Forms.Items.Configuration.ListOptionData,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Retrieve the text for an item, up to a maximum length.   If the length is exceeded,
            the text will be truncated and ellipsis appended.
            </summary>
            <param name="itemData"></param>
            <param name="optionData"></param>
            <param name="languageCode"></param>
            <param name="maxLength"></param>
            <param name="preferAlias">Prefer alias for getting text.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetItemText(System.Int32,System.String,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Retrieve the text for an item, up to a maximum length.   If the length is exceeded,
            the text will be truncated and ellipsis appended.  Use alias instead of text if so
            specified.
            </summary>
            <param name="itemId"></param>
            <param name="languageCode"></param>
            <param name="maxLength"></param>
            <param name="preferAlias"></param>
            <param name="parentItemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetOptionTexts(Checkbox.Forms.Items.Configuration.SelectItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Get a list of option texts for a select item, up to a maximum length.
            </summary>
            <param name="itemData"></param>
            <param name="languageCode"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetOptionText(Checkbox.Forms.Items.Configuration.ListOptionData,Checkbox.Forms.Items.Configuration.SelectItemTextDecorator,System.Nullable{System.Int32})">
            <summary>
            Do work of truncating option text, etc.
            </summary>
            <param name="option"></param>
            <param name="decorator"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetItemText(System.Int32,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Retrieve the text for an item, up to a maximum length.   If the length is exceeded,
            the text will be truncated and ellipsis appended.
            </summary>
            <param name="itemId"></param>
            <param name="languageCode"></param>
            <param name="maxLength"></param>
            <param name="preferAlias"></param>
            <param name="lookupParentText">If no text or alias is found for the item, look for the item's matrix parent for row text or column text</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetItemParent(System.Int32)">
            <summary>
            Get the id of an item's parent (if any).
            </summary>
            <param name="childItemId"></param>
            <returns></returns>
            <remarks>Currently only works for matrix questions.</remarks>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.ChangeSelectItemType(Checkbox.Forms.Items.Configuration.SelectItemData,System.String,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Copy list data from one item to another, preserving all id values.  This allows
            changing from select 1 to select many, etc.  The existing item is deleted.
            </summary>
            <param name="existingItem"></param>
            <param name="newItemName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.UpdateSelectItemID(Checkbox.Forms.Items.Configuration.ItemData,Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Update select item information in the database to move options and lists from one item to another and delete
            the old item
            </summary>
            <param name="existingItem"></param>
            <param name="newItem"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.InsertAbstractItem(System.String,System.String,System.Boolean,System.String,System.Data.IDbTransaction)">
            <summary>
            Insert an entry into the base item table.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.UpdateAbstractItem(System.Int32,System.String,System.Boolean,System.String,System.Data.IDbTransaction)">
            <summary>
            Mark an item as updated
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.DeleteAbstractItem(System.Int32,System.Data.IDbTransaction)">
            <summary>
            Mark an item as updated
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.IsItemTypeQuestion(System.String)">
            <summary>
            Return a boolean value indicating if the item type is in the "Questions" category.
            </summary>
            <param name="itemTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.ImportItem(Checkbox.Security.Principal.CheckboxPrincipal,System.Xml.XmlNode,Checkbox.Forms.Items.Configuration.ItemImportReader,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.ImportItem(Checkbox.Security.Principal.CheckboxPrincipal,System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.CopyItem(Checkbox.Security.Principal.CheckboxPrincipal,System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback)">
             <summary>
            
             </summary>
             <remarks>The difference between "ImportItem" and "CopyItem" is that the last one doesn't check "IsExportable" property.</remarks>
             <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetPrototypeItemID(System.Int32,System.Boolean)">
            <summary>
            Gets the prototype item id from the same column as the given item
            </summary>
            <param name="ItemID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationManager.GetItemAliases">
            <summary>
            Returns a list of existing item aliases
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.HiddenItemData">
            <summary>
            Container for configuration information associated with Hidden Items.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HiddenItemData.ItemDataTableName">
            <summary>
            Hidden item data table name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HiddenItemData.LoadSprocName">
            <summary>
            Load sproc name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HiddenItemData.VariableName">
            <summary>
            Get/set the name of the variable associated with hidden variables of this type.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HiddenItemData.VariableSource">
            <summary>
            Get/set the location (e.g. Session, Database, etc.) of variables
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HiddenItemData.SetDefaults(Checkbox.Forms.Template)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HiddenItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create the item configuration in the persistent data store
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HiddenItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update the item in the persistent data store
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HiddenItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HiddenItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HiddenItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the hidden item data from the provided <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="data"><see cref="T:System.Data.DataRow"/> containing configuration information.</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HiddenItemData.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemMetadata)">
            <summary>
            
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HiddenItemData.CreateItem">
            <summary>
            Create an instance of a hidden item based on this configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.HiddenItemData.ItemIsIAnswerable">
            <summary>
            Report that the associated Item implements the IAnswerable interface
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.HiddenItemData.CreateTextDecorator(System.String)">
            <summary>
            Create a text decorator for this item
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ImageItemData">
            <summary>
            Container for configuration data associated with Image Items.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ImageItemData.ItemDataTableName">
            <summary>
            Get the name of the table containing image item data
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ImageItemData.LoadSprocName">
            <summary>
            Get load item sproc.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ImageItemData.ImagePath">
            <summary>
            Get/set the path for the image item.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ImageItemData.ImageID">
            <summary>
            Get/set the image id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ImageItemData.AlternateTextID">
            <summary>
            Get the image alt. text id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ImageItemData.ImageData">
            <summary>
            Image data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ImageItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of configuration information in the data store.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ImageItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of configuration information in the data store.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ImageItemData.SaveImageData(System.Data.IDbTransaction)">
            <summary>
            Save the image data, if necessary
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ImageItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the image item configuration properties from the supplied <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="data"><see cref="T:System.Data.DataRow"/> containing configuration information.</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ImageItemData.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemMetadata)">
            <summary>
            Add text data to metadata object
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ImageItemData.GetTextIdSuffixes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ImageItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ImageItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ImageItemData.CreateItem">
            <summary>
            Create an instance of an image item based on this configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ImageItemData.CreateTextDecorator(System.String)">
            <summary>
            Get a text decorator for this item
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ItemData">
            <summary>
            Abstract class representing item configuration data.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.IdentityColumnName">
            <summary>
            Get default identity column name, which is item id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.ParentDataTableName">
            <summary>
            Parent data table name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.ProfilePropertyId">
            <summary>
            Specifies the profile property the item is connected to
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.#ctor">
            <summary>
            Add constructor to ensure items are active by default
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.IsExportable">
            <summary>
            Get whether the item data can be exported
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.ParentTemplateId">
            <summary>
             Get/set the id of parent template.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.Alias">
            <summary>
            Get/set the alias of an item.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.ItemTypeID">
            <summary>
            Get/set the typeid for this item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.ItemTypeName">
            <summary>
            Get the typename for this item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.ParentItemId">
            <summary>
            Matrix id for children
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.IsDeleted">
            <summary>
            Get whether the item has been deleted
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.CreatedBy">
            <summary>
            Who created the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.ModifiedBy">
            <summary>
            Who modified the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.IsActive">
            <summary>
            Get/set whether the item is active
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.ObjectTypeName">
            <summary>
            Get item data
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.ItemDataTableName">
            <summary>
            Get name of an item's data table when loading data from a data set.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.DataTableName">
            <summary>
            Data table name for  configuration data.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.CreateConfigurationDataSet">
            <summary>
            Create configuration data for items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.GetLoadSprocParameters(Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Unless overriden, return parameter named item id
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.ItemIsIAnswerable">
            <summary>
            Get an indication of whether the item created by CreateItem(...) supports
            the IAnswerable interface.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.TextIdPrefix">
            <summary>
            Get text id prefix.  No prefix indicates item does not have localized text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.ItemIsIScored">
            <summary>
            Get an indication of whether the item created by CreateItem(...) supports
            the IScored interface
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.ItemData.ExportElementName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.CreateItem(System.String,System.Nullable{System.Int32})">
            <summary>
            Create an item based on this configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.CreateItem(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Create an item based on this configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.CreateItem(System.String,System.Nullable{System.Int32},Checkbox.Common.ExportMode)">
            <summary>
            Create an item based on this configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.CreateItem(System.String,System.Nullable{System.Int32},Checkbox.Forms.Response)">
            <summary>
            Create an item based on this configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.CreateItem">
            <summary>
            Create an instance of an item to be initialized with its configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.InitializeItem(Checkbox.Forms.Items.Item,System.String,System.Nullable{System.Int32})">
            <summary>
            Initialize the item with it's configuration
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.InitializeItem(Checkbox.Forms.Items.Item,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initialize the item with it's configuration
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.CreateTextDecorator(System.String)">
            <summary>
            Creates an <see cref="T:Checkbox.Forms.Items.Configuration.ItemTextDecorator"/> for the typed ItemData
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create the item
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update the item
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.Delete(System.Data.IDbTransaction)">
            <summary>
            Delete the specified configuration for the item.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.LoadAdditionalData(Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Load "additional" data, which would include the abstract item data.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.LoadAdditionalData(System.String,System.Int32,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.Equals(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Equate item data based on id.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.Import(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.Import(System.Xml.XmlNode,Checkbox.Forms.Items.Configuration.ItemImportReader,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
            <param name="itemReader"></param>
            <param name="callback"></param>
            <param name="creator"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.SetDefaults(Checkbox.Forms.Template)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.SetDefaultTexts">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.ReadCommonXml(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.ReadAppearanceXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.ReadItemImportData(Checkbox.Forms.Items.Configuration.ItemImportReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlkNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.WriteExportAttributes(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.WriteConfigurationToXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            Serialize this object to XML
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.WriteCommonXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.WriteAppearanceXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.UpdateImportId(System.Collections.Generic.Dictionary{System.Int32,Checkbox.Forms.Items.Configuration.ItemData},System.Collections.Generic.Dictionary{System.Int32,Checkbox.Forms.TemplatePage})">
            <summary>
            
            </summary>
            <param name="itemIdMap"></param>
            <param name="pageIdMap"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.Copy(System.Nullable{System.Int32})">
            <summary>
            Create a copy of the ItemData.
            </summary>
            <param name="idOfCopy">ID to assign to the copy</param>
            <returns></returns>
            <remarks>
            In general, this method should only be used in cases where using the ItemConfigurationManager to
            make the copy would not be appropriate, such as when there is an open DB transaction.
            </remarks>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.Copy">
            <summary>
            Peform the work of copying the item.  This should be overridden by appropriate child objects.  For the 4.0 release, 
            the Copy(...) method is only used by MatrixItemData so the only classes that extend this method will be
            those that can appear in a matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.CreateDataTransferObject">
            <summary>
            Create the data transfer object for the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.UpdateFromDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemMetadata)">
            <summary>
            Update item state based on input DTO
            </summary>
            <param name="dto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.GetDataTransferObject(Checkbox.Forms.Template)">
            <summary>
            Get data transfer object for item. This object is suitable for binding to item editors
            and/or to external data processes and removes the need for references to core Checkbox dlls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemMetadata)">
            <summary>
            Build up data transfer object for survey item.
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ItemData.UpdatePipesCallback">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.UpdatePipes(Checkbox.Forms.Items.Configuration.ItemData.UpdatePipesCallback)">
            <summary>
            Updates all texts for the item that can contain pipes
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.ResolveIdDependencies(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Resolves dependencies 
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemData.updatePipes(Checkbox.Forms.Items.Configuration.ItemData.UpdatePipesCallback,System.String)">
            <summary>
            
            </summary>
            <param name="callback"></param>
            <param name="textID"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.ItemConfigurationFactory">
            <summary>
            Factory for creating item configuration objects.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationFactory.CreateItemData(System.String)">
            <summary>
            Create an item data of the specified type.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationFactory.CreateObject(System.Type)">
            <summary>
            Create an object of the specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationFactory.GetType(System.String)">
            <summary>
            Get the <see cref="T:System.Type"/> from a type name.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.ItemConfigurationFactory.ValidateTypeIsItemData(System.Type)">
            <summary>
            Validate that the specified <see cref="T:System.Type"/> is a valid <see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/> type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.LabelledItemData">
            <summary>
            Base class for items that present an input interface.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.LabelledItemData.TextID">
            <summary>
            Get/set the textId for text associated with an item.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.LabelledItemData.SubTextID">
            <summary>
            Get/set the subTextId for text associated with an item.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LabelledItemData.CreateTextDecorator(System.String)">
            <summary>
            Get a decorator
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LabelledItemData.GetTextIdSuffixes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LabelledItemData.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemMetadata)">
            <summary>
            Add text data to metadata object
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.LabelledItemData.UpdatePipes(Checkbox.Forms.Items.Configuration.ItemData.UpdatePipesCallback)">
            <summary>
            
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.MatrixItemData">
            <summary>
            Class to represent matrix item data
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.MatrixItemData.InvalidChildReason">
            <summary>
            Enum used to indicate reason a child is invalid
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.MatrixItemData.ColumnProperties">
            <summary>
            Simple container for matrix column properties
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.MatrixItemData.RowProperties">
            <summary>
            Simple container for matrix row properties
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.MatrixItemData.ChildItemProperties">
            <summary>
            Simple container for properties of items in the matrix
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MatrixItemData.ItemDataTableName">
            <summary>
            Get name of data table containing matrix data
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MatrixItemData.LoadSprocName">
            <summary>
            Get load item sproc
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MatrixItemData.PrimaryKeyColumnIndex">
            <summary>
            Get/set the index of the column that represents the primary keys (questions) for the matrix.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MatrixItemData.RowCount">
            <summary>
            Get the number of rows in the matrix
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MatrixItemData.ColumnCount">
            <summary>
            Get the number of columns in the matrix.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MatrixItemData.BindinedPropertyId">
            <summary>
            Gets or sets the bindined property identifier.
            </summary>
            <value>
            The bindined property identifier.
            </value>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MatrixItemData.BindedFieldName">
            <summary>
            Gets or sets the name of the binded field.
            </summary>
            <value>
            The name of the binded field.
            </value>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.ValidateColumnPosition(System.Int32)">
            <summary>
            Throw an exception if a column position is invalid.
            </summary>
            <param name="columnPosition"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.ValidateRowPosition(System.Int32)">
            <summary>
            Throw an exception if a row position is invalid.
            </summary>
            <param name="rowPosition"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.GetColumnPrototypeId(System.Int32)">
            <summary>
            Get the ID of a prototype for a column.
            </summary>
            <param name="position">1-based Column position</param>
            <returns>Id of the prototype.</returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.GetColumnTypeName(System.Int32)">
            <summary>
            Get type name of a column.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.GetItemIdAt(System.Int32,System.Int32)">
            <summary>
            Get the id of the item at the given position
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.GetItemCoordinate(System.Int32)">
            <summary>
            Get the coordinate of a child item
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.GetColumnPosition(System.Int32)">
            <summary>
            Get column position
            </summary>
            <param name="prototypeItemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.IsRowSubheading(System.Int32)">
            <summary>
            Determine if a row is a subheading or not
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.IsRowOther(System.Int32)">
            <summary>
            Determine if a row is an "other" row
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.GetRowAlias(System.Int32)">
            <summary>
            Get the alias for a row
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.SetRowAlias(System.Int32,System.String)">
            <summary>
            Set the alias for a row
            </summary>
            <param name="row"></param>
            <param name="alias"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.ClearMatrixStructure">
            <summary>
            Clears the matrix structure.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create a new instance of matrix item configuration in the data store.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of matrix item configuration in the data store.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemMetadata)">
            <summary>
            
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.WriteRowData(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.WriteColumnData(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.ReadRowTexts(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.ReadColumnData(System.Xml.XmlNode,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.UpdateChildAppearanceCode(Checkbox.Common.PersistedDomainObject,System.Xml.XmlNode,System.Object)">
            <summary>
            
            </summary>
            <param name="childAppearancePdo"></param>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.ReadRowData(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.SaveColumnData(System.Data.IDbTransaction)">
            <summary>
            Save column information
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.SaveRowData(System.Data.IDbTransaction)">
            <summary>
            Persist the row data to the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.SaveItems(System.Data.IDbTransaction)">
            <summary>
            Perform any necessary item updates
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.DeleteDependentExpressions">
            <summary>
            Unbind expressions from deleted items
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.CreateConfigurationDataSet">
            <summary>
            Create data container for matrix item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.LoadAdditionalData(Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Load additional data for the matrix
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.PopulateColumnProperties(Checkbox.Forms.Items.Configuration.MatrixDataSet)">
            <summary>
            Populate properties for matrix columns
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.PopulateRowProperties(Checkbox.Forms.Items.Configuration.MatrixDataSet)">
            <summary>
            Populate properties for matrix rows
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.PopulateItemDataDictionary(Checkbox.Forms.Items.Configuration.MatrixDataSet)">
            <summary>
            Populate the item data dictionary
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the matrix propertie from the supplied <see cref="T:System.Data.DataRow" />.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.VerifyAndUpdateRowItems(System.Int32)">
            <summary>
            Create/update/do nothing with row child as necessary
            </summary>
            <param name="rowNumber"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.VerifyAndUpdateColumnItems(System.Int32)">
            <summary>
            Create/update/do nothing with column child as necessary
            </summary>
            <param name="columnNumber"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.VerifyAndUpdateChildItem(System.Int32,System.Int32)">
            <summary>
            Ensure child item is of specific type and replace if necessary.
            </summary>
            <param name="rowNumber"></param>
            <param name="columnNumber"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.CreateChildItemData(Prezza.Framework.Common.TableCoordinate)">
            <summary>
            Create child data for the matrix
            </summary>
            <param name="itemCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.CreateRowHeaderItemData(Prezza.Framework.Common.TableCoordinate)">
            <summary>
            Create row header data
            </summary>
            <param name="itemCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.CreateAbstractChildItemData(Prezza.Framework.Common.TableCoordinate)">
            <summary>
            Create data for non-row-header child
            </summary>
            <param name="itemCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.DeleteChildItemData(Prezza.Framework.Common.TableCoordinate)">
            <summary>
            Item coordinate
            </summary>
            <param name="itemCoordinate"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.DeleteRowHeaderItemData(Prezza.Framework.Common.TableCoordinate)">
            <summary>
            Delete item data a row header item.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.DeleteAbstractItemData(Prezza.Framework.Common.TableCoordinate)">
            <summary>
            Delete data for a child that is not a row header.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.VerifyChildItem(System.Int32,System.Int32,Checkbox.Forms.Items.Configuration.MatrixItemData.InvalidChildReason@)">
            <summary>
            Verify a matrix child item
            </summary>
            <param name="columnNumber"></param>
            <param name="rowNumber"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.GetChildDefaultAppearanceCode(System.String)">
            <summary>
            Get default appearance code for items with same type as child.
            </summary>
            <param name="childItemTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.AddRow(System.String,System.String)">
            <summary>
            Add a row to the matrix.  Row will be added as the last row of the matrix
            </summary>
            <param name="alias"></param>
            <param name="rowType"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.UpdateRow(System.Int32,System.String,System.String)">
            <summary>
            Update an existing row
            </summary>
            <param name="alias"></param>
            <param name="rowNumber"></param>
            <param name="rowType"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.RemoveRow(System.Int32)">
            <summary>
            Remove a row at the specified location
            </summary>
            <param name="rowNumber"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.MoveRow(System.Int32,System.Int32)">
            <summary>
            Move a row
            </summary>
            <param name="currentPosition"></param>
            <param name="newPosition"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.MoveRowChildren(System.Int32,System.Int32)">
            <summary>
            Move matrix row children to new row.
            </summary>
            <param name="currentRowNumber"></param>
            <param name="newRowNumber"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.MoveRowChildrenOneRow(System.Int32,System.Boolean)">
            <summary>
            Move children of the specified row up or down one row.
            </summary>
            <param name="rowNumber"></param>
            <param name="moveUp"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.AddColumn(System.Int32,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Add a column to the matrix using the specified item as the prototype.  Column is added as last (rightmost) column.
            </summary>
            <param name="prototypeItemId"></param>
            <param name="itemTypeName"></param>
            <param name="requiresUniqueAnswers"></param>
            <param name="width"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.UpdateColumn(System.Int32,System.Int32,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Update a column's information
            </summary>
            <param name="columnNumber"></param>
            <param name="prototypeItemId"></param>
            <param name="itemTypeName"></param>
            <param name="requiresUniqueAnswers"></param>
            <param name="width"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.RemoveColumn(System.Int32)">
            <summary>
            Remove the column with the specified position
            </summary>
            <param name="columnNumber"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.UpdatePrimaryKeyColumnIndex">
            <summary>
            Update primaryKeyColumnIndex if it was changed
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.SetRowOrder(System.Collections.Generic.List{System.Int32})">
            <summary>
            Set order of rows as function of current positions.  For example, in a 5 row matrix, passing order of
            1,2,3,5,4 would have effect of swapping last two row positions.
            </summary>
            <param name="rows"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.MoveColumn(System.Int32,System.Int32)">
            <summary>
            Move a column
            </summary>
            <param name="currentPosition"></param>
            <param name="newPosition"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.MoveColumnChildren(System.Int32,System.Int32)">
            <summary>
            Move matrix column children to another column
            </summary>
            <param name="currentColumnNumber"></param>
            <param name="newColumnNumber"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.MoveColumnChildrenOneRow(System.Int32,System.Boolean)">
            <summary>
            Move children of the specified column left or right one column.
            </summary>
            <param name="columnNumber"></param>
            <param name="moveLeft"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.SetColumnUniqueness(System.Int32,System.Boolean)">
            <summary>
            Set whether a particular column should be unique
            </summary>
            <param name="column"></param>
            <param name="unique"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.GetColumnUniqueness(System.Int32)">
            <summary>
            Get whether a particular column requires unique answers
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.SetColumnWidth(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Set the width of the column, in pixels
            </summary>
            <param name="column"></param>
            <param name="width"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.GetColumnWidth(System.Int32)">
            <summary>
            Get the width of the column, in pixels
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.CreateItem">
            <summary>
            Create an instance of a matrix item based on this item type
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MatrixItemData.ItemIsIAnswerable">
            <summary>
            Get whether this represents an answerable item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.CreateTextDecorator(System.String)">
            <summary>
            Create a text decorator for an item
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.GetChildItemDataIDs">
            <summary>
            ICompositeItemData implementation of get child item data ids
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.Clone">
            <summary>
            Returns the clone of the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.GetLightweightItem(System.Int32)">
            <summary>
            Get an item
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.Load(System.Xml.XmlNode,Checkbox.Forms.Logic.Configuration.RuleDataService,System.Collections.Generic.Dictionary{System.Int32,Checkbox.Forms.Items.Configuration.ItemData},System.Collections.Generic.Dictionary{System.Int32,Checkbox.Forms.Items.Configuration.ListOptionData},System.Collections.Generic.List{Checkbox.Forms.Logic.Configuration.RuleData},System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
            <param name="rules"></param>
            <param name="itemTable"></param>
            <param name="options"></param>
            <param name="itemConditions"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MatrixItemData.ItemIsIScored">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MatrixItemData.WriteXml(System.Xml.XmlWriter,Checkbox.Forms.Logic.Configuration.RuleDataService)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="rules"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.MessageItemData">
            <summary>
            Container for configuration information for message items.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MessageItemData.ItemDataTableName">
            <summary>
            Get message item data table name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MessageItemData.LoadSprocName">
            <summary>
            Get load sproc name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MessageItemData.TextID">
            <summary>
            Get/set the textId for the message contained in this item.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.MessageItemData.ReportableSectionBreak">
            <summary>
            Get/set the textId for the message contained in this item.
            </summary>
            <value>
            <c>true</c> if [reportable section break]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MessageItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of configuration data for a message item in the data store.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MessageItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an existing instance of message item configuration in the data store.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MessageItemData.CreateItem">
            <summary>
            Create an instance of a data item based on this configuration information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MessageItemData.CreateTextDecorator(System.String)">
            <summary>
            Create a text decorator for the message item
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MessageItemData.GetTextIdSuffixes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MessageItemData.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemMetadata)">
            <summary>
            Add text data to metadata object
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MessageItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            Represents custom fields that are included in setialziation process
            </summary>
            <param name="writer"></param>
            <param name="externalDataCallback"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.MessageItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            </summary>
            <param name="xmlNode"></param>
            <param name="callback"></param>
            <param name="creator"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.Select1Data">
            <summary>
            Container for configuration information associated with Select1 items.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.Select1Data.ItemDataTableName">
            <summary>
            Data table name for select 1 configuration data.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.Select1Data.LoadSprocName">
            <summary>
            Load procedure name
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.Select1Data.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of a Select1 configuration in the persistent store
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.Select1Data.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of a Select1 configuration in the persistent store
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.Select1Data.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load configuration data for this item from the supplied <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.Select1Data.CreateItem">
            <summary>
            Create an instance of a select1 item based on this configuration
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.Select1Data.Options">
            <summary>
            Ensure a max of one option is selected by default
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.SelectItemData">
            <summary>
            Abstract class to contain configuration information for select items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemData.ItemListsTableName">
            <summary>
            Get name of ItemLists table
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemData.ItemOptionsTableName">
            <summary>
            Get name of item options table
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemData.Randomize">
            <summary>
            Get/set whether the options associated with a select item should be presented in random order.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemData.AllowOther">
            <summary>
            Get/set whether an "other" response, i.e. a response not in the list of options, is allowed.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemData.ListId">
            <summary>
            Get/set list id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemData.BindinedPropertyId">
            <summary>
            Gets or sets the bindined property identifier.
            </summary>
            <value>
            The bindined property identifier.
            </value>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemData.BindedPropertyName">
            <summary>
            Gets or sets the name of the binded property.
            </summary>
            <value>
            The name of the binded property.
            </value>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemData.OptionsList">
            <summary>
            Get options list
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemData.OtherTextID">
            <summary>
            Get/set the ID of the text to display as the prompt for the other response.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemData.NoneOfAboveTextID">
            <summary>
            Get/set the ID of the text to display as the prompt for the none of above response.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.CreateConfigurationDataSet">
            <summary>
            Create configuration data for items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemMetadata)">
            <summary>
            
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.RemoveOption(System.Int32)">
            <summary>
            Remove an option from the list
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.AddOption(System.String,System.String,System.Boolean,System.Int32,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Guid})">
            <summary>
            Add a list option
            </summary>
            <param name="alias"></param>
            <param name="category"></param>
            <param name="isDefault"></param>
            <param name="position"></param>
            <param name="points"></param>
            <param name="isOther"></param>
            <param name="isNoneOfAbove"></param>
            <param name="contentID"></param>
            <param name="temporaryGuid"> </param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.UpdateOption(System.Int32,System.String,System.String,System.Boolean,System.Int32,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Guid})">
            <summary>
            Update an option
            </summary>
            <param name="optionId"></param>
            <param name="alias"></param>
            <param name="category"></param>
            <param name="isDefault"></param>
            <param name="position"></param>
            <param name="points"></param>
            <param name="isOther"></param>
            <param name="isNoneOfAbove"></param>
            <param name="contentID"></param>
            <param name="temporaryGuid"> </param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemData.Options">
            <summary>
            Item options
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.GetOption(System.Int32)">
            <summary>
            Get the option with the specified id
            </summary>
            <param name="optionID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.SetConfigurationDataSetColumnMappings(System.Data.DataSet)">
            <summary>
            Set column mappings
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.UpdateLists(System.Data.IDbTransaction)">
            <summary>
            Update lists associated with the select item
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.UpdateOtherOption(Checkbox.Forms.Items.Configuration.ListOptionData)">
            <summary>
            
            </summary>
            <param name="otherOption"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.LoadAdditionalData(Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Load additional data from the data set
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.OnCommit(System.Object,System.EventArgs)">
            <summary>
            Override on commit to call for children
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.OnAbort(System.Object,System.EventArgs)">
            <summary>
            Override onabort to call for children
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemData.ItemIsIAnswerable">
            <summary>
            Get whether this represents an answerable item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectItemData.ItemIsIScored">
            <summary>
            Select items support scoring
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.CreateTextDecorator(System.String)">
            <summary>
            Create a text decoroator for the item that can be used to localize texts for the item
            and it's options.
            </summary>
            <param name="languageCode">Language for the text decorator.</param>
            <returns><see cref="T:Checkbox.Forms.Items.Configuration.SelectItemTextDecorator"/></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.Copy">
            <summary>
            Copy the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.SaveRadioButtonBindedAliases(System.Xml.XmlNode,System.String)">
            <summary>
            Saves the RadioButton binded aliases.
            </summary>
            <param name="xmlNode">The XML node.</param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.WriteOptionContent(System.Xml.XmlWriter,System.Nullable{System.Int32})">
            <summary>
            Write the information about option content in xml
            </summary>
            <param name="writer"></param>
            <param name="contentID"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.ReadOptionContent(System.Xml.XmlNode)">
            <summary>
            Read the information about option content
            </summary>
            <param name="xmlNode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.Clone">
            <summary>
            Ruturns the clone of the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectItemData.UpdatePipes(Checkbox.Forms.Items.Configuration.ItemData.UpdatePipesCallback)">
            <summary>
            Updates pipes
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.SelectManyData">
            <summary>
            Container class for configuration information for a select many item.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectManyData.ItemDataTableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectManyData.LoadSprocName">
            <summary>
            Get load item procedure
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectManyData.IsRequired">
            <summary>
            Get whether the item is required based on the min/max values
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectManyData.MinToSelect">
            <summary>
            Get/set the minimum number of items to select.  The default value is zero.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectManyData.MaxToSelect">
            <summary>
            Get/set the maximum number of items to select.  The default value is the number of total options
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectManyData.AllowNoneOfAbove">
            <summary>
            Get/set if 'none of above' option is 
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectManyData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of a Select1 configuration in the persistent store
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectManyData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an instance of a SelectMany configuration in the persistent store
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectManyData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the configuration information from the supplied <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectManyData.CreateItem">
            <summary>
            Create an instance of a <see cref="T:Checkbox.Forms.Items.SelectMany"/> item based on this configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectManyData.Copy">
            <summary>
            Copy the item
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SelectManyData.ListData">
            <summary>
            Get access to the list data datatable
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectManyData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectManyData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectManyData.UpdateNoneOfAboveOption(Checkbox.Forms.Items.Configuration.ListOptionData)">
            <summary>
            
            </summary>
            <param name="noneOfAboveOption"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SelectManyData.UpdateLists(System.Data.IDbTransaction)">
            <summary>
            Update lists associated with the select item
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.SingleLineTextItemData">
            <summary>
            Container for configuration of <see cref="T:Checkbox.Forms.Items.Configuration.SingleLineTextItemData"/> items.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.ItemDataTableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.LoadSprocName">
            <summary>
            Get load item sproc name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.MinValue">
            <summary>
            Get/set the minimum value for data in the text box when it contains numeric data.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.MaxValue">
            <summary>
            Get/set the maximum value for data in the text box when it contains numeric data.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.AutocompleteListId">
            <summary>
            Autocomplete list Id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.AutocompleteRemote">
            <summary>
            Autocomplete remote source url
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.BindinedPropertyId">
            <summary>
            Gets or sets the bindined property identifier.
            </summary>
            <value>
            The bindined property identifier.
            </value>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.BindedPropertyName">
            <summary>
            Gets or sets the name of the binded property.
            </summary>
            <value>
            The name of the binded property.
            </value>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of single line text item configuration in the persistent data store.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.Update(System.Data.IDbTransaction)">
            <summary>
            Update an existing single line text item configuration in the database.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the configuration data for this item from the specified <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.CreateItem">
            <summary>
            Create an instance of a single-line text item based on this data
            </summary>
            <returns>the Item</returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.CreateTextDecorator(System.String)">
            <summary>
            Create a text item text decorator
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.Copy">
            <summary>
            Copy the item data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.GetMinValueAsDateTime">
            <summary>
            Get minimum value as a datetime
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.GetMaxValueAsDateTime">
            <summary>
            Get maximum value as a date time
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.ReadItemTypeSpecificXml(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.SingleLineTextItemData.WriteItemTypeSpecificXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Configuration.TextItemData">
            <summary>
            Configuration information for Text items.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.TextItemData.IsHtmlFormattedData">
            <summary>
             Specify if the HTML editor must be used
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.TextItemData.DefaultTextID">
            <summary>
            Get/set the default text for the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.TextItemData.Format">
            <summary>
            Get/set the <see cref="T:Checkbox.Forms.Items.AnswerFormat"/> for the item.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.TextItemData.CustomFormatId">
            <summary>
            Get/set the unique identifier for a custom <see cref="T:Checkbox.Forms.Items.AnswerFormat"/>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.TextItemData.MaxLength">
            <summary>
            Get/set the maximum length for the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.TextItemData.MinLength">
            <summary>
            Get/set the minimum length for the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Configuration.TextItemData.ItemIsIAnswerable">
            <summary>
            Get whether this represents an answerable item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.TextItemData.GetTextIdSuffixes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Configuration.TextItemData.Copy">
            <summary>
            Copy the item data
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.JavascriptItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.JavascriptItem.Script">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.JavascriptItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.JavascriptItem.GetInstanceDataValuesForSerialization">
            <summary>
            Get instance collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.NetPromoterScore">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.NetPromoterScore.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.ProgressBarOrientation">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.ScoredItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.ScoredItem.GetScore">
            <summary>
            Get score for this item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.ScoredItem.GetPossibleMaxScore">
            <summary>
            Get possible score for this item
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.Javascript">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.Javascript.AppearanceCode">
            <summary>
            Gets the string code for this AppearanceData
            <remarks>
            This would be the code used to map UI controls to the appearance, for example RADIO_BUTTONS
            </remarks>
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.NetPromoterScore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.NetPromoterScore.AppearanceCode">
            <summary>
            Get the appearance code for net promoter score
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.ProfileUpdater.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.AppearanceDataSet">
            <summary>
            Data container for item appearance
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.UI.AppearanceDataSet.PropertiesTableName">
            <summary>
            Get name of properties table
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceDataSet.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="owningObjectType"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.AppearanceDataSet.ParentDataTableName">
            <summary>
            Get name of parent data talbe
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceDataSet.CreateAbstractDataCommand(Prezza.Framework.Data.Database,System.Int32)">
            <summary>
            
            </summary>
            <param name="db"></param>
            <param name="owningObjectId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceDataSet.GetPropertyRows">
            <summary>
            Get property rows
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.AppearanceProperty">
            <summary>
            Container for appearance property values
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.AppearanceProperty.Name">
            <summary>
            Get/set property name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.AppearanceProperty.ValueAsString">
            <summary>
            Get/set value
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.AppearanceProperty.ValueTypeString">
            <summary>
            Get/set value type string
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceProperty.op_Explicit(Checkbox.Forms.Items.UI.AppearanceProperty)~System.String">
            <summary>
            Conversion operator for property to string
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceProperty.op_Explicit(Checkbox.Forms.Items.UI.AppearanceProperty)~System.Int32">
            <summary>
            Conversion operator for property to int.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceProperty.op_Explicit(Checkbox.Forms.Items.UI.AppearanceProperty)~System.Nullable{System.Int32}">
            <summary>
            Conversion operator for property to nullable int.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceProperty.op_Explicit(Checkbox.Forms.Items.UI.AppearanceProperty)~System.Double">
            <summary>
            Conversion operator for property to double
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceProperty.op_Explicit(Checkbox.Forms.Items.UI.AppearanceProperty)~System.Nullable{System.Double}">
            <summary>
            Conversion operator for property to nullable double
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceProperty.op_Explicit(Checkbox.Forms.Items.UI.AppearanceProperty)~System.Boolean">
            <summary>
            Conver to boolean
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceProperty.op_Explicit(Checkbox.Forms.Items.UI.AppearanceProperty)~System.Nullable{System.Boolean}">
            <summary>
            Conver to boolean
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.CategorizedMatrix">
            <summary>
            Appearance for matrix items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.CategorizedMatrix.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.CategorizedMatrixCheckboxes.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.CategorizedMatrixDropDownList.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.CategorizedMatrixRadioButtons.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.AddressVerifier">
            <summary>
            Appearance for address verifier items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.AddressVerifier.AppearanceCode">
            <summary>
            Address verifier appearance
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.Calculator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.Calculator.AppearanceCode">
            <summary>
            Get the appearance code for the slider item
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.MatrixSlider">
            <summary>
            Appearance data for matrix slider
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.MatrixSlider.AppearanceCode">
            <summary>
            Get the apppearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.RankOrder">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.RankOrder.AppearanceCode">
            <summary>
            Get the appearance code for the slider item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.MatrixMessage.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.MatrixSumTotal">
            <summary>
            Appearance data for MatrixSumTotal
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.MatrixSumTotal.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.RowSelectAppearanceData">
            <summary>
            Appearance data for matrix checkboxes
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.RowSelectAppearanceData.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.Slider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.Slider.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.Slider.AppearanceCode">
            <summary>
            Get the appearance code for the slider item
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.AppearanceDataManager">
            <summary>
            Static manager class for managing item appearance data.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceDataManager.#cctor">
            <summary>
            Constructor to init the default types table
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceDataManager.GetAppearanceData(System.String,System.Int32)">
            <summary>
            Get appearance data
            </summary>
            <param name="typeName"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceDataManager.GetAppearanceData(System.String)">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceDataManager.GetAppearanceData(System.Int32,System.String,Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Get the specified appearance
            </summary>
            <param name="appearanceID"></param>
            <param name="appearanceCode"></param>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceDataManager.GetAppearanceData(System.Int32)">
            <summary>
            Get the appearance with the specified appearance id
            </summary>
            <param name="appearanceID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceDataManager.GetAppearanceDataForItem(System.Int32)">
            <summary>
            Get the appearance data object associated with the specified item.
            </summary>
            <param name="itemId">ID of the item to get associated appearance data object for.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceDataManager.CleanUpAppearanceDataCacheForItem(System.Int32)">
            <summary>
            Removes appearance data from cache for item
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceDataManager.GetAppearanceDataForItem(System.Int32,System.Data.IDbTransaction)">
            <summary>
            Get the appearance data object associated with the specified item and execute read queries
            in the context of the specified transaction.
            </summary>
            <param name="itemId">ID of the item to get the appearance of.</param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceDataManager.GetDefaultAppearanceCodeForType(System.Int32)">
            <summary>
            Get the default appearance code for an item type
            </summary>
            <param name="itemTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceDataManager.GetDefaultAppearanceDataForType(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceDataManager.GetAppearanceDataForCode(System.String)">
            <summary>
            
            </summary>
            <param name="appearanceCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceDataManager.CopyAppearance(Checkbox.Forms.Items.UI.AppearanceData)">
            <summary>
            Copy the specified appearance
            </summary>
            <param name="appearanceToCopy"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceDataManager.UpdateAppearanceCode(System.Int32,System.String)">
            <summary>
            Update an item appearance code.
            </summary>
            <param name="appearanceID"></param>
            <param name="newAppearanceCode"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.Captcha">
            <summary>
            Appearance class for captcha item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.Captcha.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.CloseWindowAppearanceData">
            <summary>
            Appearance data for close window item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.CloseWindowAppearanceData.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.DisplayResponse">
            <summary>
            Appearance data for display response item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.DisplayResponse.AppearanceCode">
            <summary>
            Display response appearance
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.Email">
            <summary>
            Appearance for email item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.Email.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.Upload">
            <summary>
            Appearance class for upload item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.Upload.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.Hidden">
            <summary>
            Appearance data for hidden items (ironic...)
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.Hidden.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.HorizontalLine">
            <summary>
            Appearance data for horizontal line
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.HorizontalLine.AppearanceCode">
            <summary>
            Horizontal line appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.Html">
            <summary>
            Appearance data for html items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.Html.AppearanceCode">
            <summary>
            Get the appearance code for an HTML item
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.HtmlImage">
            <summary>
            Image item appearance
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.HtmlImage.AppearanceCode">
            <summary>
            Get the appearance code for an image
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.LabelledItemAppearanceData">
            <summary>
            Apppearance data for labelled items
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.LabelPosition">
            <summary>
            Label position
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.UI.LabelPosition.Top">
            <summary>
            Label appears above the content.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.UI.LabelPosition.Right">
            <summary>
            Label appears to the right of the content
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.UI.LabelPosition.Left">
            <summary>
            Label appears to the left of the content
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.UI.LabelPosition.Bottom">
            <summary>
            Label appears below the content.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.Matrix">
            <summary>
            Appearance for matrix items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.Matrix.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.MatrixCheckboxes">
            <summary>
            Appearance data for matrix checkboxes
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.MatrixCheckboxes.AppearanceCode">
            <summary>
            Get the apppearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.MatrixDropDownList">
            <summary>
            Appearance data for matrix drop down lists
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.MatrixDropDownList.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.MatrixRadioButtons">
            <summary>
            Appearance data for matrix radio buttons
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.MatrixRadioButtons.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.MatrixRadioButtonScale">
            <summary>
            Appearance code specific to radio buttons contained in a matrix question.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.MatrixRadioButtonScale.AppearanceCode">
            <summary>
            Get the appearance code for this appearance type.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.MatrixRatingScale">
            <summary>
            Appearance data for rating scales that appear inside matrix questions.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.MatrixSelectLayout">
            <summary>
            Appearance data for select items appearing within matrix items.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.MatrixSingleLineText">
            <summary>
            Appearance for single line text items contained in a matrix.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.MatrixSingleLineText.AppearanceCode">
            <summary>
            Get the appearance code for this appearance type.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.MultiLineText">
            <summary>
            Appearance data for multi-line text items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.MultiLineText.AppearanceCode">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.RadioButtonScale">
            <summary>
            Appearance for radio button scale.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.RadioButtonScale.AppearanceCode">
            <summary>
            Get the appearance code for radio button scales
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.RatingScale">
            <summary>
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.RedirectItemAppearanceData">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.RedirectItemAppearanceData.AppearanceCode">
            <summary>
            Get the appearance code for the item
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.ScoreMessageAppearanceData">
            <summary>
            Appearance data for score message items.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.ScoreMessageAppearanceData.AppearanceCode">
            <summary>
            Get the score message appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.AppearanceData">
            <summary>
            Appearance information for template items, including form items, report items, etc.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.AppearanceData.DataTableName">
            <summary>
            For appearance items, the actual concrete data lives in the parent table itself, which is
            backwards, but due to a legacy table so by default, data table is the same as the parent
            table.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.AppearanceData.IdentityColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.AppearanceData.ObjectTypeName">
            <summary>
            Get type name for data.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.AppearanceData.AppearanceCode">
            <summary>
            Gets the string code for this AppearanceData
            <remarks>
            This would be the code used to map UI controls to the appearance, for example RADIO_BUTTONS
            </remarks>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.AppearanceData.AppearanceCodeOverride">
            <summary>
            Used to override appearance code, such as when importing matrix children.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.AppearanceData.LoadSprocName">
            <summary>
            Get appearance data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.AppearanceData.Item(System.String)">
            <summary>
            Access value of appearance properties as string.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
            <remarks>To get properties cast to other times, use GetPropertyValue method.</remarks>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.AppearanceData.Properties">
            <summary>
            Access properties dictionary
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.OverrideAppearanceCode(System.String)">
            <summary>
            Specify override for appearance data.  This value will be used instead of default appearance code
            when creating new instnaces of appearance in the database.  It is not used when updating existing items.
            </summary>
            <param name="newAppearanceCode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.SetDefaults">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.CreateProperty(System.String,System.String,System.String)">
            <summary>
            Create an appearance property object 
            </summary>
            <param name="propertyName"></param>
            <param name="typeNameAsString"></param>
            <param name="valueAsString"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.GetPropertyValue``1(System.String)">
            <summary>
            Get a typed value for a property. Returns default(T) in case of no value
            or conversion error.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.GetPropertyValue``1(System.String,``0)">
            <summary>
            Get a typed value for a property, returning specified default value
            if value is not present or conversion fails.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="??"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.SetPropertyValue(System.String,System.Object)">
            <summary>
            Set the value of a property
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.CreateConfigurationDataSet">
            <summary>
            Create configuration data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.LoadAdditionalData(Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Load property data from the data row
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.LoadProperties(Checkbox.Forms.Items.UI.AppearanceDataSet)">
            <summary>
            Load appearance properties from the specified data set.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.Save(System.Nullable{System.Int32})">
            <summary>
            Save appearance data associated with an item
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.Save(System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Save
            </summary>
            <param name="transaction"></param>
            <param name="itemId">Id of an item.  If no itemId is passed then the AppearanceData is saved but it will not be related to an item.</param>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.Create(System.Data.IDbTransaction)">
            <summary>
            Create an entry in item appearance for this item
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.Update(System.Data.IDbTransaction)">
            <summary>
            Update the appearance data
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.SaveProperties(System.Data.IDbTransaction)">
            <summary>
            Save property data
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.WriteConfigurationToXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.Import(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.Delete(System.Data.IDbTransaction)">
            <summary>
            Delete the appearance data
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.Copy">
            <summary>
            Copy the appearance data to a new appearance data.  Returns null unless specifically overridden.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.AppearanceData.GetPropertiesAsNameValueCollection">
            <summary>
            Get appearance properties as a simple name value collection suitable for sending over WCF service.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.Checkboxes">
            <summary>
            Appearance data checkboxes
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.Checkboxes.AppearanceCode">
            <summary>
            Checkbox appearance code
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.Checkboxes.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.DropDown">
            <summary>
            Appearance for drop down items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.DropDown.AppearanceCode">
            <summary>
            Drop down appearance
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.Layout">
            <summary>
            Layout options for layout of item options.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.UI.Layout.Horizontal">
            <summary>
            Layout items horizontally and repeat horizontall when showing multiple columns.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.UI.Layout.Vertical">
            <summary>
            Layout items vertically and repeat horizontall when showing multiple columns.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.SelectLayout">
            <summary>
            Appearance data class for select items.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.Message">
            <summary>
            Appearance data for message items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.Message.AppearanceCode">
            <summary>
            Get the appearance code
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.RadioButtons">
            <summary>
            Appearance for radio buttons.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.RadioButtons.AppearanceCode">
            <summary>
            Get the appearance code for this appearance type.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.UI.RadioButtons.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.UI.SingleLineText">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UI.SingleLineText.AppearanceCode">
            <summary>
            Get the appearance code for a SingleLineText
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.CategorizedMatrixItem">
            <summary>
            Categorized Matrix item contains all functionality of a standard MatrixItem as well as additional functionality
            requested by the Greater Wellington Regional Council. The Categorized Matrix Item supports both categorizations
            of options and Row Select item types.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.CategorizedMatrixItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Initialize the matrix item with its configuration data
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.AddressVerifierItem">
            <summary>
            Item that allows for 
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.AddressVerifierItem.Region">
            <summary>
            Get/set the region where address should be selected from
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.AddressVerifierItem.SearchType">
            <summary>
            Get/set the serach type
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.AddressVerifierItem.Rule">
            <summary>
            Get/set the rule
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.AddressVerifierItem.Rural">
            <summary>
            Get/set the rural
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.AddressVerifierItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item with the supplied configuration
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.AddressVerifierItem.GetAnswer">
            <summary>
            Get the typed answer for this item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.AddressVerifierItem.GetRawAnswer">
            <summary>
            Returns full answer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.AddressVerifierItem.ValidateAnswers">
            <summary>
            First, use base validation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.AddressVerifierItem.GetMetaDataValuesForSerialization">
            <summary>
            Get meta data values for serialization
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Calculator">
            <summary>
            Input item that allows selection of one of a number of options from a range or a list.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Calculator.RoundToPlaces">
            <summary>
            Get/Set Round Mode
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Calculator.Formula">
            <summary>
            Get/Set Formula
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Calculator.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Calculator.OnPageLoad">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Calculator.GetInstanceDataValuesForSerialization">
            <summary>
            Get instance collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Calculator.UpdateFromDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Calculator doesn't support posting answers from client, so do nothing here
            </summary>
            <param name="dto"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.MatrixChildType">
            <summary>
            MatrixChildType describes the type of the Matrix child
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.MatrixChildType.OrdinaryChild">
            <summary>
            Not defined
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.MatrixChildType.RowText">
            <summary>
            Row Text
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.RankOrder">
            <summary>
            Input item that allows selection of one of a number of options from a range or a list.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.RankOrder.RankOrderType">
            <summary>
            Get/Set Type of the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.RankOrder.RankOrderOptionType">
            <summary>
            Get/Set Rank order option type
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.RankOrder.N">
            <summary>
            N, top N items will be selected
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.RankOrder.Randomize">
            <summary>
            Items should be randomized when presented
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.RankOrder.ShownOptionsCount">
            <summary>
            Determine the count of shown options
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.RankOrder.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.RankOrder.GetInstanceDataValuesForSerialization">
            <summary>
            Get instance collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.RankOrder.OnAnswerDataSet">
            <summary>
            Override on answer data set to synchronize options points
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.RankOrder.UpdateFromDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Override this method to handle posting rank order answers.
            </summary>
            <param name="dto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.RankOrder.Select(System.Collections.Generic.Dictionary{System.Int32,System.Double})">
            <summary>
            Select the answer
            </summary>
            <param name="optionsIdsWithPoints"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.RankOrder.SynchronizeSelectedOptions">
            <summary>
            Synchronize options selected status with answer data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.RankOrder.SynchronizePoinsOptions">
            <summary>
            Synchronize options points with answer data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.RankOrder.AddAnswer(System.Int32,System.Double)">
            <summary>
            Add an answer with points
            </summary>
            <param name="optionId"></param>
            <param name="points"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.RankOrder.UpdateAnswer(System.Int32,System.Double)">
            <summary>
            Update the answer with the new points
            </summary>
            <param name="optionId"></param>
            <param name="points"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.RankOrder.BuildDataTransferObjectAnswerList(System.Collections.Generic.List{Checkbox.Wcf.Services.Proxies.SurveyResponseItemAnswer})">
            <summary>
            
            </summary>
            <param name="answerList"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.RankOrder.WriteAnswers(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write answers to select items
            </summary>
            <param name="writer"></param>
            <param name="isText"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.RankOrder.WriteOptionAnswer(Checkbox.Forms.Items.ListOption,System.Xml.XmlWriter)">
            <summary>
            Write the answer for a specific option
            </summary>
            <param name="option"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.RankOrder.ValidateAnswers">
            <summary>
            Validate answer. Ensure that all the textbox (dropDowns) were used.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.IItemFormatter">
            <summary>
            Interface definition for formatting items to string formats
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.IItemFormatter.Format(Checkbox.Forms.Items.Item,System.String,System.Boolean)">
            <summary>
            Format the specified item to the desired format.
            </summary>
            <param name="item">Item to format.</param>
            <param name="format">Desired format.</param>
            <param name="showScores">Control whether to show scores</param>
            <returns>Item formatted as a string.</returns>
        </member>
        <member name="T:Checkbox.Forms.Items.AnswerableItem">
            <summary>
            Answerable item
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerableItem._answerData">
            <summary>
            
            </summary>
        </member>
        <member name="E:Checkbox.Forms.Items.AnswerableItem.AnswerChanged">
            <summary>
            Event fired when the item's answer changes
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.AnswerableItem.AnswerData">
            <summary>
            Get/set the response answer data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.SetAnswerData(Checkbox.Forms.IAnswerData)">
            <summary>
            Overridable method to set answer data
            </summary>
            <param name="answerData"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.GetAnswerData">
            <summary>
            Overridable method to get answer data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.OnAnswerDataSet">
            <summary>
            Overridable method to allow items that extend the response item to
            perform some processing when the item's answer data is set.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.GetAnswer">
            <summary>
            Get the answer for an item in string form
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.GetRawAnswer">
            <summary>
            Returns all answer data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.SetAnswer(System.Object)">
            <summary>
            Set the answer
            </summary>
            <param name="answer"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.AnswerableItem.HasAnswer">
            <summary>
            Determine if the item has an answer or not
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.DeleteAnswers">
            <summary>
            Delete answers for the item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.UpdateMergedText">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.OnStateRestored">
            <summary>
            Overridable method called when the response state is restored
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.OnAnswerChanged">
            <summary>
            Fire answer changed event
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.OnItemExcluded">
            <summary>
            Delete answers when item is excluded
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.DoValidateItem">
            <summary>
            Validate the item's answers
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.ValidateAnswers">
            <summary>
            Validate the answers to the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Build data transfer object
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.BuildDataTransferObjectAnswerList(System.Collections.Generic.List{Checkbox.Wcf.Services.Proxies.SurveyResponseItemAnswer})">
            <summary>
            Build answer list for data transfer object
            </summary>
            <param name="answerList"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.UpdateFromDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Store posted answers from item dto.
            </summary>
            <param name="dto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.GetMetaDataValuesForSerialization">
            <summary>
            Get metadata data values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.WriteXmlInstanceData(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write xml instance information, including answers
            </summary>
            <param name="writer"></param>
            <param name="isText"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.WriteAnswers(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write answer(s) to xml
            </summary>
            <param name="writer"></param>
            <param name="isText"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.AnswerableItem.ImportAnswers(Checkbox.Analytics.Import.ItemInfo,System.Collections.Generic.List{Checkbox.Analytics.Data.ItemAnswer})">
            <summary>
            
            </summary>
            <param name="srcItem"></param>
            <param name="answers"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.CaptchaItem">
            <summary>
            Item to support creation and generation of CAPTCHA code
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.CaptchaItem.ImageHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.CaptchaItem.ImageWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.CaptchaItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.CaptchaItem.GenerateCodeAndImage(System.Boolean)">
            <summary>
            Generate the code and the image
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.CaptchaItem.GenerateCode">
            <summary>
            Generate the Captcha code based on supplied parameters.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.CaptchaItem.GenerateImage(System.String)">
            <summary>
            Generate and store the actual imate
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.CaptchaItem.ImageUrl">
            <summary>
            Get the image URL for the CAPTCHA image.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.CaptchaItem.Code">
            <summary>
            Get the displayed code.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.CaptchaItem.ValidateAnswers">
            <summary>
            Validate the captcha answers
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.CaptchaItem.EnableSound">
            <summary>
            Get whether sound is enabled.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.CaptchaItem.GetCacheKey">
            <summary>
            Get the key for the capcha item cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.CaptchaItem.StoreData(System.Int32,System.String)">
            <summary>
            Set the answer to the item
            </summary>
            <param name="code"></param>
            <param name="imageID"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.CaptchaItem.GetCode">
            <summary>
            Get the answer for the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.CaptchaItem.GetImageID">
            <summary>
            Get the answer for the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.CaptchaItem.GetMetaDataValuesForSerialization">
            <summary>
            Get meta data values for serialization
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.CaptchaItem.WriteXmlMetaData(System.Xml.XmlWriter)">
            <summary>
            Override write meta data to write the text format enum values
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.CaptchaItem.GetInstanceDataValuesForSerialization">
            <summary>
            Get instance-specific values, such as the code or image url
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.AnswerFormat">
            <summary>
            AnswerFormat describes the required format of an inputed answer
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.None">
            <summary>
            No formatting applied
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.Email">
            <summary>
            Must be a valid email address
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.Integer">
            <summary>
            Must be an Integer
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.Numeric">
            <summary>
            Must be any valid number
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.Decimal">
            <summary>
            Must contain a decimal place
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.Money">
            <summary>
            Must be in currency format
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.Phone">
            <summary>
            Must be formatted as a US phone number
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.SSN">
            <summary>
            Must be formatted as a social security number
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.URL">
            <summary>
            Must be formatted as a url
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.Postal">
            <summary>
            Must be a US or Canadian zip code
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.Alpha">
            <summary>
            Must be comprised of only the letters a through z or A through Z
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.Lowercase">
            <summary>
            Must be comprised of only the letters a through z
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.Uppercase">
            <summary>
            Must be comprised of only the letters A through Z
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.Date">
            <summary>
            Must be formatted as either MM/DD/YYYY or DD/MM/YYYY
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.Date_USA">
            <summary>
            Must be formatted as either MM/DD/YYYY
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.Date_ROTW">
            <summary>
            Must be formatted as either DD/MM/YYYY
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.AlphaNumeric">
            <summary>
            Must be comprised of only a through, A through Z, or 0 through 9
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.AnswerFormat.Custom">
            <summary>
            A cutom validator created by users
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.CloseWindowItem">
            <summary>
            Simple survey item to close a browser window.  There is no business logic, simply
            an associated renderer that emits Javascript.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.CurrentScore">
            <summary>
            Item that appends the current survey score to the predefined message.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.CurrentScore.PageId">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.CurrentScore.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.CurrentScore.GetScore">
            <summary>
            Get the current score
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.CurrentScore.Text">
            <summary>
            Get the text of the message.
            </summary>
            <returns>Base message text with score appended.</returns>
        </member>
        <member name="T:Checkbox.Forms.Items.DisplayAnalysisItem">
            <summary>
            Survey item that displays a report item in the survey.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.DisplayAnalysisItem.ShowInNewTab">
            <summary>
            Should be shown in new browser tab
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.DisplayAnalysisItem.RestartSurvey">
            <summary>
            Always return false
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.DisplayAnalysisItem.Url">
            <summary>
            Get the URL
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.DisplayAnalysisItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.DisplayAnalysisItem.GetMetaDataValuesForSerialization">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.DisplayResponseItem">
            <summary>
            Display a response in the survey or as a link to separate window
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.DisplayResponseItem.ResponseTemplate">
            <summary>
            Get survey associated with response
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.DisplayResponseItem.GetResponseTemplate">
            <summary>
            Get a response template based on a responseGUID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.DisplayResponseItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item with its configuration information
            </summary>
            <param name="configuration">Item configuration</param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.DisplayResponseItem.GetLinkText">
            <summary>
            Get the text for the link
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.DisplayResponseItem.GetLinkUrl">
            <summary>
            Get the link URL
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.DisplayResponseItem.DisplayInlineResponse">
            <summary>
            Get whether to display an inline response
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.DisplayResponseItem.GetResponseHtml">
            <summary>
            Get HTML to display 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.DisplayResponseItem.GetPageTitle(Checkbox.Forms.ResponsePage)">
            <summary>
            
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.DisplayResponseItem.GetItemNumber(Checkbox.Forms.Items.Item)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.DisplayResponseItem.GetItemHtml(Checkbox.Forms.Items.Item)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.DisplayResponseItem.FormatterDictionary">
            <summary>
            Get the temporary item formatter dictionary
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.DisplayResponseItem.GetItemFormatter(System.Int32)">
            <summary>
            Get the html formatter for a given item
            </summary>
            <param name="itemTypeId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.DisplayResponseItem.GetMetaDataValuesForSerialization">
            <summary>
            Get meta data for serialization
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.DisplayResponseItem.GetInstanceDataValuesForSerialization">
            <summary>
            Get instance-specific information
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.EmailItem">
            <summary>
            Item that encapsulates sending an email.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.EmailItem.From">
            <summary>
            Get the from email address
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.EmailItem.MessageFormat">
            <summary>
            Get the message format
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.EmailItem.MessageContentType">
            <summary>
            Get the email message mime type when sending email as attachments (not
            currently part of the product, but will be eventually).
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.EmailItem.StyleTemplateID">
            <summary>
            Gets the StyleTemplate ID associated with this email
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.EmailItem.To">
            <summary>
            Get the To address
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.EmailItem.BCC">
            <summary>
            Get the bcc address
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.EmailItem.Subject">
            <summary>
            Get the email subject
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.EmailItem.Body">
            <summary>
            Get the email body
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.EmailItem._visible">
            <summary>
            Get whether the item is visible
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.EmailItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.EmailItem.GetMessageTemplate">
            <summary>
            Get the template for a message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.EmailItem.GetBodyText">
            <summary>
            Get Message Body
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.EmailItem.GetMessageBody">
            <summary>
            Create the message body
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.EmailItem.OnPageLoad">
            <summary>
            Send the email when the page is loaded
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.EmailItem.Response_PageChanged(System.Object,Checkbox.Forms.ResponsePageChangedEventArgs)">
            <summary>
            Send message when page is advanced
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.EmailItem.SendEmail">
            <summary>
            Send the email message
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.EmailItem.MarkEmailSent">
            <summary>
            Mark that an email has been sent by storing an answer
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.EmailItem.CheckEmailSent">
            <summary>
            Check if the email has been sent
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.EmailItem.OkToSend">
            <summary>
            Determine whether it's ok to send the message by checking the response state
            and the send once parameter.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.EmailItem.GetMetaDataValuesForSerialization">
            <summary>
            Get metadata/configuration related values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.EmailItem.GetInstanceDataValuesForSerialization">
            <summary>
            Get data for the item
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.EmailResponseItem">
            <summary>
            Encapsulate emailing a response to a survey
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.EmailResponseItem.GetBodyText">
            <summary>
            Get the body text
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.EmailResponseItem.GetdMessageBody(System.String)">
            <summary>
            Generate the message body
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.IItemRenderer">
            <summary>
            Base interface for item renderers
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.IItemRenderer.DataTransferObject">
            <summary>
            Get reference to item to render.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.IItemRenderer.Appearance">
            <summary>
            Appearance data for the renderer.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.IItemRenderer.Initialize(Checkbox.Wcf.Services.Proxies.IItemProxyObject,System.Nullable{System.Int32},Checkbox.Forms.RenderMode,Checkbox.Common.ExportMode)">
            <summary>
            Bind renderer to item
            </summary>
            <param name="model"></param>
            <param name="itemPosition"></param>
            <param name="renderMode"></param>
            <param name="exportMode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.IItemRenderer.Initialize(Checkbox.Wcf.Services.Proxies.IItemProxyObject,System.Nullable{System.Int32},Checkbox.Forms.RenderMode)">
            <summary>
            Bind renderer to item
            </summary>
            <param name="model"></param>
            <param name="itemPosition"></param>
            <param name="renderMode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.IItemRenderer.BindModel">
            <summary>
            Bind renderer to the item.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.IItemRenderer.UpdateModel">
            <summary>
            Update the model with an user interface or other data.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.IItemRenderer.Visible">
            <summary>
            Get whether renderer is visible.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.ItemFormatterFactory">
            <summary>
            Factory for creating item formatters
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ItemFormatterFactory.TypeCache">
            <summary>
            Get the type cache
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.ItemFormatterFactory.GetFormatterType(System.Int32,System.String)">
            <summary>
            Get the type for a formatter based on the item type id and desired
            text format.
            </summary>
            <param name="itemTypeId">Type id of item to create a formatter for.</param>
            <param name="format">Desired format for output text.</param>
            <returns>Type information for item formatter.</returns>
            <remarks>The type information is cached, so any changes to the type
            information in the database will require an application restart
            to take effect.</remarks>
        </member>
        <member name="M:Checkbox.Forms.Items.ItemFormatterFactory.LookupFormatterType(System.Int32,System.String)">
            <summary>
            Lookup an item formatter type in the database.
            </summary>
            <param name="itemTypeId">Type Id of item to format.</param>
            <param name="format">Desired format.</param>
            <returns>Type information.</returns>
        </member>
        <member name="M:Checkbox.Forms.Items.ItemFormatterFactory.GetItemFormatter(System.Int32,System.String)">
            <summary>
            Get an item formatter for the specified item type and format.
            </summary>
            <param name="itemTypeId">Type Id of item to format.</param>
            <param name="format">Desired format.</param>
            <returns><see cref="T:Checkbox.Forms.Items.IItemFormatter"/> item formatter.</returns>
            <remarks>The type information is cached, so any changes to the type
            information in the database will require an application restart
            to take effect.</remarks>
        </member>
        <member name="T:Checkbox.Forms.Items.ItemRendererFactory">
            <summary>
            Factory for creating item renderers
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.ItemRendererFactory.RendererTypeInfo">
            <summary>
            Container class for storing renderer type information.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ItemRendererFactory.RendererTypeInfo.AppearanceCode">
            <summary>
            Get/set appearance code
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ItemRendererFactory.RendererTypeInfo.ClassName">
            <summary>
            Class name for renderer
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ItemRendererFactory.RendererTypeInfo.AssemblyName">
            <summary>
            Assembly name for renderer
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ItemRendererFactory.RendererInfo">
            <summary>
            Get renderer info
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.ItemRendererFactory.Create(System.String)">
            <summary>
            </summary>
            <param name="appearanceCode"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Checkbox.Forms.Items.ItemRendererFactory.CreateObject(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.ItemRendererFactory.GetType(System.String)">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.ItemRendererFactory.ValidateTypeIsItemRenderer(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.ItemRendererFactory.LoadRendererInfo(System.Collections.Generic.Dictionary{System.String,Checkbox.Forms.Items.ItemRendererFactory.RendererTypeInfo})">
            <summary>
            Populate renderer dictionary
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.MatrixColumnInfo">
            <summary>
            Simple container for matrix column information
            </summary>
            <remarks>Auto get/set properties are used instead of public fields since properties
            are required for DataBinder.Eval(...) syntax which is useful for item renderers.</remarks>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.TypeName">
            <summary>
            Type of column
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.LanguageCode">
            <summary>
            Get/set response language
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.ColumnNumber">
            <summary>
            Get/set column number
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.ValidationErrors">
            <summary>
            Get/set validation errors for column
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.RequireUniqueAnswers">
            <summary>
            Get/set whether column requires unique answers
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.Width">
            <summary>
            Get/set width of column
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.RequireAnswers">
            <summary>
            Get/set whether column requires answers
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.PrototypeItemId">
            <summary>
            Get/set id of column prototype item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.TemplateID">
            <summary>
            Get/set template ID
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.Alias">
            <summary>
            Column alias
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixColumnInfo.GetDataTransferObject">
            <summary>
            Create and populate an object to use for data transfer
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.PrototypeItemData">
            <summary>
            Get data container for matrix column
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.PrototypeItem">
            <summary>
            Get business logic container for prototype item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.PrototypeAppearance">
            <summary>
            Get appearance for column
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.PrototypeItemTypeId">
            <summary>
            Get type id of item associated with column
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.PrototypeItemTypeName">
            <summary>
            Get type name of prototype item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.Text">
            <summary>
            Get text of column
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixColumnInfo.GetOptionTexts">
            <summary>
            Get option texts
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.IsRatingScale">
            <summary>
            Get a boolean indicating if item is a rating scale
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.ScaleStartText">
            <summary>
            Get start text of scale
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.ScaleEndText">
            <summary>
            Get scale end text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixColumnInfo.ScaleMidText">
            <summary>
            Get scale mid text
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.MatrixRowInfo">
            <summary>
            Simple container for matrix row information
            </summary>
            <remarks>Auto get/set properties are used instead of public fields since properties
            are required for DataBinder.Eval(...) syntax which is useful for item renderers.</remarks>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixRowInfo.RowNumber">
            <summary>
            Get/set matrix row number
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixRowInfo.RowType">
            <summary>
            Get/set row's type
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixRowInfo.Text">
            <summary>
            Get/set row text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixRowInfo.Alias">
            <summary>
            Get/set row alias
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixRowInfo.GetDataTransferObject">
            <summary>
            Create and populate an object to use for data transfer
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.RandomComparer`1">
            <summary>
            Comparer that provides a random +1 or -1 value.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>The underlying "Random" object is static so to avoid potential issues with creating
            multiple "Random" objects concurrently that will product the same pseudorandom sequence.
            </remarks>
        </member>
        <member name="M:Checkbox.Forms.Items.RandomComparer`1.#cctor">
            <summary>
            Statid co
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.RandomComparer`1.RandomGetNext(System.Int32,System.Int32)">
            <summary>
            Get the next int
            </summary>
            <param name="minValue">Inclusive lower bound for value to return.</param>
            <param name="maxValue">Inclusive upper bound for value to return.</param>
            <returns>Random int between the two inclusive bounds.</returns>
        </member>
        <member name="M:Checkbox.Forms.Items.RandomComparer`1.Compare(`0,`0)">
            <summary>
            Compare two values
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.RowSelect">
            <summary>
            Input item that allows selection of row(s) in matrix item.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.RowSelect.MinToSelect">
            <summary>
            Get the minimum number of items that have to be selected
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.RowSelect.MaxToSelect">
            <summary>
            Get the maximum number of items that have to be selected
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.RowSelect.AllowMultipleSelection">
            <summary>
            Determine if this row selector allows multiple selection or not.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.RowSelect.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item with the supplied configuration
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.RowSelect.CreateOptions(System.Collections.ObjectModel.ReadOnlyCollection{Checkbox.Forms.Items.Configuration.ListOptionData})">
            <summary>
            
            </summary>
            <param name="metaOptions"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.RowSelect.EnsureSingleOptionSelected">
            <summary>
            Ensure that only one option is selected
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.RowSelect.SynchronizeSelectedOptions">
            <summary>
            Synchronize options, but verify that only one is selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.RowSelect.GetInstanceDataValuesForSerialization">
            <summary>
            Get instance data for serialization
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.RowSelect.ValidateAnswers">
            <summary>
            Returns true. All validation actions will be performed in <see cref="T:Checkbox.Forms.Validation.MatrixItemValidator" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.RowSelect.WriteOptionAnswer(Checkbox.Forms.Items.ListOption,System.Xml.XmlWriter)">
            <summary>
            Override to show "X" on selected row
            </summary>
            <param name="option"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Slider">
            <summary>
            Input item that allows selection of one of a number of options from a range or a list.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Slider.ValueType">
            <summary>
            Get/Set Value Type
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Slider.MinValue">
            <summary>
            Get/Set Min Value
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Slider.MaxValue">
            <summary>
            Get/Set Max Value
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Slider.StepSize">
            <summary>
            Size of a given “step” when moving the slider.  
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Slider.DefaultValue">
            <summary>
            Initial starting value for the slider. Uses only in NumberRange value type.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Slider.ValueListOptionType">
            <summary>
            Get/set value list option type
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Slider.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Slider.GetInstanceDataValuesForSerialization">
            <summary>
            Get instance collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Slider.SetAnswer(System.Object)">
            <summary>
            Set the answer
            </summary>
            <param name="answer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Slider.UpdateFromDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Override this method to handle posting slider answers.
            </summary>
            <param name="dto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Slider.BuildDataTransferObjectAnswerList(System.Collections.Generic.List{Checkbox.Wcf.Services.Proxies.SurveyResponseItemAnswer})">
            <summary>
            
            </summary>
            <param name="answerList"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Slider.WriteAnswers(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write answers to select items
            </summary>
            <param name="writer"></param>
            <param name="isText"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Slider.HasAnswer">
            <summary>
            Determine if the item has an answer or not
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Slider.GetAnswer">
            <summary>
            Get the answer for an item in string form
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Slider.GetAnswer(System.String@)">
            <summary>
            Get the answer for an item in string form. If this is image slider, set imageUrl of answer image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Slider.GetAnswerForNumericSlider(System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Slider.OnItemExcluded">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Slider.GetScore">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Slider.InitializeDefaults">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.XsltItemFormatter">
            <summary>
            Implementation of an item formatter that uses XSL transformation
            of an item's serialized XML to format the item.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.XsltItemFormatter.Format(Checkbox.Forms.Items.Item,System.String,System.Boolean)">
            <summary>
            Format the item
            </summary>
            <param name="item">Item to format.</param>
            <param name="format">Desired format.</param>
            <param name="showScores">Show scores</param>
            <returns>Item formatted as a string.</returns>
        </member>
        <member name="M:Checkbox.Forms.Items.XsltItemFormatter.GetArgumentList(Checkbox.Forms.Items.Item)">
            <summary>
            Get any arguments to pass to the transform, such as localized text, etc.
            </summary>
            <param name="item">f</param>
            <returns>List of xsl arguments</returns>
        </member>
        <member name="M:Checkbox.Forms.Items.XsltItemFormatter.LoadTransform(System.String)">
            <summary>
            Load the xsl transform object from disk.  This can be overridden
            to load the transform from other locations.
            </summary>
            <param name="format">Desired item format.</param>
            <returns><see cref="T:System.Xml.Xsl.XslCompiledTransform"/> object.</returns>
        </member>
        <member name="M:Checkbox.Forms.Items.XsltItemFormatter.GetXslFilePath(System.String)">
            <summary>
            Get the file path location of the xsl transform file.  Returns
            an empty string by default.
            </summary>
            <param name="format">Desired text format.</param>
            <returns>File path of xsl tranform to use.</returns>
        </member>
        <member name="T:Checkbox.Forms.Items.UploadItem">
            <summary>
            Upload items during a survey
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UploadItem.Data">
            <summary>
            Get/Set the uploaded file.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UploadItem.FileName">
            <summary>
            Get/Set the file name of an uploaded file.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UploadItem.ResponseId">
            <summary>
            Used only for downloading files
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UploadItem.FileGuid">
            <summary>
            Set/Get file uniqu identifier
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UploadItem.FileSize">
            <summary>
            Get the file size of an uploaded file in bytes.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UploadItem.FileSizeDisplay">
            <summary>
            Get the string representation of the file size in kilo bytes.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UploadItem.FileType">
            <summary>
            Get/Set the file type of an uploaded file.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UploadItem.AllowedFileTypes">
            <summary>
            Get/Set the list of files types which are approved for upload.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.UploadItem.AllowedFileTypesCSV">
            <summary>
            Get the list of files types which are approved for upload as a comma separated list.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.UploadItem.#ctor">
            <summary>
            Construct an uploaded item.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.UploadItem.#ctor(System.Byte[],System.String,System.String,System.Int64,System.Guid)">
            <summary>
            Construct an uploaded item.
            </summary>
            <param name="data">The binary data of the upoaded file.</param>
            <param name="fileName">The name of the uploaded file.</param>
            <param name="fileType">The type of the uploaded file.</param>
            <param name="responseId"> </param>
            <param name="fileGuid"> </param>
        </member>
        <member name="M:Checkbox.Forms.Items.UploadItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.UploadItem.UploadFile(System.String,System.Byte[],System.String)">
            <summary>
            Upload a file to the web server.
            </summary>
            <param name="fileName"></param>
            <param name="data"></param>
            <param name="fileType"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.UploadItem.GetAllAnswerIds">
            <summary>
            Returns a list containing all the answer ids for an item.
            </summary>
            <returns>The list of all answer ids. If no answers are found an empty List is returned.</returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UploadItem.ValidateFileType">
            <summary>
            Get the validator for this item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UploadItem.ValidateAnswers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UploadItem.UpdateFromDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Update survey response from data transfer object
            </summary>
            <param name="dto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.UploadItem.GetMetaDataValuesForSerialization">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UploadItem.GetInstanceDataValuesForSerialization">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.UploadItem.WriteAnswers(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write instance data to XML
            </summary>
            <param name="writer"></param>
            <param name="isText"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.HorizontalLine">
            <summary>
            Business object for a horizontal line
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.HorizontalLine.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.HorizontalLine.Width">
            <summary>
            Get the width of the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.HorizontalLine.Thickness">
            <summary>
            Get the thickness of the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.HorizontalLine.Color">
            <summary>
            Get the color of the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.HorizontalLine.Unit">
            <summary>
            Get the unit specification for the line width
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.HorizontalLine.GetMetaDataValuesForSerialization">
            <summary>
            Get meta data for the item
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.IAnswerable">
            <summary>
            Marker interface that denotes an Item collects data and is accountable for that data
            </summary>
        </member>
        <member name="E:Checkbox.Forms.Items.IAnswerable.AnswerChanged">
            <summary>
            Event indicating an item's answer has changed
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.IAnswerable.GetAnswer">
            <summary>
            Get a human-readable answer for an item that implements this interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.IAnswerable.GetRawAnswer">
            <summary>
            Get a raw answer for an item that implements this interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.IAnswerable.SetAnswer(System.Object)">
            <summary>
            Set the answer to the item
            </summary>
            <param name="answer">Answer value</param>
        </member>
        <member name="P:Checkbox.Forms.Items.IAnswerable.HasAnswer">
            <summary>
            Get a boolean indicating if the item has an answer
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.IAnswerable.DeleteAnswers">
            <summary>
            Delete the answer(s) for the item.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.IAnswerable.UpdateMergedText">
            <summary>
            Updates item answer if SPC was triggered or the response was resumed 
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.ICompositeItem">
            <summary>
            Interface definition for items comprised of other items.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ICompositeItem.Items">
            <summary>
            Get a read-only collection of the item's children.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.IScored">
            <summary>
            Interface for items that support a score
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.IScored.GetScore">
            <summary>
            Get the "score" for the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.IScored.GetPossibleMaxScore">
            <summary>
            Get max possible for the item
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.MatrixSumTotalItem">
            <summary>
            Matrix sum total item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixSumTotalItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixSumTotalItem.TotalValue">
            <summary>
            Get the value
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixSumTotalItem.ComparisonOperator">
            <summary>
            Get the comparison
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.MultiLineTextBoxItem">
            <summary>
            Item implementation for a multi-line text box
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.MultiLineTextBoxItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure this item with the supplied configuration
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.ProfileUpdater">
            <summary>
            Item to update profile information
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.ProfileUpdater.GetPropertyList">
            <summary>
            Get list of properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.ProfileUpdater.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.ProfileUpdater.OnPageLoad">
            <summary>
            Perform the item processing
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ProfileUpdater.Visible">
            <summary>
            Get whether the item is visible, which is only in the editor
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.ProfileUpdater.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Build up data transfer object
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.ProfileUpdater.WriteXmlInstanceData(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write the instance data
            </summary>
            <param name="writer"></param>
            <param name="isText"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.RedirectItem">
            <summary>
            Item representing a redirect
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.RedirectItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.RedirectItem.LinkText">
            <summary>
            Get the text for the link
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.RedirectItem.Url">
            <summary>
            Get the URL for the link
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.RedirectItem.RedirectAutomatically">
            <summary>
            Get whether to redirect automatically or provide a link
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.RedirectItem.RedirectAutomaticallyDelay">
            <summary>
            Get whether to redirect automatically or provide a link
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.RedirectItem.RestartSurvey">
            <summary>
            Get whether the survey should be restarted
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.RedirectItem.OpenInNewWindow">
            <summary>
            Get/set whether to open in the same window or tab
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.RedirectItem.GetMetaDataValuesForSerialization">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.RedirectItem.GetInstanceDataValuesForSerialization">
            <summary>
            Get instance data for serialization
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.ResponseItem">
            <summary>
            Base class definition for items that participate in a survey response.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ResponseItem.Required">
            <summary>
            Gets whether the Item is required
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ResponseItem.Valid">
            <summary>
            Get whether the item is valid
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ResponseItem.ValidationErrors">
            <summary>
            Get any validation errors.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.Validate">
            <summary>
            Validate the current state of the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.DoValidateItem">
            <summary>
            Validate the state of the item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the response item.
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.OnPageLoad">
            <summary>
            On load override
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.RunRules">
            <summary>
            Runs any Rules for this Item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ResponseItem.EditMode">
            <summary>
            Return a boolean indicating if in "Edit Mode" or not.  Considered "Edit Mode" if
            no response has been set.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ResponseItem.Response">
            <summary>
            Gets and sets the parent <see cref="P:Checkbox.Forms.Items.ResponseItem.Response"/> for this Item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ResponseItem.IsSPCArgument">
            <summary>
            There are other items on the same page that depends on this item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.SetResponse(Checkbox.Forms.Response,System.Boolean)">
            <summary>
            Overridable method to set the response
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.GetResponse">
            <summary>
            Overridable method to get response
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.OnResponseSet">
            <summary>
            Overridable method called when the response is set
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.ResponseStateRestored(System.Object,Checkbox.Forms.ResponseStateEventArgs)">
            <summary>
            Call overridable state restored handler when response state is restored
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.OnStateRestored">
            <summary>
            Overriable handler for response state restored
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.GetPipedText(System.String,System.String)">
            <summary>
            Get text from the pipe manager, registering the text if necessary.  If
            response is null, the text value is returned.
            </summary>
            <param name="key"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.CreateDataTransferObject">
            <summary>
            Create the data transfer object to use for remote survey taking
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Build data transfer object
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.UpdateFromDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Update repsonse item state from new state in item dto.  It is up to individual response items
            to implement this functionality as default implementation is a no op.
            </summary>
            <param name="dto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.GetInstanceDataValuesForSerialization">
            <summary>
            Get instance data for the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.ResponseItem.WriteXmlInstanceData(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write instance data and add validation messages
            </summary>
            <param name="writer"></param>
            <param name="isText"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.ScoreMessageItem">
            <summary>
            Item to display a score depending on a the total score for the survey.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ScoreMessageItem.PageId">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.ScoreMessageItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.ScoreMessageItem.GetScore">
            <summary>
            Get the current score
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.ScoreMessageItem.Text">
            <summary>
            Get the item text
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.ScoreMessageItem.ScoreMessagesToString">
            <summary>
            Return a string representation of all score messages
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.ScoreMessageItem.GetMetaDataValuesForSerialization">
            <summary>
            Get meta data for serialization to renderers
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.TabularItem">
            <summary>
            Represents a composite item that has a grid of child items
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item with its configuration
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.SetRowCount(Checkbox.Forms.Items.Configuration.TabularItemData)">
            <summary>
            Set the row count
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.SetColumnCount(Checkbox.Forms.Items.Configuration.TabularItemData)">
            <summary>
            Set the column count
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.CreateChildItemsDictionary">
            <summary>
            Create the dictionary to hold child items
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.CreateChildItems(Checkbox.Forms.Items.Configuration.TabularItemData,System.String)">
            <summary>
            Create child items
            <remarks>
            Overriding this method requires you also override GeChildItemCoordinate(ItemData child) as it depends on the 
            particular Dictionary key encoding performed in this explicit implementation TabularItem.CreateChildItems
            </remarks>
            </summary>
            <param name="config"></param>
            <param name="languageCode"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.GetChildItemCoordinate(System.Int32)">
            <summary>
            Get the coordinate for child item
            </summary>
            <param name="childId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.SetChildItemInDictionary(Prezza.Framework.Common.Coordinate,Checkbox.Forms.Items.Item)">
            <summary>
            Set the reference to the child item in the child items dictionary
            </summary>
            <param name="key"></param>
            <param name="childItem"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.childItem_ItemExcluded(System.Object,System.EventArgs)">
            <summary>
            Handle a child item being excluded
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.childItem_ItemIncluded(System.Object,System.EventArgs)">
            <summary>
            Handle a child item being included
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.OnChildItemExcluded(Checkbox.Forms.Items.Item)">
            <summary>
            Overridable handler for a child being excluded
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.OnChildItemIncluded(Checkbox.Forms.Items.Item)">
            <summary>
            Overridable handler for a child being included
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.GetChildItemFromDictionary(Prezza.Framework.Common.Coordinate)">
            <summary>
            Get the child item from the dictionary
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.TabularItem.RowCount">
            <summary>
            Get/set the number of rows for this item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.TabularItem.ColumnCount">
            <summary>
            Get/set the number of columns for this item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.TabularItem.HasAnswer">
            <summary>
            Get whether the item has been answered
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.DeleteAnswers">
            <summary>
            Delete the child answers
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.ValidateAnswers">
            <summary>
            Validate answers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.GetItemAt(System.Int32,System.Int32)">
            <summary>
            Get the item at the specified index
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.GetItemWithID(System.Int32)">
            <summary>
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.OnResponseSet">
            <summary>
            Handle setting response to set response for child items
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.OnAnswerDataSet">
            <summary>
            Set the answer data for the child items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.TabularItem.Items">
            <summary>
            Get the children of this item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.Dispose(System.Boolean)">
            <summary>
            Dispose of child items
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.GetScore">
            <summary>
            Get the score for the item, as the sum of the scores of all child items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.WriteXmlInstanceData(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write instance data to XML
            </summary>
            <param name="writer"></param>
            <param name="isText"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.WriteTableInstanceData(System.Xml.XmlWriter)">
            <summary>
            Write data for items in the table
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.WriteRowInstanceData(System.Int32,System.Xml.XmlWriter)">
            <summary>
            Write row instance data
            </summary>
            <param name="row"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.TabularItem.WriteColumnInstanceData(System.Int32,System.Int32,System.Xml.XmlWriter)">
            <summary>
            Write instance data for the column
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.GetOptionTextDelegate">
            <summary>
            </summary>
            <param name="optionId"></param>
            <param name="defaultText"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.ListOption">
            <summary>
            Items in a select item list.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.ListOption.OptionTextDelegate">
            <summary>
            Delegate for getting option text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ListOption.ID">
            <summary>
            Get/set the item ID
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ListOption.Points">
            <summary>
            Get/set point value
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ListOption.Text">
            <summary>
            Get/set the item text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ListOption.IsDefault">
            <summary>
            Get/set whether the option is selected by default.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ListOption.Category">
            <summary>
            Get/set the option Category
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ListOption.Alias">
            <summary>
            Get/Set the item alias
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ListOption.IsSelected">
            <summary>
            Get/set if the item is selected
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ListOption.IsOther">
            <summary>
            Get/set if the item is an "other"
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ListOption.IsNoneOfAbove">
            <summary>
            Get/set if the item is an "none of above"
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ListOption.ContentID">
            <summary>
            Get/set image ID
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ListOption.Disabled">
            <summary>
            Get/set if the item is disabled
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.ListOption.Equals(Checkbox.Forms.Items.ListOption)">
            <summary>
            Determine if items are equal
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.ListOption.Equals(System.Int32)">
            <summary>
            More equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.ListOption.GetSchema">
            <summary>
            Return NULL per MSDN documentation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.ListOption.ReadXml(System.Xml.XmlReader)">
            <summary>
            Read XML -- Not implemented
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.ListOption.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Write XML
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.HiddenItem">
            <summary>
            Represents an item that has no user-interface component, but can capture values from other sources.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.HiddenItem.VariableSource">
            <summary>
            Gets an enum that indicates the location of the variables
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.HiddenItem.VariableName">
            <summary>
            Get the name of the variable containing the hidden item data
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.HiddenItem.Alias">
            <summary>
            Get the alias for the item.  Overriden to return the variable
            name as the alias.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.HiddenItem.Visible">
            <summary>
            Override visible flag, since this item is only visible when
            editing a survey
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.HiddenItem.ValidateAnswers">
            <summary>
            Validate answers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.HiddenItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item based on the supplied <see cref="T:Checkbox.Forms.Items.Configuration.HiddenItemData"/> and language code
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.HiddenItem.GetMetaDataValuesForSerialization">
            <summary>
            Get the name value collection for serialization of meta data
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.HiddenVariableSource">
            <summary>
            An enumeration of the supported sources from which to set the hidden value
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.HiddenVariableSource.QueryString">
            <summary>
            Read value from URL query string parameter.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.HiddenVariableSource.Session">
            <summary>
            Read value from ASP.NET session.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.HiddenVariableSource.Cookie">
            <summary>
            Read value from prezza cookie (name defined in Application Settings).
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.HtmlItem">
            <summary>
            Item that displays HTML.  The item also supports localizable tokens, so the most of the HTML can
            remain constant, with only the tokens being localized.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.HtmlItem.Html">
            <summary>
            Get HTML for the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.HtmlItem.InlineCss">
            <summary>
            Get the Inline CSS associated with the item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.HtmlItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.HtmlItem.GetInstanceDataValuesForSerialization">
            <summary>
            Get instance values for xml
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.ImageItem">
            <summary>
            Item containing an image.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ImageItem.ImagePath">
            <summary>
            Get the path to the image.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.ImageItem.AlternateText">
            <summary>
            Get the image alt text
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.ImageItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.ImageItem.GetInstanceDataValuesForSerialization">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.Item">
            <summary>
            Encapsulates the business logic and persistence logic for an atomic 
            set of data.
            <remarks>
            Items are the component parts of a form or survey.  Each Item acts as a container of 
            response answer state and performs business rules and business logic. 
            
            Items also provide custom XML serialization to include only item state
            information.
            </remarks>
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Item.ID">
            <summary>
            Get/set the database PK for this Item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Item.Parent">
            <summary>
            Get/set parent item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Item.TemplateID">
            <summary>
            Get the template ID
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Item.Alias">
            <summary>
            Gets the Alias of this Item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Item.TypeID">
            <summary>
            Get the type of the item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Item.ItemTypeName">
            <summary>
            Get the item type name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Item.Visible">
            <summary>
            Gets/sets a flag indicating whether this Item has a visible display
            </summary>
            <remarks>
            An ItemRenderer control binds its Visible property to this property. 
            </remarks>
        </member>
        <member name="P:Checkbox.Forms.Items.Item.Excluded">
            <summary>
            Gets a flag indicating whether this Item participates in a Response
            </summary>
            <remarks>
            This property is set to false if the Item is conditionally excluded
            </remarks>
        </member>
        <member name="P:Checkbox.Forms.Items.Item.ShouldRender">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.Item.IsActive">
            <summary>
            Get/set whether item is "active" and participates in responses.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Checkbox.Forms.Items.Item.LanguageCode" -->
        <member name="P:Checkbox.Forms.Items.Item.Events">
            <summary>
            Gets the <see cref="T:System.ComponentModel.EventHandlerList"/> for this Item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Item.ExportMode">
            <summary>
            
            </summary>
        </member>
        <member name="E:Checkbox.Forms.Items.Item.ItemExcluded">
            <summary>
            Fired when an Item's Excluded property is set to 'true'
            </summary>
        </member>
        <member name="E:Checkbox.Forms.Items.Item.ItemIncluded">
            <summary>
            Fired when an Item's Excluded property is set to 'false'
            </summary>
        </member>
        <member name="E:Checkbox.Forms.Items.Item.Load">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.Page_Load(System.Object,System.EventArgs)">
            <summary>
            Event handler for Page loading
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.OnItemIncluded">
            <summary>
            Called when this Item's Excluded property is set to false
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.OnItemExcluded">
            <summary>
            Called when this Item's Excluded property is set to true
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.OnPageLoad">
            <summary>
            Called when a Page containing this Item is loaded.  Children of Item can choose to 
            override OnPageLoad() to perform actions immediately upon loading, such as sending an email, 
            or reading from the Request object
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.OnLoad">
            <summary>
            Fire on load events
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.GetText(System.String)">
            <summary>
            Get the text for the specified text id
            </summary>
            <param name="textID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.Dispose">
            <summary>
            Dispose of the item.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.Dispose(System.Boolean)">
            <summary>
            Overridable dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.CreateDataTransferObject">
            <summary>
            Create the data transfer object for the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.UpdateFromDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Update item state based on input DTO
            </summary>
            <param name="dto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.GetDataTransferObject">
            <summary>
            Get data transfer object for item. This object is suitable for binding to item renderers
            and/or to external data processes and removes the need for references to core Checkbox dlls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Build up data transfer object for survey item.
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.GetSchema">
            <summary>
            Per MSDN, this method should return a null value.  The best way to include schema
            information is to
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserialize
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serialize
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.WriteXml(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Serialize
            </summary>
            <param name="writer"></param>
            <param name="isText"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.Item.XmlElementName">
            <summary>
            Get xml element name for item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Item.XmlInstanceDataElementName">
            <summary>
            Get the name of the element containing information
            specific to this instance of the item.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Item.XmlMetaDataElementName">
            <summary>
            Get name of element containing meta data for the item,
            such as number to select, default values, etc.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.WriteXmlMetaData(System.Xml.XmlWriter)">
            <summary>
            Write metadata for the item.  Such data includes business rule
            configuration, etc.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.WriteXmlInstanceData(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write xml instance data, such as the item's current state, etc.
            </summary>
            <param name="writer"></param>
            <param name="isText"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.GetMetaDataValuesForSerialization">
            <summary>
            Get a name value collection of data to serialize to xml.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.GetInstanceDataValuesForSerialization">
            <summary>
            Get a name value collection of data to serialize to xml.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Item.ImportAnswers(Checkbox.Analytics.Import.ItemInfo,System.Collections.Generic.List{Checkbox.Analytics.Data.ItemAnswer})">
            <summary>
            
            </summary>
            <param name="srcItem"></param>
            <param name="answers"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.SelectItem">
            <summary>
            An item that allows selection from a list of inputs
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item based on the supplied configuration.
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.CreateOptions(System.Collections.ObjectModel.ReadOnlyCollection{Checkbox.Forms.Items.Configuration.ListOptionData})">
            <summary>
            Create list options from the option meta data
            </summary>
            <param name="metaOptions"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.SelectItem.OptionsDictionary">
            <summary>
            Get the dictionary of item options
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.CreateOption(Checkbox.Forms.Items.Configuration.ListOptionData)">
            <summary>
            Create a list option from the provided meta option
            </summary>
            <param name="metaOption"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.GetOptionText(System.Int32,System.String)">
            <summary>
            Get the text of an option
            </summary>
            <param name="optionId"></param>
            <param name="defaultText"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.SelectItem.Options">
            <summary>
            Get a list of select item options, ordered as specified
            by configuration
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.SelectItem.SelectedOptions">
            <summary>
            Get a list of selected options in order displayed in survey
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.OnStateRestored">
            <summary>
            When the response state has been restored, check the state for a persisted
            option order, so that randomized options can maintain the same random order
            within the context of a single response.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.RandomizeOptionOrder">
            <summary>
            Randomize the order of options
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.OnAnswerDataSet">
            <summary>
            Override on answer data set to synchronize selected options
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.DeleteAnswers">
            <summary>
            Override delete answer handling, which removes answers when an
            item is excluded to ensure that selected options are syncrhonized.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.InitializeDefaults">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.SynchronizeSelectedOptions">
            <summary>
            Synchronize options selected status with answer data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.VerifyOptionOrder(System.Collections.Generic.List{System.Int32})">
            <summary>
            Verify that the provided order is valid for this item
            </summary>
            <param name="optionOrder"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.SetAnswer(System.Object)">
            <summary>
            Set the answer, which should be an array of option ids,
            a single option id, or null.
            </summary>
            <param name="answer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.GetAnswer">
            <summary>
            Get a string representation of the answer
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.SelectItem.HasAnswer">
            <summary>
            Get a boolean value indicating if this item has an answer.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.ImportAnswers(Checkbox.Analytics.Import.ItemInfo,System.Collections.Generic.List{Checkbox.Analytics.Data.ItemAnswer})">
            <summary>
            
            </summary>
            <param name="srcItem"></param>
            <param name="answer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.Select(System.Boolean,System.Int32[])">
            <summary>
            Select the answer
            </summary>
            <param name="optionIDs"></param>
            <param name="forceAdding"> Add selected option even if it doesn't exists in options list </param>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.Select(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Select the answer
            </summary>
            <param name="otherText"></param>
            <param name="optionIDs"></param>
            <param name="forceAdding"> Add selected option even if it doesn't exists in options list </param>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.AddAnswer(System.Int32,System.String,System.Boolean)">
            <summary>
            Add an answer
            </summary>
            <param name="optionId"></param>
            <param name="otherText"></param>
            <param name="forceAdding"> Add selected option even if it doesn't exists in options list </param>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.DeleteAnswer(System.Int32)">
            <summary>
            Delete the answer for this option
            </summary>
            <param name="optionId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.UpdateAnswer(System.Int32,System.String)">
            <summary>
            Get the answer rows for the item
            </summary>
            <param name="optionId"></param>
            <param name="answerText"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.ValidateAnswers">
            <summary>
            Validate answers.  On the base class, just ensure that text is entered
            for the "other" response when answer is required.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.SelectItem.IsRandomized">
            <summary>
            Get whether this item should randomize it's list of options.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.SelectItem.AllowOther">
            <summary>
            Get whether an "other" answer is allowed.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.SelectItem.OtherTextPrompt">
            <summary>
            Specify the text for the "other" answer
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.SelectItem.NoneOfAboveTextPrompt">
            <summary>
            Specify the text for the "none of above" answer
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.SelectItem.OtherText">
            <summary>
            Get the other text prompt
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.AddPlaceHolderAnswer">
            <summary>
            Add a placeholder answer with a null optionid to signify that the 
            question was seen, but has no answers.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.RemovePlaceHolderAnswer">
            <summary>
            Remove the placeholder answer.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Build tranfer object to add options and answers
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.UpdateFromDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Update object state based on answer data
            </summary>
            <param name="dto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.CheckForEmptyAnswer(Checkbox.Wcf.Services.Proxies.SurveyResponseItemAnswer[])">
            <summary>
            
            </summary>
            <param name="postedAnswers"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.BuildDataTransferObjectOptionList(System.Collections.Generic.List{Checkbox.Wcf.Services.Proxies.SurveyResponseItemOption})">
            <summary>
            
            </summary>
            <param name="optionList"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.BuildDataTransferObjectAnswerList(System.Collections.Generic.List{Checkbox.Wcf.Services.Proxies.SurveyResponseItemAnswer})">
            <summary>
            
            </summary>
            <param name="answerList"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.GetInstanceDataValuesForSerialization">
            <summary>
            Get instance data for serialization
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.GetMetaDataValuesForSerialization">
            <summary>
            Get meta data values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.WriteXmlInstanceData(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write the instance data to include list options.
            </summary>
            <param name="writer"></param>
            <param name="isText"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.WriteAnswers(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write answers to select items
            </summary>
            <param name="writer"></param>
            <param name="isText"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectItem.WriteOptionAnswer(Checkbox.Forms.Items.ListOption,System.Xml.XmlWriter)">
            <summary>
            Write the answer for a specific option
            </summary>
            <param name="option"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.RowType">
            <summary>
            Matrix row type
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.RowType.Normal">
            <summary>
            Contains inputs and a categoroy text
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.RowType.Subheading">
            <summary>
            Subheading -- Contains descriptive text
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Items.RowType.Other">
            <summary>
            Similar to normal, except the respondent can enter the category text via a textbox
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.MatrixItem">
            <summary>
            Matrix item.  Contains questions in a grid-like structure
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixItem.RowInfo">
            <summary>
            Dictionary of row info objects
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixItem.ColumnInfo">
            <summary>
            Dictionary of column info objects
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.GetColumnPrototypesData(Checkbox.Forms.Items.Configuration.MatrixItemData)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Initialize the matrix item with its configuration data
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.GetColumnRequired(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnPrototypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.GetColumnRequired(System.Int32,Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            
            </summary>
            <param name="columnPrototypeId"></param>
            <param name="itemData"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.ListColumns">
            <summary>
            List column numbers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.ListRows">
            <summary>
            List row numbers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.GetColumnInfo(System.Int32)">
            <summary>
            Get information for a column.  Returns an empty object with columnNumber of -1 for non-existant
            columns
            </summary>
            <param name="columnNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.GetRowInfo(System.Int32)">
            <summary>
            Get a row info object for a row
            </summary>
            <param name="rowNumber"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixItem.PrimaryColumnIndex">
            <summary>
            Get the primary column index
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.CreateChildItems(Checkbox.Forms.Items.Configuration.TabularItemData,System.String)">
            <summary>
            Create child items for the matrix
            </summary>
            <param name="config"></param>
            <param name="languageCode"></param>
        </member>
        <member name="P:Checkbox.Forms.Items.MatrixItem.Required">
            <summary>
            Get whether the matrix item is required by checking each column
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.OnItemExcluded">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.OnResponseSet">
            <summary>
            Set the repsonse for child items as well
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.RunRules">
            <summary>
            Run any associated rules
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.OnChildItemExcluded(Checkbox.Forms.Items.Item)">
            <summary>
            
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.OnChildItemIncluded(Checkbox.Forms.Items.Item)">
            <summary>
            
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.ValidateAnswers">
            <summary>
            Validate answers to matrix question
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.GetRowText(System.Int32)">
            <summary>
            Get the text for a row.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.GetRowAlias(System.Int32)">
            <summary>
            Get the alias for a row
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.IsRowExcluded(System.Int32)">
            <summary>
            Determine if the row is excluded or not.
            </summary>
            <param name="rowNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Build up transfer object
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.WriteXmlMetaData(System.Xml.XmlWriter)">
            <summary>
            Write matrix-specific data
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.WriteRowInstanceData(System.Int32,System.Xml.XmlWriter)">
            <summary>
            Write row instance data
            </summary>
            <param name="row"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.WriteColumnInstanceData(System.Int32,System.Int32,System.Xml.XmlWriter)">
            <summary>
            Write instance data for the column
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.UpdateFromDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Update object state of child items based on answer data
            </summary>
            <param name="dto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.MatrixItem.InitializeDefaults">
            <summary>
            Initializes default values for children
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Items.Message">
            <summary>
            Item to contain a displayable message
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Message.Text">
            <summary>
            Get the text of the message to display
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.Message.ReportableSection">
            <summary>
            Get the text of the message to display
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Message.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the message item based on the item configuration and language code.
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Message.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Build data transfer object by adding text.
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Message.UpdateFromDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            
            </summary>
            <param name="dto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Message.GetInstanceDataValuesForSerialization">
            <summary>
            Get instance data
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.LabelledItem">
            <summary>
            A LabelledItem supports text and subtext labels as part of the Item's data.
            <remarks>
            LabelledItem is the common ancestor for most Items that prompt the user through a question or 
            imperative or directive.  Labels are typically static and non-interactive.
            </remarks>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.LabelledItem.Text">
            <summary>
            Get the ID of the text associated with this item.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.LabelledItem.SubText">
            <summary>
            Get the ID of the sub text associated with this item.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.LabelledItem.GetText">
            <summary>
            Get the text for the item, falling back to sub text as necessary
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.LabelledItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure this item with the supplied configuration.
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.LabelledItem.BuildDataTransferObject(Checkbox.Wcf.Services.Proxies.IItemProxyObject)">
            <summary>
            Buildup data transfer object.
            </summary>
            <param name="itemDto"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.LabelledItem.WriteXmlInstanceData(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write the xml instance data
            </summary>
            <param name="writer"></param>
            <param name="isText"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.RatingScale">
            <summary>
            Radio button scale business item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.RatingScale.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.RatingScale.CreateOption(Checkbox.Forms.Items.Configuration.ListOptionData)">
            <summary>
            Set option text as option points
            </summary>
            <param name="metaOption"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Items.RatingScale.StartText">
            <summary>
            Scale start text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.RatingScale.MidText">
            <summary>
            Scale mid text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.RatingScale.EndText">
            <summary>
            Scale end text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.RatingScale.NotApplicableText">
            <summary>
            N/A option text
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.RatingScale.GetInstanceDataValuesForSerialization">
            <summary>
            Get instance data values for serialization
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.RatingScale.ValidateAnswers">
            <summary>
            Validate answers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.RatingScale.WriteOptionAnswer(Checkbox.Forms.Items.ListOption,System.Xml.XmlWriter)">
            <summary>
            Override serialization to write N/A answer as "other" answer
            </summary>
            <param name="option"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.Select1">
            <summary>
            Input item that allows selection of one of a number of options.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Select1.CreateOptions(System.Collections.ObjectModel.ReadOnlyCollection{Checkbox.Forms.Items.Configuration.ListOptionData})">
            <summary>
            Create options, but verify that only one is selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Select1.SynchronizeSelectedOptions">
            <summary>
            Synchronize options, but verify that only one is selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.Select1.EnsureSingleOptionSelected">
            <summary>
            Ensure that only one option is selected
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Select1.Select(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Select the answer option
            </summary>
            <param name="otherText"></param>
            <param name="optionIDs"></param>
            <param name="forceAdding"> Add selected option even if it doesn't exists in options list </param>
        </member>
        <member name="M:Checkbox.Forms.Items.Select1.ConvertToRadioButtons">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.Select1.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.Select1.GetPossibleMaxScore">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Items.SelectMany">
            <summary>
            Select item that allows multiple selections
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.SelectMany.MinToSelect">
            <summary>
            Get the minimum number of items that have to be selected
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.SelectMany.MaxToSelect">
            <summary>
            Get the maximum number of items that have to be selected
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.SelectMany.AllowNoneOfAbove">
            <summary>
            Get/set if 'none of above' option is 
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.SelectMany.Required">
            <summary>
            Override required to return true if min to select > 0
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectMany.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectMany.ValidateAnswers">
            <summary>
            Validate selected answers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectMany.GetMetaDataValuesForSerialization">
            <summary>
            Get meta data values for serialization
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.SelectMany.Select(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Override select logic to handle case where default selected checkbox is unselected
            by the user and no other options are checked.  This is causes default selected values
            to be reapplied.  This isn't an issue for other select items since it is not possible
            to not have a selected value in those cases.
            </summary>
            <param name="otherText"></param>
            <param name="optionIDs"></param>
            <param name="forceAdding"> Add selected option even if it doesn't exists in options list </param>
        </member>
        <member name="T:Checkbox.Forms.Items.SingleLineTextBoxItem">
            <summary>
            Item that allows for 
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.SingleLineTextBoxItem.MinNumericValue">
            <summary>
            Get the minimum numeric (if any) value enterable
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.SingleLineTextBoxItem.MaxNumericValue">
            <summary>
            Get the maximum numeric (if any) value enterable
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.SingleLineTextBoxItem.MinDateValue">
            <summary>
            Get/set min value as a date time object.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.SingleLineTextBoxItem.MaxDateValue">
            <summary>
            Get/set max value as a date.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.SingleLineTextBoxItem.AutocompleteListId">
            <summary>
            Autocomplete list Id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.SingleLineTextBoxItem.AutocompleteRemote">
            <summary>
            Autocomplete remote source url
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.SingleLineTextBoxItem.GetAnswerValueAsDate">
            <summary>
            Get/set default value as date.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.SingleLineTextBoxItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure the item with the supplied configuration
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.SingleLineTextBoxItem.ValidateAnswers">
            <summary>
            First, use base validation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.SingleLineTextBoxItem.GetInstanceDataValuesForSerialization">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.SingleLineTextBoxItem.GetMetaDataValuesForSerialization">
            <summary>
            Get meta data values for serialization
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.SingleLineTextBoxItem.WriteAnswers(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write answer(s) to xml
            </summary>
            <param name="writer"></param>
            <param name="isText"></param>
        </member>
        <member name="T:Checkbox.Forms.Items.TextItem">
            <summary>
            Abstract base of an item that can present a text item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.TextItem.IsHtmlFormattedData">
            <summary>
            Get is Html editor for this item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.TextItem.DefaultText">
            <summary>
            Get the default text for this item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.TextItem.Format">
            <summary>
            Get the answer format for this item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.TextItem.CustomFormatId">
            <summary>
            Get the unique identifier for a custom format
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.TextItem.MaxLength">
            <summary>
            Get the maximum length of an answer to this item.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Items.TextItem.MinLength">
            <summary>
            Get the minimum length of an answer to this item.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Items.TextItem.Configure(Checkbox.Forms.Items.Configuration.ItemData,System.String,System.Nullable{System.Int32})">
            <summary>
            Configure this item with the supplied configuration
            </summary>
            <param name="configuration"></param>
            <param name="languageCode"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Items.TextItem.GetAnswer">
            <summary>
            Get the typed answer for this item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.TextItem.ValidateAnswers">
            <summary>
            Return a boolean indicating if answers are valid.  If answers are not valid, appropriate
            base class validation errors will be set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Items.TextItem.GetMetaDataValuesForSerialization">
            <summary>
            Get meta data values
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.AutocompleteList">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.AutocompleteList.ListId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.AutocompleteList.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.AutocompleteList.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.ExpressionSourceType">
            <summary>
            Simple enum for storing source type in a more easily queryable value
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.ActionReceiverType">
            <summary>
            Enumeration of types of objects that can be targets of rule actions.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.Configuration.ActionReceiverType.Item">
            <summary>
            Target is an item in a template.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.Configuration.ActionReceiverType.Page">
            <summary>
            Target is a page.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.CategorizedMatrixItemOperandData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.CategorizedMatrixItemOperandData.ColumnNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.CategorizedMatrixItemOperandData.Category">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CategorizedMatrixItemOperandData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CategorizedMatrixItemOperandData.#ctor(System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="itemID"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CategorizedMatrixItemOperandData.Load(System.Int32,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            
            </summary>
            <param name="operandId"></param>
            <param name="rulesData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CategorizedMatrixItemOperandData.UpdateRuleData(Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            
            </summary>
            <param name="ruleDataSet"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CategorizedMatrixItemOperandData.ToString(System.String)">
            <summary>
            
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CategorizedMatrixItemOperandData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CategorizedMatrixItemOperandData.Load(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.ItemRuleImportReader">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ItemRuleImportReader.ItemRules">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ItemRuleImportReader.#ctor(Checkbox.Forms.Logic.Configuration.RuleDataService)">
            <summary>
            
            </summary>
            <param name="dataService"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ItemRuleImportReader.ReadRuleData(Checkbox.Common.PersistedDomainObject,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="itemNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ItemRuleImportReader.UpdateRules(Checkbox.Forms.Logic.Configuration.RuleData[],System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Update page rules to update mappings between pre-import page/item/option ids and post-import page/item/option
            ids.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.ItemRuleWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ItemRuleWriter.#ctor(Checkbox.Forms.Logic.Configuration.RuleDataService)">
            <summary>
            
            </summary>
            <param name="dataService"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ItemRuleWriter.WriteRuleData(Checkbox.Common.PersistedDomainObject,System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.PageRuleImportReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.PageRuleImportReader.#ctor(Checkbox.Forms.Logic.Configuration.RuleDataService)">
            <summary>
            
            </summary>
            <param name="dataService"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.PageRuleImportReader.ReadRuleData(Checkbox.Common.PersistedDomainObject,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="pageNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.PageRuleImportReader.ImportPageBranches(System.Int32,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="pageId"></param>
            <param name="pageNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.PageRuleImportReader.ImportPageConditions(System.Int32,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="pageId"></param>
            <param name="pageNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.PageRuleImportReader.UpdateRules(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Update page rules to update mappings between pre-import page/item/option ids and post-import page/item/option
            ids.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.PageRuleWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.PageRuleWriter.#ctor(Checkbox.Forms.Logic.Configuration.RuleDataService)">
            <summary>
            
            </summary>
            <param name="dataService"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.PageRuleWriter.WriteRuleData(Checkbox.Common.PersistedDomainObject,System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="page"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.RuleExportWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleExportWriter.#ctor(Checkbox.Forms.Logic.Configuration.RuleDataService)">
            <summary>
            
            </summary>
            <param name="dataService"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleExportWriter.WriteRuleData(Checkbox.Common.PersistedDomainObject,System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.RuleImportReader">
            <summary>
            Reader for importing rules
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleImportReader.#ctor(Checkbox.Forms.Logic.Configuration.RuleDataService)">
            <summary>
            
            </summary>
            <param name="dataService"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleImportReader.ReadRuleData(Checkbox.Common.PersistedDomainObject,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="ruleNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ActionDataFactory.GetActionType(System.String)">
            <summary>
            Get the <see cref="T:System.Type"/> from a type name.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ActionDataFactory.CreateActionDataObject(System.String)">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.IncludeExcludeActionData">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.IncludeExcludeActionData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.IncludeExcludeActionData.#ctor(System.Int32,Checkbox.Forms.Logic.Configuration.ActionReceiverType)">
            <summary>
            </summary>
            <param name="receiverId"></param>
            <param name="receiverType"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.IncludeExcludeActionData.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.IncludeExcludeActionData.Load(System.Int32,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Load item from configuration
            </summary>
            <param name="actionId"></param>
            <param name="rulesData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.IncludeExcludeActionData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.IncludeExcludeActionData.Load(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.IncludeExcludeActionData.UpdatItemAndOptionIdMappings(Checkbox.Forms.Logic.Configuration.RuleDataService,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            
            </summary>
            <param name="rds"></param>
            <param name="itemIdMap"></param>
            <param name="optionIdMap"></param>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.MatrixItemOperandData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.MatrixItemOperandData.MatrixId">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.MatrixItemOperandData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.MatrixItemOperandData.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="itemID"></param>
            <param name="parentItemID"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.MatrixItemOperandData.UpdateRuleData(Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            
            </summary>
            <param name="ruleDataSet"></param>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.ResponseOperandData">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ResponseOperandData.Key">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ResponseOperandData.OperandTypeName">
            <summary>
            Get a text type name for this operand
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ResponseOperandData.Load(System.Int32,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Load response operand data
            </summary>
            <param name="operandId"></param>
            <param name="rulesData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ResponseOperandData.UpdateRuleData(Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Update rule data
            </summary>
            <param name="ruleDataSet"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ResponseOperandData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ResponseOperandData.Load(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ResponseOperandData.UpdateItemAndOptionIds(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            
            </summary>
            <param name="itemIdMap"></param>
            <param name="optionPositionMap"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ResponseOperandData.ToString(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ResponseOperandData.Validate">
            <summary>
            Validate the operand data
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.ActionData">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ActionData.ActionId">
            <summary>
            Get action id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ActionData.ReceiverId">
            <summary>
             Get receiver object id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ActionData.ReceiverType">
            <summary>
            Get  receiver type
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ActionData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ActionData.#ctor(System.Int32,Checkbox.Forms.Logic.Configuration.ActionReceiverType)">
            <summary>
            
            </summary>
            <param name="receiverId"></param>
            <param name="receiverType"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ActionData.Load(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="actionNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ActionData.Load(System.Int32,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Load action data from config
            </summary>
            <param name="actionId"></param>
            <param name="rulesData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ActionData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ActionData.UpdatItemAndOptionIdMappings(Checkbox.Forms.Logic.Configuration.RuleDataService,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            
            </summary>
            <param name="rds"></param>
            <param name="itemIdMap"></param>
            <param name="optionIdMap"></param>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.BranchPageActionData">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.BranchPageActionData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.BranchPageActionData.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="pageId">Id of page to branch from.</param>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.BranchPageActionData.GoToPageID">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.BranchPageActionData.EditLanguage">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.BranchPageActionData.Load(System.Int32,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Load
            </summary>
            <param name="actionId"></param>
            <param name="rulesData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.BranchPageActionData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.BranchPageActionData.Load(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.BranchPageActionData.UpdatItemAndOptionIdMappings(Checkbox.Forms.Logic.Configuration.RuleDataService,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            
            </summary>
            <param name="rds"></param>
            <param name="itemIdMap"></param>
            <param name="optionIdMap"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.BranchPageActionData.SetTargetPageId(Checkbox.Forms.Logic.RulesObjectSet,System.Int32)">
            <summary>
            
            </summary>
            <param name="rulesData"></param>
            <param name="targetPageId"></param>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.BranchPageActionData.GoToPagePositionAsString">
            <summary>
            Get the position of the page to branch to within the survey
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.BranchPageActionData.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.CompositeExpressionData">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.#ctor(System.Collections.Generic.List{Checkbox.Forms.Logic.Configuration.ExpressionData},Checkbox.Forms.Logic.LogicalConnector)">
            <summary>
            </summary>
            <param name="children"></param>
            <param name="connector"></param>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.Connector">
            <summary>
            Gets a value indicating the logical relationship between all children of this Expression
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.Children">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.Add(Checkbox.Forms.Logic.Configuration.ExpressionData)">
            <summary>
            Adds a child <see cref="T:Checkbox.Forms.Logic.Configuration.ExpressionData"/> to this CompositeExpression
            </summary>
            <param name="child">the child Expression</param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.RemoveChild(Checkbox.Forms.Logic.Configuration.ExpressionData)">
            <summary>
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.MoveChild(Checkbox.Forms.Logic.Configuration.ExpressionData,Checkbox.Forms.Logic.Configuration.CompositeExpressionData)">
            <summary>
            Move a child expression to a new parent
            </summary>
            <param name="child"></param>
            <param name="newParent"></param>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.DeletedChildren">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.Validate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.InsertExpression(Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            
            </summary>
            <param name="ruleData"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.UpdateRuleData(Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Update rule data with expression configuration
            </summary>
            <param name="ruleData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.UpdateExpression(Checkbox.Forms.Logic.ExpressionEntity,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <param name="ruleData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.Load(System.Int32,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            
            </summary>
            <param name="expressionId"></param>
            <param name="rulesData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.Load(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.UpdateItemAndOptionIds(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            
            </summary>
            <param name="itemIdMap"></param>
            <param name="optionPositionMap"></param>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.CompositeExpressionData.ConditionsCount">
            <summary>
            Count of conditions
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.ExpressionData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ExpressionData.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ExpressionData.ParentExpressionId">
            <summary>
            Get/set parent expression
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ExpressionData.Left">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ExpressionData.Right">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ExpressionData.Operator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ExpressionData.ExpressionId">
            <summary>
            Get id of expression
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ExpressionData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ExpressionData.#ctor(Checkbox.Forms.Logic.Configuration.OperandData,Checkbox.Forms.Logic.LogicalOperator,Checkbox.Forms.Logic.Configuration.OperandData)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="operation"></param>
            <param name="right"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ExpressionData.ToString(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ExpressionData.OperatorText">
            <summary>
            Get the expression operator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ExpressionData.RightOperandText(System.String)">
            <summary>
            Get the right operand text
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ExpressionData.LeftOperandText(System.String)">
            <summary>
            Get the right operand text
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ExpressionData.InsertExpression(Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            
            </summary>
            <param name="ruleData"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ExpressionData.UpdateRuleData(Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Update the specified rule data set with updated rule data
            </summary>
            <param name="ruleData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ExpressionData.UpdateExpression(Checkbox.Forms.Logic.ExpressionEntity,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Update the expression data row with current values
            </summary>
            <param name="expression"></param>
            <param name="ruleData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ExpressionData.Load(System.Int32,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            
            </summary>
            <param name="expressionId"></param>
            <param name="rulesData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ExpressionData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ExpressionData.Load(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="expressionNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ExpressionData.Validate">
            <summary>
            Validate expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ExpressionData.UpdateItemAndOptionIds(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            
            </summary>
            <param name="itemIdMap"></param>
            <param name="optionPositionMap"></param>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ExpressionData.ConditionsCount">
            <summary>
            Count of conditions
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.ItemOperandData">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ItemOperandData.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ItemOperandData.#ctor(System.Nullable{System.Int32})">
            <summary>
            </summary>
            <param name="itemID"></param>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ItemOperandData.ItemId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ItemOperandData.OperandTypeName">
            <summary>
            Get a text type name for this operand
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ItemOperandData.Load(System.Int32,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Get operand data
            </summary>
            <param name="operandId"></param>
            <param name="rulesData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ItemOperandData.UpdateRuleData(Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Update rule data
            </summary>
            <param name="ruleDataSet"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ItemOperandData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ItemOperandData.Load(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ItemOperandData.UpdateItemAndOptionIds(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            
            </summary>
            <param name="itemIdMap"></param>
            <param name="optionPositionMap"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ItemOperandData.Validate">
            <summary>
            Validate the expression
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.OperandData">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.OperandData.OperandId">
            <summary>
            Get operand data id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.OperandData.OperandTypeName">
            <summary>
            Get a string type name for the operand
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.OperandData.SupportedLogicalOperators">
            <summary>
            Provides an Array of LogicalOperators by which this OperandData may be compared
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OperandData.ToString(System.String)">
            <summary>
            
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OperandData.UpdateRuleData(Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Update rule data with item configuration
            </summary>
            <param name="ruleDataSet"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OperandData.Load(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OperandData.Load(System.Int32,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            
            </summary>
            <param name="operandId"></param>
            <param name="rulesData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OperandData.Validate">
            <summary>
            Validate the operand data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OperandData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OperandData.UpdateItemAndOptionIds(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            
            </summary>
            <param name="itemIdMap"></param>
            <param name="optionPositionMap"></param>
            <param name="prototypesMap"></param>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.OperandDataFactory">
            <summary>
            Factory for creating operand data objects.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OperandDataFactory.GetOperandType(System.String)">
            <summary>
            Get the <see cref="T:System.Type"/> from a type name.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OperandDataFactory.CreateOperandDataObject(System.String)">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OperandDataFactory.CreateOperandData(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OperandDataFactory.CreateObject(System.Type,System.Object[])">
            <summary>
            Create an object of the specified type.
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OperandDataFactory.GetType(System.String)">
            <summary>
            Get the <see cref="T:System.Type"/> from a type name.
            </summary>
            <param name="fullTypeName"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.OptionOperandData">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.OptionOperandData.ItemID">
            <summary>
            ID of item option assoicated with.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.OptionOperandData.AnswerValue">
            <summary>
            Answer text value
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OptionOperandData.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OptionOperandData.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            </summary>
            <param name="itemID"></param>
            <param name="optionID"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OptionOperandData.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            </summary>
            <param name="itemID"></param>
            <param name="optionID"></param>
            <param name="answerValue"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OptionOperandData.Load(System.Int32,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Load option operand
            </summary>
            <param name="operandId"></param>
            <param name="rulesData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OptionOperandData.UpdateRuleData(Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Update rule data
            </summary>
            <param name="ruleDataSet"></param>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.OptionOperandData.OperandTypeName">
            <summary>
            Get a text type name for this operand
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OptionOperandData.Validate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OptionOperandData.ToString(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OptionOperandData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OptionOperandData.Load(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.OptionOperandData.UpdateItemAndOptionIds(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            
            </summary>
            <param name="itemIdMap"></param>
            <param name="optionPositionMap"></param>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.OptionOperandData.OptionID">
            <summary>
            Get the option operand text
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.ProfileOperandData">
            <summary>
            User profile logic operands
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ProfileOperandData.ProfileKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.ProfileOperandData.OperandTypeName">
            <summary>
            Get a text type name for this operand
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ProfileOperandData.Load(System.Int32,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Load operand data
            </summary>
            <param name="operandId"></param>
            <param name="rulesData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ProfileOperandData.UpdateRuleData(Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Update rule data
            </summary>
            <param name="ruleDataSet"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ProfileOperandData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ProfileOperandData.Load(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ProfileOperandData.UpdateItemAndOptionIds(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            
            </summary>
            <param name="itemIdMap"></param>
            <param name="optionPositionMap"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ProfileOperandData.Validate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ProfileOperandData.ToString(System.String)">
            <summary>
            
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.ProfileOperandData.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.RuleData">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.RuleData.Trigger">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.RuleData.RuleId">
            <summary>
            Get rule id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.RuleData.Actions">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.RuleData.Expression">
            <summary>
            Get/set Expression for the rule
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleData.#ctor(Checkbox.Forms.Logic.Configuration.ExpressionData,System.Collections.Generic.List{Checkbox.Forms.Logic.Configuration.ActionData})">
            <summary>
            </summary>
            <param name="expression"></param>
            <param name="actions"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleData.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleData.Load(System.Int32,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Load the rule from a rules data set.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleData.Load(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleData.ToString">
            <summary>
            Provides a human-readable description of this Rule by combining its Expression and Actions ToString() evaluates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleData.Validate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.RuleData.TotalConditionsCount">
            <summary>
            Total conditions count
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.RuleDataService">
            <summary>
            Provides methods to access <see cref="T:Checkbox.Forms.Logic.Configuration.RuleData"/> and associated classes within the context of a given <see cref="P:Checkbox.Forms.Logic.Configuration.RuleDataService.ResponseTemplate"/>.
            Also provides a data-oriented service layer around the <see cref="P:Checkbox.Forms.Logic.Configuration.RuleDataService.ResponseTemplate"/> rules configuration.
            <remarks>
            Rule configuration operations and queries are exposed using a RuleDataService wrapper around the <see cref="P:Checkbox.Forms.Logic.Configuration.RuleDataService.ResponseTemplate"/>.
            </remarks>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.RuleDataService.ResponseTemplate">
            <summary>
            Get response template being edited
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.Initialize(System.Int32)">
            <summary>
            Initialize rules data for a template.
            </summary>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.SaveRuleData">
            <summary>
            Save rule data.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.RuleDataService.AreThereUnsavedChanges">
            <summary>
            Determine if RulesDataSet has unsaved changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.SaveRuleData(System.Data.IDbTransaction)">
            <summary>
            Save rule data in the context of hte provided transaction.
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.GetTargetPageId(System.Int32)">
            <summary>
            
            </summary>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.ItemHasCondition(System.Int32)">
            <summary>
            Gets a boolean indicating whether a given <see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/> has associated conditions
            </summary>
            <param name="itemId">the <see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/></param>
            <returns>true, if has conditions; otherwise, false</returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.PageHasCondition(System.Int32)">
            <summary>
            Gets a boolean indicating whether a given <see cref="T:Checkbox.Forms.TemplatePage"/> has associated conditions
            </summary>
            <param name="pageId">the <see cref="T:Checkbox.Forms.TemplatePage"/></param>
            <returns>true, if has conditions; otherwise, false</returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.PageHasBranches(System.Int32)">
            <summary>
            Gets a boolean indicating whether a given <see cref="T:Checkbox.Forms.TemplatePage"/> has associated branches
            </summary>
            <param name="pageId">the <see cref="T:Checkbox.Forms.TemplatePage"/></param>
            <returns>true, if has conditions; otherwise, false</returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.GetConditionForItem(System.Int32)">
            <summary>
            Gets a <see cref="T:Checkbox.Forms.Logic.Configuration.RuleData"/> for an <see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/>, if any; otherwise, creates a new one and returns it
            <remarks>
            The Rule for an Item will always have a IncludeExcludedActionData associated with it
            </remarks>
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.GetConditionForPage(System.Int32)">
            <summary>
            Get a condition for a given page
            </summary>
            <param name="pageId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.GetBranchRulesForPage(System.Int32)">
            <summary>
            
            </summary>
            <param name="pageId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.GetRuleData(System.Int32)">
            <summary>
            Get data for a specific rule.
            </summary>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.CreateRuleData">
            <summary>
            Create an empty rule data object with an empty top-level expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.DeletePageRules(System.Int32)">
            <summary>
            Deletes all Rules associated with a given <see cref="T:Checkbox.Forms.TemplatePage"/>
            </summary>
            <param name="pageId"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.NotifySubscribingExpressionsOfPublisherItemMoved(System.Int32,System.Int32,Checkbox.Forms.TemplatePage)">
            <summary>
            When the publisher <see cref="T:Checkbox.Forms.Items.Configuration.ItemData" /> is moved within the survey, any dependent subscribers must verify that the
            expressions are still valid
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="newPagePosition">The new page position.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.HandleItemMoved(System.Int32,System.Int32)">
            <summary>
            Deletes invalid Expressions that are dependent (subscribers) of ItemOperands
            <remarks>
            This operation compares the position of the subscriber's owner to the that of the publisher.
            </remarks>
            </summary>
            <param name="itemId"></param>
            <param name="newPagePosition"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.SetPageBranchTargetPageId(System.Int32,System.Int32)">
            <summary>
            Set new page target for branch rule.
            </summary>
            <param name="ruleId"></param>
            <param name="targetId"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.HandlePageMoved(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pageId"></param>
            <param name="newPagePosition"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.DetermineContainingPagePosition(System.Int32,Checkbox.Forms.Logic.RuleEventTrigger@)">
            <summary>
            Given a expressionRootID, determines what the related Rule observer is (<see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/>, <see cref="T:Checkbox.Forms.TemplatePage"/>) and what the position in the Form of 
            that observer is.
            </summary>
            <param name="expressionRootID"></param>
            <param name="eventTrigger"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.HandleForItem(System.Int32,System.Int32,System.Boolean,Checkbox.Forms.TemplatePage)">
            <summary>
            Recursively calls the HandleSubscriberItemMoved method
            </summary>
            <param name="itemId"></param>
            <param name="newPagePosition"></param>
            <param name="isPageMoved"> </param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.DeleteInvalidSubscriberExpressions(System.Collections.Generic.List{System.Int32})">
            <summary>
            Delete all subscriber expressions with source items not in the valid ID list
            </summary>
            <param name="validItemIds"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.DeleteInvalidSubscriberExpressions(System.Int32)">
            <summary>
            Retrieves the subscribers to an <see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/> and examines whether the expression is still valid for the ItemData's
            present state
            </summary>
            <param name="itemId">the publisher Item, on which subscriber expressions depend</param>
            <returns>true, if invalid dependents were found and deleted.  This signals the calling method to 
            the changed dataset, which it can then save</returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.DeleteSubscriberExpressions(System.Int32)">
            <summary>
            Deletes any rule dependencies for an item data
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.DeletePageTargetExpressions(System.Int32)">
            <summary>
            Delete any expressions where this page is the action target
            </summary>
            <param name="pageId"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.CreateANDCompositeExpression(System.Int32)">
            <summary>
            
            </summary>
            <param name="rootExpressionId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.CreateOperand``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.CreateEmptyConditionRuleForItem(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.CreateEmptyConditionRuleForPage(System.Int32)">
            <summary>
            </summary>
            <param name="pageId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.CreateBranchRule(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Create a branch rule
            </summary>
            <param name="dependentPageId"></param>
            <param name="targetPageId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.CreateEmptyBranchRule(System.Int32)">
            <summary>
            </summary>
            <param name="pageId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.CreateItemExpression(System.Int32,System.Int32,Checkbox.Forms.Logic.LogicalOperator,System.String)">
            <summary>
            Create an item expression
            </summary>
            <param name="parentExpressionId"></param>
            <param name="itemId"></param>
            <param name="condition"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.ReplaceExpressionWithItemExpression(System.Int32,System.Int32,System.Nullable{System.Int32},Checkbox.Forms.Logic.LogicalOperator,System.Nullable{System.Int32},System.String)">
            <summary>
            Replace the existing expression with an item expression
            </summary>
            <param name="expressionId"></param>
            <param name="itemId"></param>
            <param name="parentItemId"></param>
            <param name="condition"></param>
            <param name="valueToCompare"></param>
            <param name="answerText"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.ReplaceExpressionWithProfileExpression(System.Int32,System.String,Checkbox.Forms.Logic.LogicalOperator,System.String)">
            <summary>
            Replace the existing expression with a profile expression
            </summary>
            <param name="expressionId"></param>
            <param name="profileKey"></param>
            <param name="condition"></param>
            <param name="valueToCompare"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.ReplaceExpressionWithCategorizedExpression(System.Int32,System.Int32,System.Int32,System.String,Checkbox.Forms.Logic.LogicalOperator,System.String)">
            <summary>
            Replace the existing expression with a categorized expression
            </summary>
            <param name="expressionId"></param>
            <param name="itemId"></param>
            <param name="columnNumber"></param>
            <param name="category"></param>
            <param name="op"></param>
            <param name="answerText"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.ReplaceExpressionWithResponseExpression(System.Int32,System.String,Checkbox.Forms.Logic.LogicalOperator,System.String)">
            <summary>
            Replace an expression with a response expression
            </summary>
            <param name="expressionId"></param>
            <param name="responseKey"></param>
            <param name="condition"></param>
            <param name="valueToCompare"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.GetExpression(System.Int32)">
            <summary>
            
            </summary>
            <param name="expressionId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.GetExpressionParentID(System.Int32)">
            <summary>
            Get the ID of the parent of specified expression
            </summary>
            <param name="expressionId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.CreateItemExpression(System.Int32,System.Int32,Checkbox.Forms.Logic.LogicalOperator,System.Nullable{System.Int32},System.String)">
            <summary>
            </summary>
            <param name="parentExpressionId"></param>
            <param name="itemId"></param>
            <param name="condition"></param>
            <param name="valueToCompare"></param>
            <param name="answerText"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.CreateItemExpression(System.Int32,System.Nullable{System.Int32},System.Int32,Checkbox.Forms.Logic.LogicalOperator,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="parentExpressionId"></param>
            <param name="parentItemId"></param>
            <param name="itemId"></param>
            <param name="condition"></param>
            <param name="valueToCompare"></param>
            <param name="category"></param>
            <param name="columnNumber"></param>
            <param name="answerText"></param>
            <param name="leftOperandType"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.CreateCategorizedMatrixExpression(System.Int32,System.Int32,System.Int32,System.String,Checkbox.Forms.Logic.LogicalOperator,System.String)">
            <summary>
            
            </summary>
            <param name="parentExpressionId"></param>
            <param name="itemId"></param>
            <param name="columnNumber"></param>
            <param name="category"></param>
            <param name="op"></param>
            <param name="answerText"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.CreateMatrixItemExpression(System.Int32,System.Int32,System.Int32,Checkbox.Forms.Logic.LogicalOperator,System.String)">
            <summary>
            </summary>
            <param name="parentExpressionId"></param>
            <param name="parentItemId"></param>
            <param name="itemId"></param>
            <param name="condition"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.CreateMatrixItemExpression(System.Int32,System.Int32,System.Int32,Checkbox.Forms.Logic.LogicalOperator,System.Nullable{System.Int32})">
            <summary>
            </summary>
            <param name="parentExpressionId"></param>
            <param name="parentItemId"></param>
            <param name="itemId"></param>
            <param name="condition"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.CreateResponseExpression(System.Int32,System.String,Checkbox.Forms.Logic.LogicalOperator,System.String)">
            <summary>
            Create an expression for comparing responses
            </summary>
            <param name="parentExpressionId"></param>
            <param name="key"></param>
            <param name="condition"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.CreateProfileExpression(System.Int32,System.String,Checkbox.Forms.Logic.LogicalOperator,System.String)">
            <summary>
            Create a user profile expression
            </summary>
            <param name="parentExpressionId"></param>
            <param name="key"></param>
            <param name="condition"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.GetRealExpressionId(System.Int32)">
            <summary>
            Returns real expression ID by old ID
            </summary>
            <param name="newExpressionId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.UpdateExpressionData(Checkbox.Forms.Logic.Configuration.ExpressionData)">
            <summary>
            Update the RulesDataSet with the expression's data.
            </summary>
            <param name="dataToUpdate"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.DeleteExpression(System.Int32)">
            <summary>
            Delete the expression with the specified id
            </summary>
            <param name="expressionId"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.UpdateBranchTargets(Checkbox.Forms.Logic.Configuration.RuleData[],System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            
            </summary>
            <param name="rules"></param>
            <param name="pageIds"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.UpdateItemAndOptionIds(Checkbox.Forms.Logic.Configuration.RuleData[],System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            
            </summary>
            <param name="rules"></param>
            <param name="optionPositionMap"></param>
            <param name="itemIdMap"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.RuleDataService.GetExpressionData(System.Int32)">
            <summary>
            Get Expresion Data
            </summary>
            <param name="expressionId"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.StringOperandData">
            <summary>
            Operand wrapper for string values;
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.StringOperandData.Value">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Configuration.StringOperandData.OperandTypeName">
            <summary>
            Get a text type name for this operand
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.StringOperandData.Load(System.Int32,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            Load operand data for string operand
            </summary>
            <param name="operandId"></param>
            <param name="rulesData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.StringOperandData.UpdateRuleData(Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            
            </summary>
            <param name="ruleDataSet"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.StringOperandData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.StringOperandData.Load(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.StringOperandData.UpdateItemAndOptionIds(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            
            </summary>
            <param name="itemIdMap"></param>
            <param name="optionPositionMap"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.StringOperandData.ToString(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Configuration.StringOperandData.Validate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.Configuration.ValidationState">
            <summary>
            Validation state of a configuration file.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.Configuration.ValidationState.Invalid">
            <summary>
            Configuration is invalid.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.Configuration.ValidationState.Unknown">
            <summary>
            Unknown or not yet validated.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.Configuration.ValidationState.Valid">
            <summary>
            State is valid.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.ItemDependentOperand">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.ItemDependentOperand.SourceItemIds">
            <summary>
            Item ID
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.CategorizedItemOperand">
            <summary>
            Categorized Matrix item contains all functionality of a standard MatrixItem as well as additional functionality
            requested by the Greater Wellington Regional Council. The Categorized Matrix Item supports both categorizations
            of options and Row Select item types.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.CategorizedItemOperand.ColumnIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.CategorizedItemOperand.Category">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.CategorizedItemOperand.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <param name="columnIndex"></param>
            <param name="category"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.CategorizedItemOperand.GetResponseCountByColumnAndCategory(Checkbox.Forms.Response)">
            <summary>
            Returns the number of answered item options in a given column which have the specified category.
            Rows what are not enabled are excluded.
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.FormulaCalculator">
            <summary>
            Calculates the value of the arithmetic expression, that contains constants only
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.FormulaCalculator.Calculate(System.String)">
            <summary>
            Calculates the expression result
            </summary>
            <param name="expression">Expression to calculate</param>
            <returns>Result</returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.FormulaCalculator.parseAndCalc(System.String)">
            <summary>
            Recursive function based on FSM that performs parsing and calculations
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.FormulaCalculator.getNextTerm(System.String,System.Int32@)">
            <summary>
            Returns next significant term
            </summary>
            <param name="expr"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.FormulaCalculator.findCloseBrace(System.String,System.Int32@)">
            <summary>
            Finds a close brace
            </summary>
            <param name="expr"></param>
            <param name="pos"></param>
        </member>
        <member name="T:Checkbox.Forms.Logic.EntityState">
            <summary>
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.EntityBase">
            <summary>
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.RuleEntity">
            <summary>
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.ItemEntity">
            <summary>
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.PageEntity">
            <summary>
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.ExpressionEntity">
            <summary>
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.OperandEntity">
            <summary>
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.ActionEntity">
            <summary>
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.RulesObjectSet">
            <summary>
            Data container for template rules
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.Load(System.Int32)">
            <summary>
            Load rule data
            </summary>
            <param name="responseTemplateId"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.GetRule(System.Int32)">
            <summary>
            Get data rows for a rule.
            </summary>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.ListRules">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.GetPageByRule(System.Int32)">
            <summary>
            Get page 
            </summary>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.GetPageRules(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="pageId"></param>
            <param name="eventTrigger"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.GetPageRules(System.Int32)">
            <summary>
            
            </summary>
            <param name="pageId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.GetItemRule(System.Int32)">
            <summary>
            Get Item Rule
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.GetItemByRule(System.Int32)">
            <summary>
            Get Item 
            </summary>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.GetRuleEventTrigger(System.Int32)">
            <summary>
            
            </summary>
            <param name="ruleId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.GetRuleByExpression(System.Int32)">
            <summary>
            
            </summary>
            <param name="expressionID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.GetExpression(System.Int32)">
            <summary>
            Get data for an expression
            </summary>
            <param name="expressionId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.ListOperands">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.GetOperandsForItem(System.Int32)">
            <summary>
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.GetOperand(System.Int32)">
            <summary>
            Get data for an operand
            </summary>
            <param name="operandId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.FindItemOperandSubscribers(System.Int32)">
            <summary>
            Gets a <see cref="T:System.Data.DataRow"/>[] of all Expressions subscribing to a given item.
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.FindItemOperandSubscribersByRootExpression(System.Int32)">
            <summary>
            Gets a <see cref="T:System.Data.DataRow"/>[] of all Expressions related to the specified rootExpression.
            </summary>
            <param name="rootExpressionId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.GetAction(System.Int32)">
            <summary>
            Get action data
            </summary>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.GetBranchAction(System.Int32)">
            <summary>
            Get branch action data
            </summary>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.GetChildExpressions(System.Int32)">
            <summary>
            
            </summary>
            <param name="parentExpressionId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.FindPageActionExpressions(System.Int32)">
            <summary>
            Gets an array of <see cref="T:System.Data.DataRow"/>s containing all expressions that have a page action 
            referencing the given page 
            </summary>
            <param name="pageId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.AddRuleToItem(System.Int32,Checkbox.Forms.Logic.RuleEntity)">
            <summary>
            Add a rule to an item
            </summary>
            <param name="itemId"></param>
            <param name="rule"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.AddRuleToPage(System.Int32,Checkbox.Forms.Logic.RuleEntity)">
            <summary>
            Add a mapping between a rule and a page
            </summary>
            <param name="pageId"></param>
            <param name="rule"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.DeleteExpression(System.Int32)">
            <summary>
            
            </summary>
            <param name="expressionId"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.DeleteExpressionTree(System.Int32)">
            <summary>
            
            </summary>
            <param name="expressionId"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.InsertVoidOperand(System.Type)">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.InsertVoidExpression">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.DeleteRule(System.Int32)">
            <summary>
            
            </summary>
            <param name="ruleId"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.DeletePageRules(System.Int32)">
            <summary>
            Delete all rules associated with a page.
            </summary>
            <param name="pageId"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.Save">
            <summary>
            </summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.Save(System.Data.IDbTransaction)">
            <summary>
            </summary>
            <param name="t"></param>
        </member>
        <member name="P:Checkbox.Forms.Logic.RulesObjectSet.ExpressionIDMap">
            <summary>
            This dictionary maps old Ids (negative) to the real ones
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.AddRuleToPageCommand(System.Int32,System.Int32,System.String,System.Data.IDbTransaction)">
            <summary>
            Get a command to add a rule to a page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesObjectSet.DeleteRuleFromPageCommand(System.Int32,System.Int32,System.Data.IDbTransaction)">
            <summary>
            Get a command to remove a rule from a page
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.CompositeExpression">
            <summary>
            Respresents the Composite of Expressions used to create Expression trees.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.CompositeExpression.#ctor(System.Collections.Generic.List{Checkbox.Forms.Logic.Expression},Checkbox.Forms.Logic.LogicalConnector)">
            <summary>
            Constructor.  
            </summary>
            <param name="children">a List of child Expressions and CompositeExpressions</param>
            <param name="connector">the <see cref="T:Checkbox.Forms.Logic.LogicalConnector"/> relationship among children</param>
        </member>
        <member name="P:Checkbox.Forms.Logic.CompositeExpression.Connector">
            <summary>
            Gets a value indicating the logical relationship between all children of this Expression
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.CompositeExpression.Evaluate(Checkbox.Forms.Response)">
            <summary>
            Overridden.  Evaluates each child Expression in turn and returns the output of the child Expression's Evaluate()
            method across all children related via the ChildConnector (AND, OR)
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.CompositeExpression.Add(Checkbox.Forms.Logic.Expression)">
            <summary>
            Adds a child <see cref="T:Checkbox.Forms.Logic.Expression"/> to this CompositeExpression
            </summary>
            <param name="child">the child Expression</param>
        </member>
        <member name="P:Checkbox.Forms.Logic.CompositeExpression.Children">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.ExpressionBuilder.GetSupportedOperandTypes(System.Type)">
            <summary>
            Given a Type, retrieves the supported operands from the registry
            </summary>
            <param name="subject"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.ExpressionBuilder.GetComparableOperandTypes(Checkbox.Forms.Logic.Operand,Checkbox.Forms.Logic.LogicalOperator)">
            <summary>
            Given a left operand and an operation, retrieves the supported right-hand operands from the registry
            </summary>
            <param name="left"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.ExpressionOperandType">
            <summary>
            Type information for expression operands.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.ExpressionOperandType.Item">
            <summary>
            Operand is a survey item
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.ExpressionOperandType.Profile">
            <summary>
            Operand is a user attribute
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.ExpressionOperandType.Response">
            <summary>
            Operand is a property of a survey response
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.GoToPageAction">
            <summary>
            Page branch action that moves response to a new page.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.GoToPageAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="pageId"></param>
            <param name="targetPageId"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.GoToPageAction.Execute(System.Boolean,Checkbox.Forms.Response)">
            <summary>
            Execute action.
            </summary>
            <param name="directive"></param>
            <param name="response"></param>
        </member>
        <member name="P:Checkbox.Forms.Logic.GoToPageAction.TargetPageId">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.GoToPageAction.ToString">
            <summary>
            Get action as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.IncludeExcludeAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.IncludeExcludeAction.#ctor(Checkbox.Forms.Logic.Action.ActionReceiverType,System.Int32)">
            <summary>
            
            </summary>
            <param name="receiverType"></param>
            <param name="recevierId"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.IncludeExcludeAction.Execute(System.Boolean,Checkbox.Forms.Response)">
            <summary>
            
            </summary>
            <param name="directive"></param>
            <param name="response"></param>
        </member>
        <member name="T:Checkbox.Forms.Logic.OperandComparer">
            <summary>
            Compare operands for evaluating conditions
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.OperandComparer.Compare(Checkbox.Forms.Logic.Operand,Checkbox.Forms.Logic.LogicalOperator,Checkbox.Forms.Logic.Operand,Checkbox.Forms.Response)">
            <summary>
            Compare two operands with the specified logical operator.
            </summary>
            <param name="left"></param>
            <param name="operation"></param>
            <param name="right"></param>
            <param name="response">Optional argument when running in surveys.</param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.AnswerableOperand">
            <summary>
            An Operand that wraps a <see cref="T:Checkbox.Forms.Items.Item"/> object, using the Item's 
            state to construct the Operand value
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.AnswerableOperand.#ctor(System.Int32)">
            <summary>
            Construct a new item operand
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="P:Checkbox.Forms.Logic.AnswerableOperand.ItemID">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.AnswerableOperand.GetValue(Checkbox.Forms.Response)">
            <summary>
            Get the "value" of the item. Null indicates no value.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.AnswerableOperand.SourceItemIds">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.OperandDataType">
            <summary>
            Data type represented by logic operands
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.OperandDataType.String">
            <summary>
            Operand supports string comparisons
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.OperandDataType.Integer">
            <summary>
            Operand supports integer comparisons
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.OperandDataType.Double">
            <summary>
            Operand supports double comparisons
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.OperandDataType.Date">
            <summary>
            Operand supports date comparisons
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.OperandDataType.Currency">
            <summary>
            Operand supports currency comparisons
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.OperandDataType.Option">
            <summary>
            Operand supports option comparisons
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.OperandDataType.Other">
            <summary>
            Operand supports another type of comparison
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.OperandValue">
            <summary>
            Simple container for operand values to support easy querying/comparison
            with other operand values.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.OperandValue.Initialize(System.Object)">
            <summary>
            Initialize an operand value object
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Checkbox.Forms.Logic.OperandValue.Value">
            <summary>
            Get the raw value
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.OperandValue.DataType">
            <summary>
             Get a  data type flags enum for the supported data type
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.OperandValue.HasValue">
            <summary>
            Determine whether the operand has a value
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.OperandValue.GetDataType">
            <summary>
            Get the operand data type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.OperandValue.CompareTo(Checkbox.Forms.Logic.OperandValue)">
            <summary>
            Compare this operand value to another operand value.  For numerics and dates,
            value is a numeric/date comparison.  For strings, comparison is case-insensitive
            comparison of trimmed string values.
            When comparing two null values, the result will always be equal. When comparing
            null values with non-null values, the non-null value will always be "greater".
            </summary>
            <param name="other">Value to compare with</param>
            <returns>
            Less than zero when this instance is less than other. 
            Zero when this instance is equal to obj. 
            Greater than zero when this instance is greater than obj.  
            </returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.OperandValue.DoCompareTo(Checkbox.Forms.Logic.OperandValue)">
            <summary>
            Compare non-null values of operand value objects.  For string comparison, case-insensitive
            comparisons are made.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.OperandValue.Contains(Checkbox.Forms.Logic.OperandValue)">
            <summary>
            Return a boolean indicating if the current operand value "contains" the provided
            value.
            </summary>
            <param name="otherOperandValue">Value to check.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.OperandValue.CompareOtherValues(System.Object,System.Object)">
            <summary>
            Compare two "other" objects.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.OptionOperand">
            <summary>
            Exposes the ID of an <see cref="T:Checkbox.Forms.Items.ListOption"/> for value comparison.  Currently, only option ids
            are used for comparison.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.OptionOperand.#ctor(System.Int32)">
            <summary>
            Construct an option operand
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.OptionOperand.OptionId">
            <summary>
            Get the option id
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.OptionOperand.GetValue(Checkbox.Forms.Response)">
            <summary>
            Get the option value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.OptionOperand.CreateOperandValue">
            <summary>
            Create the operand value object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.GroupOperandValue`1">
            <summary>
            Handle special case of operands of for groups of items.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.GroupOperandValue`1.Initialize(System.Object)">
            <summary>
            Initialize the object
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Checkbox.Forms.Logic.GroupOperandValue`1.Values">
            <summary>
            Get the values for the operand
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.GroupOperandValue`1.HasValue">
            <summary>
            Get a boolean indicating if values are present
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.GroupOperandValue`1.CompareTo(Checkbox.Forms.Logic.OperandValue)">
            <summary>
            Compare to 
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.GroupOperandValue`1.CompareTo(Checkbox.Forms.Logic.GroupOperandValue{`0})">
            <summary>
            Compare two group items
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.ProfileOperand">
            <summary>
            Logical operand for profile data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.ProfileOperand.#ctor(System.String)">
            <summary>
            Construct a profile operand
            </summary>
            <param name="profileKey">Profile property name.</param>
        </member>
        <member name="P:Checkbox.Forms.Logic.ProfileOperand.ProfilePropertyKey">
            <summary>
            Get the profile property key
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.ProfileOperand.GetValue(Checkbox.Forms.Response)">
            <summary>
            Get an operand value
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.ResponseOperand">
            <summary>
            Operand for comparing properties from the response.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.ResponseOperand.#ctor(System.String)">
            <summary>
            Response operand
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.ResponseOperand.GetValue(Checkbox.Forms.Response)">
            <summary>
            Get value.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.RulesEngine">
            <summary>
            Engine for running/evalulating survey rules.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.Initialize(Checkbox.Forms.Logic.RulesObjectSet,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            
            </summary>
            <param name="ruleData"></param>
            <param name="pageIds"></param>
            <param name="itemIds"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.BuildRules(Checkbox.Forms.Logic.RulesObjectSet,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Build page rules
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.AddIgnoreRuleTypes(System.Collections.Generic.List{System.String})">
            <summary>
            Adds the ignore rule types.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.RemoveIgnoreRuleType(System.String)">
            <summary>
            Removes the type of the ignore rule.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.ClearIgnoreTypeRules">
            <summary>
            Clears the ignore type rules.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.HasIgnoreTypes(Checkbox.Forms.Logic.Expression)">
            <summary>
            Determines whether [has ignore types] [the specified expression].
            </summary>
            <param name="expression">The expression.</param>
            <returns>
              <c>true</c> if [has ignore types] [the specified expression]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.RunRules(System.Int32,Checkbox.Forms.Response)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.RunRules(System.Int32,Checkbox.Forms.Response,Checkbox.Forms.Logic.RuleEventTrigger)">
            <summary>
            
            </summary>
            <param name="pageId"></param>
            <param name="response"></param>
            <param name="trigger"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.ListSourcePageIdsBoundOnSpecifiedPageConditions(Checkbox.Forms.ResponsePage,Checkbox.Forms.ResponseTemplate)">
            <summary>
            
            </summary>
            <param name="rp"></param>
            <param name="rt"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.ListTargetPageIdsBoundOnSpecifiedPageBranching(Checkbox.Forms.ResponsePage,Checkbox.Forms.ResponseTemplate)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.CollectExpressionTreeNodes(Checkbox.Forms.Logic.Expression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.GetRulesForPage(System.Int32,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            
            </summary>
            <param name="pageId"></param>
            <param name="ruleData"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.GetRuleForItem(System.Int32,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <param name="ruleData"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.BuildExpressionTree(Checkbox.Forms.Logic.CompositeExpression,Checkbox.Forms.Logic.RulesObjectSet)">
            <summary>
            
            </summary>
            <param name="composite"></param>
            <param name="ruleData"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.CreateExpression(Checkbox.Forms.Logic.ExpressionEntity)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.HasSamePageConditions(System.Collections.Generic.List{Checkbox.Forms.Items.Item})">
            <summary>
            Checks whereas a item set contains references to this set
            </summary>
            <param name="Items"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.ItemsDependOn(System.Collections.Generic.List{Checkbox.Forms.Items.Item},Checkbox.Forms.Items.Item)">
            <summary>
            Checks that list of items depends on the other item
            </summary>
            <param name="itemIDs"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.RulesEngine.expressionDependsOnItems(Checkbox.Forms.Logic.Expression,System.Collections.Generic.List{Checkbox.Forms.Items.Item})">
            <summary>
            Check that expression depends on one of given items
            </summary>
            <param name="expression"></param>
            <param name="ItemIDs"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.RuleType">
            <summary>
            Rule type enumeration.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.RuleType.ItemCondition">
            <summary>
            Rule is associated with conditional display of an item.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.RuleType.PageCondition">
            <summary>
            Rule is associated with conditional display of a page.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.RuleType.PageBranchCondition">
            <summary>
            Rule is associated with page branching logic.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.SelectItemOperand">
            <summary>
            Operand for comparing select items
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.SelectItemOperand.#ctor(System.Int32)">
            <summary>
            Construct a select item operand
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.SelectItemOperand.InitializeOperandValue(Checkbox.Forms.Logic.OperandValue,System.Object,Checkbox.Forms.Response)">
            <summary>
            Initialize the operand value
            </summary>
            <param name="operandValue"></param>
            <param name="initializationValue"></param>
            <param name="response"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.SelectItemOperand.CreateOperandValue">
            <summary>
            Create the operand value object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.SelectItemOperand.GetOptionIds(Checkbox.Forms.Response)">
            <summary>
            Get the select item ids
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.SelectItemOperand.GetValue(Checkbox.Forms.Response)">
            <summary>
            Return list of selected options
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Logic.SelectItemOperand.ItemID">
            <summary>
            Item ID
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.SelectItemOperand.SourceItemIds">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.SelectOperandValue">
            <summary>
            Operand value for comparing select operands
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.SelectOperandValue.CompareTo(Checkbox.Forms.Logic.OperandValue)">
            <summary>
            Add special handling for comparing to a single number
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.SelectOperandValue.GetValueTextsString">
            <summary>
            Get the value of this operand as a CSV string of text, rather than option id, values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.SelectOperandValue.GetDataType">
            <summary>
            Get the operand data type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.SelectOperandValue.CompareTo(System.Int32)">
            <summary>
            Compare to an other value
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Logic.SelectOperandValue.Value">
            <summary>
            Get the value of the operand, which is a CSV list of option ids
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.SelectOperandValue.TextValues">
            <summary>
            Get text values associated with this operand
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.SelectOperandValue.Contains(Checkbox.Forms.Logic.OperandValue)">
            <summary>
            Perform contains comparison by checking text values of currently selected value.
            </summary>
            <param name="otherOperandValue"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.SelectOperandValue.CompareTo(Checkbox.Forms.Logic.GroupOperandValue{System.Int32})">
            <summary>
            Handle comparing against other group operand value items
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.StringOperand">
            <summary>
            Operand representing free text string.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.StringOperand.#ctor(System.String)">
            <summary>
            Construct a new string operand
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.StringOperand.GetValue(Checkbox.Forms.Response)">
            <summary>
            Get a value for this operand
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.SumOperand">
            <summary>
            Operand with a value equal to the sum of the answers for a list of items.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.SumOperand.#ctor(System.Collections.Generic.List{System.Int32})">
            <summary>
            Construct a list of items
            </summary>
            <param name="answerableItemIds"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.SumOperand.CreateOperandValue">
            <summary>
            Create the operand value object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.SumOperand.GetValue(Checkbox.Forms.Response)">
            <summary>
            Get a list of values
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Logic.SumOperand.SourceItemIds">
            <summary>
            Item ID
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.SumOperandValue">
            <summary>
            Operand value where the comparison is made against a sum of values
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.SumOperandValue.Value">
            <summary>
            Get the value of the item
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.SumOperandValue.CompareTo(Checkbox.Forms.Logic.GroupOperandValue{System.Double})">
            <summary>
            Compare to another group
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.Action">
            <summary>
            A command object which performs some action
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.Action.ActionReceiverType">
            <summary>
            Receiver type for action.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.Action.ActionReceiverType.Item">
            <summary>
            Action operates on an item.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.Action.ActionReceiverType.Page">
            <summary>
            Action operates on a page.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Action.#ctor(Checkbox.Forms.Logic.Action.ActionReceiverType,System.Int32)">
            <summary>
            Construct action
            </summary>
            <param name="receiverId"></param>
            <param name="receiverType"></param>
        </member>
        <member name="P:Checkbox.Forms.Logic.Action.ReceiverType">
            <summary>
            Type of action receiver
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Action.ReceiverId">
            <summary>
            Receiver id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Action.Identity">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Action.Execute(System.Boolean,Checkbox.Forms.Response)">
            <summary>
            Encapsulates a specific action to execute
            </summary>
            <remarks>
            Action is a command object.  Inheritors of Action should pay special attention to 
            the executing threads operation and may wish to implement Execute in an asynchronous thread.
            </remarks>
            <param name="directive">the evaluation result for a Rule.</param>
            <param name="response">Response</param>
        </member>
        <member name="T:Checkbox.Forms.Logic.Expression">
            <summary>
            Represents a Logical (boolean) operation
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Expression.#ctor(Checkbox.Forms.Logic.Operand,Checkbox.Forms.Logic.Operand,Checkbox.Forms.Logic.LogicalOperator)">
            <summary>
            Constructor
            </summary>
            <param name="left">the left-hand <see cref="T:Checkbox.Forms.Logic.Operand"/></param>
            <param name="right">the right-hand <see cref="T:Checkbox.Forms.Logic.Operand"/></param>
            <param name="operation">the <see cref="T:Checkbox.Forms.Logic.LogicalOperator"/></param>
        </member>
        <member name="P:Checkbox.Forms.Logic.Expression.Identity">
            <summary>
            Gets or sets the database ID of this Expression as found in the ckbx_Expression table's PK.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Expression.Parent">
            <summary>
            Gets or sets the parent CompositeExpression for this Expression.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Expression.Evaluate(Checkbox.Forms.Response)">
            <summary>
            Evaluates an Expression using the registered <see cref="T:Checkbox.Forms.Logic.IOperandComparer"/>s and the <see cref="T:Checkbox.Forms.Logic.LogicalOperator"/> 
            specified during construction
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="P:Checkbox.Forms.Logic.Expression.LeftOperand">
            <summary>
            Left Operand
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Expression.RightOperand">
            <summary>
            Right Operand
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.IOperandComparer">
            <summary>
            Interface definition for class that compares to locigal operand values.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.IOperandComparer.Compare(Checkbox.Forms.Logic.Operand,Checkbox.Forms.Logic.LogicalOperator,Checkbox.Forms.Logic.Operand)">
            <summary>
            Compares two <see cref="T:Checkbox.Forms.Logic.Operand"/> instances based on a <see cref="T:Checkbox.Forms.Logic.LogicalOperator"/>
            </summary>
            <remarks>
            Implementers of IOperandComparer should take care to ensure thread-safety
            </remarks>
            <param name="left">the left <see cref="T:Checkbox.Forms.Logic.Operand"/></param>
            <param name="operation">the <see cref="T:Checkbox.Forms.Logic.LogicalOperator"/></param>
            <param name="right">the right <see cref="T:Checkbox.Forms.Logic.Operand"/></param>
            <returns>true, if comparable; otherwise false</returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.LogicalOperator">
            <summary>
            Enum of Logical operations
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.LogicalOperator.OperatorNotSpecified">
            <summary>
            Default state for operator and not valid for evaluating conditional, branching, or filter logic.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.LogicalOperator.Equal">
            <summary>
            Equality comparison.  In case of strings, the comparision is case INsensitive.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.LogicalOperator.NotEqual">
            <summary>
            Inequality comparision.  In case of strings, the comparision is case INsensitive.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.LogicalOperator.GreaterThan">
            <summary>
            Greater-than comparison.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.LogicalOperator.GreaterThanEqual">
            <summary>
            Greater-than or equal to comparision.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.LogicalOperator.LessThan">
            <summary>
            Less-than comparison.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.LogicalOperator.LessThanEqual">
            <summary>
            Less-than or equal to comparision.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.LogicalOperator.Contains">
            <summary>
            Contains evaluation.  For string comparisons, this is similar to string.Contains(...), but for select items, the comparison generally is evaluated is
            'list of selected options contains'.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.LogicalOperator.DoesNotContain">
            <summary>
            Does not contain evaluation.  For string comparisons, this is similar to !string.Contains(...), but for select items, the comparison generally is evaluated is
            'list of selected options does not contain'.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.LogicalOperator.Answered">
            <summary>
            Answered evaluation.  For string comparisons, this is similar to !string.IsNullOrEmpty(...), but for select items, the comparison generally is evaluated is
            'list of selected options has more than 0 items'.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.LogicalOperator.NotAnswered">
            <summary>
            Not answered evaluation.  For string comparisons, this is similar to string.IsNullOrEmpty(...), but for select items, the comparison generally is evaluated is
            'list of selected options has 0 items'.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.LogicalOperator.IsNull">
            <summary>
            Is Null evalulation.  For string comparisons, this is similar to string.IsNullOrEmpty(...).
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.LogicalOperator.IsNotNull">
            <summary>
            Is Not Null evalulation.  For string comparisons, this is similar to !string.IsNullOrEmpty(...).
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.LogicalConnector">
            <summary>
            Used to connect two or more <see cref="T:Checkbox.Forms.Logic.Expression"/>s within a logical compound statement
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.LogicalConnector.OR">
            <summary>
            Result of expression evaluations should be connected by a logical OR.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.LogicalConnector.AND">
            <summary>
            Result of expression evaluations should be connected by a logical AND.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.Operand">
            <summary>
            An Operand acts as a type-specific wrapper for objects that can participate in logical expression evaluations.  
            </summary>
            <remarks>
            An Operand acts a one part of an <see cref="T:Checkbox.Forms.Logic.Expression"/> statement, which will consist of a Left Operand, a Right Operand and a 
            <see cref="T:Checkbox.Forms.Logic.LogicalOperator"/>.  When an Expression is evaluated, the Operands are compared according to the LogicalOperator to 
            produce a boolean result.
            </remarks>
        </member>
        <member name="M:Checkbox.Forms.Logic.Operand.GetValue(Checkbox.Forms.Response)">
            <summary>
            The object to which the Operand provides access.  
            </summary>
            <remarks>
            The Value is used to initialize an operand value object.
            </remarks>
        </member>
        <member name="M:Checkbox.Forms.Logic.Operand.GetOperandValue(Checkbox.Forms.Response)">
            <summary>
            Get a value object representing the operand value
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Operand.CreateOperandValue">
            <summary>
            Create an operand value object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Logic.Operand.InitializeOperandValue(Checkbox.Forms.Logic.OperandValue,System.Object,Checkbox.Forms.Response)">
            <summary>
            Initialize an operand value object with its initialization value
            </summary>
            <param name="operandValue"></param>
            <param name="initializationValue"></param>
            <param name="response"></param>
        </member>
        <member name="M:Checkbox.Forms.Logic.Operand.CompareTo(Checkbox.Forms.Logic.Operand,Checkbox.Forms.Response)">
            <summary>
            Compare operands
            </summary>
            <param name="other"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Logic.Rule">
            <summary>
            Logic rule associated with survey items or pages.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Rule.#ctor(Checkbox.Forms.Logic.Expression,Checkbox.Forms.Logic.RuleEventTrigger,Checkbox.Forms.Logic.Action[])">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <param name="trigger"></param>
            <param name="actions"></param>
        </member>
        <member name="P:Checkbox.Forms.Logic.Rule.Expression">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Rule.Actions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Logic.Rule.Trigger">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Logic.Rule.Run(Checkbox.Forms.Response)">
            <summary>
            Evaluates the Expression and executes any Actions
            </summary>
        </member>
        <member name="E:Checkbox.Forms.Logic.Rule.RuleChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:Checkbox.Forms.Logic.Rule.BeginRun">
            <summary>
            
            </summary>
        </member>
        <member name="E:Checkbox.Forms.Logic.Rule.EndRun">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Logic.RuleEventTrigger">
            <summary>
            Specify when rule should run.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.RuleEventTrigger.Load">
            <summary>
            Rule runs on page load (i.e. is a page/item condition)
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Logic.RuleEventTrigger.UnLoad">
            <summary>
            Rule runs on page unload (i.e. is a page branch)
            </summary>
        </member>
        <member name="T:Checkbox.Forms.ResponseStateEntities.ResponseAnswerEntity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.ResponseStateEntities.ResponseItemOptionOrderEntity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.ResponseStateEntities.ResponseLogEntity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.ResponseStateEntities.ResponsePageItemOrderEntity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.SurveySectionManager">
            <summary>
            SurveySectionManager
            </summary>
        </member>
        <member name="M:Checkbox.Forms.SurveySectionManager.GetSectionItemIds(System.Int32)">
            <summary>
            Gets the section item ids.
            </summary>
            <param name="sectionId">The section identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.SurveySectionManager.GetAllSurveySectionItemIds(System.Int32)">
            <summary>
            Gets all survey section item ids.
            </summary>
            <param name="surveyId">The survey identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.SurveySectionManager.DeleteSection(System.Int32)">
            <summary>
            Deletes the section.
            </summary>
            <param name="sectionId">The section identifier.</param>
        </member>
        <member name="M:Checkbox.Forms.SurveySectionManager.AddSectionItemId(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the section item identifier.
            </summary>
            <param name="sectionId">The section identifier.</param>
            <param name="itemId">The item identifier.</param>
            <param name="surveyId">The survey identifier.</param>
        </member>
        <member name="T:Checkbox.Forms.EditMode">
            <summary>
            Enumeration of edit modes supported for item editors.  Value can be used by item editors
            to provide different behavior based on context.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.EditMode.Survey">
            <summary>
            Item is in or is being added to a survey.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.EditMode.Library">
            <summary>
            Item is in or is being added to an item library.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.EditMode.Report">
            <summary>
            Item is in or is being added to a report.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.FolderManager">
            <summary>
            Static manager used to access folders.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.FolderManager.GetFolder(System.Int32)">
            <summary>
            Get a folder with the specified id.
            </summary>
            <param name="folderId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.FolderManager.GetLightweightFolder(System.Int32)">
            <summary>
            Get a "lightweight" folder class.
            </summary>
            <param name="folderId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.FolderManager.FolderExists(System.Nullable{System.Int32},System.String,System.Security.Principal.IPrincipal)">
            <summary>
            Return a boolean indicating if a folder with the specified name already exists.
            </summary>
            <param name="folderId"></param>
            <param name="folderName"></param>
            <param name="currentPrincipal"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.FolderManager.ListAccessibleFolders(Checkbox.Security.Principal.CheckboxPrincipal,System.String)">
            <summary>
            Get a list of accessible folders, sorted in ascending order by name
            </summary>
            <param name="currentPrincipal"></param>
            <param name="permissionToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.FolderManager.GetAllFolders(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String,System.Boolean)">
            <summary>
            List all folders
            </summary>
            <param name="currentPrincipal"></param>
            <param name="sortProperty">Folder sort property.</param>
            <param name="sortAscending"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.FolderManager.GetAllFolders(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String)">
            <summary>
            Get all folders the current permission has the specified permission on.
            </summary>
            <param name="currentPrincipal">Current principal.</param>
            <param name="permissionToCheck">Permission to check.</param>
            <returns>Array of folders.</returns>
        </member>
        <member name="M:Checkbox.Forms.FolderManager.GetRoot">
            <summary>
            Get the root folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.FolderManager.ListFolderItems(System.Int32)">
            <summary>
            ListFolderItems
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.IResponseSession">
            <summary>
            Interface definition for container of session information for a respondent's
            journey through a survey.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.IResponseSession.ClearPersistedValues">
            <summary>
            Clear any values that are persisted as part of the response session.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.IResponseSession.SurveyGuid">
            <summary>
            Get/set the GUID identifying the survey.  Nulls are allowed so that the controller and 
            survey interface can detect and provide appropriate error information to the 
            respondent.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.IResponseSession.ResponseGuid">
            <summary>
            Get the GUID of the current response.  This value may be null when first starting
            a survey, or if a respondent's session is lost mid-survey.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.IResponseSession.RecipientGuid">
            <summary>
            Get the GUID of the invitation associated with this response.  If no invitation
            recipient is associated, a null value should be returned.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.IResponseSession.CurrentPageId">
            <summary>
            Get/set the index of the current page in the response.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.IResponseSession.Password">
            <summary>
            Get/set the password entered by the respondent for the survey.  This value may be null.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.IResponseSession.LanguageCode">
            <summary>
            Get/set the language code for the response session.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.IResponseSession.Respondent">
            <summary>
            Get/set the respondent associated with the response session.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.IResponseSession.ServerUserContext">
            <summary>
            Get/set name of the server user context.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.IResponseSession.UserGuid">
            <summary>
            Get guid of current user
            </summary>
        </member>
        <member name="P:Checkbox.Forms.IResponseSession.AnonymousRespondentGuid">
            <summary>
            Get/set a guid to track anonymous respondents.  If anonymous user tracking
            is disabled, null values should be allowed.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.IResponseSession.Load">
            <summary>
            Load the response session information.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.IResponseSession.Save">
            <summary>
            Persist the response session information.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.IResponseSession.GetRespondentLanguageCode(System.String,System.String)">
            <summary>
            Determine the respondent language code.
            </summary>
            <param name="source"></param>
            <param name="token"></param>
        </member>
        <member name="P:Checkbox.Forms.IResponseSession.RespondentIPAddress">
            <summary>
            Get/set IP address of respondent
            </summary>
        </member>
        <member name="P:Checkbox.Forms.IResponseSession.RespondentEditMode">
            <summary>
            Get/set whether respondent is editing.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.IResponseSession.AdminEditMode">
            <summary>
            Get/set whether administrator is editing.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.IResponseSession.ForceNew">
            <summary>
            Get/set whether to force creation of a new response
            </summary>
        </member>
        <member name="P:Checkbox.Forms.IResponseSession.IsTest">
            <summary>
            Get/set whether a response is a test
            </summary>
        </member>
        <member name="P:Checkbox.Forms.IResponseSession.IsFormPost">
            <summary>
            Get a boolean indicating if the current page is a form postback or not
            </summary>
        </member>
        <member name="T:Checkbox.Forms.FormFolder">
            <summary>
            Summary description for FormFolder.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.FormFolder.#ctor">
            <summary>
            Construct a new form folder
            </summary>
        </member>
        <member name="M:Checkbox.Forms.FormFolder.#ctor(System.String[],System.String[])">
            <summary>
            Construct a new form folder
            </summary>
            <param name="supportedPermissionMasks"></param>
            <param name="supportedPermissions"></param>
        </member>
        <member name="M:Checkbox.Forms.FormFolder.CreatePolicy(System.String[])">
            <summary>
            Create a form folder policy.
            </summary>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.FormFolder.Add(System.Object)">
            <summary>
            Add a survey to a folder
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:Checkbox.Forms.FormFolder.Add(System.Int32)">
            <summary>
            Add a survey to a folder.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Checkbox.Forms.FormFolder.Remove(System.Object)">
            <summary>
            Remove a survey from a folder.  Does nothing.
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:Checkbox.Forms.FormFolder.Remove(System.Int32)">
            <summary>
            Remove a survey from a folder.  Does nothing
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Checkbox.Forms.FormFolder.Copy(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String)">
            <summary>
            Copy the specified folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.FormFolder.Save(Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Save the current folder
            </summary>
            <param name="principal"></param>
        </member>
        <member name="M:Checkbox.Forms.FormFolder.Save(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.Boolean)">
            <summary>
            Save the current folder
            </summary>
            <param name="principal"></param>
            <param name="SimpleSecurity"></param>
        </member>
        <member name="M:Checkbox.Forms.FormFolder.Create(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Persist the folder in the database
            </summary>
            <param name="principal"></param>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.FormFolder.Update(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.Data.IDbTransaction)">
            <summary>
            Persist updates to the folder
            </summary>
            <param name="t"></param>
            <param name="principal"></param>
        </member>
        <member name="M:Checkbox.Forms.FormFolder.Delete(Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Delete the folder
            </summary>
            <param name="principal"></param>
        </member>
        <member name="M:Checkbox.Forms.FormFolder.GetEditor">
            <summary>
            Get a folder security editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.FormFolder.Create(System.Data.IDbTransaction)">
            <summary>
            Override create
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.FormFolder.Update(System.Data.IDbTransaction)">
            <summary>
            Override update.
            </summary>
            <param name="t"></param>
        </member>
        <member name="T:Checkbox.Forms.RootFormFolder">
            <summary>
            Special case for root folder
            </summary>
        </member>
        <member name="M:Checkbox.Forms.RootFormFolder.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Forms.RootFormFolder.Add(System.Int32)">
            <summary>
            Add an item to the folder
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Checkbox.Forms.RootFormFolder.Add(System.Object)">
            <summary>
            Add an item to the folder
            </summary>
            <param name="responseTemplate"></param>
        </member>
        <member name="M:Checkbox.Forms.RootFormFolder.Remove(System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Checkbox.Forms.RootFormFolder.Remove(System.Object)">
            <summary>
            Not implemented
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Checkbox.Forms.RootFormFolder.DefaultPolicy">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Checkbox.Forms.RootFormFolder.SupportedPermissionMasks">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Checkbox.Forms.RootFormFolder.SupportedPermissions">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Checkbox.Forms.RootFormFolder.CreatePolicy(System.String[])">
            <summary>
            Not implemented
            </summary>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.RootFormFolder.GetEditor">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.RootFormFolder.Copy(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String)">
            <summary>
            Not implemented
            </summary>
            <param name="owner"></param>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.IAnswerData">
            <summary>
            Interface for containers of answer data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.IAnswerData.GetOptionAnswersForItem(System.Int32)">
            <summary>
            Get options for a specified item.
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.IAnswerData.SetOptionAnswerForItem(System.Int32,System.Int32,System.Nullable{System.Double},System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <param name="??"></param>
            <param name="optionId"> </param>
            <param name="points"> </param>
            <param name="otherText"> </param>
            <param name="doNotSave"> Will answer be inserted into database on save </param>
        </member>
        <member name="M:Checkbox.Forms.IAnswerData.SetTextAnswersForItem(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="itemID"></param>
            <param name="answer"></param>
        </member>
        <member name="M:Checkbox.Forms.IAnswerData.SetEmptyAnswerForItem(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemID"></param>
        </member>
        <member name="M:Checkbox.Forms.IAnswerData.GetTextAnswerForItem(System.Int32)">
            <summary>
            Get text answer for a specified item.
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.IAnswerData.GetAllAnswerIds(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.IAnswerData.DeleteAllAnswersForItem(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Checkbox.Forms.IAnswerData.DeleteOptionAnswerForItem(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <param name="optionId"> </param>
        </member>
        <member name="M:Checkbox.Forms.IAnswerData.IsAnswered(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.IAnswerData.HasEmptyAnswer(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.IAnswerData.BuildDataTransferObjectAnswerList(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="E:Checkbox.Forms.IAnswerData.Saved">
            <summary>
            Data saved event
            </summary>
        </member>
        <member name="T:Checkbox.Forms.LibraryTemplateDataSet">
            <summary>
            Template data for library templates
            </summary>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplateDataSet.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="owningObjectTypeName"></param>
        </member>
        <member name="P:Checkbox.Forms.LibraryTemplateDataSet.ObjectDataTableNames">
            <summary>
            Get names of data tables for this object's configuration data set.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.LightweightLibraryTemplate">
            <summary>
            Lightweight representation of a library template suitable for
            authorization and security management purposes.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightLibraryTemplate.ID">
            <summary>
            Get/set the library template id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightLibraryTemplate.Name">
            <summary>
            Get/set the name of the library template
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightLibraryTemplate.Description">
            <summary>
            Get the description of the library template
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightLibraryTemplate.NameTextID">
            <summary>
            Get/set the library template name textId
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightLibraryTemplate.DescriptionTextID">
            <summary>
            Get/set the library template description textId
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightLibraryTemplate.ShowInMenu">
            <summary>
            Get/set the library template menu availability
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightLibraryTemplate.EntityType">
            <summary>
            Get entity type of lightweight template
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightLibraryTemplate.CreatedBy">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightLibraryTemplate.ModifiedDate">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightLibraryTemplate.CreatedDate">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightLibraryTemplate.SupportedPermissionMasks">
            <summary>
            Get list of permissions masks supported by response templates
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightLibraryTemplate.SupportedPermissions">
            <summary>
            Get a list of permissions supported by response templates
            </summary>
        </member>
        <member name="M:Checkbox.Forms.LightweightLibraryTemplate.GetEditor">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.LightweightLibraryTemplate.CreatePolicy(System.String[])">
            <summary>
            
            </summary>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.LightweightResponseTemplate">
            <summary>
            Lightweight representation of a response template suitable for
            authorization and security management purposes.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.GUID">
            <summary>
            Get/set the template Guid
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.Name">
            <summary>
            Get/set the template _name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.ID">
            <summary>
            Get/set the template _id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.EntityType">
            <summary>
            Get entity type of lightweight template
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.AllowEditWhileActive">
            <summary>
            Get/set whether template can be edited while active
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.DefaultLanguage">
            <summary>
            Get/set default language for survey
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.TitleTextId">
            <summary>
            Get/set text id for title
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.SecurityTypeValue">
            <summary>
            Get/set numeric value for security type
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.IsActive">
            <summary>
            Get/set is active value
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.ActivationStartDate">
            <summary>
            Get/set activation start date
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.ActivationEndDate">
            <summary>
            Get/set numeric value for security type
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.MaxTotalResponses">
            <summary>
            Get/set numeric value for security type
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.MaxResponsesPerUser">
            <summary>
            Get/set numeric value for security type
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.AllowEdit">
            <summary>
            Get/set is active value
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.AnonymizeResponses">
            <summary>
            Get/set is active value
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.StyleTemplateId">
            <summary>
            Get/set numeric value for style template id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.SupportedLanguagesString">
            <summary>
            Get/set text id for title
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.CreatedDate">
            <summary>
            Get/set created date
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.ModifiedDate">
            <summary>
            Get/set modified date
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.CreatedBy">
            <summary>
            Get/set modified date
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.SecurityType">
            <summary>
            Gets or sets the SecurityType mask for this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.SupportedLanguages">
            <summary>
            Gets or sets a string array of the languages supported by this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
        </member>
        <member name="M:Checkbox.Forms.LightweightResponseTemplate.#ctor(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.LightweightResponseTemplate.CreatePolicy(System.String[])">
            <summary>
            Create a security policy with the specified permissions
            </summary>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.SupportedPermissionMasks">
            <summary>
            Get list of permissions masks supported by response templates
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LightweightResponseTemplate.SupportedPermissions">
            <summary>
            Get a list of permissions supported by response templates
            </summary>
        </member>
        <member name="M:Checkbox.Forms.LightweightResponseTemplate.GetEditor">
            <summary>
            Get a security editor for response templates
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.PageImportReader">
            <summary>
            Class to handle some housecleaning tasks for importing pages, including importing items and updating rules so that pre-import page ids
            are mapped to corresponding page ids in imported surveys. For standalone mode, passing NULL rule data service to
            constructor will prevent rule operations.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageImportReader.PageIdMap">
            <summary>
            Map of pre-import page ids to post-import page ids
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageImportReader.PageItemMap">
            <summary>
            Map of post-import page ids to list of post-import item ids contained in the pages
            </summary>
        </member>
        <member name="M:Checkbox.Forms.PageImportReader.#ctor(Checkbox.Forms.Logic.Configuration.RuleDataService)">
            <summary>
            
            </summary>
            <param name="rds"></param>
        </member>
        <member name="M:Checkbox.Forms.PageImportReader.ReadPageData(Checkbox.Common.PersistedDomainObject,System.Xml.XmlNode,System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.PageImportReader.CopyPageData(Checkbox.Common.PersistedDomainObject,System.Xml.XmlNode,System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.PageImportReader.LoadPageItems(Checkbox.Common.PersistedDomainObject,System.Xml.XmlNode,System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="pageNode"></param>
        </member>
        <member name="M:Checkbox.Forms.PageImportReader.CopyPageItems(Checkbox.Common.PersistedDomainObject,System.Xml.XmlNode,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="pageNode"></param>
        </member>
        <member name="M:Checkbox.Forms.PageImportReader.UpdateRules">
            <summary>
            Update page rules to update mappings between pre-import page/item/option ids and post-import page/item/option
            ids.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.PageImportReader.UpdatePipes(Checkbox.Forms.Items.Configuration.ItemImportReader.AddResponsePipeDelegate)">
            <summary>
            Updates pipes by replacing old item ids with new ones
            </summary>
        </member>
        <member name="M:Checkbox.Forms.PageImportReader.ResolveIdDependencies">
            <summary>
            Resolves dependencies 
            </summary>
        </member>
        <member name="T:Checkbox.Forms.RenderMode">
            <summary>
            Enumeration of render modes for survey/report items and can be used by 
            renderers to provide different behavior depending on context.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.RenderMode.Survey">
            <summary>
            Respondent taking a survey.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.RenderMode.SurveyEditor">
            <summary>
            Editing a survey.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.RenderMode.SurveyPreview">
            <summary>
            Previewing a survey.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.RenderMode.LibraryEditor">
            <summary>
            Editing a library
            </summary>
        </member>
        <member name="F:Checkbox.Forms.RenderMode.LibraryPreview">
            <summary>
            Previewing a library.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.RenderMode.Report">
            <summary>
            Running a report.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.RenderMode.ReportEditor">
            <summary>
            Editing a report.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.RenderMode.ReadOnly">
            <summary>
            Read-only view of a response
            </summary>
        </member>
        <member name="F:Checkbox.Forms.RenderMode.SurveyMobile">
            <summary>
            Respondent taking a survey on a mobile device
            </summary>
        </member>
        <member name="F:Checkbox.Forms.RenderMode.SurveyMobilePreview">
            <summary>
            Previewing a mobile-styled survey.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.RenderMode.Default">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.ResponseProgressInfo">
            <summary>
            Container for survey progress information.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseProgressInfo.CurrentPage">
            <summary>
            Current response page.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseProgressInfo.TotalPages">
            <summary>
            Total pages in response.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.ResponseFormatter">
            <summary>
            Format responses into various text formats.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseFormatter.Format(Checkbox.Forms.Response,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Checkbox.Forms.SurveyTerm})">
            <summary>
            Format the response in the desired format.  The boolean indicates whether skipped
            pages and items should be marked or omitted entirely.
            </summary>
            <param name="response">Response to format.</param>
            <param name="format">Format for response.</param>
            <returns>String formatted response.</returns>
            <remarks>
            This is more of a stop-gap measure for now until Response, Page, and Items are refactored
            to better separate state, business, and data access logic.
            </remarks>
        </member>
        <member name="M:Checkbox.Forms.ResponseFormatter.FormatXml(Checkbox.Forms.Response)">
            <summary>
            Format the rseponse in XML format
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseFormatter.FormatHtml(Checkbox.Forms.Response,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Checkbox.Forms.SurveyTerm})">
            <summary>
            Format the response
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseFormatter.FormatText(Checkbox.Forms.Response,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Checkbox.Forms.SurveyTerm})">
            <summary>
            Format a response in text format
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.ResponsePageFormatter">
            <summary>
            Format response pages into text format
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponsePageFormatter.Format(Checkbox.Forms.ResponsePage,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Checkbox.Forms.SurveyTerm})">
            <summary>
            Format a response page into the desired format.
            </summary>
            <param name="page">Page to format.</param>
            <param name="format">Format for page.</param>
            <returns>Page formatted as string.</returns>
            <remarks>Format strings of HTML and Text are supported, with text as the default.</remarks>
        </member>
        <member name="M:Checkbox.Forms.ResponsePageFormatter.FormatHtml(Checkbox.Forms.ResponsePage,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{Checkbox.Forms.SurveyTerm})">
            <summary>
            Format the response page as html
            </summary>
            <param name="page">Page to format.</param>
            <returns>Page formatted as html.</returns>
        </member>
        <member name="M:Checkbox.Forms.ResponsePageFormatter.ReplaceTerms(System.String,System.Collections.Generic.List{Checkbox.Forms.SurveyTerm})">
            <summary>
            Replace temrs occurance with text
            </summary>
            <param name="item">The item.</param>
            <param name="formaterItem">html for item.</param>
        </member>
        <member name="M:Checkbox.Forms.ResponsePageFormatter.MapBindedStateToSelectItem(Checkbox.Forms.Items.Item,Checkbox.Forms.ResponsePage)">
            <summary>
            Maps the binded state to select item.
            </summary>
            <param name="item">The item.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:Checkbox.Forms.ResponsePageFormatter.GetItemNumber(Checkbox.Forms.ResponsePage,Checkbox.Forms.Items.Item)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponsePageFormatter.FormatText(Checkbox.Forms.ResponsePage,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Format the page as text.
            </summary>
            <param name="page">Page to format.</param>
            <returns>Page formatted as text.</returns>
        </member>
        <member name="T:Checkbox.Forms.ResponseTemplateDataSet">
            <summary>
            Template data for response templates
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateDataSet.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="owningObjectTypeName"></param>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplateDataSet.IdentityColumnName">
            <summary>
            Set identity column
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplateDataSet.ObjectDataTableNames">
            <summary>
            Get names of data tables for this object's configuration data set.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateDataSet.InitializeDataTables">
            <summary>
            Initialize data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateDataSet.InitializeTemplateData">
            <summary>
            Initialize the template data table
            </summary>
        </member>
        <member name="T:Checkbox.Forms.LibraryTemplate">
            <summary>
            Container for survey items outside of a survey.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LibraryTemplate.ObjectTypeName">
            <summary>
            Get object type name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LibraryTemplate.LoadSprocName">
            <summary>
            Get load sproc name
            </summary>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.CreateConfigurationDataSet">
            <summary>
            Get template data set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.InitializeAccess(Prezza.Framework.Security.Policy,Prezza.Framework.Security.AccessControlList)">
            <summary>
            Initialize access for a new library
            </summary>
            <param name="defaultPolicy"></param>
            <param name="acl"></param>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.AddItem(System.Int32)">
            <summary>
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.RemoveItem(System.Int32)">
            <summary>
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.CopyItem(System.Int32,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Copy item
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.Create(System.Data.IDbTransaction)">
            <summary>
            Create a library
            </summary>
            <param name="t"></param>
        </member>
        <member name="P:Checkbox.Forms.LibraryTemplate.NameTextID">
            <summary>
            Get the text ID for the library name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.LibraryTemplate.DescriptionTextID">
            <summary>
            Get the text id for the library description
            </summary>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.CreatePolicy(System.String[])">
            <summary>
            Create a policy for this library with the specified permissions
            </summary>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.GetEditor">
            <summary>
            Get a security editor for this library
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load base template data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.LoadTemplateData(System.Data.DataRow,System.Boolean)">
            <summary>
            Load template data from the specified data row.
            </summary>
            <param name="libraryTemplateDR"></param>
            <param name="isImport"></param>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.Copy(Checkbox.Forms.LibraryTemplate)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.GetUniqueName(System.String)">
            <summary>
            Gets Unique Name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.LibraryTemplate.ExportElementName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.WriteTemplateData(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.LoadTemplateData(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.LoadTemplateCustomTextData(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplate.WriteCustomTextData(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Checkbox.Forms.LibraryTemplateManager">
            <summary>
            Manager for library CRUD operations
            </summary>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplateManager.CreateLibraryTemplate(System.String,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Create a library template with the specified name and owner, who will be granted access to the library
            </summary>
            <param name="libraryName">Name of the library.</param>
            <param name="owner">Owner of the library.</param>
            <returns>Newly created library template.</returns>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplateManager.GetLibraryTemplate(System.Int32)">
            <summary>
            Retrieve the library with the specified id
            </summary>
            <param name="libraryID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplateManager.UpdateItemLibraryOption(System.Int32,System.Boolean)">
            <summary>
            Set options for library item
            </summary>
            <param name="itemID"></param>
            <param name="shouldShow">Shoud we show item in menu</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplateManager.GetAvailableLibraryTemplates(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext)">
            <summary>
            Gets a <see cref="T:System.Data.DataSet"/> of ResponseTemplates available to the logged-in user.
            </summary>
            <param name="currentPrincipal">Logged-in user</param>
            <param name="context"></param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing one table.  </returns>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplateManager.GetLightweightLibraryTemplate(System.Int32)">
            <summary>
            Get an <see cref="T:Prezza.Framework.Security.LightweightAccessControllable"/> object which has the same ACL and DefaultPolicy as a given template.
            </summary>
            <param name="templateID">ID of the library template to clone ACL and DefaultPolicy from.</param>
            <returns>A <see cref="T:Prezza.Framework.Security.LightweightAccessControllable"/> object initialized with a
            a given Template's ACL and DefaultPolicy.</returns>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplateManager.DeleteLibraryTemplate(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.Int32)">
            <summary>
            Mark the specified library template as "deleted"
            </summary>
            <param name="libraryTemplateId">ID of the library template to delete</param>
            <param name="userPrincipal"></param>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplateManager.LibraryTemplateExists(System.String,System.Nullable{System.Int32})">
            <summary>
            Return a boolean indicating whether a library template with the specified name exists. Don't count
            template name as a duplicate if the id of the existing template matches the passed-in ID.
            </summary>
            <param name="libraryName"></param>
            <param name="idToIgnore"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplateManager.GetTemplateItemsCount(System.Int32)">
            <summary>
            Return the number of items in the library
            </summary>
            <param name="libraryId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.LibraryTemplateManager.CopyLibraryTemplate(System.Int32,Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String)">
            <summary>
            Copy the specified library template
            </summary>
            <param name="libraryID">ID of the library template to copy.</param>
            <param name="owner">Owner of the new template.</param>
            <param name="languageCode">Language code for template name.</param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Page">
            <summary>
            Provides access to an ordered view of <see cref="T:Checkbox.Forms.Items.Item"/>s within a <see cref="T:Checkbox.Forms.Response"/>
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Page.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="templatePageID"></param>
            <param name="position"></param>
        </member>
        <member name="P:Checkbox.Forms.Page.PageId">
            <summary>
            Get the page id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Page.Position">
            <summary>
            Get the page position
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Page.ItemIDs">
            <summary>
            Get the list of item ids
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Page.ContainsItem(System.Int32)">
            <summary>
            Specify whether page contains an item with the specified id.
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Page.AddItemID(System.Int32)">
            <summary>
            Add an item to the page
            </summary>
            <param name="itemID"></param>
        </member>
        <member name="P:Checkbox.Forms.Page.Items">
            <summary>
            Get the list of items
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Page.GetItems">
            <summary>
            Cheat for decreasing size of the binary serialized instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Page.EventHandlers">
            <summary>
            List of event handlers
            </summary>
            <remarks>Auto property not used because the backing field needs to be
            marked NonSerialized</remarks>
        </member>
        <member name="T:Checkbox.Forms.PageLayout.Configuration.LayoutTemplateExtendedProperty">
            <summary>
            Simple container for extended properties
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.Configuration.LayoutTemplateExtendedProperty.Name">
            <summary>
            Name of property.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.Configuration.LayoutTemplateExtendedProperty.Value">
            <summary>
            Value of property.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.Configuration.LayoutTemplateExtendedProperty.MaxValue">
            <summary>
            Max allowed value (if any) for property.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.Configuration.LayoutTemplateExtendedProperty.MinValue">
            <summary>
             Minimum allowed value (if any) for property.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.Configuration.LayoutTemplateExtendedProperty.PossibleValues">
            <summary>
             List of possible values for property.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.Configuration.LayoutTemplateExtendedProperty.Type">
            <summary>
            Type of property.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.PageLayout.Configuration.LayoutTemplateExtendedPropertyType">
            <summary>
            Property types for template extended data
            </summary>
        </member>
        <member name="F:Checkbox.Forms.PageLayout.Configuration.LayoutTemplateExtendedPropertyType.String">
            <summary>
            String data
            </summary>
        </member>
        <member name="F:Checkbox.Forms.PageLayout.Configuration.LayoutTemplateExtendedPropertyType.Integer">
            <summary>
            Whole numbers
            </summary>
        </member>
        <member name="F:Checkbox.Forms.PageLayout.Configuration.LayoutTemplateExtendedPropertyType.Numeric">
            <summary>
            Any numbers
            </summary>
        </member>
        <member name="F:Checkbox.Forms.PageLayout.Configuration.LayoutTemplateExtendedPropertyType.Color">
            <summary>
            Color values
            </summary>
        </member>
        <member name="T:Checkbox.Forms.PageLayout.Configuration.PageLayoutConfigurationFactory">
            <summary>
            Factory for creating page layout configuration objects.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutConfigurationFactory.CreatePageLayoutTemplateData(System.String)">
            <summary>
            Create an page layout data of the specified type.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutConfigurationFactory.CreateObject(System.Type)">
            <summary>
            Create an object of the specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutConfigurationFactory.GetType(System.String)">
            <summary>
            Get the <see cref="T:System.Type"/> from a type name.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutConfigurationFactory.ValidateTypeIsPageLayoutTemplateData(System.Type)">
            <summary>
            Validate that the specified <see cref="T:System.Type"/> is a valid <see cref="T:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData"/> type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData">
            <summary>
            Abstract base for page layout data
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.TypeName">
            <summary>
            Get the type name for the layout template
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.ObjectTypeName">
            <summary>
            Get type name of persisted domain object
            </summary>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.AddExtendedProperty(Checkbox.Forms.PageLayout.Configuration.LayoutTemplateExtendedProperty)">
            <summary>
            Add an extended property to the collection
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.ClearExtendedProperties">
            <summary>
            Clear the extended properties
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.ExtendedProperties">
            <summary>
            Get a list of the extended properties.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.ItemZoneMappings">
            <summary>
            Get dictionary of item to zone mappings
            </summary>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.GetExtendedPropertyNames">
            <summary>
            Get a list of extended properties supported by the template
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.GetPropertyValue(System.String)">
            <summary>
            Get the value of an extended property.  Returns null if the property could not be found
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.SetPropertyValue(System.String,System.Object)">
            <summary>
            Set the value for a property
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.GetPropertyValueList(System.String)">
            <summary>
            Get a list of possible values for a property.  An empty list signifies no constraint on the values
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.GetPropertyMaxValue(System.String)">
            <summary>
            Get the maximum value for a property
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.GetPropertyMinValue(System.String)">
            <summary>
            Get the minimum value for a property
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.GetPropertyType(System.String)">
            <summary>
            Get the type for a property
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.AllowManualLayout">
            <summary>
            Get whether the template allows manual item placement
            </summary>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.AddItemToLayout(System.Int32,System.String)">
            <summary>
            Add an item to the layout, or move the item to the specified zone if it is already in the layout.
            </summary>
            <param name="itemId"></param>
            <param name="zoneName"></param>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.RemoveItemFromLayout(System.Int32)">
            <summary>
            Remove an item from the page layout
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.CreateTemplate(System.String)">
            <summary>
            Instantiate the template represented by this configuration
            </summary>
            <param name="languageCode">Language code for ml controls in the template.</param>
            <returns>Layout template</returns>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.GetItemZoneMappings">
            <summary>
            Get the zone for a particular item.  If no zone is found in the map, null is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.Delete(System.Data.IDbTransaction)">
            <summary>
            Delete the layout template
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.Create(System.Data.IDbTransaction)">
            <summary>
            Create the item
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.Update(System.Data.IDbTransaction)">
            <summary>
            Update template, currently does nothing
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.Configuration.PageLayoutTemplateData.SaveMappings(System.Data.IDbTransaction)">
            <summary>
            Save the item/zone mappings
            </summary>
            <param name="t"></param>
        </member>
        <member name="T:Checkbox.Forms.PageLayout.ILayoutZone">
            <summary>
            Simple marker interface for layout zones
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.ILayoutZone.LayoutDesignMode">
            <summary>
            Get/set whether to operate in design mode
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.ILayoutZone.ZoneName">
            <summary>
            Get the name of the layout zone
            </summary>
        </member>
        <member name="T:Checkbox.Forms.PageLayout.IPageLayoutTemplate">
            <summary>
            Interface for page layout templates
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.IPageLayoutTemplate.DefaultZone">
            <summary>
            Get the default layout zone
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.IPageLayoutTemplate.Zones">
            <summary>
            Get all the layout zones.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.IPageLayoutTemplate.LayoutDesignMode">
            <summary>
            Get/set whether the template is operating in design mode
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.IPageLayoutTemplate.ReservedZones">
            <summary>
            Get a collection of zone names that are reserved for non-question purposes
            </summary>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.IPageLayoutTemplate.ClearZones">
            <summary>
            Clear the item zones of any children
            </summary>
        </member>
        <member name="P:Checkbox.Forms.PageLayout.IPageLayoutTemplate.TypeName">
            <summary>
            Get a type name for the layout template.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.PageLayout.PageLayoutTemplateManager">
            <summary>
            Manager for accessing and getting lists of for ml
            </summary>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.PageLayoutTemplateManager.GetTypeNames">
            <summary>
            Get a list of all layout type names
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.PageLayoutTemplateManager.CreatePageLayoutTemplateData(System.String)">
            <summary>
            Create an instance of a page layout temlpate data object of the specified type
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.PageLayoutTemplateManager.GetPageLayoutTemplateData(System.Int32)">
            <summary>
            Get the data for an existing layout template.
            </summary>
            <param name="layoutTemplateID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.PageLayoutTemplateManager.GetPageLayoutTemplateTypeName(System.Int32)">
            <summary>
            Get the type name for a layout template based on it's id
            </summary>
            <param name="layoutTemplateID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.PageLayout.PageLayoutTemplateManager.GetTypeNamesDataTable">
            <summary>
            Get a data table containing layout type information
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Piping.PipeHandlers.AnswerPipeHandler">
            <summary>
            Handler for Answer pipes-- variable info that is piped from the recorded answer to a given Item.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeHandlers.AnswerPipeHandler.GetTokenValue(Checkbox.Forms.Piping.Tokens.Token,System.Object)">
            <summary>
            Get the value of a pipe
            </summary>
            <param name="token"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Piping.PipeHandlers.PipeHandler">
            <summary>
            Base class for object to handle performing token string replacements for piping.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeHandlers.PipeHandler.GetTokenValue(Checkbox.Forms.Piping.Tokens.Token,System.Object)">
            <summary>
            Get the string replacement for a specific piping token.
            </summary>
            <param name="token">Piping token to get string value for.</param>
            <param name="context">Context for pipe, such as a survey Response, respondent security IPrincipal, ResponseTemplate, etc. </param>
            <returns>String value for token replacement.</returns>
        </member>
        <member name="T:Checkbox.Forms.Piping.PipeHandlers.ProfilePipeHandler">
            <summary>
            Pipe handler for profile properties.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeHandlers.ProfilePipeHandler.GetTokenValue(Checkbox.Forms.Piping.Tokens.Token,System.Object)">
            <summary>
            Get value of profile pipe token.
            </summary>
            <param name="token">Token to get value of.</param>
            <param name="context">User principal context.</param>
            <returns>String value of token.</returns>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeHandlers.ProfilePipeHandler.GetPipeValue(Checkbox.Security.Principal.CheckboxPrincipal,System.String)">
            <summary>
            Get the value of a profile pipe.
            </summary>
            <param name="userPrincipal">User principal to get profile pipe for.</param>
            <param name="cleanPipeName">Pipe name stripped of any delimiting characters.</param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Piping.PipeHandlers.ResponsePipeHandler">
            <summary>
            Pipe handler for retrieving values from a response.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeHandlers.ResponsePipeHandler.GetTokenValue(Checkbox.Forms.Piping.Tokens.Token,System.Object)">
            <summary>
            Get value of response token.
            </summary>
            <param name="token">Token to get value of.</param>
            <param name="context">Response context.</param>
            <returns>String value for token.</returns>
        </member>
        <member name="T:Checkbox.Forms.Piping.PipeHandlers.ResponseTemplatePipeHandler">
            <summary>
            Handler for getting pipe values for tokens representing response or response template values.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeHandlers.ResponseTemplatePipeHandler.GetTokenValue(Checkbox.Forms.Piping.Tokens.Token,System.Object)">
            <summary>
            Get the value of a token.
            </summary>
            <param name="token">Token values.</param>
            <param name="context">Context for response template.</param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Piping.Tokens.ItemToken">
            <summary>
            Item token
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.Tokens.ItemToken.#ctor(System.String,System.Int32)">
            <summary>
            Item token class
            </summary>
            <param name="itemID"></param>
            <param name="token"></param>
        </member>
        <member name="P:Checkbox.Forms.Piping.Tokens.ItemToken.ItemID">
            <summary>
            Get/set the id of the item this token represents
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Piping.Tokens.ProfileToken">
            <summary>
            Token representing a property of a respondent taking a survey.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.Tokens.ProfileToken.#ctor(System.String)">
            <summary>
            Construct the token.
            </summary>
            <param name="token">Name of token (typically a user profile property)</param>
        </member>
        <member name="T:Checkbox.Forms.Piping.Tokens.ResponseTemplateToken">
            <summary>
            Token representing a value from a ResponseTemplate associated with a survey Response.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.Tokens.ResponseTemplateToken.#ctor(System.String)">
            <summary>
            Construct the token.
            </summary>
            <param name="token">Name of token.</param>
        </member>
        <member name="T:Checkbox.Forms.Piping.Tokens.ResponseToken">
            <summary>
            Token representing a property of the current survey response.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.Tokens.ResponseToken.#ctor(System.String)">
            <summary>
            Construct the token.
            </summary>
            <param name="token">Name of token</param>
        </member>
        <member name="T:Checkbox.Forms.Piping.Tokens.Token">
            <summary>
            Token for piping
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.Tokens.Token.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Checkbox.Forms.Piping.Tokens.Token.#ctor(System.String,TokenType)">
            <summary>
            Create a token
            </summary>
            <param name="token"></param>
            <param name="type"></param>
        </member>
        <member name="P:Checkbox.Forms.Piping.Tokens.Token.TokenName">
            <summary>
            Get/set the name of the token
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Piping.Tokens.Token.CleanName">
            <summary>
            Get the name of the token without the PipePrefix
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Piping.Tokens.Token.Type">
            <summary>
            Token type
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.Tokens.Token.Equals(System.String)">
            <summary>
            Compare token with/string
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Piping.Tokens.Token.Equals(Checkbox.Forms.Piping.Tokens.Token)">
            <summary>
            Compare a token with itself
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Piping.PipeManager">
            <summary>
            PipeManager handles functionality related to variable information using Pipes, or placeholders, for runtime data.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeManager.GetProfilePipeNames(System.Collections.Generic.List{System.String})">
            <summary>
            Get a list of possible profile pipe names
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeManager.GetResponsePipeNames">
            <summary>
            Get a list of possible pipe names for response information
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeManager.GetResponseTemplatePipeNames">
            <summary>
            Get pipe names for the response template
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeManager.GetTokenValue(Checkbox.Forms.Piping.Tokens.Token,System.Object)">
            <summary>
            Get the value of a particular token
            </summary>
            <param name="token"></param>
            <param name="context">Token context</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeManager.GetToken(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Get a new token
            </summary>
            <param name="token"></param>
            <param name="customUserFieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeManager.GetTokenType(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Get the type of token
            </summary>
            <param name="token"></param>
            <param name="customUserFieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeManager.ListCompanyProperties">
            <summary>
            Returns a list of company names
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeManager.ListDateProperties">
            <summary>
            Returns a list of company names
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Piping.TokenValueUpdated">
            <summary>
            Delegate for handling changes to token values.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Checkbox.Forms.Piping.PipeMediator">
            <summary>
            Mediator for handling item piping
            </summary> 
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Piping.PipeMediator.IsInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Piping.PipeMediator.ProcessedTexts">
            <summary>
            Get/set processed texts
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Piping.PipeMediator.TokenValues">
            <summary>
            Get/set token values
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Piping.PipeMediator.StaticTexts">
            <summary>
            Get/set static texts
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Piping.PipeMediator.RegExp">
            <summary>
            Get the regular expression for parsing pipe texts
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Piping.PipeMediator.ResponsePipes">
            <summary>
            Get the list of response pipes for the survey response.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.CreateRegEx">
            <summary>
            Get reg ex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.Initialize(Checkbox.Forms.Response,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Initialize the pipe mediater with a response
            </summary>
            <param name="response"></param>
            <param name="principal"></param>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.item_AnswerChanged(System.Object,System.EventArgs)">
            <summary>
            Handle and item's answer changing
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.RegisterText(System.Int32,System.String,System.String)">
            <summary>
            Register a pipeable text
            </summary>
            <param name="itemID"></param>
            <param name="key"></param>
            <param name="text"></param>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.GetText(System.Int32,System.String,System.String)">
            <summary>
            Get the specified text, registering it with the initial value
            if it has not been registered.
            </summary>
            <param name="itemId"></param>
            <param name="key"></param>
            <param name="initialValue"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.GetText(System.Int32,System.String,System.Boolean)">
            <summary>
            Get the text with optional parameter to prevent removal of empty tokens
            </summary>
            <param name="itemID"></param>
            <param name="key"></param>
            <param name="removeEmpty"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.ProcessTokens(System.Collections.ObjectModel.ReadOnlyCollection{Checkbox.Forms.Piping.PipeMediator.TokenValue},System.Boolean)">
            <summary>
            Process token values
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.CacheText(System.String,Checkbox.Forms.Piping.PipeMediator.ProcessedText)">
            <summary>
            Cache the processed text
            </summary>
            <param name="key"></param>
            <param name="text"></param>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.CacheValue(System.String,Checkbox.Forms.Piping.PipeMediator.TokenValue)">
            <summary>
            Cache the token value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.GetValueFromCache(System.String)">
            <summary>
            Get a cached value
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.GetTextFromCache(System.String)">
            <summary>
            Get the processed text from the cache
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.TextCacheContainsKey(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.ValueCacheContainsKey(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Piping.PipeMediator.ProcessedText">
            <summary>
            Processed Text
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.ProcessedText.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Piping.PipeMediator.ProcessedText.OriginalText">
            <summary>
            Get/set the original text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Piping.PipeMediator.ProcessedText.Text">
            <summary>
            Get/set the text.  Setting the text clears the the dirty text
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Piping.PipeMediator.ProcessedText.IsDirty">
            <summary>
            Get/set whether the text is dirty
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.ProcessedText.AddTokenValue(Checkbox.Forms.Piping.PipeMediator.TokenValue)">
            <summary>
            Add a token value
            </summary>
            <param name="tokenValue"></param>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.ProcessedText.ProcessText">
            <summary>
            Process text
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.ProcessedText.tokenValue_ValueUpdated(System.Object,Checkbox.Forms.Piping.TokenValueUpdatedEventArgs)">
            <summary>
            Handle token value updated
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Checkbox.Forms.Piping.PipeMediator.ProcessedText.TokenValues">
            <summary>
            Get the token values for this text
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Piping.PipeMediator.TokenValue">
            <summary>
            Simple container for token values that supports a dirty flag
            </summary>
        </member>
        <member name="E:Checkbox.Forms.Piping.PipeMediator.TokenValue.ValueUpdated">
            <summary>
            Event fired when token value is updated.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.TokenValue.#ctor(Checkbox.Forms.Piping.Tokens.Token)">
            <summary>
            Constructor
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.TokenValue.#ctor(Checkbox.Forms.Piping.Tokens.Token,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="token"></param>
            <param name="value"></param>
        </member>
        <member name="P:Checkbox.Forms.Piping.PipeMediator.TokenValue.Token">
            <summary>
            Get the token 
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Piping.PipeMediator.TokenValue.IsDirty">
            <summary>
            Get/set whether the value is dirty and needs to be re-evaluated
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Piping.PipeMediator.TokenValue.Value">
            <summary>
            Get/set the value of the token.  When the value is set, the dirty flag is cleared
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.Dispose">
            <summary>
            Dispose of the response and any child items.  
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.PipeMediator.Dispose(System.Boolean)">
            <summary>
            Overridable dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Checkbox.Forms.Piping.TokenValueUpdatedEventArgs">
            <summary>
            Event args for token updated event
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Piping.TokenValueUpdatedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="tokenName"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:Checkbox.Forms.Piping.TokenValueUpdatedEventArgs.TokenName">
            <summary>
            Get the token name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Piping.TokenValueUpdatedEventArgs.NewValue">
            <summary>
            Get the token's new value
            </summary>
        </member>
        <member name="T:Checkbox.Forms.ReportSecurityType">
            <summary>
            Default security type for responses associated with a survey.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ReportSecurityType.Private">
            <summary>
            Deprecated -- Equivalent to SummaryPrivate
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ReportSecurityType.Public">
            <summary>
            Deprecated -- Equivalent to SummaryPublic
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ReportSecurityType.SummaryPrivate">
            <summary>
            Response details not available and only owner/system administrator can create new reports.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ReportSecurityType.DetailsPrivate">
            <summary>
            Response details are available and only owner/system administrator can create new reports
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ReportSecurityType.SummaryPublic">
            <summary>
            Response details are not available and all users can create new reports
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ReportSecurityType.DetailsPublic">
            <summary>
            Response details are available and all users create new reports
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ReportSecurityType.SummaryAcl">
            <summary>
            Response details are not available and only acl members can create new reports
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ReportSecurityType.DetailsAcl">
            <summary>
            Response details are available for download and only acl members can create new reports
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ReportSecurityType.SummaryRegisteredUsers">
            <summary>
            Response details are not available for download and only registered users can create new reports
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ReportSecurityType.DetailsRegisteredUsers">
            <summary>
            Response details are available for download and only registered users can create new reports
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Response">
            <summary>
            The live Response, holds the state.
            </summary>
        </member>
        <member name="E:Checkbox.Forms.Response.StateRestored">
            <summary>
            Event fired when the response state is restored from persistent storage
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Response.StateRestoredHandler">
            <summary>
            Delegate for response state restored events.
            </summary>
            <param name="sender">Response object firing the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="E:Checkbox.Forms.Response.ResponseCompleted">
            <summary>
            Event fired when response is copmleted.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Response.ResponseCompletedHandler">
            <summary>
            Delegate for response completed events.
            </summary>
            <param name="sender">Response that is complete.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="E:Checkbox.Forms.Response.ResponseSaved">
            <summary>
            Event fired when response is saved but not completed.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Response.ResponseSavedHandler">
            <summary>
            Delegate for response save events (without completion).
            </summary>
            <param name="sender">Response that is incomplete but saved.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Checkbox.Forms.Response.ResponsePageChangedHandler">
            <summary>
            Delegate for response page changed events.
            </summary>
            <param name="sender">Response moving to a new page.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="E:Checkbox.Forms.Response.PageChanged">
            <summary>
            Event fired when current page index of a response changes.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.InitVisiblePages(Checkbox.Forms.CachableResponse)">
            <summary>
            Inits visible pages list from cacheable object
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Checkbox.Forms.Response.GetCachable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Response.#ctor">
            <summary>
            Construct a response object and initialize internal collections.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.Initialize(System.String,System.String,System.String,System.Boolean,System.String,Checkbox.Security.Principal.CheckboxPrincipal,System.Nullable{System.Guid},System.Nullable{System.DateTime})">
            <summary>
            Initialize the response
            </summary>
            <param name="ipAddress"></param>
            <param name="networkUser"></param>
            <param name="languageCode"></param>
            <param name="isTest"></param>
            <param name="sessionGuid"></param>
            <param name="invitee"></param>
            <param name="respondent">Principal associated with the response.</param>
            <param name="startDate"></param>
        </member>
        <member name="M:Checkbox.Forms.Response.InitializeItemsDefaults">
            <summary>
            Sets default values for items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.AllowBack">
            <summary>
            Get/set whether the back button is allowed
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.AnonymizeResponses">
            <summary>
            Gets/Sets a flag indicating whether an authenticated Respondent's user information is recorded
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.ShowItemNumbers">
            <summary>
            Get/set whether to show item numbers or not
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.UseDynamicItemNumbers">
            <summary>
            Get/set whether to calculate item numbers
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.UseDynamicPageNumbers">
            <summary>
            Get/set whether to calculate page numbers
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.ID">
            <summary>
            Gets the database PK ID for this Response
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.ResponseTemplateGuid">
            <summary>
            Public accessor for response template guid
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.ResponseTemplateID">
            <summary>
            Get the response template id
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.Invitee">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.GUID">
            <summary>
            Gets a <see cref="T:System.Guid"/> identifying this Response
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.TemporaryGUID">
             <summary>
            Use that for temporary GUID, before it take its own from the database
             </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.WorkflowSessionId">
            <summary>
            Get Id of associated workflow instance.  This is used to reload workflow
            from persistent store.  Responses started before 5.0 will not have session
            id values.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.DateCreated">
            <summary>
            Gets the date on which this Response was created
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.DateCompleted">
            <summary>
            Get the date the response was completed.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.LastModified">
            <summary>
            Gets the date on which this Response was last modified
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.Status">
            <summary>
            Get the current status of the response.
            </summary>
            <remarks>Always returns ResponseStatus.INPROGRESS</remarks>
        </member>
        <member name="P:Checkbox.Forms.Response.PipeMediator">
            <summary>
            Get a reference to the pipe mediator object used by this response.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.IPAddress">
            <summary>
            Get the IP addresss of the current respondent.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.NetworkUser">
            <summary>
            Get the network/AD name for the current respondent.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.UniqueIdentifier">
            <summary>
            Get the Checkbox unique identifier of the current respondent.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.LastPageViewed">
            <summary>
            Get the ID of the last page viewed of the survey.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.LanguageCode">
            <summary>
            Get/set the current language code for the response.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.State">
            <summary>
            Gets the <see cref="T:Checkbox.Forms.ResponseState"/> for the current Response
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.Completed">
            <summary>
            Get a boolean indicating if the current response is "Complete" or not.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.IsTest">
            <summary>
            Get a boolean indicating if the current response is "Test" or not.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.ScoringEnabled">
            <summary>
            Gets a flag indicating if scoring is enabled for this response
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.StateIsValid">
            <summary>
            Get a boolean value indicating that the response has a valid, initialized state
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.TotalScore">
            <summary>
            The total score for the survey, null if the survey is not scored.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.AddIgnoreCondtionTypes(System.Collections.Generic.List{System.String})">
            <summary>
            Adds the ignore condtion types.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Checkbox.Forms.Response.СlearIgnoreConditionTypes">
            <summary>
            Adds the ignore condtion types.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.DeleteAnswerDataForItem(System.Int32)">
            <summary>
             Removes answer data from specified item
             </summary>
            <param name="itemID"></param>
        </member>
        <member name="M:Checkbox.Forms.Response.Restore(System.Guid)">
            <summary>
            Overloaded.  Restores the <see cref="T:Checkbox.Forms.ResponseState"/> of an existing Response
            </summary>
            <param name="responseGuid">the globally unique identifier for the Response</param>
        </member>
        <member name="M:Checkbox.Forms.Response.Restore(Checkbox.Forms.ResponseState,System.Boolean)">
            <summary>
            Overloaded.  Restores the <see cref="T:Checkbox.Forms.ResponseState"/> of an existing Response
            </summary>
            <param name="state">the <see cref="T:Checkbox.Forms.ResponseState"/> of the Response</param>
            <param name="isStarted"></param>
        </member>
        <member name="M:Checkbox.Forms.Response.RestoreForScoreCalculation(Checkbox.Forms.ResponseState)">
            <summary>
            Overloaded.  Restores the <see cref="T:Checkbox.Forms.ResponseState"/> of an existing Response
            </summary>
            <param name="state">the <see cref="T:Checkbox.Forms.ResponseState"/> of the Response</param>
        </member>
        <member name="M:Checkbox.Forms.Response.Restore(System.Nullable{System.Guid},Checkbox.Forms.ResponseState,System.Boolean,System.Boolean)">
            <summary>
            Overloaded.  Restores the <see cref="T:Checkbox.Forms.ResponseState"/> of an existing Response
            </summary>
            <param name="responseGuid"></param>
            <param name="state">the <see cref="T:Checkbox.Forms.ResponseState"/> of the Response</param>
            <param name="isStarted"></param>
            <param name="loadAsync"></param>
        </member>
        <member name="M:Checkbox.Forms.Response.ReloadCurrentPage(Checkbox.Forms.ResponseTemplate)">
            <summary>
            
            </summary>
            <param name="rt"></param>
        </member>
        <member name="M:Checkbox.Forms.Response.LoadPageAsync(System.Int32,Checkbox.Forms.ResponseTemplate)">
            <summary>
            
            </summary>
            <param name="pageId"></param>
            <param name="rt"></param>
        </member>
        <member name="M:Checkbox.Forms.Response.SetEmptyAnswersForSelectItemsWithNoOptionSelected(Checkbox.Forms.ResponseState)">
            <summary>
            For restored select items with no options selected it's neccessary to set 'empty' answers for response state,
            as it causes to reset unchecked options to their defaults
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.Respondent">
            <summary>
            Get the respondent for the survey
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.RestoreVisitedPages">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.FindPage(System.Int32)">
            <summary>
            Find a page with the specified page id.  Returns null if the page is not found.
            </summary>
            <param name="pageID">ID of the page to find.</param>
            <returns>NULL if page not found, otherwise return the page.</returns>
        </member>
        <member name="P:Checkbox.Forms.Response.CurrentPage">
            <summary>
            Gets the <see cref="T:Checkbox.Forms.Page"/> to which the Response is currently pointed
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.CurrentPageIndex">
            <summary>
            Gets the index of the <see cref="T:Checkbox.Forms.Page"/> to which the Response is currently pointed
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.PageCount">
            <summary>
            Get the count of pages.  Only include content pages
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.EnabledPageCount">
            <summary>
            Get the count of un-excluded pages. Only include content pages
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.VisitedPageCount">
            <summary>
            Get a count of visited pages
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.MoveToStart">
            <summary>
            Move to the start of the survey
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.MoveToPage(System.Int32)">
            <summary>
            Move to a specific page in the response by calling MoveNext() or MovePrevious() as necessary.
            </summary>
            <param name="pageID"></param>
        </member>
        <member name="M:Checkbox.Forms.Response.GoToCompletionPage">
            <summary>
            Go directly to the completion page without calling MoveNext(), Finish()
            OnLoad() or other page-related events.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.PrimeNextPage(System.Int32)">
            <summary>
            Sets the index that will be moved to on the next call of MoveNext()
            </summary>
            <param name="pageIndex">the index of the page to move to</param>
        </member>
        <member name="M:Checkbox.Forms.Response.SaveCurrentState">
            <summary>
            Persist the current state of the response
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.SaveImportedState(System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Save imported response
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.MoveNext">
            <summary>
            Validate current page and move next
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.MoveNext(System.Boolean)">
            <summary>
            Advances the current Page to the next Page containing Enabled Items
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.MovePrevious">
            <summary>
            Retreats the current Page to the last visited Page
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.ReloadPageItems(Checkbox.Forms.ResponsePage,Checkbox.Forms.ResponseTemplate)">
            <summary>
            
            </summary>
            <param name="page"></param>
            <param name="rt"></param>
        </member>
        <member name="M:Checkbox.Forms.Response.AddItem(System.Int32,Checkbox.Forms.ResponseTemplate)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <param name="rt"></param>
        </member>
        <member name="P:Checkbox.Forms.Response.CurrentPageHasVisibleItems">
            <summary>
            Get a boolean indicating whether the current page has visible items
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.GetPageItemOrder(System.Int32)">
            <summary>
            Attempt to load the item order from the response state for a page.
            Empty list is returned if the state contains no item order information.
            </summary>
            <param name="pageID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Response.SavePageItemOrder(System.Int32,System.Int32,System.Int32)">
            <summary>
            Perisist the item order information to the response state.
            </summary>
            <param name="pageID"></param>
            <param name="itemID"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Response.GetItemOptionOrder(System.Int32)">
            <summary>
            Attempt to load the option order from the response state for an item.
            Empty list is returned if the state contains no item order information.
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Response.SaveItemOptionOrder(System.Int32,System.Int32,System.Int32)">
            <summary>
            Perisist the item order information to the response state.
            </summary>
            <param name="itemID"></param>
            <param name="optionID"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Response.GenerateItemNumbers">
            <summary>
            Generate page item numbers
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.GetItemNumber(System.Int32)">
            <summary>
            Get the item number for an item
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Response.GetCurrentPageDisplayNumber">
            <summary>
            Get the current page number, taking into account any dynamic numbering options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Response.GetPageCountDisplayNumber">
            <summary>
            Get the total page count, taking into account any dynamic numbering options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Response.GetFirstItemNumber">
            <summary>
            Calculate a number of the first item at the current page.
            </summary>
            <remarks>
            Only Visible, IAnswerable items are included in the count.
            </remarks>
        </member>
        <member name="M:Checkbox.Forms.Response.PopulateStaticItemNumberDictionary">
            <summary>
            Calculate item numbers based on position in the survey
            </summary>
            <remarks>
            Only Visible, IAnswerable items are included in the count.
            </remarks>
        </member>
        <member name="M:Checkbox.Forms.Response.PopulateDynamicItemNumberDictionary">
            <summary>
            Calculate item numbers, based on visibility, etc.
            </summary>
            <remarks>
            Only Visible, IAnswerable items are included in the count.
            </remarks>
        </member>
        <member name="M:Checkbox.Forms.Response.RunAllRules">
            <summary>
            Run all page rules by calling pages OnLoad event
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.RulesEngine">
            <summary>
            Gets an instance of the <see cref="P:Checkbox.Forms.Response.RulesEngine"/> associated with this Response
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.CanNavigateForward">
            <summary>
            Gets a boolean flag indicating whether the Pages pointer can be moved forward
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.CanNavigateBack">
            <summary>
            Gets a boolean flag indicating whether the Pages pointer can be moved back
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.CompleteOnNext">
            <summary>
            Gets a boolean flag indicating whether a call to MoveNext() will complete the Response
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.VistedPageStack">
            <summary>
            Get a collection of visited pages.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.Items">
            <summary>
            Get the items in the response.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.ContainsItem(System.Int32)">
            <summary>
            Indicate if the response contains an item with this id
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Response.AddItem(Checkbox.Forms.Items.Item)">
            <summary>
            Add item to items collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Checkbox.Forms.Response.AddPage(Checkbox.Forms.ResponsePage)">
            <summary>
            Add a page to a response
            </summary>
            <param name="responsePage"></param>
        </member>
        <member name="P:Checkbox.Forms.Response.Pages">
            <summary>
            Get the pages of the response.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.GetResponsePages">
            <summary>
            Replacement for the property ResponsePages to decrease size of the serialized object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Response.GetPage(System.Int32)">
            <summary>
            Get page with id
            </summary>
            <param name="pageId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Response.GetPageByIndex(System.Int32)">
            <summary>
            Get page by index
            </summary>
            <param name="pageId"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Response.TitleTextID">
            <summary>
            Get/set the text ID of the survey title
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.DescriptionTextID">
            <summary>
            Get/set the description of the survey
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.Title">
            <summary>
            Get the Title
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.Description">
            <summary>
            Get the description
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.TemplateName">
            <summary>
            Get/set the template name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Response.RespondentGuid">
            <summary>
            Get the guid of the respondent associated with this response
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.GetItem(System.Int32)">
            <summary>
            Get an item
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Response.ResponsePipes">
            <summary>
            Get a list of response pipes for the survey associated with the response.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.LoadCurrentPage">
            <summary>
            Load the current page
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.Dispose">
            <summary>
            Dispose of the response and any child items.  We dispose the response so that Dispose() can be called for items,
            the rules engine, and anything else that contains datatables, views, etc.   Disposing these items will call
            suppressfinalize for them and hopefully save some work for the finalizer thread.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.Dispose(System.Boolean)">
            <summary>
            Overridable dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Checkbox.Forms.Response.GetDataTransferObject">
            <summary>
            Get data transfer object for survey response
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Response.GetSchema">
            <summary>
            Return NULL per MSDN documentation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Response.ReadXml(System.Xml.XmlReader)">
            <summary>
            De-Serialize the response, not current supported.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Checkbox.Forms.Response.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serialize the response to XML
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Response.GetResponseProperties">
            <summary>
            Get response properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Response.GetItemNumbers(Checkbox.Forms.ResponsePage)">
            <summary>
            Returns items' numbers in the page starting from 0
            
            In case of static items numbering the items which were hidden due to conditions must makes holes in 
            item number line.
            </summary>
            <param name="requestedPage"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Response.UpdateCurrentPageConditions">
            <summary>
            Recalculates page items' conditions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Response.InitializeSPCItemDependenciesForPage(Checkbox.Forms.ResponsePage)">
            <summary>
            Initialize flags that determines dependencies of other items from the each one
            </summary>
        </member>
        <member name="T:Checkbox.Forms.ResponseStatus">
            <summary>
            Response status enum.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseStatus.INPROGRESS">
            <summary>
            Response is in-progress
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseStatus.COMPLETED">
            <summary>
            Response has been completed
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseStatus.EDITING">
            <summary>
            Response has been completed and is now being edited
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseStatus.DELETED">
            <summary>
            Response has been marked as deleted
            </summary>
        </member>
        <member name="T:Checkbox.Forms.ResponseStateEventArgs">
            <summary>
            Event arguments for response state events
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseStateEventArgs.#ctor(Checkbox.Forms.ResponseState)">
            <summary>
            Constructor
            </summary>
            <param name="state">Current response state.</param>
        </member>
        <member name="P:Checkbox.Forms.ResponseStateEventArgs.State">
            <summary>
            Get the response state
            </summary>
        </member>
        <member name="T:Checkbox.Forms.ResponsePageChangedEventArgs">
            <summary>
            Event arguments for response page changing.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponsePageChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="previousPage">Position of page moving from.</param>
            <param name="newPage">Position of page moving to.</param>
        </member>
        <member name="P:Checkbox.Forms.ResponsePageChangedEventArgs.PreviousPage">
            <summary>
            Get the position of the previous page.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponsePageChangedEventArgs.NewPage">
            <summary>
            Get the position of the new current page.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.TemplateException">
            <summary>
            Exception base class specific to templates.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.TemplateException.#ctor(System.Int32)">
            <summary>
            Create a new exception for a specific template.
            </summary>
            <param name="templateID">ID of template associated with exception.</param>
        </member>
        <member name="M:Checkbox.Forms.TemplateException.#ctor(System.String)">
            <summary>
            Create a new exception for a specific template.
            </summary>
            <param name="templateGuid">GUID of template associated with exception.</param>
        </member>
        <member name="P:Checkbox.Forms.TemplateException.TemplateID">
            <summary>
            ID of template associated with exception.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplateException.TemplateGuid">
            <summary>
            GUID of template associated with exception.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.TemplateDoesNotExist">
            <summary>
            Exception thrown when an attempt is made to load a template that doesn't exist.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.TemplateDoesNotExist.#ctor(System.Int32)">
            <summary>
            Construct exception.
            </summary>
            <param name="templateID">ID of template that could not be found.</param>
        </member>
        <member name="M:Checkbox.Forms.TemplateDoesNotExist.#ctor(System.String)">
            <summary>
            Construct exception.
            </summary>
            <param name="templateGuid">GUID for template that does not exist.</param>
        </member>
        <member name="T:Checkbox.Forms.TemplateLoadError">
            <summary>
            Exception thrown when an error occurred while loading a template.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.TemplateLoadError.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="templateID">ID of template that could not be loaded.</param>
        </member>
        <member name="M:Checkbox.Forms.TemplateLoadError.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="templateGuid">GUID of template that could not be loaded.</param>
        </member>
        <member name="T:Checkbox.Forms.ResponseController">
            <summary>
            Controller for handling flow of a response.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.ResponsePage">
            <summary>
            Page container for response items
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponsePage.#ctor(System.Int32,System.Int32,Checkbox.Forms.TemplatePageType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Internal constructor, for use by the Response
            </summary>
            <param name="pageID"></param>
            <param name="position"></param>
            <param name="pageType"></param>
            <param name="randomize"></param>
            <param name="layoutTemplateID"></param>
        </member>
        <member name="P:Checkbox.Forms.ResponsePage.PageType">
            <summary>
            Get/set page type
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponsePage.Randomize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponsePage.LayoutTemplateId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponsePage.Parent">
            <summary>
            Response associated with the page
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponsePage.Items">
            <summary>
            Get the list of items on the page in order of appearance.  If randomization
            is on, the list will be randomized.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponsePage.RebuildItemList">
            <summary>
            Build the list of items for the page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponsePage.RandomizeItems">
            <summary>
            Randomize the item order
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponsePage.Valid">
            <summary>
            Determine if the page is valid
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponsePage.ValidateItems">
            <summary>
            Validate that items are valid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponsePage.AddValidationErrors(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Add to the list of validation errors for the page
            </summary>
            <param name="itemId"></param>
            <param name="errors"></param>
        </member>
        <member name="P:Checkbox.Forms.ResponsePage.ValidationErrors">
            <summary>
            Get page validation errors
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponsePage.OnLoad(System.Boolean)">
            <summary>
            Handle on load to run rules and other events
            </summary>
            <param name="fireEvents">Indicate if the page should fire load events or not.</param>
        </member>
        <member name="M:Checkbox.Forms.ResponsePage.OnUnLoad">
            <summary>
            Handle unload
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponsePage.RunItemRules">
            <summary>
            Run rule for items
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponsePage.RunRules(Checkbox.Forms.Logic.RuleEventTrigger)">
            <summary>
            Run page rules
            </summary>
            <param name="trigger"></param>
            <remarks>Excluded flag is cleared (set to false) here, a side effect of which is that all
            items on the page will also have their Excluded flags set.  As a result, page rules should always
            be run before item rules.</remarks>
        </member>
        <member name="P:Checkbox.Forms.ResponsePage.Excluded">
            <summary>
            Gets a flag indicating whether this Page participates in a Response
            </summary>
            <remarks>
            This property is set to false if the Page is conditionally excluded
            </remarks>
        </member>
        <member name="P:Checkbox.Forms.ResponsePage.ExcludedNoItems">
            <summary>
            Gets a flag indicating whether this Page was excluded because of page doesn't have visible items
            </summary>
            <remarks>
            This property is set to true if the Page is excluded because of page doesn't have visible items
            </remarks>
        </member>
        <member name="P:Checkbox.Forms.ResponsePage.Rules">
            <summary>
            Gets a List containing the <see cref="T:Checkbox.Forms.Logic.Rule"/>s, if any, for this Page
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponsePage.ItemsLoaded">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponsePage.Events">
            <summary>
            Gets the <see cref="T:System.ComponentModel.EventHandlerList"/> for this Page
            </summary>
        </member>
        <member name="E:Checkbox.Forms.ResponsePage.Load">
            <summary>
            Page load event. Fire when page is loaded by a response.
            </summary>
        </member>
        <member name="E:Checkbox.Forms.ResponsePage.UnLoad">
            <summary>
            Page UnLoad event.  Fired when a page is unloaded (i.e. moving to another page) by the response.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponsePage.GetDataTransferObject">
            <summary>
            Get data transfer object for item. This object is suitable for binding to item renderers
            and/or to external data processes and removes the need for references to core Checkbox dlls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponsePage.GetSchema">
            <summary>
            Return NULL per MSDN documentation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponsePage.ReadXml(System.Xml.XmlReader)">
            <summary>
            Load the page data from XML
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponsePage.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Write the page data to XML
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Checkbox.Forms.ResponseProperties">
            <summary>
            Container for response-related properties
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseProperties.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseProperties.PageScorePropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseProperties.PagePossibleScorePropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseProperties.PropertyNames">
            <summary>
            Static accessor to get a list of possible property names
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseProperties.GetPageScoreProperties(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="maxPagePosition"></param>
            <param name="includePossibleScore"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseProperties.Initialize(Checkbox.Forms.Response)">
            <summary>
            Intialize the properties collection with the response object
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseProperties.GetCurrentScore(Checkbox.Forms.Response)">
            <summary>
            Get the current score.
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseProperties.GetTotalPossibleScore(Checkbox.Forms.Response)">
            <summary>
            Get the current score.
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseProperties.GetScoreForPageAtPosition(Checkbox.Forms.Response,System.Int32)">
            <summary>
            Get the current score.
            </summary>
            <param name="response"></param>
            <param name="pageIndex"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseProperties.GetPossibleScoreForPageAtPosition(Checkbox.Forms.Response,System.Int32)">
            <summary>
            Get the current score.
            </summary>
            <param name="response"></param>
            <param name="pageIndex"></param>
        </member>
        <member name="P:Checkbox.Forms.ResponseProperties.Item(System.String)">
            <summary>
            Indexer
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseProperties.GetObjectValue(System.String)">
            <summary>
            Get a property value as an object
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseProperties.GetStringValue(System.String)">
            <summary>
            Get the property value as an object
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseProperties.SetValue(System.String,System.Object)">
            <summary>
            Set the value of a property
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="T:Checkbox.Forms.ResponseSession">
            <summary>
            Abstract base class for UI specific implementations of response session objects.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseSession.#ctor(System.Boolean)">
            <summary>
            Construct a new response session
            </summary>
            <param name="isFormPost"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseSession.ClearPersistedValues">
            <summary>
            Clear any values persisted by the response session
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseSession.GetAnonymousRespondentGuid">
            <summary>
            Get a guid associated with the current anonymous respondent
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseSession.SetAnonymousRespondentGuid(System.Guid)">
            <summary>
            Set a guid associated with the current anonymous respondent
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseSession.Load">
            <summary>
            Load the response session
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseSession.Save">
            <summary>
            Save the response session
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseSession.GetRespondentLanguageCode(System.String,System.String)">
            <summary>
            Get the respondent language code from the specified location.
            </summary>
            <param name="source"></param>
            <param name="variableName"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.ResponseSession.AnonymousRespondentGuid">
            <summary>
            Get/set the anonymous respondent guid
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseSession.ServerUserContext">
            <summary>
            Get/set the server user context
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseSession.SurveyGuid">
            <summary>
            Get/set the survey guid
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseSession.ResponseGuid">
            <summary>
            Get/set the response guid
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseSession.RecipientGuid">
            <summary>
            Get/set invitation guid
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseSession.UserGuid">
            <summary>
            Get/set guid of registered user
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseSession.Password">
            <summary>
            Get/set password
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseSession.LanguageCode">
            <summary>
            Get/set language code
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseSession.Respondent">
            <summary>
            Get/set respondent
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseSession.RespondentEditMode">
            <summary>
            Get/set edit mode for respondent
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseSession.AdminEditMode">
            <summary>
            Get/set edit mode for admin
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseSession.CurrentPageId">
            <summary>
            Get/set page to go to
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseSession.ForceNew">
            <summary>
            Get/set force new
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseSession.IsTest">
            <summary>
            Get/set test mode
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseSession.RespondentIPAddress">
            <summary>
            Get/set respondent ip address
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseSession.IsFormPost">
            <summary>
            Get a boolean indicating if the current
            </summary>
        </member>
        <member name="T:Checkbox.Forms.ResponseState">
            <summary>
            Encapsulates the state of a Response for a specific Respondent
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._id">
            <summary>
            
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._guid">
            <summary>
            GUID associated with the response
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._responseTemplateID">
            <summary>
            ID of response template response is associated with
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._lastPageViewed">
            <summary>
            ID of last page viewed in response.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._ip">
            <summary>
            IP address of respondent
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._uniqueIdentifier">
            <summary>
            Unique identifier of respondent.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._networkUser">
            <summary>
            AD user name associated with respondent.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._languageCode">
            <summary>
            Language code of the response.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._respondentGuid">
            <summary>
            GUID associated with anonymous respondents.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._isTest">
            <summary>
            Determines if the response is a test or not.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._isAnonymized">
            <summary>
            
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._invitee">
            <summary>
            
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._sessionGuid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._startDate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._endDate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._lastEdit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._isComplete">
            <summary>
            
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseState._resumeKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.ClearPageLog">
            <summary>
            Clear the contents of the page log table.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.PushPageLog(System.Int32)">
            <summary>
            Add a page to the page log stack.
            </summary>
            <param name="pageID">ID of page to add to stack.</param>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.PopPageLog">
            <summary>
            Pop a page from the page log stack.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseState.VisitedPages">
            <summary>
            Return a list of visited pages without popping the stack.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.InsertResponseData(System.Guid,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Nullable{System.Guid},System.Boolean,System.Boolean,System.String,System.Nullable{System.Guid},System.Nullable{System.DateTime})">
            <summary>
            Insert a row into the in-memory response row table.
            </summary>
            <param name="guid">GUID associated with the response</param>
            <param name="responseTemplateID">ID of response template response is associated with.</param>
            <param name="lastPageViewed">ID of last page viewed in response.</param>
            <param name="ip">IP address of respondent.</param>
            <param name="uniqueIdentifier">Unique identifier of respondent.</param>
            <param name="networkUser">AD user name associated with respondent.</param>
            <param name="languageCode">Language code of the response.</param>
            <param name="respondentGuid">GUID associated with anonymous respondents.</param>
            <param name="isTest">Determines if the response is a test or not.</param>
            <param name="invitee"></param>
            <param name="sessionGuid"></param>
            <param name="isAnonymized"></param>
            <param name="startDate"> </param>
        </member>
        <member name="P:Checkbox.Forms.ResponseState.ResponseID">
            <summary>
            Get the ID of the response from the response data table.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseState.ResponseTemplateId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseState.DateCreated">
            <summary>
            Get the response created date from the response data table.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseState.LastModified">
            <summary>
            Get/(internal)set the last modified date for the response from the response data table.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseState.SessionId">
            <summary>
            ID of related workflow session.  This is key to reloading workflow from
            persistent store.  For responses created prior to 5.0, this value will be null.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseState.DateCompleted">
            <summary>
            Get/set the completion date for the response in the response data table.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseState.IpAddress">
            <summary>
            Get respondent IP address from the response data table.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseState.Invitee">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseState.UniqueIdentifier">
            <summary>
            Get respondent uniqueidentifier from the response data table.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseState.LanguageCode">
            <summary>
            Get/set response language code in/from the response data table.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseState.LastPageViewed">
            <summary>
            Get/set id of last page view from/in the response data table.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseState.RespondentGuid">
            <summary>
            Get GUID associated with respondent from the response data table.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseState.IsComplete">
            <summary>
            Get indicator of whether survey response is completed
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseState.IsTest">
            <summary>
            Get indicator of whether survey response is test
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseState.Guid">
            <summary>
            Get response guid
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.Load(System.Int32,Checkbox.Forms.ResponseProperties,System.Collections.Generic.List{Checkbox.Analytics.Data.ItemAnswer})">
            <summary>
            
            </summary>
            <param name="responseTemplateId"></param>
            <param name="properties"></param>
            <param name="answers"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.Load(System.Guid)">
            <summary>
            For the response with the specified GUID, load state information from the database.
            </summary>
            <param name="responseGUID">GUID of the response to load state information for.</param>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.Save">
            <summary>
            Save response information to the database.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.Database_InsertPageItemOrderCommand(Prezza.Framework.Data.Database,System.Data.IDbTransaction,Checkbox.Forms.ResponseStateEntities.ResponsePageItemOrderEntity)">
            <summary>
            Get the command to insert page item order
            </summary>
            <param name="db">Database object.</param>
            <param name="t"> </param>
            <param name="order"> </param>
            <returns>Command wrapper with insert command defined.</returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.Database_InsertItemOptionOrderCommand(Prezza.Framework.Data.Database,System.Data.IDbTransaction,Checkbox.Forms.ResponseStateEntities.ResponseItemOptionOrderEntity)">
            <summary>
            Get the command to insert item option order
            </summary>
            <param name="db">Database object.</param>
            <param name="t"> </param>
            <param name="order"> </param>
            <returns>Command wrapper with insert command defined.</returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.GetPageItemOrder(System.Int32)">
            <summary>
            Get the item order for the pages.  Returns empty list if information not present.
            </summary>
            <param name="pageID">ID of page to load item order for.</param>
            <returns>Ordered list of items on the page.</returns>
            <remarks>This method is used to maintain consistent ordering of items when item
            position randomization is enabled and a respondent is moving between pages or 
            resuming a survey.</remarks>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.SavePageItemOrder(System.Int32,System.Int32,System.Int32)">
            <summary>
            Persist the position of the item relative to other items on the specified page.
            </summary>
            <param name="pageID">ID of page containing item.</param>
            <param name="itemID">ID of item to persist order of.</param>
            <param name="position">Position of item relative to other items.</param>
            <remarks>This method is used to maintain consistent ordering of items when item
            position randomization is enabled and a respondent is moving between pages or 
            resuming a survey.</remarks>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.GetItemOptionOrder(System.Int32)">
            <summary>
            Get the option order for the item.  Returns empty list if information not present.
            </summary>
            <param name="itemID">ID of item to get option positions for.</param>
            <returns>Ordered list of options for an item.</returns>
            <remarks>This method is used to maintain consistent ordering of options when item
            option randomization is enabled and a respondent is moving between pages or 
            resuming a survey.</remarks>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.SaveItemOptionOrder(System.Int32,System.Int32,System.Int32)">
            <summary>
            Store the position of an option relative to other options for the item.
            </summary>
            <param name="itemID">ID of item option is related to..</param>
            <param name="optionID">ID of option to store relative position of.</param>
            <param name="position">Position of the option.</param>
            <remarks>This method is used to maintain consistent ordering of options when item
            option randomization is enabled and a respondent is moving between pages or 
            resuming a survey.</remarks>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.DeleteAllAnswersForItem(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.DeleteOptionAnswerForItem(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <param name="optionId"> </param>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.IsAnswered(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.GetAllAnswerIds(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.BuildDataTransferObjectAnswerList(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.GetOptionAnswersForItem(System.Int32)">
            <summary>
            Get options for a specified item.
            </summary>
            <param name="itemID">ID of item to get answer rows for.</param>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.HasEmptyAnswer(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.SetOptionAnswerForItem(System.Int32,System.Int32,System.Nullable{System.Double},System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <param name="optionId"> </param>
            <param name="points"></param>
            <param name="otherText"> </param>
            <param name="doNotSave"> Will answer be inserted into database on save </param>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.GetTextAnswerForItem(System.Int32)">
            <summary>
            Get text answer for a specified item.
            </summary>
            <param name="itemID">ID of item to get answer rows for.</param>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.SetTextAnswersForItem(System.Int32,System.String)">
            <summary>
            Get the answer rows for the item with the specified id
            </summary>
            <param name="itemID">ID of item to get answer rows for.</param>
            <param name="answer"> </param>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.AddAnswer(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Double},System.Boolean)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <param name="answerText"></param>
            <param name="optionId"></param>
            <param name="points"></param>
            <param name="doNotSave"> Will answer be inserted into database on save </param>
        </member>
        <member name="M:Checkbox.Forms.ResponseState.SetEmptyAnswerForItem(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="E:Checkbox.Forms.ResponseState.Saved">
            <summary>
            Event fired when response state is saved.  Can be used as a trigger for items that store their data outside of the
            Response State to save their data as well.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.ResponseStateManager">
            <summary>
            Get response guids
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseStateManager.GetResponseState(System.Guid)">
            <summary>
            Get the response state for the specified guid
            </summary>
            <param name="responseGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseStateManager.GetLastIncompleteResponse(Checkbox.Security.Principal.CheckboxPrincipal,System.Int32)">
            <summary>
            Get the last incomplete response for an anonymous user
            </summary>
            <param name="principal"></param>
            <param name="responseTemplateID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseStateManager.GetLastIncompleteResponseRow(Checkbox.Security.Principal.CheckboxPrincipal,System.Int32)">
            <summary>
            
            </summary>
            <param name="principal"></param>
            <param name="responseTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseStateManager.GetCompletedResponseList(Checkbox.Security.Principal.CheckboxPrincipal,System.Int32)">
            <summary>
            Get the completed response list for a user
            </summary>
            <param name="principal"></param>
            <param name="responseTemplateID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseStateManager.GetResponseTable(System.String,System.Int32)">
            <summary>
            Get a data table containing response information for a user
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="responseTemplateID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseStateManager.GetResponseTable(System.Guid,System.Int32)">
            <summary>
            Get a data table containing response information for a user
            </summary>
            <param name="anonymousUserGuid"></param>
            <param name="responseTemplateID"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.ResponseTemplateFilterCollection">
            <summary>
            Collection of report filters associated with a response template.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplateFilterCollection.ParentType">
            <summary>
            Get type of object filters are associated with.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateFilterCollection.DeleteFilter(Checkbox.Analytics.Filters.Configuration.FilterData)">
            <summary>
            Delete a filter
            </summary>
            <param name="filter"></param>
        </member>
        <member name="T:Checkbox.Forms.ResponseViewDisplayFlags">
            <summary>
            Flags indicating what should be displayed in a response view
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseViewDisplayFlags.None">
            <summary>
            Nothing is displayed.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseViewDisplayFlags.Title">
            <summary>
            Include survey title.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseViewDisplayFlags.PageNumbers">
            <summary>
            Show page numbers.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseViewDisplayFlags.ItemNumbers">
            <summary>
            Show item numbers.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseViewDisplayFlags.ProgressBar">
            <summary>
            Show progress bar.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseViewDisplayFlags.BackButton">
            <summary>
            Show back button.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseViewDisplayFlags.SaveButton">
            <summary>
            Show save and exit button.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseViewDisplayFlags.NextButton">
            <summary>
            Show next button.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseViewDisplayFlags.FinishButton">
            <summary>
            Show finish button.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseViewDisplayFlags.CreateNewButton">
            <summary>
            Show create new response (when listing already completed responses)
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseViewDisplayFlags.CheckboxFooter">
            <summary>
            Show Checkbox footer
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseViewDisplayFlags.FormResetButton">
            <summary>
            Show form reset button
            </summary>
        </member>
        <member name="F:Checkbox.Forms.ResponseViewDisplayFlags.Asterisks">
            <summary>
            Show asterisks for required Items
            </summary>
        </member>
        <member name="T:Checkbox.Forms.SecurityType">
            <summary>
            Survey security type enumeration.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.SecurityType.Public">
            <summary>
            Allows anyone who accesses the survey Url to complete the survey.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.SecurityType.PasswordProtected">
            <summary>
            Allows anyone who accesses the survey Url and has the global survey password 
            to complete the survey.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.SecurityType.AccessControlList">
            <summary>
            Allows only registered users who are specifically added to a survey's access control 
            list to access and complete the survey
            </summary>
        </member>
        <member name="F:Checkbox.Forms.SecurityType.AllRegisteredUsers">
            <summary>
            Allows all registered users on the system to access and complete the survey 
            </summary>
        </member>
        <member name="F:Checkbox.Forms.SecurityType.InvitationOnly">
            <summary>
            Only users with a valid invitation can take the survey
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Security.LibraryPolicy">
            <summary>
            Summary description for ItemLibraryPolicy.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Security.LibrarySecurityEditor">
            <summary>
            Summary description for ItemLibrarySecurityEditor.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.LibrarySecurityEditor.#ctor(Prezza.Framework.Security.IAccessControllable)">
            <summary>
            Constructor
            </summary>
            <param name="library"></param>
        </member>
        <member name="P:Checkbox.Forms.Security.LibrarySecurityEditor.RequiredEditorPermission">
            <summary>
            Get the permission required to edit item library security
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Security.Principal.AnonymousRespondent">
            <summary>
            Special principal used to represent anonymous survey respondents.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.Principal.AnonymousRespondent.#ctor(System.Guid)">
            <summary>
            Create an anonymous respondent
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Security.Principal.AnonymousRespondent.DefaultRoles">
            <summary>
            Get default roles for an anonymous respondent
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.Principal.AnonymousRespondent.LoadProfileProperties">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Security.Providers.ResponseTemplateAuthorizationProvider">
            <summary>
            Authorization provider for surveys
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Security.Providers.ResponseTemplateAuthorizationProvider._lastError">
            <summary>
            Provider configuration
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.Providers.ResponseTemplateAuthorizationProvider.GetAuthorizationErrorType">
            <summary>
            Get the type of the last error
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Security.Providers.ResponseTemplateAuthorizationProvider.LastError">
            <summary>
            Get/set the last error
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.Providers.ResponseTemplateAuthorizationProvider.Authorize(Prezza.Framework.Security.Principal.ExtendedPrincipal,Prezza.Framework.Security.IAccessControllable,System.String)">
            <summary>
            Authorize the specified principal to access a given resource against the specified context.
            </summary>
            <param name="principal">the <see cref="T:Prezza.Framework.Security.Principal.ExtendedPrincipal"/> to authorize.</param>
            <param name="resource">the <see cref="T:Prezza.Framework.Security.IAccessControllable"/> resource to authorize against</param>
            <param name="context">Context to authorize the principal against.</param>
            <returns>True if authorization is given, false otherwise.</returns>
        </member>
        <member name="M:Checkbox.Forms.Security.Providers.ResponseTemplateAuthorizationProvider.Authorize(Prezza.Framework.Security.Principal.ExtendedPrincipal,Prezza.Framework.Security.IAccessControllable,System.String,System.Nullable{System.Guid})">
            <summary>
            Authorize the specified principal to access a given resource against the specified context.
            </summary>
            <param name="principal">the <see cref="T:Prezza.Framework.Security.Principal.ExtendedPrincipal"/> to authorize.</param>
            <param name="resource">the <see cref="T:Prezza.Framework.Security.IAccessControllable"/> resource to authorize against</param>
            <param name="context">Context to authorize the principal against.</param>
            <param name="recipientGuid">Guid representing an invitation recipient</param>
            <returns>True if authorization is given, false otherwise.</returns>
        </member>
        <member name="M:Checkbox.Forms.Security.Providers.ResponseTemplateAuthorizationProvider.ValidateInvitationRecipient(System.Nullable{System.Guid},System.Guid)">
            <summary>
            Validate that an invitation is valid
            </summary>
            <param name="invitationRecipient"></param>
            <param name="rtGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Security.Providers.ResponseTemplateAuthorizationProvider.CheckPolicy(Prezza.Framework.Security.Role,System.String,System.Security.Principal.IPrincipal)">
            <summary>
            Check for access based on the policy
            </summary>
            <param name="policy"></param>
            <param name="context"></param>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Security.Providers.ResponseTemplateAuthorizationProvider.Authorize(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String)">
            <summary>
            Authorize the specified principal against the specified
            context.
            </summary>
            <param name="principal"><see cref="T:System.Security.Principal.IPrincipal" /> to authorize.</param>
            <param name="context">Context to authorize the principal against.</param>
            <returns>True if authorization is given, false otherwise.</returns>
        </member>
        <member name="P:Checkbox.Forms.Security.Providers.ResponseTemplateAuthorizationProvider.ConfigurationName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.Providers.ResponseTemplateAuthorizationProvider.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the authorization provider with the supplied configuration object.
            </summary>
            <param name="config">the configuration object</param>
        </member>
        <member name="T:Checkbox.Forms.Security.Providers.ResponseTemplateAuthorizationProviderData">
            <summary>
            Authorization provider specific to response templates.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.Providers.ResponseTemplateAuthorizationProviderData.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="providerName">Name of the authorization provider.</param>
        </member>
        <member name="M:Checkbox.Forms.Security.Providers.ResponseTemplateAuthorizationProviderData.#ctor(System.String,System.String)">
            <summary>
            Another constructor.
            </summary>
            <param name="providerName"></param>
            <param name="typeName"></param>
        </member>
        <member name="M:Checkbox.Forms.Security.Providers.ResponseTemplateAuthorizationProviderData.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load authorization data from XML.
            </summary>
            <param name="providerData">Node containing authorization provider configuration informaiton.</param>
        </member>
        <member name="T:Checkbox.Forms.Security.FormFolderPolicy">
            <summary>
            Summary description for FormFolderPolicy.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.FormFolderPolicy.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.FormFolderPolicy.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="permissions"></param>
        </member>
        <member name="T:Checkbox.Forms.Security.FormFolderSecurityEditor">
            <summary>
            Security controller for FormFolders
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.FormFolderSecurityEditor.#ctor(Checkbox.Forms.FormFolder)">
            <summary>
            Constructor
            </summary>
            <param name="folder"></param>
        </member>
        <member name="P:Checkbox.Forms.Security.FormFolderSecurityEditor.RequiredEditorPermission">
            <summary>
            Required folder permission
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Security.FormPolicy">
            <summary>
            Summary description for FormPolicy.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.FormPolicy.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.FormPolicy.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="permissions"></param>
        </member>
        <member name="T:Checkbox.Forms.Security.FormRespondentSecurityEditor">
            <summary>
            Summary description for FormRespondentSecurityEditor.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.FormRespondentSecurityEditor.#ctor(Prezza.Framework.Security.IAccessControllable)">
            <summary>
            Editor for selecting respondents
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:Checkbox.Forms.Security.FormRespondentSecurityEditor.GetAccessPermissible(System.String[])">
            <summary>
            Get a list of access permissible entities that can be added to the form acl.
            </summary>
            <param name="permissions"></param>
        </member>
        <member name="M:Checkbox.Forms.Security.FormRespondentSecurityEditor.GrantAccess(Prezza.Framework.Security.IAccessControlEntry[],System.String[])">
            <summary>
            
            </summary>
            <param name="pendingEntries"></param>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Security.FormRespondentSecurityEditor.RemoveAccess(Prezza.Framework.Security.IAccessControlEntry[])">
            <summary>
            
            </summary>
            <param name="pendingEntries"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Security.FormSecurityEditor">
            <summary>
            Summary description for FormSecurityEditor.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.FormSecurityEditor.#ctor(Prezza.Framework.Security.IAccessControllable)">
            <summary>
            Constructor.
            </summary>
            <param name="form">Form to edit.</param>
        </member>
        <member name="P:Checkbox.Forms.Security.FormSecurityEditor.RequiredEditorPermission">
            <summary>
            Require form administer permission
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.FormSecurityEditor.UpdateAccess(Prezza.Framework.Security.IAccessControlEntry[],System.String[],System.Boolean)">
            <summary>
            Grant entities specific access.  Merging with existing permissions
            </summary>
            <param name="pendingEntries"></param>
            <param name="newPermissions"></param>
            <param name="remove"></param>
        </member>
        <member name="M:Checkbox.Forms.Security.FormSecurityEditor.GetMergedAccessPermissible(System.String[])">
            <summary>
            Get a
            </summary>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Security.FormSecurityEditor.SaveAcl">
            <summary>
            Save form acl and mark template as updated
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.FormSecurityEditor.SetDefaultPolicy(Prezza.Framework.Security.Policy)">
            <summary>
            Set form default policy and mark as updated
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Checkbox.Forms.Security.FormSecurityEditor.MarkTemplateUpdated">
            <summary>
            Mark the response template as updated
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Security.FormViewerSecurityEditor">
            <summary>
            Summary description for FormViewerSecurityEditor.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Security.FormViewerSecurityEditor.#ctor(Prezza.Framework.Security.IAccessControllable)">
            <summary>
            Specify users that can create/view reports and survey data
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:Checkbox.Forms.Security.FormViewerSecurityEditor.GetAccessPermissible(System.String[])">
            <summary>
            Get a list of access permissible entities that can be added to the form acl.
            </summary>
            <returns><see cref="T:System.Data.DataTable"/> object.</returns>
        </member>
        <member name="M:Checkbox.Forms.Security.FormViewerSecurityEditor.GrantAccess(Prezza.Framework.Security.IAccessControlEntry[],System.String[])">
            <summary>
            
            </summary>
            <param name="pendingEntries"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Security.FormViewerSecurityEditor.RemoveAccess(Prezza.Framework.Security.IAccessControlEntry[])">
            <summary>
            
            </summary>
            <param name="pendingEntries"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.SurveyBehaviorSettings">
            <summary>
            Container class for survey related settings
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.SecurityType">
            <summary>
            Gets or sets the SecurityType mask for this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.ReportSecurityType">
            <summary>
            Gets or sets the Report security mask for this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.ActivationStartDate">
            <summary>
            Gets or sets a <see cref="T:System.DateTime"/> before which this <see cref="T:Checkbox.Forms.ResponseTemplate"/> will be inactive
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.ActivationEndDate">
            <summary>
            Gets or sets a <see cref="T:System.DateTime"/> after which this <see cref="T:Checkbox.Forms.ResponseTemplate"/> will deactivate
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.MaxTotalResponses">
            <summary>
            Gets or sets a limit on the total number or Responses allowed for this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            If no limit, returns null.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.MaxResponsesPerUser">
            <summary>
            Gets or sets a limit to the number of times a single Respondent can respond to this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            If no limit, returns null.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.AllowContinue">
            <summary>
            Gets or sets a flag indicating whether a Respondent to this <see cref="T:Checkbox.Forms.ResponseTemplate"/> can leave and return to a 
            partially completed Response
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.ShowSaveAndQuit">
            <summary>
            Gets or sets a flag indicating whether a respondent will be able to save and quit in the middle
            of the survey.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.AllowEdit">
            <summary>
            Gets or sets a flag indicating whether a Respondent to this <see cref="T:Checkbox.Forms.ResponseTemplate"/> can edit his or her Response
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.AllowSurveyEditWhileActive">
            <summary>
            Gets/sets a flag that indicates whether this <see cref="T:Checkbox.Forms.ResponseTemplate"/> can be edited while it's active
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.DisplayPDFDownloadButton">
            <summary>
            Gets or sets a value indicating whether [display PDF download button].
            </summary>
            <value>
            <c>true</c> if [display PDF download button]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.DisableBackButton">
            <summary>
            Gets or sets a flag indicating whether a Respondent can navigate back
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.Password">
            <summary>
            Gets or sets a global password for the Response
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.IsActive">
            <summary>
            Gets or sets a flag indicating whether this <see cref="T:Checkbox.Forms.ResponseTemplate"/> is active and may collect Responses
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.CompletionType">
            <summary>
            Gets or sets the action to take on completion of a Response
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.RandomizeItemsInPages">
            <summary>
            Gets or sets whether to randomize Items within a Page
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.EnableScoring">
            <summary>
            Gets or sets whether to enable scoring for this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.AllowFormReset">
            <summary>
            Gets or sets a flag indicating whether a Respondent to this <see cref="T:Checkbox.Forms.ResponseTemplate"/> can reset form on the page to default values
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.EnableSendResumeEmail">
            <summary>
            Get/set whether send resume email is enabled.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.ResumeEmailFromAddress">
            <summary>
            Get/set "FROM" address for resume email from address
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.AnonymizeResponses">
            <summary>
            Get/set whether responses will be anonymized, regardless of security settings.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyBehaviorSettings.GoogleAnalyticsTrackingID">
            <summary>
            Get/set google analytics tracking ID
            </summary>
        </member>
        <member name="M:Checkbox.Forms.SurveyBehaviorSettings.GetIsDateInActivationDateRange(System.DateTime)">
            <summary>
            Return a boolean indicating if the specified date is in the activation date range.
            No check of "IsActive" flag is made.
            </summary>
            <param name="refDate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.SurveyBehaviorSettings.GetIsActiveOnDate(System.DateTime,System.String@)">
            <summary>
            Return a boolean indicating if a template is active on the specified date.
            </summary>
            <param name="refDate"></param>
            <param name="inactiveReason"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.SurveyBehaviorSettings.SurveyIsActiveOnDate(System.DateTime,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String@)">
            <summary>
            Return a boolean indicating if survey is active on specified date
            </summary>
            <param name="refDate"></param>
            <param name="isActive"></param>
            <param name="activationStartDate"></param>
            <param name="activationEndDate"></param>
            <param name="inactiveReason"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.SurveyBehaviorSettings.GetDisplayFlags">
            <summary>
            Get display flags baased on survey behavior settings.  Currently only options are 
            None or SaveButton
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.SurveyLanguageSettings">
            <summary>
            Container for language/text related survey settings
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyLanguageSettings.SurveyId">
            <summary>
            Get/set id of survey
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyLanguageSettings.TextIdPrefix">
            <summary>
            Get/set text id prefix for associated template
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyLanguageSettings.SupportedLanguages">
            <summary>
            Gets or sets a string array of the languages supported by this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyLanguageSettings.DefaultLanguage">
            <summary>
            Gets or sets a string indicating the default language for this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
            <remarks>
            Expects the format ISO 639-1 language code with the corresponding ISO 3166 region code, e.g., en-US
            </remarks>
        </member>
        <member name="P:Checkbox.Forms.SurveyLanguageSettings.LanguageSource">
            <summary>
            Gets or sets the source from which to set the Respondent language
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyLanguageSettings.LanguageSourceToken">
            <summary>
            Gets or sets the variable name for the language setting within the <see cref="P:Checkbox.Forms.SurveyLanguageSettings.LanguageSource"/>
            </summary>
        </member>
        <member name="M:Checkbox.Forms.SurveyLanguageSettings.GetLocalizedName(System.String)">
            <summary>
            Get localized name of survey
            </summary>
        </member>
        <member name="M:Checkbox.Forms.SurveyLanguageSettings.SetLocalizedName(System.String,System.String)">
            <summary>
            Set localized version of survey name
            </summary>
            <param name="nameText"></param>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.SurveyLanguageSettings.GetPageNumber(System.String,System.Int32,System.Int32)">
            <summary>
            Get page number
            </summary>
            <param name="languageCode"></param>
            <param name="pageNumber"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.SurveyLanguageSettings.NameTextId">
            <summary>
            Gets the TextID for this ResponseTemplate's Name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyLanguageSettings.TitleTextId">
            <summary>
            Gets the TextID for the Title
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyLanguageSettings.DescriptionTextId">
            <summary>
            Gets the TextID for the Description
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyLanguageSettings.ContinueButtonTextId">
            <summary>
            Gets the TextID for the Continue button
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyLanguageSettings.BackButtonTextId">
            <summary>
            Gets the TextID for the Back button
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyLanguageSettings.FinishButtonTextId">
            <summary>
            Gets the TextID for the Finish button
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyLanguageSettings.SaveProgressButtonTextId">
            <summary>
            Get the text id for the save progress button
            </summary>
        </member>
        <member name="T:Checkbox.Forms.SurveyStyleSettings">
            <summary>
            Container for style related survey settings
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.BorderWidth">
            <summary>
            Get/set border width
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.BorderStyle">
            <summary>
            Get/set border style
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.BorderColor">
            <summary>
            Get/set border color
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.Height">
            <summary>
            Get/set Height
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.Width">
            <summary>
            Get/set Height
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.StyleTemplateId">
            <summary>
            Gets or sets the database ID of the Style used by this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.TabletStyleTemplateId">
            <summary>
            Gets or sets the database ID of the Style used by this <see cref="T:Checkbox.Forms.ResponseTemplate"/> in tablet browsers
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.SmartPhoneStyleTemplateId">
            <summary>
            Gets or sets the database ID of the Style used by this <see cref="T:Checkbox.Forms.ResponseTemplate"/> in smartphone browsers
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.MobileStyleId">
            <summary>
            Gets or sets the database ID of the Style used by this <see cref="T:Checkbox.Forms.ResponseTemplate"/> for mobile browsers
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.StyleTemplateIdTablet">
            <summary>
            Gets or sets the database ID of the Style used by this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.StyleTemplateIdSmartphone">
            <summary>
            Gets or sets the database ID of the Style used by this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.ChartStyleId">
            <summary>
            Get/set chart style id associated with the response template.  Currently, this value is only
            used for polls.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.ShowItemNumbers">
            <summary>
            Gets or sets a flag indicating whether to display numbers with Items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.ShowTopSurveyButtons">
            <summary>
            Gets or sets a value indicating whether [show top survey buttons].
            </summary>
            <value>
            <c>true</c> if [show top survey buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.HideTopSurveyButtonsOnFirstAndLastPage">
            <summary>
            Gets or sets a value indicating whether [show top survey buttons on first and last page].
            </summary>
            <value>
            <c>true</c> if [show top survey buttons on first and last page]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.ShowPageNumbers">
            <summary>
            Gets or sets a flag indicating whether to display Page numbers
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.EnableDynamicItemNumbers">
            <summary>
            Gets or sets a flag indicating whether to dynamically number Items accounting for conditions
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.EnableDynamicPageNumbers">
            <summary>
            Gets or sets a flag indicating whether to dynamically number Pages accounting for conditions
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.ShowProgressBar">
            <summary>
            Gets or sets a flag indicating whether to display a progress bar
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.ProgressBarOrientation">
            <summary>
            Gets or sets a progress bar orientation
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.ShowTitle">
            <summary>
            Gets or sets a flag indicating whether show the <see cref="T:Checkbox.Forms.ResponseTemplate"/> Title
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.ShowValidationMessage">
            <summary>
            Gets or sets whether to show a validation message summary of all validation errors contained on the Page
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.ShowValidationErrorAlert">
            <summary>
            Gets or sets whether to pop-up a validation alert when a Page is invalid
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.ShowAsterisks">
            <summary>
            Gets or sets a flag indicating whether to display asterisk symbols for required Items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.SurveyStyleSettings.HideFooterHeader">
            <summary>
            Get/set whether to hide footer and header on mobile devices
            </summary>
        </member>
        <member name="M:Checkbox.Forms.SurveyStyleSettings.GetDisplayFlags">
            <summary>
            Get a response view display flags enum based on the current style settings.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.TemplateUpdated">
            <summary>
            Delegate for template update events
            </summary>
            <param name="source">Template that was updated.</param>
            <param name="e">Event Args</param>
        </member>
        <member name="T:Checkbox.Forms.Template">
            <summary>
            Template is the abstract base class for all paged ItemData containers.  
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Template._itemData">
            <summary>
            The Template's collection of ItemData
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Template._templatePages">
            <summary>
            Get template pages for the template.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Template._templatePageItems">
            <summary>
            Get list of items for a template page.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Template._itemIds">
            <summary>
            List of items in the survey.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Template._childItemIds">
            <summary>
            List of child items in the survey
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Template._pageIds">
            <summary>
            List of pages in the survey.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Template.ItemDictionary">
            <summary>
            Get dictionary of items in the template
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Template.ChildItemIds">
            <summary>
            Get list of childItem ids in the template
            </summary>
            <remarks>ChildItemIds[childItemId] = parentItemId</remarks>
        </member>
        <member name="P:Checkbox.Forms.Template.ItemIds">
            <summary>
            Get list of item ids in the template
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Template.PageIds">
            <summary>
            Get list of page ids
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Template.TemplatePages">
            <summary>
            Get list of template pages
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Template.PageCount">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Template.PageDataTableName">
            <summary>
            Return pages table name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Template.PageItems">
            <summary>
            Get list of items on a page.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Template.CreatedBy">
            <summary>
            Get the creator of the response template
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Template.#ctor(System.String[],System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="supportedPermissionMasks"></param>
            <param name="supportedPermissions"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.LoadAdditionalData(Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Load template data and items data.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.LoadItemDatas">
            <summary>
            Load item data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Template.LoadTemplatePages(Checkbox.Forms.TemplateDataSet)">
            <summary>
            Load template pages from template data set.
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.LoadTemplateItems(Checkbox.Forms.TemplateDataSet)">
            <summary>
            Load template items
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.LoadTemplatePageItems(Checkbox.Forms.TemplateDataSet)">
            <summary>
            Load template page items
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.ItemSaved(Checkbox.Forms.Items.Configuration.ItemData,System.Data.IDbTransaction)">
            <summary>
            Notify the template that an item data it contains has been saved.
            </summary>
            <param name="itemData">Data that was saved.</param>
            <param name="transaction">Transaction for save operation.</param>
        </member>
        <member name="M:Checkbox.Forms.Template.OnItemSaved(Checkbox.Forms.Items.Configuration.ItemData,System.Data.IDbTransaction)">
            <summary>
            Overridable handler for an item being saved
            </summary>
            <param name="itemData"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.Create(System.Data.IDbTransaction)">
            <summary>
            Create template data in database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.Update(System.Data.IDbTransaction)">
            <summary>
            Update template data in database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.Delete(System.Data.IDbTransaction)">
            <summary>
            Delete the template data in the database
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Template.ListTemplatePageIds">
            <summary>
            List ids of pages for the survey.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.ListTemplateItemIds">
            <summary>
            List ids of items for the survey.
            </summary>
            <returns></returns>
            <remarks>Children of composite items are not listed here.</remarks>
        </member>
        <member name="M:Checkbox.Forms.Template.GetItem(System.Int32)">
            <summary>
            Get an item from the internal items collection.  If an item with the specified ID
            is not found, null will be returned.  The search will include children of any composite
            items contained by the template.
            </summary>
            <param name="itemDataID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.GetItem(System.Int32,System.Boolean)">
            <summary>
            Get an item from the internal items collection.  If an item with the specified ID
            is not found, null will be returned.  The search will include children of any composite
            items contained by the template.
            </summary>
            <param name="itemDataID"></param>
            <param name="forceReload"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.UpdateChildItemIds(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Update ChildItemIds if itemData is composite itemData
            </summary>
            <param name="itemData"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.RemoveChildItemIds(System.Int32)">
            <summary>
            Remove child item ids of specified parent item.
            </summary>
            <param name="parentItemId"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.GetParentItemDataId(System.Int32)">
            <summary>
            Get id of the parent item for the specified item. If the item hasn't any parent, null is returned.
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.OnItemRemoved(System.Int32)">
            <summary>
            Called when an ItemData is removed from the Template's ItemDataDictionary
            </summary>
            <param name="itemId">the id of the removed ItemData</param>
        </member>
        <member name="M:Checkbox.Forms.Template.OnPageRemoved(System.Int32)">
            <summary>
            Called when a TemplatePage is removed
            </summary>
            <param name="pageId">the id of the removed TemplatePage</param>
        </member>
        <member name="M:Checkbox.Forms.Template.SetItem(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Set an item in the internal items collection. This does not add an item to a page or to the template
            items collection. This method should generally not be used except in cases where using the add item to page
            methods are not appropriate.  The item will not be added if it has a NULL id or if an item with the specified ID
            already exists.
            </summary>
            <param name="itemData"></param>
            <returns></returns>
            <remarks>This method is used when building an on-the-fly template that is not intended to be
            persisted to the database.</remarks>
        </member>
        <member name="M:Checkbox.Forms.Template.SetItem(Checkbox.Forms.Items.Configuration.ItemData,System.Boolean)">
            <summary>
            Set an item in the internal items collection. This does not add an item to a page or to the template
            items collection. This method should generally not be used except in cases where using the add item to page
            methods are not appropriate, such as when an item is updated during editing.
            If an item with the specified ID already exists, it will be replaced when the 
            flag is set to TRUE
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Template.CreatePage(System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Checkbox.Forms.TemplatePage"/> at the specified position
            </summary>
            <param name="position">the position to add the page</param>
            <param name="ensureIntrinsicPages"></param>
            <returns>a new TemplatePage</returns>
        </member>
        <member name="M:Checkbox.Forms.Template.CreatePage(System.Int32,Checkbox.Forms.TemplatePageType)">
            <summary>
            Create a page of a specific type.
            
            </summary>
            <param name="position"></param>
            <param name="pageType"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.EnsureContiguousPagePositions">
            <summary>
            Ensure page positions are contiguous
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Template.EnsureContiguousItemPositions(System.Int32)">
            <summary>
            Ensure items on a page are contiguously positioned.
            </summary>
            <param name="pageId"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.DeletePageItems(System.Int32)">
            <summary>
            Remove all items from a template page
            </summary>
            <param name="pageId"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.AddPageToTemplate(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Add page to template.  If position not specified, it will be added as last survey page.
            </summary>
            <param name="position"></param>
            <param name="ensureIntrinsicPages"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.DeletePage(System.Int32)">
            <summary>
            Removes a <see cref="T:Checkbox.Forms.TemplatePage"/> from the TemplatePages collection
            </summary>
            <param name="pageId">Page to delete</param>
        </member>
        <member name="M:Checkbox.Forms.Template.GetPage(System.Int32)">
            <summary>
            Gets a <see cref="T:Checkbox.Forms.TemplatePage"/> within this Template with a given ID
            </summary>
            <param name="id">the ID of the TemplatePage</param>
            <returns>the TemplatePage, if found; otherwise null</returns>
        </member>
        <member name="M:Checkbox.Forms.Template.GetPageAtPosition(System.Int32)">
            <summary>
            Get the page at a certain position in the template.
            </summary>
            <param name="pagePosition"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.GetPageIdAtPosition(System.Int32)">
            <summary>
            Get the page at a certain position in the template.
            </summary>
            <param name="pagePosition"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.LoadPages">
            <summary>
             Load template page data from the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.LoadPage(System.Int32)">
            <summary>
            Load template page data from the database
            </summary>
            <param name="pageId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.GetItemPositionWithinPage(System.Int32)">
            <summary>
            Gets the 1-based position index of an item within a TemplatePage
            <remarks>This operation does not support searches for child ItemDatas</remarks>
            </summary>
            <param name="itemId">the item id</param>
            <returns>the position, if found</returns>
        </member>
        <member name="M:Checkbox.Forms.Template.GetPagePositionForItem(System.Int32)">
            <summary>
            Gets the index of the TemplatePage containing a given ItemData
            <remarks>
            This operation performs a recursive search of <see cref="T:Checkbox.Forms.Items.Configuration.ICompositeItemData"/> Items
            </remarks>
            </summary>
            <param name="itemId">the ItemData</param>
            <returns>the 1-based index of the TemplatePage, if found</returns>
        </member>
        <member name="M:Checkbox.Forms.Template.GetPageIdForItem(System.Int32)">
            <summary>
            Gets the id of the TemplatePage containing a given ItemData
            </summary>
            <param name="itemId">the ItemData</param>
            <returns>the 1-based index of the TemplatePage, if found</returns>
        </member>
        <member name="M:Checkbox.Forms.Template.DeletePageAt(System.Int32)">
            <summary>
            Deletes a <see cref="T:Checkbox.Forms.TemplatePage"/> at the specified position
            </summary>
            <param name="position">the position of the TemplatePage to delete</param>
        </member>
        <member name="M:Checkbox.Forms.Template.SetPageLayoutTemplate(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Set the id of the layout template for a given page
            </summary>
            <param name="pageID"></param>
            <param name="layoutTemplateID"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.CopyPage(System.Int32,System.Int32,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Copyes a <see cref="T:Checkbox.Forms.TemplatePage"/> within this <see cref="T:Checkbox.Forms.ResponseTemplate"/> adding functionality to account for Rule logic associated with the 
            <see cref="T:Checkbox.Forms.TemplatePage"/> to be removed for new page
            </summary>
            <param name="pageId">the <see cref="T:Checkbox.Forms.TemplatePage"/> to copy</param>
            <param name="position">the 'to' position</param>
        </member>
        <member name="M:Checkbox.Forms.Template.MovePage(System.Int32,System.Int32)">
            <summary>
            Moves a TemplatePage within this ResponseTemplate
            </summary>
            <param name="pageId">the  id of the <see cref="T:Checkbox.Forms.TemplatePage"/></param>
            <param name="position">the 'to' position</param>
        </member>
        <member name="M:Checkbox.Forms.Template.MoveItemToPage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves an <see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/> from one TemplatePage to another
            </summary>
            <param name="itemId">the <see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/> to move</param>
            <param name="fromPageId">The <see cref="T:Checkbox.Forms.TemplatePage"/> to move the item from.</param>
            <param name="toPageId">the <see cref="T:Checkbox.Forms.TemplatePage"/> to move it to</param>
            <param name="position">the position of the item on the page</param>
        </member>
        <member name="M:Checkbox.Forms.Template.AddItemToTemplate(System.Int32)">
            <summary>
            Add an item to the template.  Only used for items that should be associated with the template
            but are not part of any pages
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.RemoveItemFromTemplate(System.Int32)">
            <summary>
            Removes the ItemData from the Template's ItemData table and ItemDataDictionary
            </summary>
            <param name="itemId">the ItemData to remove</param>
        </member>
        <member name="M:Checkbox.Forms.Template.AddItemToPage(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Adds an ItemData to the final position within a TemplatePage
            </summary>
            <param name="pageId">the id <see cref="T:Checkbox.Forms.TemplatePage"/></param>
            <param name="itemId">Item to add to page.</param>
            <param name="position">Position of item.  Insert item at end if position is null.</param>
        </member>
        <member name="M:Checkbox.Forms.Template.DeleteItemFromPage(System.Int32,System.Int32)">
            <summary>
            Removes an ItemData from a given TemplatePage and deletes the ItemData from the Template
            </summary>
            <param name="pageId">the containing TemplatePage</param>
            <param name="itemId">the ItemData</param>
        </member>
        <member name="M:Checkbox.Forms.Template.RemoveItemFromFieldMapping(System.Int32)">
            <summary>
            Removes the item from field mapping.
            </summary>
            <param name="itemId">The item identifier.</param>
        </member>
        <member name="M:Checkbox.Forms.Template.RemoveItemFromPage(System.Int32,System.Int32)">
            <summary>
            Removes an ItemData from a TemplatePage and reorders the ItemData positions 
            within the TemplatePage
            </summary>
            <param name="pageId">the TemplatePage</param>
            <param name="itemId">the ItemData</param>
        </member>
        <member name="M:Checkbox.Forms.Template.CopyItemFromPage(System.Int32,System.Int32,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Copies an ItemData from a TemplatePage
            </summary>
            <param name="pageId">the TemplatePage id</param>
            <param name="itemId">the ItemData id</param>
        </member>
        <member name="M:Checkbox.Forms.Template.MoveItem(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves an ItemData within a TemplatePage
            </summary>
            <param name="pageId">the TemplatePage holding the ItemData</param>
            <param name="itemId">the ItemData to move</param>
            <param name="position">the position to move to</param>
        </member>
        <member name="P:Checkbox.Forms.Template.ItemAppearanceTableName">
            <summary>
            Get the name of the item appearances table
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Template.DomainDBTableName">
            <summary>
            Get name of template table
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Template.DataTableName">
            <summary>
            Return template data table name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Template.PageItemsTableName">
            <summary>
            Get the name of the table containing page items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Template.TemplateItemsTableName">
            <summary>
            Get the name of the template items table
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Template.DomainDBIdentityColumnName">
            <summary>
            Template id column
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Template.ItemAppearanceMapTableName">
            <summary>
            Get the name of the table containing item appearances
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Template.TextIDPrefix">
            <summary>
            Get the text PageId prefix for template text
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Template.GetInsertPageCommand">
            <summary>
            Get command to insert a page association with the template
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.GetUpdatePageCommand">
            <summary>
            Get command to update page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.GetDeletePageCommand">
            <summary>
            Get command to delete page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.GetAddItemToPageCommand">
            <summary>
            Get a command to add an item to a page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.GetDeleteItemFromPageCommand">
            <summary>
            Get a command to delete an item/page association
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.GetSetPageItemPositionCommand">
            <summary>
            Get a command to set an item's page position
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.GetAddTemplateItemCommand">
            <summary>
            Get a command to add an item to a template
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.GetDeleteItemFromTemplateCommand">
            <summary>
            Get a command to remove an item from a template
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.WriteConfigurationToXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.WriteCustomTextData(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.WriteTemplateData(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.WriteTemplatePageData(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.GetPageExportWriter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.Import(Checkbox.Security.Principal.CheckboxPrincipal,System.Xml.XmlNode,System.String,System.String,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Boolean)">
            <summary>
            Import template and track progress
            </summary>
            <param name="xmlNode"></param>
            <param name="progressKey"></param>
            <param name="progressLanguage"></param>
            <param name="callback"></param>
            <param name="forCopy">Determine if this xml import is used to create a copy, or to create a new template from xml file</param>
        </member>
        <member name="M:Checkbox.Forms.Template.Import(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.LoadTemplateData(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.LoadTemplateCustomTextData(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.Template.GetSurveySpecificTextId(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="textKey"></param>
            <param name="surveyId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Template.LoadTemplatePageData(Checkbox.Security.Principal.CheckboxPrincipal,System.Xml.XmlNode,System.String,System.String,Checkbox.Forms.PageImportReader,System.Boolean)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
            <param name="progressKey">Key used for progress tracking wiht ProgressProvider</param>
            <param name="progressLanguage">Language code for progress messages.</param>
            <param name="pageImportReader">Page reader to used for additional page import processing, such as loading rule data, etc.</param>
            <param name="forCopy">Determine if this xml import is used to create a copy, or to create a new template from xml file</param>
        </member>
        <member name="T:Checkbox.Forms.TemplateDataSet">
            <summary>
            Data container for raw data associated with a template.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.TemplateDataSet.PageDataTableName">
            <summary>
            Return pages table name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplateDataSet.DataTableName">
            <summary>
            Return template data table name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplateDataSet.IdentityColumnName">
            <summary>
            Get identity column name for template data
            </summary>
        </member>
        <member name="F:Checkbox.Forms.TemplateDataSet.PageItemsTableName">
            <summary>
            Get the name of the table containing page items
            </summary>
        </member>
        <member name="F:Checkbox.Forms.TemplateDataSet.TemplateItemsTableName">
            <summary>
            Get the name of the template items table
            </summary>
        </member>
        <member name="F:Checkbox.Forms.TemplateDataSet.ItemAppearanceTableName">
            <summary>
            Get the name of the item appearances table
            </summary>
        </member>
        <member name="F:Checkbox.Forms.TemplateDataSet.ItemAppearanceMapTableName">
            <summary>
            Get the name of the table containing item appearances
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplateDataSet.ItemAppearanceMapTable">
            <summary>
            Get the table containing item/appearance mappings
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplateDataSet.ItemAppearanceTable">
            <summary>
            Item appearance table
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplateDataSet.PageDataTable">
            <summary>
            Get the table containing page data
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplateDataSet.PageItemsTable">
            <summary>
            Get the page items table
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplateDataSet.TemplateItemsTable">
            <summary>
            Get the template items table
            </summary>
        </member>
        <member name="M:Checkbox.Forms.TemplateDataSet.#ctor(System.String)">
            <summary>
            </summary>
            <param name="owningObjectTypeName"></param>
        </member>
        <member name="M:Checkbox.Forms.TemplateDataSet.InitializeDataTables">
            <summary>
            Initialize the template data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.TemplateDataSet.InitializeTemplateData">
            <summary>
            Initialize the template data table
            </summary>
        </member>
        <member name="M:Checkbox.Forms.TemplateDataSet.InitializePageData">
            <summary>
            Initialize page data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.TemplateDataSet.InitializeItemData">
            <summary>
            Initialize item data tables
            </summary>
        </member>
        <member name="M:Checkbox.Forms.TemplateDataSet.CreatePrimaryKeys(System.Data.DataSet)">
            <summary>
            Create primary keys for the data set
            </summary>
            <param name="templateData"></param>
        </member>
        <member name="P:Checkbox.Forms.TemplateDataSet.ObjectDataTableNames">
            <summary>
            Get names of data tables
            </summary>
        </member>
        <member name="T:Checkbox.Forms.TemplatePage">
            <summary>
            Encapsulates access and operations on <see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/> within the context of a 
            <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplatePage.ObjectTypeName">
            <summary>
            Get object type name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplatePage.LoadSprocName">
            <summary>
            Get name of load procedure
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplatePage.ParentTemplateId">
            <summary>
            Get/set parent template id
            </summary>
        </member>
        <member name="M:Checkbox.Forms.TemplatePage.CreateConfigurationDataSet">
            <summary>
            Get data container for the page
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.TemplatePage.PageType">
            <summary>
            Get/set type information for page.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplatePage.Position">
            <summary>
            Get the page position
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplatePage.Title">
            <summary>
            Get/set page title
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplatePage.LayoutTemplateId">
            <summary>
            Get/set the PageId of the layout template associated with this page
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplatePage.ShouldForceBreak">
            <summary>
            Forces break after this page in PDF
            </summary>
        </member>
        <member name="M:Checkbox.Forms.TemplatePage.#ctor">
            <summary>
            Create an empty template page
            </summary>
        </member>
        <member name="M:Checkbox.Forms.TemplatePage.#ctor(System.Int32,System.Int32,Checkbox.Forms.TemplatePageType,System.String)">
            <summary>
            Create a new template page for the specified position
            </summary>
            <param name="parentTemplateId"></param>
            <param name="position"></param>
            <param name="pageType"></param>
            <param name="title"></param>
        </member>
        <member name="M:Checkbox.Forms.TemplatePage.Initialize(System.Int32,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            
            </summary>
            <param name="parentTemplateId"></param>
            <param name="itemIds"></param>
            <param name="branchRuleIds"></param>
            <param name="conditionRuleId"></param>
        </member>
        <member name="M:Checkbox.Forms.TemplatePage.GetDataTransferObject">
            <summary>
            Get data transfer object for item. This object is suitable for binding to item renderers
            and/or to external data processes and removes the need for references to core Checkbox dlls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.TemplatePage.ListItemIds">
            <summary>
            Gets a List of ItemDatas associated with this TemplatePage
            </summary>
        </member>
        <member name="M:Checkbox.Forms.TemplatePage.ListBranchRuleIds">
            <summary>
            Get a List of branch rule ids.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.TemplatePage.BranchRuleIds">
            <summary>
            Get the branching rules associated with this page.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplatePage.ItemIds">
            <summary>
            Get list of item ids
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplatePage.ConditionRuleId">
            <summary>
            Get the rule (condition) associated with this page.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.TemplatePage.IsAnyAnswerableItemOnPage(Checkbox.Forms.ResponseTemplate,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rt"></param>
            <param name="includeOpenEnded"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.TemplatePage.IsItemAnswerable(Checkbox.Forms.Items.Configuration.ItemData,System.Boolean)">
            <summary>
            
            </summary>
            <param name="itemData"></param>
            <param name="includeOpenEnded"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.TemplatePage.Create(System.Data.IDbTransaction)">
            <summary>
            Insert page data into the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.TemplatePage.Update(System.Data.IDbTransaction)">
            <summary>
            Update page data in the database
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.TemplatePage.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load page data from the specified data row
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.TemplatePage.Equals(Checkbox.Forms.TemplatePage)">
            <summary>
            Return a boolean indicating if this page is the same as another page.  The comparison
            is based on page ids.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.TemplatePage.ExportElementName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.TemplatePage.WriteExportAttributes(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.TemplatePage.WriteConfigurationToXml(System.Xml.XmlWriter,Checkbox.Common.PersistedDomainObject.WriteExternalDataCallback)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.TemplatePage.Import(System.Xml.XmlNode,Checkbox.Common.PersistedDomainObject.ReadExternalDataCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
            <param name="callback"></param>
        </member>
        <member name="T:Checkbox.Forms.TemplatePageComparer">
            <summary>
            Compare template pages based on position.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.TemplatePageComparer.Compare(Checkbox.Forms.TemplatePage,Checkbox.Forms.TemplatePage)">
            <summary>
            Compare template pages based on position.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.ResponseTemplate">
            <summary>
            This is the "Survey" configuration component.  It provides configuration operations and acts as a factory of <see cref="T:Checkbox.Forms.Response"/> objects
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.ObjectTypeName">
            <summary>
            Get type name for this pdo
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.IdentityColumnName">
            <summary>
            Get the name of the library template id column
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.LoadSprocName">
            <summary>
            Get RT sproc name
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.#ctor">
            <summary>
            Construct a response template
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.#ctor(System.String)">
            <summary>
            Constructor for response template
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.CreateConfigurationDataSet">
            <summary>
            Create a configuration data set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.InitializeAccess(Prezza.Framework.Security.Policy,Prezza.Framework.Security.AccessControlList)">
            <summary>
            Initialize the access for the object
            </summary>
            <param name="defaultPolicy"></param>
            <param name="acl"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.CreatePolicy(System.String[])">
            <summary>
            Create a policy with the specified permissions
            </summary>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.LoadConfigurationDataSet(Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Gets the Data object by which a ResponseTemplate's state is loaded
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.CreateRuleDataService(System.Boolean)">
            <summary>
            Factory method returns a new <see cref="T:Checkbox.Forms.Logic.Configuration.RuleDataService"/> wrapper with which to effect 
            Rule related configuration changes and operations on this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.LoadAdditionalData(Checkbox.Common.PersistedDomainObjectDataSet)">
            <summary>
            Load the template data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load base template data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.LoadTemplateData(System.Data.DataRow)">
            <summary>
            Load template data from the specified data row.
            </summary>
            <param name="responseTemplateDr"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.LoadResponseTerms(System.Data.DataSet)">
            <summary>
            Load response terms from the supplied data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.Copy(Checkbox.Forms.ResponseTemplate)">
            <summary>
            Copy a response template and return the copied template
            </summary>
            <param name="source">template to copy</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.LoadTemplateData(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.LoadTemplateCustomTextData(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.LoadTemplatePageData(Checkbox.Security.Principal.CheckboxPrincipal,System.Xml.XmlNode,System.String,System.String,Checkbox.Forms.PageImportReader,System.Boolean)">
            <summary>
            
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.WriteTemplateData(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.WriteCustomTextData(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.GetPageExportWriter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.OnItemSaved(Checkbox.Forms.Items.Configuration.ItemData,System.Data.IDbTransaction)">
            <summary>
            Override an item being saved to update any rules that may have become invalidated.
            </summary>
            <param name="item"></param>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.ValidateItemRules">
            <summary>
            Validate item source rules for items in the survey
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.ValidateItemRules(System.Data.IDbTransaction)">
            <summary>
            Validate item source rules for items in the survey
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.GetChildItems(Checkbox.Forms.Items.Configuration.ItemData)">
            <summary>
            Add child items to the list
            </summary>
            <param name="parentItemData"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.OnItemRemoved(System.Int32)">
            <summary>
            Clean up conditions based on a removed item.
            </summary>
            <param name="itemId">the id of the removed <see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.OnPageRemoved(System.Int32)">
            <summary>
            Clean up conditions on a removed page.
            </summary>
            <param name="pageId">Id of the removed page</param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.DeleteItemFromPage(System.Int32,System.Int32)">
            <summary>
            Delete the item from the page and also clear up any response pipes with the item as a source
            </summary>
            <param name="pageId"></param>
            <param name="itemId"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.DeletePage(System.Int32)">
            <summary>
            Overridden. Deletes a <see cref="T:Checkbox.Forms.TemplatePage"/> adding functionality to account for Rule logic associated with the 
            <see cref="T:Checkbox.Forms.TemplatePage"/> to be deleted
            </summary>
            <param name="pageId">ID of a <see cref="T:Checkbox.Forms.TemplatePage"/></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.MovePage(System.Int32,System.Int32)">
            <summary>
            Overridden.  Moves a <see cref="T:Checkbox.Forms.TemplatePage"/> within this <see cref="T:Checkbox.Forms.ResponseTemplate"/> adding functionality to account for Rule logic associated with the 
            <see cref="T:Checkbox.Forms.TemplatePage"/> to be moved
            </summary>
            <param name="pageId">the <see cref="T:Checkbox.Forms.TemplatePage"/></param>
            <param name="position">the 'to' position</param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.MoveItemToPage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Overridden.  Moves an <see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/> from one <see cref="T:Checkbox.Forms.TemplatePage"/> to another adding functionality 
            to account for Rule logic associated with the <see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/> to be moved
            </summary>
            <param name="itemId">the <see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/> to move</param>
            <param name="fromPageId">the <see cref="T:Checkbox.Forms.TemplatePage"/> to move it from</param>
            <param name="toPageId">the <see cref="T:Checkbox.Forms.TemplatePage"/> to move it to</param>
            <param name="position"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.WillRulesBeChangedIfItemMovesToPage(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determine if rules will be changed if the item moves to the page
            </summary>
            <param name="itemId"></param>
            <param name="fromPageId"></param>
            <param name="toPageId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.WillRulesBeChangedIfPageDeletes(System.Int32)">
            <summary>
            Determine if rules will be changed if the page deletes
            </summary>
            <param name="pageId"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.WillRulesBeChangedIfPageMoves(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pageId"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.SetDefaultValues">
            <summary>
            Set default values for the template data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.CreateRuleDataService(System.Int32)">
            <summary>
            Factory method returns a new <see cref="T:Checkbox.Forms.Logic.Configuration.RuleDataService"/> wrapper with which to effect 
            Rule related configuration changes and operations on this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.Create(System.Data.IDbTransaction)">
            <summary>
            Create
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.Update(System.Data.IDbTransaction)">
            <summary>
            Update the response template
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.UpdateResponsePipes(System.Data.IDbTransaction)">
            <summary>
            Update response pipe data
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.GetEditor">
            <summary>
            Gets the <see cref="T:Prezza.Framework.Security.SecurityEditor"/> for a <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
            <returns>a <see cref="T:Prezza.Framework.Security.SecurityEditor"/> of type <see cref="T:Checkbox.Forms.Security.FormSecurityEditor"/></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.AddCommonSprocParams(Prezza.Framework.Data.DBCommandWrapper)">
            <summary>
            Add common insert/update parameters to the specified command
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.GetConfigurationDataSet(System.Int32)">
            <summary>
            Gets the Data object by which a ResponseTemplate's state is loaded
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.EnsureIntrinsicPages">
            <summary>
            Ensure template has a hidden items page and a completion page
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.CreatePage(System.Int32,System.Boolean)">
            <summary>
            Override create page to validate page position
            </summary>
            <param name="position"></param>
            <param name="ensureIntrinsicPages"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.GetHiddenItemsPage">
            <summary>
            Get the hidden items survey page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.GetCompletionPage">
            <summary>
            Get the completion page
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.ResponsePipes">
            <summary>
            Get the response pipes for a survey
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.AddResponsePipe(System.String,System.Int32)">
            <summary>
            Add a response pipe
            </summary>
            <param name="name"></param>
            <param name="itemID"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.AddResponsePipe(System.String,System.Int32,System.Data.IDbTransaction)">
            <summary>
            Add a response pipe using a transaction
            </summary>
            <param name="name"></param>
            <param name="itemID"></param>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.DeleteResponsePipe(System.String)">
            <summary>
            Delete a response pipe
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.DeleteResponsePipe(System.String,System.Data.IDbTransaction)">
            <summary>
            Delete a response pipe using a transaction
            </summary>
            <param name="name"></param>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.CreateResponse(System.String,System.Guid)">
            <summary>
            Factory method creates an instance of <see cref="T:Checkbox.Forms.Response"/> using this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
            <param name="languageCode">the language to create the Response in</param>
            <param name="responseGuid"> </param>
            <returns>a new <see cref="T:Checkbox.Forms.Response"/></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.CreateResponse(System.String)">
            <summary>
            Factory method creates an instance of <see cref="T:Checkbox.Forms.Response"/> using this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
            <param name="languageCode">the language to create the Response in</param>
            <returns>a new <see cref="T:Checkbox.Forms.Response"/></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.CreateResponse(System.String,System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Factory method creates an instance of <see cref="T:Checkbox.Forms.Response"/> using this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
            <param name="languageCode">the language to create the Response in</param>
            <param name="responseGuid"> </param>
            <param name="byPageItemCreation"></param>
            <returns>a new <see cref="T:Checkbox.Forms.Response"/></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.LoadItemsAsync(System.Int32[],System.String,System.Guid)">
            <summary>
            Add items to the queue for async pre-loading
            </summary>
            <param name="itemIds"></param>
            <param name="languageCode"></param>
            <param name="responseGuid"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.LoadPageAsync(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.LoadItem(System.Int32,System.String,System.Guid,System.Collections.Generic.Dictionary{System.Int32,System.Boolean})">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.CreateItem(System.String,System.Int32,Checkbox.Forms.Response)">
            <summary>
            
            </summary>
            <param name="languageCode"></param>
            <param name="itemId"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.CreateItem(System.String,System.Int32,System.Nullable{System.Guid})">
            <summary>
            
            </summary>
            <param name="languageCode"></param>
            <param name="itemId"></param>
            <param name="responseGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.CreateItem(System.String,System.Int32,Checkbox.Forms.Response,System.Nullable{System.Guid})">
            <summary>
            
            </summary>
            <param name="languageCode"></param>
            <param name="itemId"></param>
            <param name="response"> </param>
            <param name="responseGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.InitializeResponseFromCached(Checkbox.Forms.CachableResponse,System.Collections.Generic.Dictionary{System.Int32,System.Boolean})">
            <summary>
            
            </summary>
            <param name="cachableResponse"></param>
            <param name="excludedFlags"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.AddSupportedLanguage(System.String)">
            <summary>
            Add a language to the list of languages supported by the survey
            </summary>
            <param name="language"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.RemoveSupportedLanguage(System.String)">
            <summary>
            Remove a language from the list of supported languages
            </summary>
            <param name="language"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.CopyPage(System.Int32,System.Int32,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            
            </summary>
            <param name="pageId"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.BehaviorSettings">
            <summary>
            Get survey behavior settings
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.StyleSettings">
            <summary>
            Get survey style settings
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.LanguageSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.IsPoll">
            <summary>
            Get/set a boolean indicating if this is a simpler form of response template called a poll.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.Identity">
            <summary>
            Gets the database identity of this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.GUID">
            <summary>
            Gets the Globally Unique Identifier (GUID) for this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.Name">
            <summary>
            Gets or sets the global name for this <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.IsDeleted">
            <summary>
            Gets a flag indicating whether this <see cref="T:Checkbox.Forms.ResponseTemplate"/> has been deleted
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.MobileCompatible">
            <summary>
            Gets or sets a flag indicating whether indicating whether the <see cref="T:Checkbox.Forms.ResponseTemplate"/> support Mobile compatible ItemTypes and settings
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.ExportElementName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.NameTextID">
            <summary>
            Gets the TextID for this ResponseTemplate's Name
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.TitleTextID">
            <summary>
            Gets the TextID for the Title
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.DescriptionTextID">
            <summary>
            Gets the TextID for the Description
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.ContinueButtonTextID">
            <summary>
            Gets the TextID for the Continue button
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.BackButtonTextID">
            <summary>
            Gets the TextID for the Back button
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.FinishButtonTextID">
            <summary>
            Gets the TextID for the Finish button
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.SaveProgressButtonTextID">
            <summary>
            Get the text id for the save progress button
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.GetDeletePageCommand">
            <summary>
            Get command to delete page
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplate.FilterCollection">
            <summary>
            Get the report filters for this survey
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.GetFilterDataObjects">
            <summary>
            Get the analysis filters associated with this response template
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.AddFilter(Checkbox.Analytics.Filters.Configuration.FilterData)">
            <summary>
            Add a filter to this response template
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.DeleteFilter(Checkbox.Analytics.Filters.Configuration.FilterData)">
            <summary>
            Delete a filter
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.DeleteFilter(System.Int32)">
            <summary>
            Delete a filter
            </summary>
            <param name="filterID"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.SaveFilters">
            <summary>
            Save the filters
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.CleanupItemCaches(System.Int32)">
            <summary>
            Removes the item from all the caches
            </summary>
            <param name="itemData"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplate.AddItemCacheKey(System.Int32,System.String)">
            <summary>
            Stores response keys for item. We need them to remove from cache it the item will be updated 
            </summary>
            <param name="itemId"></param>
            <param name="key"></param>
        </member>
        <member name="T:Checkbox.Forms.ResponseTemplateManager">
            <summary>
            Provides CRUD operations for ResponseTemplates
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplateManager.SurveyTextKeyMap">
            <summary>
            The number of texts associated with ancillary survey activities, such as login,
            language select, etc. are spread out and are configurable through Settings pages.
            This dictionary maps those text ids, which were not previously configurable on a
            per-survey basis to survey-specific values.  The map excludes values already
            configurable on a per-survey basis, such as survey button texts and title.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.ResponseTemplateManager.ActiveSurveyLanguages">
            <summary>
            Get list of active survey languages
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.EnsureActiveLanguage(System.String)">
            <summary>
            Get list of "in-use" survey languages.  Also include default app language
            and current user's language
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.MergeActiveSurveyLanguages(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ensure
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.CreateResponseTemplate(Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Create a new response template
            </summary>
            <returns>An empty <see cref="T:Checkbox.Forms.ResponseTemplate"/> object.</returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.CreateResponseTemplate(Checkbox.Forms.ResponseTemplate,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Create a new response template
            </summary>
            <returns>An empty <see cref="T:Checkbox.Forms.ResponseTemplate"/> object.</returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.InitializeTemplate(Checkbox.Forms.ResponseTemplate,System.String)">
            <summary>
            Initialize a template by creating pages, setting default languages, applying
            default security settings, etc.
            </summary>
            <param name="rt"></param>
            <param name="name"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetResponseTemplateData(System.Int32)">
            <summary>
            Gets the ConfigurationDataSet for a given <see cref="T:Checkbox.Forms.ResponseTemplate"/>
            </summary>
            <param name="templateID">the data ID of the template</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetResponseTemplateGUID(System.Int32)">
            <summary>
            Get the GUID for a response template
            </summary>
            <param name="templateID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.CanBeDeleted(System.Int32,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Determines if a response template can be deleted.
            </summary>
            <param name="templateID">The id of the template being evaluated.</param>
            <param name="principal">The <see cref="T:Prezza.Framework.Security.Principal.ExtendedPrincipal"/> of the user performing the evaluation.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.CanBeEdited(System.Int32,System.String@)">
            <summary>
            Determines if a response template can be edited.  Does NOT check permissions, but does check app/survey
            settings regarding editing active surveys.
            </summary>
            <param name="templateId"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.DeleteResponseTemplate(System.Int32)">
            <summary>
            Delete a response template
            </summary>
            <param name="templateID"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.DeleteResponseTemplate(System.Int32,System.Data.IDbTransaction)">
            <summary>
            Delete a response template within the context of the specified transaction.
            </summary>
            <param name="templateID"></param>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.InsertPageBreak(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Inserts page break indentifier to the database
            </summary>
            <param name="pageId"></param>
            <param name="shouldPageBreak"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetResponseTemplate(System.Int32)">
            <summary>
            Get a response template with the specified id.
            </summary>
            <param name="templateID">ID of the response template to get.</param>
            <returns>A <see cref="T:Checkbox.Forms.ResponseTemplate"/> object initialized with its data. A
            cached template will be returned if available.</returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetResponseTemplateId(System.String)">
            <summary>
            Get the ID of a response template given it's name.
            </summary>
            <param name="responseTemplateName">Name of response template to get id for.</param>
            <returns>ID of response template.</returns>
            <remarks>Returns null if no response template with name found.  If multiple templates with name exists, returns
            first matching name.</remarks>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.CacheResponseTemplate(Checkbox.Forms.ResponseTemplate)">
            <summary>
            Add rt to cache
            </summary>
            <param name="rt"></param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetLightweightResponseTemplate(System.Int32)">
            <summary>
            Get a AccessControllableResource which has the same ACL and DefaultPolicy as a given template.
            </summary>
            <param name="templateID">ID of the response template to clone ACL and DefaultPolicy from.</param>
            <returns>A <see cref="T:Prezza.Framework.Security.LightweightAccessControllable"/> object initialized with a
            a given Template's ACL and DefaultPolicy.</returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetLightweightResponseTemplate(System.Guid)">
            <summary>
            Get a AccessControllableResource which has the same ACL and DefaultPolicy as a given template.
            </summary>
            <param name="templateGuid">ID of the response template to clone ACL and DefaultPolicy from.</param>
            <returns>A <see cref="T:Prezza.Framework.Security.LightweightAccessControllable"/> object initialized with a
            a given Template's ACL and DefaultPolicy.</returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetResponseTemplateIdFromGuid(System.Guid)">
            <summary>
            Get the Id of a response template from its guid.f
            </summary>
            <param name="responseTemplateGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetResponseTemplate(System.Guid)">
            <summary>
            Get the response template with the specified <see cref="T:System.Guid"/>.
            </summary>
            <param name="guid"><see cref="T:System.Guid"/> for the response template.</param>
            <returns><see cref="T:Checkbox.Forms.ResponseTemplate"/> object.</returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetResponseTemplateSectionsIds(System.Int32)">
            <summary>
            Get the response template with the specified <see cref="T:System.Guid" />.
            </summary>
            <param name="templateId">The template identifier.</param>
            <returns>
              <see cref="T:Checkbox.Forms.ResponseTemplate" /> object.
            </returns>
            <exception cref="T:System.ArgumentException">template id should be greater than 0 - templateId</exception>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetResponseTemplateReportableSections(System.Int32)">
            <summary>
            Gets the response template reportable sections.
            </summary>
            <param name="templateId">The template identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">template id should be greater than 0 - templateId</exception>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetSectionsESigmaValues(System.Int32,System.Int32)">
            <summary>
            Gets  e sigma values for heat map.
            </summary>
            <param name="templateId">The template identifier.</param>
            <param name="reportId">The report identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetResponseTemplateSectionsESigma(System.Int32,System.Boolean)">
            <summary>
            Get the eSgima values for sections. Null if report not allowed to use eSigma values
            </summary>
            <param name="reportId">The report identifier.</param>
            <param name="checkForEnable">if set to <c>true</c> [check for enable].</param>
            <returns>
              <see cref="T:Checkbox.Forms.ResponseTemplate" /> object.
            </returns>
            <exception cref="T:System.ArgumentException">report id should be greater than 0</exception>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetResponseTemplateSections(System.Int32)">
            <summary>
            Gets the response template sections.
            </summary>
            <param name="templateId">The template identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetResponseTemplateFromResponseGUID(System.Guid)">
            <summary>
            Get the response template corresponding to the response with the specified GUID
            </summary>
            <param name="responseGUID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetResponseTemplate(System.String)">
            <summary>
            Get the response template with the specified name.
            </summary>
            <param name="rtName">Name of the response template.</param>
            <param name="useCache">When false, always load a fresh copy of the response template.</param>
            <returns><see cref="T:Checkbox.Forms.ResponseTemplate"/> object.</returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetAvailableResponseTemplates(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.Boolean,Checkbox.Pagination.PaginationContext,System.Int32@)">
            <summary>
            Gets a <see cref="T:System.Data.DataSet"/> of ResponseTemplates available to the logged-in user.
            </summary>
            <param name="currentPrincipal">Principal making the request.</param>
            <param name="includeInactiveTemplates">Determines if inactive surveys should be included in the result set.</param>
            <param name="context"></param>
            <param name="totalCount">The count of available <see cref="T:Checkbox.Forms.ResponseTemplate"/>.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing one table.  </returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.ListAccessibleTemplatesAndFolders(Checkbox.Security.Principal.CheckboxPrincipal,Checkbox.Pagination.PaginationContext,System.Boolean,System.Boolean)">
            <summary>
            List templates and folders accessible to the specified user.
            </summary>
            <param name="currentPrincipal"></param>
            <param name="paginationContext"></param>
            <param name="includeActive"></param>
            <param name="includeInactive"></param>
            <returns></returns>
            <remarks>No checks are made for response limits and the like.</remarks>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.ListFavoriteSurveys(Checkbox.Security.Principal.CheckboxPrincipal,Checkbox.Pagination.PaginationContext)">
            <summary>
            List of favorite surveys accessible to the specified user.
            </summary>
            <param name="currentPrincipal"></param>
            <param name="paginationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.AddFavoriteSurvey(Checkbox.Security.Principal.CheckboxPrincipal,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Add survey to list of favorite ones
            </summary>
            <param name="currentPrincipal"></param>
            <param name="surveyid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.RemoveFavoriteSurvey(Checkbox.Security.Principal.CheckboxPrincipal,System.Int32)">
            <summary>
            Remove survey from the list of favorite ones
            </summary>
            <param name="currentPrincipal"></param>
            <param name="surveyid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.IsFavoriteSurvey(Checkbox.Security.Principal.CheckboxPrincipal,System.Int32)">
            <summary>
            Check if specified survey is favorite
            </summary>
            <param name="currentPrincipal"></param>
            <param name="surveyid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.ListAccessibleTemplates(Checkbox.Security.Principal.CheckboxPrincipal,System.Nullable{System.Int32},Checkbox.Pagination.PaginationContext,System.Boolean,System.Boolean)">
            <summary>
            List templates that are accessible to the specified user in a given folder.
            If no folder is specified it is assumed the listing is for the root folder.
            </summary>
            <param name="currentPrincipal"></param>
            <param name="ancestorFolderId"></param>
            <param name="paginationContext"></param>
            <param name="includeActive"></param>
            <param name="includeInactive"></param>
            <returns></returns>
            <remarks>No checks are made for response limits and the like.</remarks>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.ListTakeableResponseTemplates(Checkbox.Security.Principal.CheckboxPrincipal,Checkbox.Pagination.PaginationContext)">
            <summary>
            List response templates accessible to the specified user.
            </summary>
            <param name="currentPrincipal"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetAvailableResponseTemplatesAndFolders(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.Nullable{System.Int32},Checkbox.Pagination.PaginationContext,System.Int32@)">
            <summary>
            Get ResponseTemplates and folders available to the logged-in user in a specific folder.
            </summary>
            <param name="currentPrincipal">Logged-in user.</param>
            <param name="parentFolderId">Folder id</param>
            <param name="context"></param>
            <param name="totalCount">Total items matching filter</param>
            <returns><see cref="T:System.Data.DataSet"/> containing result.</returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.FilterTakeableResponseTemplates(Checkbox.Security.Principal.CheckboxPrincipal,System.Collections.Generic.List{Checkbox.Forms.LightweightResponseTemplate},Checkbox.Pagination.PaginationContext)">
            <summary>
            Filter the list of available response templates to remove those that the user is not allowed to take due
            to response count and/or activation date limitations
            </summary>
            <param name="currentPrincipal">Principal requesting access</param>
            <param name="takeableTemplates">A list of all active and accessible response templates</param>
            <param name="context">The paging context</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.MoreResponsesAllowed(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},Prezza.Framework.Security.Principal.ExtendedPrincipal,System.Boolean)">
            <summary>
            Determine if the specified user may submit more responses
            </summary>
            <param name="templateID"></param>
            <param name="maxResponsesPerUser"></param>
            <param name="maxTotalResponses"></param>
            <param name="principal"></param>
            <param name="isAnonymized"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.MoreResponsesAllowedForTemplate(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Determine if the template allows more responses
            </summary>
            <param name="templateID"></param>
            <param name="maxResponseCount"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.MoreResponsesAllowedForUser(System.Int32,System.Nullable{System.Int32},Prezza.Framework.Security.Principal.ExtendedPrincipal,System.Boolean)">
            <summary>
            Determine if more responses are allowed for a given user
            </summary>
            <param name="templateID"></param>
            <param name="maxResponsesPerUser"></param>
            <param name="currentPrincipal"></param>
            <param name="isAnonymized"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetTemplateResponseCount(System.Int32)">
            <summary>
            Get the number of responses for a response template
            </summary>
            <param name="templateID"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Checkbox.Forms.ResponseTemplateManager.GetTemplateResponseCount(System.Int32,System.Boolean,System.Boolean)" -->
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetTestResponseCount(System.Int32)">
            <summary>
            Get the number of test responses for a response template
            </summary>
            <param name="templateID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetPagePositionById(System.Int32)">
            <summary>
            
            </summary>
            <param name="pageID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.ResponseTemplateExists(System.String)">
            <summary>
            Return a boolean indicating whether a response template with the specified name exists
            </summary>
            <param name="responseTemplateName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.HasResponses(System.Int32)">
            <summary>
            Return a boolean indicating whether a response template has one or more response.
            A response is any entry that was not made in Test Mode or
            </summary>
            <param name="responseTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.MarkTemplateUpdated(System.Int32)">
            <summary>
            Mark a template as being updated
            </summary>
            <param name="templateID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.CheckTemplateUpdated(System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Return a boolean value if a response template has been updated since the
            refernece date.
            </summary>
            <param name="templateID"></param>
            <param name="referenceDate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.CheckTemplateResponsesUpdated(System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Return a boolean value if a response template has been updated since the
            refernece date.
            </summary>
            <param name="templateID"></param>
            <param name="referenceDate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.CheckItemDataUpdated(System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Return a boolean value if an item has been updated since the
            reference date.
            </summary>
            <param name="itemId"></param>
            <param name="referenceDate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.CopyTemplate(System.Int32,System.String,Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String)">
            <summary>
            Copy a response template and return the copied template
            </summary>
            <param name="templateID">ID of the template to copy.</param>
            <param name="name">suggested name for new template, could be null</param>
            <param name="owner">Owner of the new template</param>
            <param name="languageCode">Language code to use for survey name</param>
            <returns>A copy of the specified response template.</returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetUniqueName(System.String,System.String)">
            <summary>
            Determines if a survey name is already in use and returns the next available unique name.
            The format of the unique name is Survey_Name Copy #.
            Returns the provided survey name if it is unique.
            </summary>
            <param name="surveyName"></param>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.ChangeResponseTemplateOwner(System.Int32,System.String)">
            <summary>
            Change the specified ReponseTemplate's CreatedBy field
            </summary>
            <param name="rtId">Id of the ResponseTemplate.</param>
            <param name="newOwner">Name of the new owner.</param>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.InitializeResponseTemplateAclAndPolicy(Checkbox.Forms.ResponseTemplate,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Initialize survey acl and policy depending on security type
            </summary>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetResponseTemplateParentFolderId(System.Int32)">
            <summary>
            Get the Id of the folder tha contains the specified response template.  If
            the template is not in a folder, a null value is returned.
            </summary>
            <param name="responseTemplateId">ID of response template to get folder parent for.</param>
            <returns>Database ID of folder, if any, that contains the response template.</returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetResponseTemplateParentFolderName(System.Int32)">
            <summary>
            Get the name of the folder tha contains the specified response template.  If
            the template is not in a folder, an empty string value is returned.
            </summary>
            <param name="responseTemplateId">ID of response template to get folder parent for.</param>
            <returns>Name of folder, if any, that contains the response template.</returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetLightweightResponseTemplateSecurityEditor(System.Int32)">
            <summary>
            Get a security editor for a response template but without the cost of loading a full survey.
            </summary>
            <param name="responseTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.ImportResponseTemplate(System.Xml.XmlDocument,System.String,Checkbox.Security.Principal.CheckboxPrincipal,Checkbox.Common.Folder,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
             <summary>
            
             </summary>
             <param name="xmlDoc"></param>
             <param name="name"></param>
             <param name="creator"></param>
             <param name="folder"></param>
             <param name="styleTemplateId"></param>
             <param name="mobileTemplateId"></param>
             <param name="progressKey"></param>
             <param name="progressLanguage"></param>
             <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetShowAsterisksSetting(System.Int32)">
            <summary>
            </summary>
            <param name="responseTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetResponseTemplateByItemID(System.Int32)">
            <summary>
            Returns a response template by item ID
            </summary>
            <param name="ItemID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.ResponseTemplateManager.GetResponseTemplateIDByItemID(System.Int32)">
            <summary>
            Returns a response template ID by item ID
            </summary>
            <param name="ItemID"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.TemplatePageExportWriter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Forms.TemplatePageExportWriter.GetItemDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Forms.TemplatePageExportWriter.#ctor(Checkbox.Forms.Logic.Configuration.RuleDataService,Checkbox.Forms.GetItemDelegate)">
            <summary>
            
            </summary>
            <param name="dataService"></param>
        </member>
        <member name="M:Checkbox.Forms.TemplatePageExportWriter.WritePageData(Checkbox.Common.PersistedDomainObject,System.Xml.XmlWriter)">
            <summary>
            Write page data
            </summary>
            <param name="obj"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Forms.TemplatePageExportWriter.WriteRuleData(Checkbox.Common.PersistedDomainObject,System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Checkbox.Forms.TemplatePageType">
            <summary>
            Template page type enumeration
            </summary>
        </member>
        <member name="F:Checkbox.Forms.TemplatePageType.ContentPage">
            <summary>
            Normal content page in a template.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.TemplatePageType.HiddenItems">
            <summary>
            Page contains items that are not shown
            </summary>
        </member>
        <member name="F:Checkbox.Forms.TemplatePageType.Completion">
            <summary>
            Page contains items that are shown, but do not take
            input.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.UploadedFileType">
            <summary>
            Enumeration of "type" of uploaded files.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.UploadedFileType.Unknown">
            <summary>
            Unable to determine
            </summary>
        </member>
        <member name="F:Checkbox.Forms.UploadedFileType.Document">
            <summary>
            Represents a readable document
            </summary>
        </member>
        <member name="F:Checkbox.Forms.UploadedFileType.Image">
            <summary>
            Viewable image
            </summary>
        </member>
        <member name="F:Checkbox.Forms.UploadedFileType.Audio">
            <summary>
            Audio data
            </summary>
        </member>
        <member name="F:Checkbox.Forms.UploadedFileType.Video">
            <summary>
            Video data
            </summary>
        </member>
        <member name="T:Checkbox.Forms.UploadItemManager">
            <summary>
            A management class designed to handle persistence and retrieval of upload files
            </summary>
        </member>
        <member name="P:Checkbox.Forms.UploadItemManager.AllAllowedFileTypes">
            <summary>
            Returns the master list of all allowed file types which can be assigned to an UploadItem.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.SanitizeFileName(System.String,System.String)">
            <summary>
            Remove invalid characters from a file name
            </summary>
            <param name="fileName"></param>
            <param name="invalidCharReplacement"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.GetUploadedFileExportName(Checkbox.Forms.Items.UploadItem,System.Int64)">
            <summary>
            Constructs a file name that is guaranteed to be unique. Uniqueness is ensured by adding 
            the response id and answer id to the file name. The name is formatted as:
            ResponseID_AnswerID_FileName
            </summary>
            <param name="answerId"></param>
            <param name="uploadItem"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.GetFileCount(System.Int32)">
            <summary>
            Determine the number of uploaded files associated with a specific response template.
            </summary>
            <param name="responseTemplateId">The response template that the UploadItem question is associated with.</param>
            <returns>The number of uploaded files.</returns>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.GetFileAnswerIdsByResponseTemplateId(System.Int32)">
            <summary>
            Retrieves all uploaded files associated with a specific response template.
            </summary>
            <param name="responseTemplateId">The response template that the UploadItem question is associated with.</param>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.SaveFilesToDisk(System.Int32,System.String)">
            <summary>
            Download all of the uploaded files associated with a specific response template and saves them to disk.
            </summary>
            <param name="responseTemplateId">The response template that the UploadItem question is associated with.</param>
            <param name="tempFolderPath">Temp folder to use for writing files.</param>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.SaveFilesToDisk(System.Int32,System.String,System.String,System.String)">
            <summary>
            Download all of the uploaded files associated with a specific response template and saves them to disk.
            </summary>
            <param name="responseTemplateId">The response template that the UploadItem question is associated with.</param>
            <param name="progressKey">Progress key to use if tracking progresss.  If not tracking progress, pass null or empty string.</param>
            <param name="tempFolderPath">Temp folder to place files in.</param>
            <param name="progressMessageLanguageCode">Language code for localized progress messages.</param>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.GetFilesAsArchive(System.Int32)">
            <summary>
            Retrieve the uploaded files associated with a specific response template and saves them to
            an zip archive in memory.
            </summary>
            <param name="responseTemplateId">The response template that the UploadItem question is associated with.</param>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.GetFileByAnswerID(System.Int64)">
            <summary>
            Returns the UploadItem object which is associated with a given answer.
            </summary>
            <param name="answerId">The answer which the upload file is associated with.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.GetFileByGuid(System.Guid)">
            <summary>
            Returns the UploadItem object which is associated with a given answer.
            </summary>
            <param name="fileGuid">The answer which the upload file is associated with.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.DownloadFile(System.Web.HttpResponse,System.Int64)">
            <summary>
            
            </summary>
            <param name="response"></param>
            <param name="??????"></param>
            <param name="answerId"> </param>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.DownloadFile(System.Web.HttpResponse,System.Guid)">
            <summary>
            
            </summary>
            <param name="response"></param>
            <param name="fileGuid"> </param>
        </member>
        <member name="P:Checkbox.Forms.UploadItemManager.UseS3ForUploadedFiles">
            <summary>
            Verify that S3 settings enabled and have values
            </summary>
        </member>
        <member name="P:Checkbox.Forms.UploadItemManager.UseS3ForTempFiles">
            <summary>
            Verify that S3 settings enabled and have values
            </summary>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.GetTempFileFromS3(System.Int32,System.String)">
            <summary>
            Get a temp file from S3
            </summary>
            <param name="fileId"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.GetFileFromS3(System.Int32,System.String)">
            <summary>
            Get persistent file from S3
            </summary>
            <param name="fileId"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.GetFileFromS3(System.Int32,System.String,System.String)">
            <summary>
            </summary>
            <param name="fileId"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.GetS3TempFileDownloadLink(System.String)">
            <summary>
            Look for file with name on bucket and get download link
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.GetS3FileDownloadLink(System.String)">
            <summary>
            Look for file with name on bucket and get download link
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.GetS3FileDownloadLink(System.String,System.String)">
            <summary>
            Look for file with name on bucket and get download link
            </summary>
            <param name="fileName"></param>
            <param name="bucketName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.Save(System.Byte[],System.String,System.String,System.Int32,System.Collections.Generic.List{System.Int64},System.Guid)">
            <summary>
            Persists item data to the database.
            </summary>
            <param name="data">The file data.</param>
            <param name="fileName">The name of the file.</param>
            <param name="fileType">The file type.</param>
            <param name="itemId">The id of the question.</param>
            <param name="answerIds">The answer which the upload file is associated with.</param>
            <param name="fileGuid"> </param>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.SaveToDatabase(System.Data.IDbTransaction,System.Byte[],System.String,System.String,System.Guid)">
            <summary>
            Persist an uploaded file to the database server.
            </summary>
            <param name="transaction"></param>
            <param name="data">The file data.</param>
            <param name="fileName">The name of the file.</param>
            <param name="fileType">The file type.</param>
            <param name="fileGuid"> </param>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.SaveTempFileToS3(System.String,System.Byte[])">
            <summary>
            Save file data to S3 temp file store.
            </summary>
            <param name="fileName"></param>
            <param name="fileBytes"></param>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.SaveFileToS3(System.String,System.Byte[])">
            <summary>
            Save a persistent file to S3
            </summary>
            <param name="fileName">File name should be unique for store and for multi-hosting situations.</param>
            <param name="fileBytes">Data to save</param>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.SaveFileToS3(System.String,System.Byte[],System.String)">
            <summary>
            Save a file to S3
            </summary>
            <param name="fileName">File name should be unique for store and for multi-hosting situations.</param>
            <param name="fileBytes">Data to save</param>
            <param name="bucketName"></param>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.SaveTempFileToS3(System.String,System.String)">
            <summary>
            Save a file to S3
            </summary>
            <param name="fileName">File name should be unique for store and for multi-hosting situations.</param>
            <param name="filePath">Path of file to save</param>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.SaveFileToS3(System.String,System.String)">
            <summary>
            Save a file to S3
            </summary>
            <param name="fileName">File name should be unique for store and for multi-hosting situations.</param>
            <param name="filePath">Path of file to save</param>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.DetermineContentType(System.String,Checkbox.Forms.UploadedFileType@)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="fileType"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.GetS3FileName(System.Int32,System.String)">
            <summary>
            Get name of file name when stored in S3 Bucket
            </summary>
            <param name="fileId"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.SaveItemDataRelationship(System.Data.IDbTransaction,System.Int32,System.Int32,System.Int64)">
            <summary>
            Persist which question and answer an uploaded file is associated with.
            </summary>
            <param name="transaction"></param>
            <param name="itemId">The id of the question.</param>
            <param name="fileId">The id of the uploaded file.</param> 
            <param name="answerId">The answer which the upload file is associated with.</param>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.UpdateAllowedFileTypes(System.Collections.Generic.IList{System.String})">
            <summary>
            Updates the list of allowed file types.
            If a file type is removed that has already been assigned to a question that question will
            still allow the removed file.
            </summary>
            <param name="fileTypes">The list of allowed file types.</param>
        </member>
        <member name="M:Checkbox.Forms.UploadItemManager.ValidateDownloadDirectory(System.String)">
            <summary>
            Ensures that the specified directory can be written to.
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.UrlMapper">
            <summary>
            Static class to provide URL Mappings
            </summary>
        </member>
        <member name="M:Checkbox.Forms.UrlMapper.GetMapping(System.String)">
            <summary>
            Get the mapping for the source url
            </summary>
            <param name="sourceUrl">Requested URL</param>
            <returns>URL to rewrite</returns>
        </member>
        <member name="M:Checkbox.Forms.UrlMapper.GetSource(System.String)">
            <summary>
            Get the source url based on the destination url
            </summary>
            <param name="destinationUrl">Destination url</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.UrlMapper.AddMapping(System.String,System.String)">
            <summary>
            Add/update a mapping from a source URL to a destination URL
            </summary>
            <param name="sourceUrl">Request URL</param>
            <param name="destinationUrl">URL to Rewrite</param>
        </member>
        <member name="M:Checkbox.Forms.UrlMapper.RemoveMapping(System.String)">
            <summary>
            Remove a mapping for the specified URL
            </summary>
            <param name="destinationUrl">URL to remove mapping for</param>
        </member>
        <member name="M:Checkbox.Forms.UrlMapper.SaveMapping(System.String,System.String)">
            <summary>
            Save the specified mapping to the database.  If a mapping for the source URL exists, it will be updated.
            </summary>
            <param name="sourceUrl">URL to map from.</param>
            <param name="destinationUrl"></param>
        </member>
        <member name="M:Checkbox.Forms.UrlMapper.DeleteMapping(System.String)">
            <summary>
            Delete a mapping from the database.
            </summary>
            <param name="sourceUrl">URL to delete mapping for</param>
        </member>
        <member name="M:Checkbox.Forms.UrlMapper.SourceMappingExists(System.String)">
            <summary>
            Return a boolean if the indicated source mapping exists
            </summary>
            <param name="sourceUrl">Mapping to check</param>
            <returns>Boolean indicating if mapping exists.</returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.AddressVerifierValidator">
            <summary>
            Validate the address
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.AddressVerifierValidator.Validate(Checkbox.Forms.Items.TextItem)">
            <summary>
            Perform base validation. For now does nothing special
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.AlphaNumericValidator">
            <summary>
            Validate an alphanumeric string
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.AlphaNumericValidator.#ctor">
            <summary>
            Constructor, set the regex expression
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.AlphaNumericValidator.Validate(System.String)">
            <summary>
            Validate the expression
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.AlphaNumericValidator.GetMessage(System.String)">
            <summary>
            Get the validation error
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.AlphaValidator">
            <summary>
            A regular expression validator which determines if a value contains only alpha numeric characters.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.AlphaValidator.#ctor">
            <summary>
            Constructor, set the regular expression
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.AlphaValidator.GetMessage(System.String)">
            <summary>
            Get the validation error message
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.AlternateURLValidator">
            <summary>
            A regular expression validator which determines if a value contains only alpha numeric characters.
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Validation.AlternateURLValidator.MaxLenght">
            <summary>
            Maximal allowed length for alternate URL
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.AlternateURLValidator.#ctor">
            <summary>
            Constructor, set the regular expression
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.AlternateURLValidator.GetMessage(System.String)">
            <summary>
            Get the validation error message
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.AnswerLengthValidator">
            <summary>
            Validator to validate answer length
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Validation.AnswerLengthValidator.MaxLength">
            <summary>
            Get the max length, if any
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.AnswerLengthValidator.GetMessage(System.String)">
            <summary>
            Get/set the validation text
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.AnswerLengthValidator.Validate(Checkbox.Forms.Items.TextItem)">
            <summary>
            Validate the items length
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.CanadaZipCodeValidator">
            <summary>
            Validate Canadian zip codes
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.CanadaZipCodeValidator.Validate(System.String)">
            <summary>
            Validate Canadian Zip Codes
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.CanadaZipCodeValidator.GetMessage(System.String)">
            <summary>
            Get the validation message
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.CaptchaItemValidator">
            <summary>
            Validate captcha item answers
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.CaptchaItemValidator.GetMessage(System.String)">
            <summary>
            Get the captcha error message
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.CaptchaItemValidator.Validate(Checkbox.Forms.Items.CaptchaItem)">
            <summary>
            Validate the input
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.PasswordValidator">
            <summary>
            Validate a password validator
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Validation.PasswordValidator.ErrorTextId">
            <summary>
            Error text id.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Validation.PasswordValidator.AdditionalParameter">
            <summary>
            Additional parameter
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.PasswordValidator.#ctor">
            <summary>
            Constructor, set the regex expression
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.PasswordValidator.Validate(System.String)">
            <summary>
            Validate the expression
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.PasswordValidator.GetMessage(System.String)">
            <summary>
            Get the validation error
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="F:Checkbox.Forms.Validation.CustomFormatValidator._formatId">
            <summary>
            Uniquely identifies the custom validator that is being used
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.CustomFormatValidator.Validate(System.String)">
            <summary>
            Validate the input string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.CustomFormatValidator.GetMessage(System.String)">
            <summary>
            Get the validation error message.
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.CustomFormatValidator.GetFormats(System.String)">
            <summary>
            Returns the set of configured custom validator. Validators consist of a plain text description
            and uniquely identifier.
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.CustomFormatValidator.GetRegularExpression(System.String)">
            <summary>
            Retrieves the regular expression associated with a specified custom validator.
            </summary>
            <param name="format">The unique identifier for a custom format.</param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.DateRangeValidator">
            <summary>
            Validator for date ranges
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.DateRangeValidator.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime},Checkbox.Forms.Items.AnswerFormat)">
            <summary>
            Create a new date range validator
            </summary>
            <param name="minDate"></param>
            <param name="maxDate"></param>
            <param name="answerFormat"></param>
        </member>
        <member name="P:Checkbox.Forms.Validation.DateRangeValidator.AnswerFormat">
            <summary>
            Get the date answer format
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.DateRangeValidator.Validate(System.DateTime)">
            <summary>
            Validate the date
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.DateRangeValidator.GetMessage(System.String)">
            <summary>
            Get the valudation message
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.DateValidator">
            <summary>
            Validate that a given value is a valid date in either MM/DD/YYYY or DD/MM/YYYY format
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Validation.DateValidator.CulturalIdentifier">
            <summary>
            Returns the Cultural Identifier associated with the Globalized date format being validated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.DateValidator.#ctor">
            <summary>
            Constructor.  Set the regular expression
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.DateValidator.Validate(System.String)">
            <summary>
            Validate the input
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.DateValidator.GetMessage(System.String)">
            <summary>
            Get the date error message
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.DecimalValidator">
            <summary>
            Validator that uses regex to validate that a number is a decimal.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.DecimalValidator.Validate(System.String)">
            <summary>
            Validate the input string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.DecimalValidator.GetMessage(System.String)">
            <summary>
            Get the validation error message.
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.DoubleRangeValidator">
            <summary>
            Validator for ensuring a numeric value is in a given range
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.DoubleRangeValidator.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Constructor that accepts a max and min value.
            </summary>
            <param name="min">Minimum allowed value. NULL indicates no minimum.</param>
            <param name="max">Maximum allowed value. NULL indicates no maximum.</param>
        </member>
        <member name="M:Checkbox.Forms.Validation.DoubleRangeValidator.Validate(System.Double)">
            <summary>
            Validate
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.EmailValidator">
            <summary>
            Provides validation for email addresses
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.EmailValidator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.EmailValidator.ValidateOptional(System.String)">
            <summary>
            Validates optional email, returns true for blanc strings
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.EmailValidator.Validate(System.String)">
            <summary>
            Validate the provided input
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Validation.EmailValidator.RegularExpression">
            <summary>
            Override property to ignore cultures and case
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.EmailValidator.GetMessage(System.String)">
            <summary>
            Gets the error message for malformed email address
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.IntegerValidator">
            <summary>
            Validate that a given value is an integer.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.IntegerValidator.#ctor">
            <summary>
            Construct validator.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.IntegerValidator.GetMessage(System.String)">
            <summary>
            Get the validation error message.
            </summary>
            <param name="languageCode">Language code for message.</param>
            <returns>Error message.</returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.IPAddressValidator">
            <summary>
            Validate dot separated IP Address
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.IPAddressValidator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.IPAddressValidator.GetMessage(System.String)">
            <summary>
            Get the error message for invalid IP Adress
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.ItemAnswerUniqueValidator">
            <summary>
            Validator to validate unique answers
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.ItemAnswerUniqueValidator.Validate(System.Collections.Generic.List{Checkbox.Forms.Items.IAnswerable})">
            <summary>
            Validate the items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.ItemAnswerUniqueValidator.GetMessage(System.String)">
            <summary>
            Get the validation message
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.ItemSumValidator">
            <summary>
            Validate the sum total of several items
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.ItemSumValidator.#ctor(System.Double,Checkbox.Forms.Logic.LogicalOperator)">
            <summary>
            Constructor
            </summary>
            <param name="sumValue"></param>
            <param name="comparisonOperator"></param>
        </member>
        <member name="P:Checkbox.Forms.Validation.ItemSumValidator.SumValue">
            <summary>
            Get the sum value
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Validation.ItemSumValidator.Operator">
            <summary>
            Get the comparison operator
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.ItemSumValidator.Validate(System.Collections.Generic.List{Checkbox.Forms.Items.IAnswerable})">
            <summary>
            Validate
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.ItemSumValidator.GetMessage(System.String)">
            <summary>
            Get the validation message
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.LowerCaseAlphaValidator">
            <summary>
            Validate lower-case text
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.LowerCaseAlphaValidator.#ctor">
            <summary>
            Constructor.  Set the validation text
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.LowerCaseAlphaValidator.GetMessage(System.String)">
            <summary>
            Get the validation failure message
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.MatrixItemValidator">
            <summary>
            Validator for matrix answers
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Validation.MatrixItemValidator.ColumnValidationErrors">
            <summary>
            Get the validation error collection
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.MatrixItemValidator.AddColumnValidationError(System.Int32,System.String)">
            <summary>
            Add a validation error for a column
            </summary>
            <param name="column"></param>
            <param name="error"></param>
        </member>
        <member name="M:Checkbox.Forms.Validation.MatrixItemValidator.GetMessage(System.String)">
            <summary>
            Get the current matrix-wide error message
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.MatrixItemValidator.Validate(Checkbox.Forms.Items.MatrixItem)">
            <summary>
            Validate the matrix item
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.MatrixItemValidator.ValidateColumn(Checkbox.Forms.Items.MatrixItem,System.Int32)">
            <summary>
            Validate the matrix column
            </summary>
            <param name="matrixItem"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.MatrixItemValidator.ValidateItem(Checkbox.Forms.Items.MatrixItem,System.Int32,System.Int32)">
            <summary>
            Validate the item in the matrix
            </summary>
            <param name="matrixItem"></param>
            <param name="column"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.MatrixItemValidator.ValidateOtherItem(Checkbox.Forms.Items.MatrixItem,Checkbox.Forms.Items.AnswerableItem,System.Int32,System.Int32)">
            <summary>
            Validate an item in an "other" row.
            </summary>
            <param name="matrixItem"></param>
            <param name="otherItem"></param>
            <param name="column"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.MatrixItemValidator.ValidateRowSelectorColumn(Checkbox.Forms.Items.MatrixItem,System.Int32)">
            <summary>
            Validate row selector column
            </summary>
            <param name="matrixItem"></param>
            <param name="columnNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.MatrixItemValidator.ValidateSumTotalColumn(Checkbox.Forms.Items.MatrixItem,System.Int32)">
            <summary>
            Validate a sum total column
            </summary>
            <param name="matrixItem"></param>
            <param name="columnNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.MatrixItemValidator.ValidateUniqueAnswers(Checkbox.Forms.Items.MatrixItem,System.Int32)">
            <summary>
            Validate column answers are unique
            </summary>
            <param name="matrixItem"></param>
            <param name="columnNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.MatrixItemValidator.GetAnswerableColumnItems(Checkbox.Forms.Items.MatrixItem,System.Int32)">
            <summary>
            Get answerable items in a column
            </summary>
            <param name="matrixItem"></param>
            <param name="columnNumber"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.NumericValidator">
            <summary>
            Validator for numerics
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.NumericValidator.Validate(System.String)">
            <summary>
            Validate the input
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.NumericValidator.GetMessage(System.String)">
            <summary>
            Get the error message associated with a validation failure for this item
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.PercentageValidator">
            <summary>
            Validate that a value represents a percentage
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.PercentageValidator.#ctor">
            <summary>
            Constructor for percentage validation.
            </summary>
        </member>
        <member name="T:Checkbox.Forms.Validation.RangeValidator`1">
            <summary>
            Abstract base class for comparing values
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Validation.RangeValidator`1.MinValueSet">
            <summary>
            Get a boolean indicating if the min value has been set
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Validation.RangeValidator`1.MaxValueSet">
            <summary>
            Get a boolean indicating if the max value has been set
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Validation.RangeValidator`1.MinValue">
            <summary>
            Get/set min value
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Validation.RangeValidator`1.MaxValue">
            <summary>
            Get/set max value
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.RangeValidator`1.GetMessage(System.String)">
            <summary>
            Get the language specific error message.
            </summary>
            <param name="languageCode">Language code</param>
            <returns>Localized error message.</returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.RankOrderValidator">
            <summary>
            Validator for Rank order item
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Validation.RankOrderValidator.ErrorMessage">
            <summary>
            This is an error message
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.RankOrderValidator.GetMessage(System.String)">
            <summary>
            
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.RankOrderValidator.Validate(Checkbox.Forms.Items.RankOrder)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.RatingScaleValidator">
            <summary>
            Validate answers to a rating scale question.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.RatingScaleValidator.Validate(Checkbox.Forms.Items.SelectItem)">
            <summary>
            Validate the select input's answer(s)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.RegularExpressionValidator">
            <summary>
            Validator of strings based on regular expressions
            </summary>
        </member>
        <member name="F:Checkbox.Forms.Validation.RegularExpressionValidator._regex">
            <summary>
            Regular expression used to validate input
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.RegularExpressionValidator.Validate(System.String)">
            <summary>
            Validate the provided input
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Forms.Validation.RegularExpressionValidator.RegularExpression">
            <summary>
            Get the associated regular expression for this validator
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.RegularExpressionValidator.GetMessage(System.String)">
            <summary>
            Get the validation message for this error
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.RequiredItemValidator">
            <summary>
            Validator for ensuring items have answers.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.RequiredItemValidator.GetMessage(System.String)">
            <summary>
            Get the validation message
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.RequiredItemValidator.Validate(Checkbox.Forms.Items.AnswerableItem)">
            <summary>
            Validate the value
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.ROTWDateValidator">
            <summary>
            Validate that a given value is a date of the format DD/MM/YYYY
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.ROTWDateValidator.#ctor">
            <summary>
            Constructor.  Set the regular expression
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.ROTWDateValidator.Validate(System.String)">
            <summary>
            Validate the input
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.ROTWDateValidator.GetMessage(System.String)">
            <summary>
            Get the date error message
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.RowSelectValidator">
            <summary>
            Validator for row select column
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.RowSelectValidator.GetMessage(System.String)">
            <summary>
            Get the error's message text
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.RowSelectValidator.Validate(Checkbox.Forms.Items.MatrixItem)">
            <summary>
            Validate the 'selection' status.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.SelectItemValidator">
            <summary>
            Validator for select items
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Validation.SelectItemValidator.ErrorMessage">
            <summary>
            Get/set text id for error message
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.SelectItemValidator.GetMessage(System.String)">
            <summary>
            Get the error message text
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.SelectItemValidator.Validate(Checkbox.Forms.Items.SelectItem)">
            <summary>
            Validate the select input's answer(s)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.SelectItemValidator.ValidateRequired(Checkbox.Forms.Items.SelectItem)">
            <summary>
            Validate required status, i.e. that an item has been selected
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.SelectManyValidator">
            <summary>
            Validate answers to a select many question
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.SelectManyValidator.ValidateRequired(Checkbox.Forms.Items.SelectItem)">
            <summary>
            Validate that the required number of items have been selected
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.SingleLineTextAnswerValidator">
            <summary>
            Validate the answer to a single line text input, which extends text validation
            to include min/max values for certain types.
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.SingleLineTextAnswerValidator.Validate(Checkbox.Forms.Items.TextItem)">
            <summary>
            Perform base validation
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.SocialSecurityValidator">
            <summary>
            Validator for a social security number
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.SocialSecurityValidator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.SocialSecurityValidator.GetMessage(System.String)">
            <summary>
            Get error message
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.TextAnswerValidator">
            <summary>
            Validator for text answers
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Validation.TextAnswerValidator.ErrorMessage">
            <summary>
            Get/set error message
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.TextAnswerValidator.GetMessage(System.String)">
            <summary>
            Get the error message
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.TextAnswerValidator.Validate(Checkbox.Forms.Items.TextItem)">
            <summary>
            Validate a given string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.TextAnswerValidator.ValidateRequired(Checkbox.Forms.Items.TextItem)">
            <summary>
            Validate required value
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.TextAnswerValidator.ValidateLength(Checkbox.Forms.Items.TextItem)">
            <summary>
            Validate answer length
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.TextAnswerValidator.GetFormatValidatorList(Checkbox.Forms.Items.AnswerFormat,System.String)">
            <summary>
            Get a list of applicable validators depending on item format
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.UploadItemValidator">
            <summary>
            Validate that the answer to an upload item is valid.
            </summary>
        </member>
        <member name="P:Checkbox.Forms.Validation.UploadItemValidator.ErrorMessage">
            <summary>
            Get/set the error message
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.UploadItemValidator.GetMessage(System.String)">
            <summary>
            Get a language specific validation message.
            </summary>
            <param name="languageCode">Language code</param>
            <returns>Validation message</returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.UploadItemValidator.Validate(Checkbox.Forms.Items.UploadItem)">
            <summary>
            Validate the upload item
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.UploadItemValidator.ValidateFileType(Checkbox.Forms.Items.UploadItem)">
            <summary>
            Validates that the question answer is an allowed file type.
            No answer is considered a valid file type.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.UploadItemValidator.ValidateHasAnswer(Checkbox.Forms.Items.UploadItem)">
            <summary>
            Determines if the question has been answered and displays the appropriate error if it has not.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.UpperCaseAlphaValidator">
            <summary>
            Validate upper-case string
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.UpperCaseAlphaValidator.#ctor">
            <summary>
            Constructor.  Sets the regular expression
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.UpperCaseAlphaValidator.GetMessage(System.String)">
            <summary>
            Get the message for validation failure
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.UrlValidator">
            <summary>
            Validate that an expression is a URL
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.UrlValidator.#ctor">
            <summary>
            Constructor.  Set the regular expression
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.UrlValidator.GetMessage(System.String)">
            <summary>
            Get the error message to display on validation failure
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.UrlValidator.Validate(System.String)">
            <summary>
            Validate the provided input
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.USADateValidator">
            <summary>
            Validate that a given value is a valid date in MM/DD/YYYY format
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.USADateValidator.#ctor">
            <summary>
            Constructor.  Set the regular expression
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.USADateValidator.Validate(System.String)">
            <summary>
            Validate the input
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.USADateValidator.GetMessage(System.String)">
            <summary>
            Get the date error message
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.USCurrencyValidator">
            <summary>
            Validator for matching US currency values
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.USCurrencyValidator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.USCurrencyValidator.GetMessage(System.String)">
            <summary>
            Get error message for invalid input
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.USPhoneValidator">
            <summary>
            Validator for phone numbers (NANP)
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.USPhoneValidator.#ctor">
            <summary>
            Constructor.  Sets the regular expression
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.USPhoneValidator.GetMessage(System.String)">
            <summary>
            Get the error to display when validation fails
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.USPhoneValidator.Validate(System.String)">
            <summary>
            Validate the provided input
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.USZipCodeValidator">
            <summary>
            Validator for US Zip Codes #####-####
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.USZipCodeValidator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.USZipCodeValidator.GetMessage(System.String)">
            <summary>
            Get the error message for invalid input
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Forms.Validation.Validator`1">
            <summary>
            Base validator class
            </summary>
        </member>
        <member name="M:Checkbox.Forms.Validation.Validator`1.GetMessage(System.String)">
            <summary>
            Get a language specific validation message.
            </summary>
            <param name="languageCode">Language code</param>
            <returns>Validation message</returns>
        </member>
        <member name="M:Checkbox.Forms.Validation.Validator`1.Validate(`0)">
            <summary>
            Validate the type of input
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Invitations.CompanyProfile">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.CompanyProfile.RequiredProperties">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Invitations.CompanyProfileFacade">
            <summary>
            Manages company profile data.
            
            Currently all the company data being saved into the applicaiton settings, but probably in the future 
            they'll be moved into the ckbx_Text and be language sensitive
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.CompanyProfileFacade.ListCompanyPropertyNames">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Invitations.CompanyProfileFacade.StringCaseInsensitiveComparer">
            <summary>
            Comparer class
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.CompanyProfileFacade.PipeComparer">
            <summary>
            Factory property
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.CompanyProfileFacade.ListProfiles">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.CompanyProfileFacade.GetDefaultCompanyProfileId">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Invitations.InvitationEmailTextValidator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationEmailTextValidator.ValidateInvitationText(System.String,System.Collections.Generic.List{Checkbox.Invitations.CompanyProfile.Property}@,System.Boolean,System.Boolean)">
            <summary>
            Validates invitation text
            </summary>
            <param name="invitationText"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Invitations.UserInvitation">
            <summary>
            UserInvitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.UserInvitation.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:Checkbox.Invitations.UserInvitation.Emails">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:Checkbox.Invitations.UserInvitation.Url">
            <summary>
            Url.
            </summary>
            <value>
            Url.
            </value>
        </member>
        <member name="T:Checkbox.Invitations.InvitationOptOutType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Invitations.Export.CsvDataExporter">
            <summary>
            Survey data exporter that writes results data to a CSV file.
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Export.CsvDataExporter.StartFieldIndex">
            <summary>
            Get/set field index to start with when writing a row of data
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Export.CsvDataExporter.EndFieldIndex">
            <summary>
            Get/set field index to end with when writing a row of data.
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Export.CsvDataExporter.NewLineReplacement">
            <summary>
            Get/set newline replacement character
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Export.CsvDataExporter.ReplaceNewLines">
            <summary>
            Get/set whether to replace newlines
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Export.CsvDataExporter.ChunkSize">
            <summary>
            Get/set chunk size (# line between buffer flushes) for export.
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Export.CsvDataExporter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Export.CsvDataExporter.PopulateFieldNames(System.Boolean)">
            <summary>
            Populate field names.
            </summary>
            <remarks>This override figures out which columns to include when splitting the
            export across files.</remarks>
        </member>
        <member name="M:Checkbox.Invitations.Export.CsvDataExporter.CalculateStartAndEndIndices">
            <summary>
            Calculate indices of first and last fields for writing data.
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Export.CsvDataExporter.WriteExportData(System.IO.TextWriter)">
            <summary>
            Write exported data to the specified text writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Invitations.Export.CsvDataExporter.WriteHeaders(System.IO.TextWriter)">
            <summary>
            Write headers to the writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Invitations.Export.CsvDataExporter.WriteInvitationData(System.IO.TextWriter)">
            <summary>
            Write responses
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Invitations.Export.CsvDataExporter.GetInvitationData(Checkbox.Invitations.Recipient)">
            <summary>
            Get a list of response property values converted to string format.
            </summary>
            <returns>List of property values.</returns>
        </member>
        <member name="M:Checkbox.Invitations.Export.CsvDataExporter.WriteValue(System.String,System.IO.TextWriter)">
            <summary>
            Write a value to the writer with property quote escaping.
            </summary>
            <param name="value"></param>
            <param name="tw"></param>
        </member>
        <member name="T:Checkbox.Invitations.Export.ExportManager">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Export.ExportManager.GetExporter">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Export.ExportManager.WriteCommonExportToFile(System.Int32,System.String,System.String,System.String)">
            <summary>
            Export results to a CSV file
            </summary>
            <param name="invitationId"></param>
            <param name="languageCode"></param>
            <param name="progressKey"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Export.ExportManager.WriteExportToFile(Checkbox.Invitations.Export.InvitationDataExporter,System.String,System.String)">
            <summary>
            Use the passed-in exporter to write data to a file.  This facilitates reusing an exporter, such as
            when splitting files, to prevent multiple loadings of answers, etc.
            </summary>
            <param name="exporter">Exporter to use.</param>
            <param name="outputFilePath"></param>
            <param name="progressKey"></param>
        </member>
        <member name="M:Checkbox.Invitations.Export.ExportManager.WriteExportToTextWriter(Checkbox.Invitations.Export.InvitationDataExporter,System.IO.TextWriter,System.String)">
            <summary>
            Use the passed-in exporter to write data to a text writer.  This facilitates reusing an exporter, such as
            when splitting files, to prevent multiple loadings of answers, etc.
            </summary>
            <param name="exporter">Exporter to use.</param>
            <param name="tw"></param>
            <param name="progressKey"></param>
        </member>
        <member name="M:Checkbox.Invitations.Export.ExportManager.WriteExportToTextWriter(System.IO.TextWriter,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tw"></param>
            <param name="invitationId"></param>
            <param name="languageCode"></param>
            <param name="progressKey"></param>
        </member>
        <member name="T:Checkbox.Invitations.Export.InvitationDataExporter">
            <summary>
            Abstract base class for data exporters (CSV, SPSS CSV, SPSS Native, etc.) for survey
            data.  This base class assumes the use of an analysis to load answer data, generate column
            headers, etc.  In the future this may not be the case and some refactoring will be done as
            necessary.
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.Export.InvitationDataExporter.MAX_COLUMN_COUNT_PER_FILE">
            <summary>
            Max export columns per file when splitting files
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.Export.InvitationDataExporter._invitation">
            <summary>
            Backing field for analysis used by exporter
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.Export.InvitationDataExporter._headers">
            <summary>
            name of export data export
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Export.InvitationDataExporter.ProgressKey">
            <summary>
            Get/set progress key
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Export.InvitationDataExporter.LanguageCode">
            <summary>
            Language code for export
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Export.InvitationDataExporter.AllFieldNames">
            <summary>
            Get/set list of all data field names
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Export.InvitationDataExporter.InvitationId">
            <summary>
            Exporting invtation id
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Export.InvitationDataExporter.ListAllFieldNames">
            <summary>
            List all field names for the item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Invitations.Export.InvitationDataExporter.Invitation">
            <summary>
            Get the analysis used as the basis for the export.
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Export.InvitationDataExporter.Initialize(System.Int32,System.String,System.String)">
            <summary>
            Initialize the exporter class.
            </summary>
            <param name="invitationId"></param>
            <param name="languageCode">Language code to use for quesiton and option texts.</param>
            <param name="progressKey">Key to use for tracking progress when working asynchronously.</param>
            <remarks>When using progress tracking, the export will only set progress to 99%.  It's up to the caller
            to mark the progress as complete.</remarks>
        </member>
        <member name="M:Checkbox.Invitations.Export.InvitationDataExporter.WriteToFile(System.String)">
            <summary>
            Write the export data to the specified file path.
            </summary>
            <param name="filePath">File path to write export to.</param>
        </member>
        <member name="M:Checkbox.Invitations.Export.InvitationDataExporter.WriteToTextWriter(System.IO.TextWriter)">
            <summary>
            Write export to text writer.
            </summary>
            <param name="writer">Text writer to write export data to.</param>
        </member>
        <member name="M:Checkbox.Invitations.Export.InvitationDataExporter.WriteExportData(System.IO.TextWriter)">
            <summary>
            Perform the actual working of writing export data to the specified text
            writer.
            </summary>
            <param name="writer">Text writer to write dtata to.</param>
        </member>
        <member name="M:Checkbox.Invitations.Export.InvitationDataExporter.PopulateFieldNames(System.Boolean)">
            <summary>
            Populate names of fields
            </summary>
            <param name="forceColumnReload">Force reload of column names.</param>
        </member>
        <member name="M:Checkbox.Invitations.Export.InvitationDataExporter.ListAllInvitationFieldNames">
            <summary>
            Get list of all export fields that are included when "Include Detailed
            Response Information" option is used.
            </summary>
            <returns>List of response field names.</returns>
        </member>
        <member name="M:Checkbox.Invitations.Export.InvitationDataExporter.FormatInvitationData(Checkbox.Invitations.Recipient,System.String)">
            <summary>
            Format a specific invitation property field value for the export.
            </summary>
            <param name="recipient"></param>
            <param name="headerValue">Invitation property to format.</param>
            <remarks>Checks for DBNull values and calculates TotalTime field.</remarks>
        </member>
        <member name="T:Checkbox.Invitations.InvitationSchedule">
            <summary>
            Represents an invitation to take a survey.
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationSchedule.InvitationScheduleID">
            <summary>
            Gets or sets the unique database id of the Invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationSchedule.InvitationID">
            <summary>
            Gets or sets the unique database id of the Invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationSchedule.InvitationActivityType">
            <summary>
            Get the user name of the creator
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationSchedule.Scheduled">
            <summary>
            Get the scheduled date
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationSchedule.ProcessingStarted">
            <summary>
            Get the scheduled date
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationSchedule.ProcessingFinished">
            <summary>
            Get the date of actual sending end
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationSchedule.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationSchedule.Creator">
            <summary>
            User name that scheduled this activity
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationSchedule.BatchID">
            <summary>
            Gets or sets the batch ID
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationSchedule.Save(Checkbox.Security.Principal.CheckboxPrincipal,Prezza.Framework.Data.Database)">
            <summary>
            Persists an Invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationSchedule.RecentBatchErrorText">
            <summary>
            Error text of the batch
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationSchedule.BouncedEmails">
            <summary>
            Error text of the batch
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationSchedule.Create(Checkbox.Security.Principal.CheckboxPrincipal,Prezza.Framework.Data.Database)">
            <summary>
            Inserts a new invitation record into the database
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationSchedule.Update(Checkbox.Security.Principal.CheckboxPrincipal,Prezza.Framework.Data.Database)">
            <summary>
            Updates and invitation record in the database
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationSchedule.LoadFromReader(System.Data.IDataReader)">
            <summary>
            Loads instances data from the opened reader
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationSchedule.Delete">
            <summary>
            Removes schedule record permanently
            </summary>
        </member>
        <member name="T:Checkbox.Invitations.Invitation">
            <summary>
            Represents an invitation to take a survey.
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.#ctor">
            <summary>
            Overloaded. Creates a new instance of an Invitation
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.#ctor(System.Int32)">
            <summary>
            Overloaded.  Constructor.
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.CreatedBy">
            <summary>
            Get the user name of the creator
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.Created">
            <summary>
            Get the created date
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.LastSent">
            <summary>
            Get the last sent date
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.InvitationScheduled">
            <summary>
            Get the nearest date of the scheduled delivery
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.ReminderScheduled">
            <summary>
            Get the nearest date of the scheduled delivery
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.SentCount">
            <summary>
            Count of invitations successfully sent
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.FailedCount">
            <summary>
            Count of invitations that failed to be sent
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.SuccessfullySent">
            <summary>
            Status of the last sent invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.ErrorMessage">
            <summary>
            Error message of the last sent invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.ResponseCount">
            <summary>
            Count of surveys responses resulting from this invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.Name">
            <summary>
            Unique name used to identify the invitation in the admin app
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.CompanyProfileId">
            <summary>
            Company profile id
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.GetCompanyProfile">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.AddedPanels">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.Schedule">
            <summary>
            List of the schedule records, sorted by date of sending
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.RemovedPanels">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.SuccessfullySentScheduled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.RecipientDictionary">
            <summary>
            Get a reference to the recipient dictionary
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.RecipientsCount">
            <summary>
            Get number of recipients
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.PanelDictionary">
            <summary>
            Get the panels
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.UsersPanel">
            <summary>
            Get the users panel for the invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.AdHocEmailPanel">
            <summary>
            Get panel for ad hoc email panelits
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.LoadRecipientData(System.Collections.Generic.Dictionary{System.Int64,Checkbox.Invitations.Recipient}@,System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            Populate the recipient data table with information
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.LoadRecipientData(System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="processingBatchId"> </param>
            <param name="recipientsToHandleCount"></param>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.ID">
            <summary>
            Gets or sets the unique database id of the Invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.GUID">
            <summary>
            Gets a Globally Unique Identifier for this Invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.ParentID">
            <summary>
            Gets the ID of the Parent ResponseTemplate
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.Template">
            <summary>
            Gets the <see cref="T:Checkbox.Invitations.InvitationTemplate"/> for this Invitation
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.AddPanel(Checkbox.Panels.Panel)">
            <summary>
            Overloaded. Adds a <see cref="T:Checkbox.Panels.Panel"/> to the Invitation's Panels collection
            </summary>
            <param name="panel">the Panel to add</param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.AddPanel(Checkbox.Users.Group)">
            <summary>
            Overloaded. Adds a <see cref="T:Checkbox.Panels.GroupPanel"/> to the Invitation's Panels collection
            </summary>
            <param name="group">a <see cref="T:Checkbox.Users.Group"/> from which the GroupPanel is constructed</param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.AddPanel(System.Collections.Generic.List{System.Security.Principal.IIdentity})">
            <summary>
            Overloaded. Adds a <see cref="T:Checkbox.Panels.UserPanel"/> to the Invitation's Panels collection or appends the 
            argument to the existing UserPanel
            </summary>
            <param name="identities">a list of IIdentities from which the UserPanel is constructed</param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.AddPanel(System.Collections.Generic.List{Checkbox.Invitations.UserInvitation})">
            <summary>
            Adds the panel.
            </summary>
            <param name="invitations">The invitations.</param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.AddPanel(System.Collections.Generic.List{System.String})">
            <summary>
            Overloaded. Adds an <see cref="T:Checkbox.Panels.AdHocEmailListPanel"/> to the Invitation's Panels collection or appends the 
            argument to the existing AdHocEmailListPanel
            </summary>
            <param name="addresses">a list of string addresses</param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.RemovePanel(System.Int32)">
            <summary>
            Removes a <see cref="T:Checkbox.Panels.Panel"/> from the Invitation's Panels collection
            </summary>
            <param name="panelId"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.RemoveUserPanelists(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove panelists from the invitation
            </summary>
            <param name="userPanelists"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.RemoveGroupPanel(System.Int32)">
            <summary>
            Removes group panel from the Invitation's Panels collection
            </summary>
            <param name="groupId"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.RemoveEmailListPanel(System.Int32)">
            <summary>
            Removes group panel from the Invitation's Panels collection
            </summary>
            <param name="emailListId"> </param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.RemoveEmailPanelists(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove panelists from the invitation
            </summary>
            <param name="emailPanelists"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.RemoveRecipients(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Provide a way to remove users from an invitation's recipients
            </summary>
            <param name="recipients"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.RemoveRecipients(System.Collections.Generic.IEnumerable{System.Security.Principal.IIdentity})">
            <summary>
            Provide a way to remove users from an invitation's recipients
            </summary>
            <param name="recipients"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.RemoveRecipient(System.Int64)">
            <summary>
            Remove the specified recipient
            </summary>
            <param name="recipientID"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.OptOutRecipient(System.Int64)">
            <summary>
            Opt a recipient out of invitations
            </summary>
            <param name="recipientID"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.RemoveRecipients(System.Collections.Generic.List{System.String})">
            <summary>
            Provide a way to remove email addresses from an invitation's recipients
            </summary>
            <param name="emailRecipients"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.GetRecipients(Checkbox.Invitations.RecipientFilter,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.Int64,Checkbox.Invitations.Recipient})">
            <summary>
            Get invitation recipients
            </summary>
            <param name="filter"></param>
            <param name="groupRecipientsByPanel"></param>
            <param name="markOptedOut"> </param>
            <param name="batchSize"> </param>
            <param name="preparedRecipientsData"> </param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.GetRecipientSummary">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.GetRecipients(Checkbox.Invitations.RecipientFilter,System.String,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.Int64,Checkbox.Invitations.Recipient})">
            <summary>
            Gets a DataTable of Recipient data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.MarkBouncedEmails(System.Collections.Generic.List{Checkbox.Invitations.Recipient})">
            <summary>
            Marks recipients as bounced
            </summary>
            <param name="recipientList"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.GetBouncedEmails">
            <summary>
            Returns bounced emails
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.GetPagedRecipientData(Checkbox.Invitations.RecipientFilter,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a paged DataTable of Recipient data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.GetRecipients(System.Collections.Generic.IEnumerable{System.Int64},System.Boolean)">
            <summary>
            Get recipients with the specified recipient ids
            </summary>
            <param name="recipientIDs"></param>
            <param name="markOptedOut"> </param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.GetPendingRecipientsCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.ListPendingRecipients(System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="batchSize"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.GetPendingRecipients(System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Get pending recipients
            </summary>
            <param name="groupRecipientsByPanel">For recipients from user group/email list panels, don't list all
            recipients, just add a placeholder for user/group.</param>
            <param name="batchSize"> </param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.ListPendingActiveDirectoryRecipients(System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="batchSize"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.CreateRecipient(Checkbox.Panels.Panelist,System.Int32,System.Int32,System.String)">
            <summary>
            Factory method to create the appropriate Recipient from a given Panelist
            </summary>
            <remarks>
            When plugin is supported, this method will need to make the associations
            </remarks>
            <param name="panelist"></param>
            <param name="panelID"></param>
            <param name="panelTypeId"></param>
            <param name="panelTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.CreateRecipient(System.Int32,System.Int32,System.String)">
            <summary>
            Factory method to create the appropriate Recipient from a given Panelist
            </summary>
            <remarks>
            When plugin is supported, this method will need to make the associations
            </remarks>
            <param name="panelID"></param>
            <param name="panelTypeId"></param>
            <param name="panelTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.SetRecipientProperties(Checkbox.Invitations.Recipient,System.Int32,System.Int32,System.String)">
            <summary>
            Set the properties of the recipient
            </summary>
            <param name="r"></param>
            <param name="panelID"></param>
            <param name="panelTypeId"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.Load(Prezza.Framework.Data.Database)">
            <summary>
            Loads the data for an Invitation
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.ListPanelIds">
            <summary>
             
            </summary>
            <returns>panel id, panel type id dictionary</returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.LoadSchedule">
            <summary>
            Loads schedule data
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.DeleteScheduleItem(System.Int32)">
            <summary>
            Remove schedule record from the invitation and deleted it from the database
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.AddScheduleItem(Checkbox.Invitations.InvitationSchedule)">
            <summary>
            
            </summary>
            <param name="scheduleItem"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.Save(Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Persists an Invitation
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.Create(Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Inserts a new invitation record into the database
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.Update(Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Updates and invitation record in the database
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.SavePanels(Checkbox.Security.Principal.CheckboxPrincipal,Prezza.Framework.Data.Database,System.Data.IDbTransaction)">
            <summary>
            Save panel and recipient data
            </summary>
            <param name="principal"></param>
            <param name="db"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.SaveRecipient(Checkbox.Invitations.Recipient,Prezza.Framework.Data.Database,System.Data.IDbTransaction)">
            <summary>
            Persist updated to recipients Deleted or OptOut status to the database
            </summary>
            <param name="recipient"></param>
            <param name="db"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.AddPanelMapping(System.Int32,Prezza.Framework.Data.Database,System.Data.IDbTransaction)">
            <summary>
            Add a mapping between the invitation and a panel
            </summary>
            <param name="panelId"></param>
            <param name="db"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.RemovePanelMapping(System.Int32,Prezza.Framework.Data.Database,System.Data.IDbTransaction)">
            <summary>
            Remove a mapping between the invitation and a panel
            </summary>
            <param name="panelId"></param>
            <param name="db"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.ListAvailableUsers(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext,System.String)">
            <summary>
            Get a list of uniqueidentifiers for all users that can be added to the invitation.  This is a list of users with access to the survey and
            not already on invitation.
            </summary>
            <param name="callingPrincipal"></param>
            <param name="paginationContext"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.ListAvailablePageItemUserData(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext,System.String)">
            <summary>
            Get a list of uniqueidentifiers for all users that can be added to the invitation.  This is a list of users with access to the survey and
            not already on invitation.
            </summary>
            <param name="callingPrincipal"></param>
            <param name="paginationContext"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.ListAvailableGroups(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext)">
            <summary>
            </summary>
            <param name="principal"></param>
            <param name="paginationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.ListAvailableEmailLists(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext)">
            <summary>
            </summary>
            <param name="principal"></param>
            <param name="paginationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.RecordResponse(System.Int64,System.Int64)">
            <summary>
            Record a response to an invitation
            </summary>
            <param name="recipientID"></param>
            <param name="responseID"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.GetProcessedRecipientsCount(System.Int64)">
            <summary>
            Gets number of processed recipients count
            </summary>
            <param name="processingBatchId"> </param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.MarkRecipientsResponded(System.Int64[])">
            <summary>
            
            </summary>
            <param name="recipientIds"></param>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.Test(System.String,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Sends a test email
            </summary>
            <param name="email"></param>
            <param name="creator"></param>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.InvitationLocked">
            <summary>
            Lock invitation properties or not. 
            
            Depends on the current date and nearest scheduled date
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.ReminderLocked">
            <summary>
            Lock invitation properties or not. 
            
            Depends on the current date and nearest scheduled date
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.NextInitationDispatchInMinutes">
            <summary>
            Shows next dispatch time in minutes
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Invitation.NextReminderDispatchInMinutes">
            <summary>
            Shows next dispatch time in minutes
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Invitation.CheckForEmptyReminder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Invitations.LoginOption">
            <summary>
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.LoginOption.None">
            <summary>
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.LoginOption.Auto">
            <summary>
            </summary>
        </member>
        <member name="T:Checkbox.Invitations.RecipientFilter">
            <summary>
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.RecipientFilter.All">
            <summary>
            All Recipients
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.RecipientFilter.Current">
            <summary>
            All current recipients
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.RecipientFilter.Responded">
            <summary>
            All Recipients with HasResponded = true
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.RecipientFilter.NotResponded">
            <summary>
            All Recipients with HasResponded = false
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.RecipientFilter.Selected">
            <summary>
            All Recipients passed as argument
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.RecipientFilter.Pending">
            <summary>
            All recipients pending invitations
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.RecipientFilter.OptOut">
            <summary>
            Recipients that have opted out
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.RecipientFilter.Deleted">
            <summary>
            Recipients that have been deleted
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.RecipientFilter.Bounced">
            <summary>
            Recipients which emals have been bounced
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.RecipientFilter.PendingUngrouped">
            <summary>
            All recipients pending invitations always ungrouped
            </summary>
        </member>
        <member name="T:Checkbox.Invitations.InvitationManager">
            <summary>
            Handles factory methods associated with Retrieving and Deleting Invitations
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.InvitationManager.SURVEY_URL_PLACEHOLDER">
            <summary>
            Default placeholder for substituting the customized URL on a per-invitee basis.
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.InvitationManager.OPT_OUT_URL_PLACEHOLDER">
            <summary>
            Default placeholder for substituting the customized URL on a per-invitee basis.
            </summary>
        </member>
        <member name="F:Checkbox.Invitations.InvitationManager.CUSTOM_INVITATION_LINK_PREFIX">
            <summary>
            The custom invitation link prefix
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetInvitation(System.Int32)">
            <summary>
            Gets a loaded instance of an Invitation object
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.CreateInvitationForSurvey(Checkbox.Forms.LightweightResponseTemplate,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Create an invitation for a survey and initialize it with default invitation text.
            </summary>
            <param name="surveyId"></param>
            <param name="messageFormat"></param>
            <param name="creatorPrincipal"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.PopulateInvitationWithDefaults(Checkbox.Messaging.Email.MailFormat,Checkbox.Forms.LightweightResponseTemplate,Checkbox.Invitations.Invitation)">
            <summary>
            Sets all the fields for the invitation by default
            </summary>
            <param name="messageFormat"></param>
            <param name="lightweightRt"></param>
            <param name="newInvitation"></param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetInvitationForRecipient(System.Guid)">
            <summary>
            Get the invitation for a recipient
            </summary>
            <param name="recipientGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetUserInvitationForRecipient(System.Guid)">
            <summary>
            Get the user invitation for a recipient
            </summary>
            <param name="recipientGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetInvitationForRecipient(System.String)">
            <summary>
            Get the invitation for a recipient by partial guid string.  If multple matches are found,
            only the first match is returned.
            </summary>
            <param name="partialRecipientGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetInvitationForRecipient(System.Int64)">
            <summary>
            Get the invitation for a recipient
            </summary>
            <param name="recipientID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetInvitationIdForRecipient(System.Int64)">
            <summary>
            Get the invitation for a recipient
            </summary>
            <param name="recipientID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetRecipientUniqueIdentifier(System.Guid)">
            <summary>
            Based on the provided guid, get the user name of a recipient.  If the recipient is not a registered user,
            a null value is returned.
            </summary>
            <param name="recipientGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetRecipientEmailAddress(System.Guid)">
            <summary>
            Based on the provided guid, get the email address a recipient.  
            </summary>
            <param name="recipientGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.OptOutRecipient(Checkbox.Invitations.Recipient,System.Nullable{System.Int32},Checkbox.Invitations.InvitationOptOutType,System.String)">
            <summary>
            Inserts a new opt out rule into database
            </summary>
            <param name="recipient"> </param>
            <param name="responseTemplateId"> </param>
            <param name="optOutType"> </param>
            <param name="comment"> </param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.OptOutRecipient(System.String,System.Nullable{System.Int32},Checkbox.Invitations.InvitationOptOutType,System.String,System.Int32)">
            <summary>
            Inserts a new opt out rule into database
            </summary>
            <param name="email"> </param>
            <param name="responseTemplateId"> </param>
            <param name="optOutType"> </param>
            <param name="comment"> </param>
            <param name="invitationId"> </param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetOptedOutEmailsBySurveyId(System.Int32)">
            <summary>
            Inserts a new opt out rule into database
            </summary>
            <param name="responseTemplateId"> </param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetOptedOutEmailsDataBySurveyId(System.Int32,System.String,System.Int32)">
            <summary>
            Inserts a new opt out rule into database
            </summary>
            <param name="responseTemplateId"> </param>
            <param name="email"> </param>
            <param name="invitationId"> </param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetDataIfUserHasOptedOutFromCurrentAccount(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetResponseTemplateGuidForInvitation(System.Guid)">
            <summary>
            Get a guid for an invitation recipient.  If no matching response template is found for the guid,
            null is returned.
            </summary>
            <param name="recipientGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetResponseTemplateGuidForUsersInvitation(System.Guid)">
            <summary>
            Get a guid for an invitation recipient.  If no matching response template is found for the guid,
            null is returned.
            </summary>
            <param name="recipientGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetOptedOutSurveyListByEmail(System.String)">
            <summary>
            
            </summary>
            <param name="emailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetRecipientGuid(System.Int64)">
            <summary>
            Given a recipient's numeric db id, get the corresponding guid.  If the recipient has been
            deleted, or the id can't be found, not value will be returned.
            </summary>
            <param name="recipientId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetRecipientByGuid(System.Guid)">
            <summary>
            Get the recipient by given GUID
            </summary>
            <param name="recipientGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetRecipientId(System.Guid)">
            <summary>
            Given a recipient's numeric db id, get the corresponding guid.  If the recipient has been
            deleted, or the id can't be found, not value will be returned.
            </summary>
            <param name="recipientGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetRecipientResponseCount(System.Guid)">
            <summary>
            Count the number of times a recipient has responded to an invitation
            </summary>
            <param name="recipientGuid">Recipient guid.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.DeleteInvitation(Checkbox.Invitations.Invitation)">
            <summary>
            Deletes a databound Invitation from the database
            </summary>
            <param name="invitation"><see cref="T:Checkbox.Invitations.Invitation"/></param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.DeleteInvitation(System.Int32)">
            <summary>
            Delete the invitation with the specified id
            </summary>
            <param name="invitationID"></param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.ListInvitationIDsForSurvey(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.Int32,Checkbox.Pagination.PaginationContext)">
            <summary>
            Returns a list of Invitation IDs available to a specified principal
            </summary>
            <param name="principal"></param>
            <param name="paginationContext"></param>
            <param name="responseTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.ListUsersInvitationForSurvey(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.Int32,Checkbox.Pagination.PaginationContext)">
            <summary>
            Returns a list of users available to a specified principal
            </summary>
            <param name="principal"></param>
            <param name="paginationContext"></param>
            <param name="responseTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.ListInvitationDetailsForSurvey(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.Int32,Checkbox.Pagination.PaginationContext)">
            <summary>
            Returns a table of Invitation details available to a specified principal
            </summary>
            <param name="principal"></param>
            <param name="responseTemplateId"></param>
            <param name="paginationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.ListLightWeightInvitationDetailsForSurvey(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.Int32,Checkbox.Pagination.PaginationContext)">
            <summary>
            
            </summary>
            <param name="principal"></param>
            <param name="responseTemplateId"></param>
            <param name="paginationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.UpdateInvitationSentDate(System.Int32)">
            <summary>
            Sets an invitations last sent field to the current date
            </summary>
            <param name="invitationId">The invitations unique id.</param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.ResetProcessingBatchForRecipients(System.Int32)">
            <summary>
            Reset 'ProcessingBatchId' column to NULL in ckbx_InvitationRecipients for requested invitation
            </summary>
            <param name="sheduleId">The invitations unique id.</param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.OptOutRecipient(System.Int64)">
            <summary>
            Opts a recipient out of an invitation.
            </summary>
            <param name="recipientId">The unique id of the invitation sent to a particular recipient.</param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.OptOutRecipient(System.Guid)">
            <summary>
            Opts a recipient out of an invitation.
            </summary>
            <param name="recipientGuid">The guid of the invitation sent to a particular recipient.</param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.CreateInvitationEmailBatch(System.Int32,Checkbox.Invitations.InvitationActivityType,System.Int32,System.String,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Create a new email batch for an invitation.
            </summary>
            <param name="invitationId"></param>
            <param name="invitationMode"></param>
            <param name="recipientCount"></param>
            <param name="createdBy"></param>
            <param name="earliestSendDate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.CloseInvitationEmailBatch(System.Int64)">
            <summary>
            Mark an email batch as ready to send.
            </summary>
            <param name="batchId"></param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.DeleteInvitationEmailBatch(System.Int64)">
            <summary>
            Delete invitation email batch from the invitations/batches mapping.  This method DOES NOT
            remove associated messages.
            </summary>
            <param name="batchId"></param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.SetSuccessfulSentStatusForRecipients(System.Int32)">
            <summary>
            Set successful status for all non-opted out recipients for given invitation
            </summary>
            <param name="invitationID"></param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.DeleteAllInvitationEmailBatches(System.Int32)">
            <summary>
            Delete all batches from the invitations/messages mapping.  This method DOES NOT
            remove associated messages.
            </summary>
            <param name="invitationId"></param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.ListRecipientQueueMessages(System.Int64)">
            <summary>
            Get a list of queue message ids for a given recipient.
            </summary>
            <param name="recipientId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.RemoveRecipientMessagesFromEmailQueue(System.Int64,System.Data.IDbTransaction)">
            <summary>
            Delete any queued invitation messages for a recipient.  Does not check if current email provider supports batches, so
            this check should be made by any calling code.
            </summary>
            <param name="transaction"></param>
            <param name="recipientId"></param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.ListInvitationBatchIds(System.Int32)">
            <summary>
            Get a list of batch ids associated with an invitation
            </summary>
            <param name="invitationId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetInvitationCountForSurvey(Checkbox.Security.Principal.CheckboxPrincipal,System.Int32)">
            <summary>
            Returns invitation count for the specified response template
            </summary>
            <param name="currentPrincipal"></param>
            <param name="responseTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetInvitationCountForSurveyByType(Checkbox.Security.Principal.CheckboxPrincipal,System.Int32,System.Boolean)">
            <summary>
            Returns invitation count for the specified response template
            </summary>
            <param name="currentPrincipal"></param>
            <param name="responseTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.ListAccessibleInvitationIds(Checkbox.Security.Principal.CheckboxPrincipal,Checkbox.Pagination.PaginationContext)">
            <summary>
            List all invitations specified user has access to
            </summary>
            <param name="userPrincipal"></param>
            <param name="paginationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.CopyInvitation(System.Int32,System.String,System.Boolean,System.Boolean,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Copy invitation
            </summary>
            <param name="InvitationId">Base invitation ID</param>
            <param name="Name">Invitation Name</param>
            <param name="useDefaultText">Use default texts</param>
            <param name="copyRecipients">Copy recipients</param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetInvitationIDForAuthenticatedRespondent(System.String,System.Int32)">
            <summary>
            Returns invitation recipient GUID by 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetInvitationIDForAuthenticatedRespondent(System.String,System.Guid)">
            <summary>
            Returns invitation recipient GUID by 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetInvitationIDForAuthenticatedRespondentByResponseGuid(System.String,System.Guid)">
            <summary>
            Returns invitation recipient GUID by 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.ListInvitations(Checkbox.Security.Principal.CheckboxPrincipal,Checkbox.Pagination.PaginationContext,System.Int32@)">
            <summary>
            Returns all available invitations filtered by one or all fields
            </summary>
            <param name="userPrincipal"></param>
            <param name="context"></param>
            <param name="totalCount"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetLightweightInvitation(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetInvitationData(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetScheduleByInvitationId(System.Int32)">
            <summary>
            Get schedule if invitation by its id
            </summary>
            <param name="invitationId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetRecipientsCount(System.Int32)">
            <summary>
            Get number of recipients by invitation ID
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationManager.GetRelatedInvitationBatchId(System.Int32)">
            <summary>
            Get related invitation batch ID
            </summary>
        </member>
        <member name="T:Checkbox.Invitations.InvitationPipeMediator">
            <summary>
            Pipe mediator for invitations
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationPipeMediator.Initialize(Checkbox.Invitations.Invitation,Checkbox.Invitations.Recipient,System.Collections.Generic.List{System.String},System.String,System.Nullable{System.Guid})">
            <summary>
            Initialize
            </summary>
            <param name="invitation"></param>
            <param name="recipient"></param>
            <param name="customUserFieldNames"></param>
            <param name="baseSurveyUrl"></param>
        </member>
        <member name="P:Checkbox.Invitations.InvitationPipeMediator.CustomUserFieldNames">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationPipeMediator.ProcessTokens(System.Collections.ObjectModel.ReadOnlyCollection{Checkbox.Forms.Piping.PipeMediator.TokenValue},System.Boolean)">
            <summary>
            Override token processing
            </summary>
            <param name="tokenValues"></param>
            <param name="removeEmpty"></param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationPipeMediator.RegisterText(System.String,System.String)">
            <summary>
            Override text processing
            </summary>
            <param name="key"></param>
            <param name="text"></param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationPipeMediator.GetText(System.String)">
            <summary>
            Get custom text
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationPipeMediator.GetRecipientSurveyUrl">
            <summary>
            Get a custom survey url for the recipient
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationPipeMediator.GetBaseSurveyUrl(System.Int32)">
            <summary>
            
            </summary>
            <param name="surveyGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationPipeMediator.GetBaseSurveyUrl(System.Nullable{System.Guid})">
            <summary>
            Get base url for surveys
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationPipeMediator.GetOptOutUrl(System.Boolean)">
            <summary>
            Get base url for surveys
            </summary>
        </member>
        <member name="T:Checkbox.Invitations.InvitationSender">
            <summary>
            Sends an invitation using the Email Gateway
            
            Contains cross-context logic to handle the postponed sending
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationSender.RequestBatchMessages(System.Int32,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="scheduleID"></param>
            <param name="batchSize"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Checkbox.Invitations.InvitationSender.MessageSentDelegate">
            <summary>
            Type for the callback for message sending notification
            </summary>
            <param name="r"></param>
            <param name="number"></param>
            <param name="count"></param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationSender.HandleRecipients(Checkbox.Invitations.Invitation,Checkbox.Invitations.InvitationSchedule,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="invitation"></param>
            <param name="scheduleRecord"></param>
            <param name="recipientsToHandleCount"></param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationSender.Send(Checkbox.Invitations.Invitation,Checkbox.Invitations.InvitationSchedule,Checkbox.Invitations.InvitationSender.MessageSentDelegate,System.String,System.Nullable{System.Int32})">
            <summary>
            Sends a scheduled invitation
            </summary>
            <param name="invitation"></param>
            <param name="scheduleRecord"></param>
            <param name="sentCallback"></param>
            <param name="context"> </param>
            <param name="batchSize"> </param>
        </member>
        <member name="M:Checkbox.Invitations.InvitationSender.UpdateBatchStatus(System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="scheduleID"></param>
            <param name="Status"></param>
            <param name="ErrorText"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Checkbox.Invitations.InvitationSender.EnsureMessagingServiceCredentialsInitialized">
            <summary>
            Checks and initializes the user name and the password for the messaging service
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationSender.GetRecipients(Checkbox.Invitations.Invitation,Checkbox.Invitations.InvitationActivityType,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.Int64,Checkbox.Invitations.Recipient})">
            <summary>
            Returns recipient list by the sending mode
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationSender.CreateEmailMessage(Checkbox.Invitations.Recipient,Checkbox.Invitations.InvitationTemplate,Checkbox.Invitations.InvitationActivityType)">
            <summary>
            Creates an EmailMessage for sending to a Recipient
            </summary>
            <param name="recipient"></param>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationSender.FixRelativeUrls(System.String)">
            <summary>
            
            </summary>
            <param name="messageBody"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationSender.FixIssueWithOutlook(System.String)">
            <summary>
            
            </summary>
            <param name="messageBody"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Invitations.InvitationTemplate">
            <summary>
            Template for invitations
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationTemplate.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationTemplate.Subject">
            <summary>
            Gets or sets the email subject for the Invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationTemplate.Body">
            <summary>
            Gets or sets the email body for the Invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationTemplate.ReminderSubject">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationTemplate.ReminderBody">
            <summary>
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationTemplate.IncludeOptOutLink">
            <summary>
            Get/set whether the invitation should include an opt-out link
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationTemplate.OptOutText">
            <summary>
            Get/set the opt out text
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationTemplate.OptOutURL">
            <summary>
            Get the opt out URL
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationTemplate.FromAddress">
            <summary>
            Gets or sets the email From Address for the Invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationTemplate.FromName">
            <summary>
            Gets or sets the email From Name for the Invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationTemplate.Format">
            <summary>
            Gets or sets the <see cref="T:Checkbox.Messaging.Email.MailFormat"/> for the Invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationTemplate.LinkText">
            <summary>
            Gets or sets the text of the Form url as it will appear in the body of the email
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.InvitationTemplate.LoginOption">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.InvitationTemplate.Copy">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.InvitationTemplate.UpdateReminder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Invitations.Recipient">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Recipient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Recipient.#ctor(Checkbox.Panels.Panelist)">
            <summary>
            Constructor
            </summary>
            <param name="panelist"></param>
        </member>
        <member name="M:Checkbox.Invitations.Recipient.#ctor(System.Data.IDataReader)">
            <summary>
            Initialize a recipient with properties from a data reader
            </summary>
            <param name="recipientDataReader"></param>
        </member>
        <member name="M:Checkbox.Invitations.Recipient.LoadFromDataRow(System.Data.IDataReader)">
            <summary>
            Load recipient data from the data reader
            </summary>
            <param name="recipientDataReader"></param>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.PropertyCache">
            <summary>
            Get property value cache for recipients without associated panelists 
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Recipient.GetRecipientProfileProperty(System.String,System.String)">
            <summary>
            Get profile property for invitation recipient. Unless override, assumes
            identifier refers to a user unique identifier.
            </summary>
            <param name="recipientIdentifier"></param>
            <param name="propertyKey"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.Item(System.String)">
            <summary>
            Accessor for getting panelist information
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.Panelist">
            <summary>
            Panelist
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.UniqueIdentifier">
            <summary>
            Unique identifier of user (if any) associated with recipient
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.ID">
            <summary>
            Gets or sets the unique identifier 
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.InvitationID">
            <summary>
            Gets or sets the ID of the Invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.PanelID">
            <summary>
            Gets or sets the ID of the Panel
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.GUID">
            <summary>
            Gets or sets a unique Guid
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.OptedOutType">
            <summary>
            Gets or sets a unique Guid
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.EmailToAddress">
            <summary>
            Gets or sets an email address
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.EmailList">
            <summary>
            All emails for one recipient
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.HasResponded">
            <summary>
            Gets or sets whether this Recipient has responded to an email invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.LastSent">
            <summary>
            Gets or sets the date this Recipient was last sent an invitation
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.NumberOfMessagesSent">
            <summary>
            Get/set number of messages sent to recipient
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.BatchMessageId">
            <summary>
            Get/set id of last batch message sent for this recipient.
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.ProcessingBatchId">
            <summary>
            Get/set id of batch which is processing this recipient.
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.PanelTypeId">
            <summary>
            Type of panel recipient is associated with
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.PanelTypeName">
            <summary>
            Type name of panel recipient is associated with
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.Deleted">
            <summary>
            Get/set whether recipient has been deleted
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.OptedOut">
            <summary>
            Get/set whether recipient opted out
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.Bounced">
            <summary>
            Get/set whether email have been bounced
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.Modified">
            <summary>
            Internal flag used by invitation to mark recipients as modified.
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.SuccessfullySent">
            <summary>
            Gets or sets whether the last Invitation was successfully sent to this Recipient
            </summary>
        </member>
        <member name="P:Checkbox.Invitations.Recipient.Error">
            <summary>
            Gets or sets any error message associated with a failed send
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Recipient.Save">
            <summary>
            Persists a record of this Recipient
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Recipient.Create">
            <summary>
            Creates a record in the ckbx_InvitationRecipients table for the Recipient
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Recipient.Update">
            <summary>
            Updates the database record for an existing Recipient
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Recipient.InsertRecipient">
            <summary>
            Add an invitation recipient to the database.
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.Recipient.PersonalizeTemplate(Checkbox.Invitations.Invitation,Checkbox.Invitations.InvitationTemplate,System.Collections.Generic.List{System.String},System.String,System.Nullable{System.Guid})">
            <summary>
            Personalizes the text content for an <see cref="T:Checkbox.Invitations.InvitationTemplate"/>, parsing any tokens
            </summary>
            <param name="template">the InvitationTemplate to personalize</param>
            <param name="invitation">Invitation</param>
            <param name="customUserFieldNames"></param>
            <param name="baseSurveyUrl"></param>
        </member>
        <member name="M:Checkbox.Invitations.Recipient.ComputeHashKey">
            <summary>
            Compute a hash key for internal use by invitation code to compare pending recipients with sent (persisted)
            recipients.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Invitations.Recipient.GetPipeMeditor">
            <summary>
            Get a pipe meditor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Invitations.UserPanelistRecipient">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.UserPanelistRecipient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Invitations.UserPanelistRecipient.#ctor(Checkbox.Panels.Panelist)">
            <summary>
            Constructor
            </summary>
            <param name="panelist"></param>
        </member>
        <member name="M:Checkbox.Invitations.UserPanelistRecipient.InsertRecipient">
            <summary>
            Insert recipient
            </summary>
        </member>
        <member name="T:Checkbox.Management.JwtLogin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.JwtLogin.CurrentPrincipal">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.Static.AutocompleteRemoteSourceLimit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.AutocompleteRemoteSourceLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.AutocompleteRemoteSourceLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.Static.AutocompleteRemoteSourceLimit.LimitName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.Static.AutocompleteRemoteSourceLimit.ValueColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.Static.JavascriptItemLimit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.JavascriptItemLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.JavascriptItemLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.Static.JavascriptItemLimit.LimitName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.Static.JavascriptItemLimit.ValueColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.Static.LibraryLimit">
            <summary>
            Controls whether or not MLS can be enabled.
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.LibraryLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.LibraryLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.LibraryLimit.Validate(System.String@)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.Static.InvitationLimit">
            <summary>
            Controls whether or not the invitation manager is enabled.
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.InvitationLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.InvitationLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.Static.MandatoryCheckboxFooterLimit">
            <summary>
            Controls whether or not the "powered by Checkbox®" footer appears in all surveys 
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.MandatoryCheckboxFooterLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.MandatoryCheckboxFooterLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.Static.MandatoryCheckboxFooterLimit.LimitName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.Static.MandatoryCheckboxFooterLimit.ValidIfLimitNull">
            <summary>
            Override this property. If there is no information in the DB - don't use mandatory checkbox footer
            </summary>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.Static.RatingScaleStatisticsReportItemLimit">
            <summary>
            Controls whether ratingScaleStatisticsReportItem can be added to report
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.RatingScaleStatisticsReportItemLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.RatingScaleStatisticsReportItemLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.Static.RatingScaleStatisticsReportItemLimit.LimitName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.Static.ScoredSurveyLimit">
            <summary>
            Controls whether "Scored Survey" is available when editing survey properties.
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.ScoredSurveyLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.ScoredSurveyLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.Static.ScoredSurveyLimit.LimitName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.Static.SimpleSecurityLimit">
            <summary>
            Controls whether or not the system should use simple security.
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.SimpleSecurityLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.SimpleSecurityLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.Static.SimpleSecurityLimit.ValidIfLimitNull">
            <summary>
            Override this property. If there is no information in the DB - don't use simple security.
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.Static.SimpleSecurityLimit.RuntimeLimitValue">
            <summary>
            Get the currently in-effect limit value.  This is useful is certain
            limits need to override the license-specified limit such as when limit
            value should be stored in the database, etc.
            </summary>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.Static.TrialLimit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.TrialLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.TrialLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.Static.MultiLanguageLimit">
            <summary>
            Controls whether or not MLS can be enabled.
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.MultiLanguageLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.MultiLanguageLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.Static.MultiLanguageLimit.ValueColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.Static.NetworkUserLimit">
            <summary>
            Controls whether or not user can authenticate against active directory.
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.NetworkUserLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.NetworkUserLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.Static.NetworkUserLimit.LimitName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.Static.SpssLimit">
            <summary>
            Controls whether or not the native Spss export is enabled.
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.SpssLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.Static.SpssLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.VersionLimit">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.VersionMaxLimit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.VersionMaxLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.VersionMaxLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.VersionMinLimit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.VersionMinLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.VersionMinLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.DecrementLicenseLimit`1">
            <summary>
            Base class to validate decrement limits.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.DecrementLicenseLimit`1.Initialize(Checkbox.LicenseLibrary.CheckboxLicenseData)">
            <summary>
            
            </summary>
            <param name="license"></param>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.DecrementLicenseLimit`1.CurrentValue">
            <summary>
            Get current value
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.DecrementLicenseLimit`1.BaseValue">
            <summary>
            Get base value
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.DecrementLicenseLimit`1.RuntimeLimitValue">
            <summary>
             Get the currently in-effect limit value.
            </summary>
            <remarks>Override RuntimeLimitValue because this information is stored only in the DB.</remarks>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.DecrementLicenseLimit`1.GetCurrentValue">
            <summary>
            Get the current value of decrement limit
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.DecrementLicenseLimit`1.GetBaseValue">
            <summary>
            Get the base value of decrement limit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.DecrementLicenseLimit`1.Decrement">
            <summary>
            Decrement current value.
            </summary>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.EmailLimit">
            <summary>
            Controls how namy emails are available to send.
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.EmailLimit.ProtectedValidate(System.String@)">
            <summary>
            Validate the limit
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.EmailLimit.GetCurrentValue">
            <summary>
            Get the current value of the decrement limit
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.EmailLimit.GetBaseValue">
            <summary>
            Get the base value of a decrement limit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.EmailLimit.Decrement">
            <summary>
            Decrement the current value
            </summary>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.StaticLicenseLimit">
            <summary>
            Limit access based on a boolean on/off value.
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.StaticLicenseLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.StaticLicenseLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.StaticLicenseLimit.LicenseFileLimitValue">
            <summary>
            Get the value of the limit as stored in the license file.
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.StaticLicenseLimit.LimitValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.StaticLicenseLimit.Initialize(Checkbox.LicenseLibrary.CheckboxLicenseData)">
            <summary>
            
            </summary>
            <param name="license"></param>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.StaticLicenseLimit.ProtectedValidate(System.String@)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.LicenseLimit">
            <summary>
            Abstract base class for license limits
            </summary>
        </member>
        <member name="F:Checkbox.Management.Licensing.Limits.LicenseLimit.LimitTypesByName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.LicenseLimit.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.LicenseLimit.LimitTypeName">
            <summary>
            Get the limit type name
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.LicenseLimit.GetLimit(System.String)">
            <summary>
            Get Limit type by name
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.LicenseLimit.Create(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.LicenseLimit.Initialize(Checkbox.LicenseLibrary.CheckboxLicenseData)">
            <summary>
            Initialize the limit.
            </summary>
            <param name="license">License to initialize the limit with.</param>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.LicenseLimit.LimitName">
            <summary>
            Get the limit name
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.LicenseLimit.LimitValue">
            <summary>
            Get the limit value as string
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.LicenseLimit.Validate(System.String@)">
            <summary>
            Validate the limit and set a string description of the error.
            </summary>
            <param name="messageTextId">TextID of the error message to display.</param>
            <returns>Boolean indicating if the limit is valid.</returns>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.NumericLicenseLimit">
            <summary>
            Simple class to validate numeric licensing limits in the application
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.NumericLicenseLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.NumericLicenseLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.NumericLicenseLimit.LicenseFileLimitValue">
            <summary>
            Get the value of the limit as stored in the license file.
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.NumericLicenseLimit.LimitValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.NumericLicenseLimit.CurrentCount">
            <summary>
            Get the current count of limited entities
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.NumericLicenseLimit.GetCurrentCount">
            <summary>
            Overridable method to get the current count of limited entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.NumericLicenseLimit.Initialize(Checkbox.LicenseLibrary.CheckboxLicenseData)">
            <summary>
            Initialize the limit from the license
            </summary>
            <param name="license"></param>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.RolePermissionLimit">
            <summary>
            Limit of number of users in roles with a specified permission
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.RolePermissionLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.RolePermissionLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.RolePermissionLimit.PermissionNames">
            <summary>
            Get the permission to limit
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.RolePermissionLimit.BuildPermissionsString(System.Boolean)">
            <summary>
            Aggregates the permissions into string
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.RolePermissionLimit.ProtectedValidate(System.String@)">
            <summary>
            Validate the limit
            </summary>
            <param name="message">Message to display.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.RolePermissionLimit.GetCurrentCount">
            <summary>
            Get the current count of limited entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.RolePermissionLimit.GetCurrentUsersInRole">
            <summary>
            Get the current list of unique identifiers in limited role
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.RolePermissionLimit.GetIdentitiesWithRolePermission">
            <summary>
            Get the list of identities with the specified role permission
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.RolePermissionLimit.GetIdentitiesWithRolePermissionCount">
            <summary>
            Get the number of identities with the specified role permission
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.SurveyEditorLimit">
            <summary>
            Limit on number of survey editor users
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.SurveyEditorLimit.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.SurveyEditorLimit.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="limitValue"></param>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.SurveyEditorLimit.LimitName">
            <summary>
            Get the name of the limit.
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.SurveyEditorLimit.PermissionNames">
            <summary>
            Get the name of the permission to check
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.SurveyEditorLimit.UsersInRolePermissionLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.SurveyEditorLimit.ValueColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Management.Licensing.Limits.ValueLimit`1">
            <summary>
            Limit based on values.
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.ValueLimit`1.LicenseFileLimitValue">
            <summary>
            Value of the limit as stored in the license file.
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.ValueLimit`1.RuntimeLimitValue">
            <summary>
            Get the currently in-effect limit value.  This is useful is certain
            limits need to override the license-specified limit such as when limit
            value should be stored in the database, etc.
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.ValueLimit`1.ValidIfLimitNull">
            <summary>
            Get a boolean indicating if the limit is valid when no limit value is
            found in the application license.  By default, this value is true.
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.ValueLimit`1.Validate(System.String@)">
            <summary>
            Validate the limit against application data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.ValueLimit`1.ProtectedValidate(System.String@)">
            <summary>
            Overridable validation method
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Management.Licensing.Limits.ValueLimit`1.ValueColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.Limits.ValueLimit`1.GetLimitValueFromMasterDb``1(System.String)">
            <summary>
            Get a limit value from the database.
            </summary>
            <typeparam name="V"></typeparam>
            <param name="limitName"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Management.Licensing.CheckboxLicense">
            <summary>
            Primary class for the Checkbox Licensing framework.
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.CheckboxLicense.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.CheckboxLicense.#ctor(Checkbox.Management.Licensing.Limits.LicenseLimit[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.CheckboxLicense.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.CheckboxLicense.LicenseKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.CheckboxLicense.IsTrial">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.CheckboxLicense.IsValid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.CheckboxLicense.ValidationError">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.CheckboxLicense.LicenseId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.CheckboxLicense.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.CheckboxLicense.SurveyEditorLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.CheckboxLicense.MandatoryCheckboxFooterLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.CheckboxLicense.RatingScaleStatisticsReportItemLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.CheckboxLicense.ScoredSurveyLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.CheckboxLicense.SimpleSecurityLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.CheckboxLicense.SpssLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.CheckboxLicense.MultiLanguageLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.CheckboxLicense.LibraryLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.CheckboxLicense.EmailLimit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.CheckboxLicense.TimeStampString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.CheckboxLicense.AddLimitsFromHostingDB">
            <summary>
            Add limits from hosting DB
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.CheckboxLicense.AddLimitFromHostingDB(System.String)">
            <summary>
            Add limit from hosting DB.
            </summary>
            <param name="limitName"></param>
        </member>
        <member name="M:Checkbox.Management.Licensing.CheckboxLicense.ReadFromFile(System.String)">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Checkbox.Management.Licensing.CheckboxLicense.WriteToXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Management.Licensing.CheckboxLicense.ReadFromXml(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Checkbox.Management.Licensing.CheckboxLicense.ToString(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.CheckboxLicense.Save(System.String)">
            <summary>
            Write this license to XML file
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="T:Checkbox.Management.Licensing.CheckboxLicenseException">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.CheckboxLicenseException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Checkbox.Management.Licensing.CheckboxLicenseProvider">
            <summary>
            Handles resolution of license and issues valid licenses at runtime and design time 
            to the LicenseManager.Validate method.
            </summary>
        </member>
        <member name="F:Checkbox.Management.Licensing.CheckboxLicenseProvider.Path">
            <summary>
            Local path where to look license file for
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.CheckboxLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="allowExceptions"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.CheckboxLicenseProvider.GetLicense">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.CheckboxLicenseProvider.CreateLicense">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Management.Licensing.LicenseValidator">
            <summary>
            Class for validating licenses and extracting limits from the license.
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.LicenseValidator.#ctor(Checkbox.Management.Licensing.CheckboxLicense)">
            <summary>
            Attempt to validate the license on creation.  For now, accept license as a parameter until all app pages
            transition to new hierarchy, then license will be managed entirely in this class
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.LicenseValidator.ValidateLicense">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.LicenseValidator.checkLicenseExpiration">
            <summary>
            Checkes whether the license is expired
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.Licensing.LicenseValidator.getCheckboxInstallationDate">
            <summary>
            Reads installed date for the product
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Management.Licensing.LicenseValidator.IsLicenseValid">
            <summary>
            Get whether the license is valid
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.LicenseValidator.IsLicenseExpired">
            <summary>
            Get whether the license is expired
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.LicenseValidator.LicenseError">
            <summary>
            Get the license error in the case of an invalid license
            </summary>
        </member>
        <member name="P:Checkbox.Management.Licensing.LicenseValidator.ActiveLicense">
            <summary>
            Get the active license
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.LicenseValidator.GetLicenseValue(System.String)">
            <summary>
            Get a value from a license
            </summary>
            <param name="valueName"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Management.Licensing.LicenseValidator.IsTrial">
            <summary>
            Get whether the active license is a trial license.
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.LicenseValidator.Dispose">
            <summary>
            Dispose the item
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.LicenseValidator.Dispose(System.Boolean)">
            <summary>
            Do the actual work of disposing
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Checkbox.Management.Licensing.NullLicense">
            <summary>
            Placeholder for a null license, which indicates a valid checkbox license was not found. Placeholder
            is required so that a more useful error than the typical .NET licensing error can be shown.
            </summary>
        </member>
        <member name="M:Checkbox.Management.Licensing.NullLicense.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="validationError"></param>
        </member>
        <member name="T:Checkbox.Management.ProfilePropertiesUpdater">
            <summary>
            Updates profile properties and user email
            </summary>
        </member>
        <member name="M:Checkbox.Management.ProfilePropertiesUpdater.UpdateUserProfileData(System.String,System.String,System.String)">
            <summary>
            Updates profile properties and user email
            </summary>
            <param name="oldPropertyValue"></param>
            <param name="newPropertyValue"></param>
            <param name="propertyKey"></param>
            <param name="userName"></param>
        </member>
        <member name="M:Checkbox.Management.ProfilePropertiesUpdater.GetConnectedProfileFieldName(System.Int32)">
            <summary>
            Gets the name of the connected profile field.
            </summary>
            <param name="itemId">The item identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.ProfilePropertiesUpdater.GetConnectedProfileFieldValue(System.Int32,System.String)">
            <summary>
            Gets the name of the connected profile field.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="userName">Name of the user.</param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Management.UserContext">
            <summary>
            Container for storing context associated with a user login
            </summary>
        </member>
        <member name="M:Checkbox.Management.UserContext.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="userHostName">Users host name.</param>
            <param name="userHostIp">Users host IP.</param>
            <param name="userAgent">User Agent.</param>
        </member>
        <member name="P:Checkbox.Management.UserContext.UserHostName">
            <summary>
            Get the user's host name.
            </summary>
        </member>
        <member name="P:Checkbox.Management.UserContext.UserHostIp">
            <summary>
            Get the user's host IP
            </summary>
        </member>
        <member name="P:Checkbox.Management.UserContext.UserAgent">
            <summary>
            Get the users's browser agent.
            </summary>
        </member>
        <member name="P:Checkbox.Management.UserContext.LoginTime">
            <summary>
            Get the time the user logged-in
            </summary>
        </member>
        <member name="P:Checkbox.Management.UserContext.CurrentUrl">
            <summary>
            Get/Set the user's current URL
            </summary>
        </member>
        <member name="T:Checkbox.Management.ApplicationManager">
            <summary>
            Handles operations relating to the writing and retrieval of application-wide settings
            </summary>
        </member>
        <member name="M:Checkbox.Management.ApplicationManager.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.ApplicationManager.FlushSettingsCache">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Management.ApplicationManager.SetApplicationDataContextProvider(Prezza.Framework.Data.IDataContextProvider)">
            <summary>
            Initialize the application manager with a data context provider
            </summary>
            <param name="dataContextProvider"></param>
        </member>
        <member name="P:Checkbox.Management.ApplicationManager.IsDataContextTrial">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Management.ApplicationManager.IsDataContextActive">
            <summary>
            Get a boolean indicating if the data context is "active"
            </summary>
        </member>
        <member name="P:Checkbox.Management.ApplicationManager.ServersTimeZone">
            <summary>
            Get Server's time zone
            </summary>
        </member>
        <member name="P:Checkbox.Management.ApplicationManager.UseSimpleSecurity">
            <summary>
            Get/set whether to use Simple Security or not
            </summary>
        </member>
        <member name="P:Checkbox.Management.ApplicationManager.ApplicationPath">
            <summary>
            Get a concatentated version of application url + application root
            </summary>
        </member>
        <member name="P:Checkbox.Management.ApplicationManager.ApplicationURL">
            <summary>
            Gets and sets the URL of Application
            </summary>
        </member>
        <member name="P:Checkbox.Management.ApplicationManager.ApplicationHost">
            <summary>
            Gets the application host.
            </summary>
            <value>
            The application host.
            </value>
        </member>
        <member name="P:Checkbox.Management.ApplicationManager.ApplicationRoot">
            <summary>
            Gets and sets the ApplicationRoot property
            </summary>
        </member>
        <member name="P:Checkbox.Management.ApplicationManager.ApplicationDataContext">
            <summary>
            Get the current application data context.
            </summary>
        </member>
        <member name="P:Checkbox.Management.ApplicationManager.AppSettings">
            <summary>
            Gets the <see cref="P:Checkbox.Management.ApplicationManager.AppSettings"/> for this application
            </summary>
        </member>
        <member name="P:Checkbox.Management.ApplicationManager.CacheAppSettings">
            <summary>
            Get boolean indicating if app settings should be cached
            </summary>
        </member>
        <member name="M:Checkbox.Management.ApplicationManager.AddNewAppSetting(System.String,System.String)">
            <summary>
            Overloaded. Creates a new key/value pairing in the appsettings of the web.config file for this application
            </summary>
            <param name="key">the name of the key</param>
            <param name="property">the value of the key</param>
        </member>
        <member name="M:Checkbox.Management.ApplicationManager.UpdateAppSetting(System.String,System.String)">
            <summary>
            Overloaded. Updates a setting in the web.config file for a given key
            </summary>
            <param name="key">the key to update</param>
            <param name="property">the new value</param>
        </member>
        <member name="M:Checkbox.Management.ApplicationManager.UpdateAppSetting(System.String,System.String,System.String)">
            <summary>
            Overloaded. Updates a setting in the web.config file for a given key
            </summary>
            <param name="key">the key to update</param>
            <param name="property">the new value</param>
            <param name="path">the path of the web.config file</param>
        </member>
        <member name="M:Checkbox.Management.ApplicationManager.GetAppSetting(System.String)">
            <summary>
            Get the specified application setting
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.ApplicationManager.GetSettingsCacheKey(System.String)">
            <summary>
            Get the cache key for a setting
            </summary>
            <param name="settingName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.ApplicationManager.GetPageId(System.String)">
            <summary>
            Get id of application page from its path
            </summary>
            <param name="pagePath"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Management.AppSettings">
            <summary>
            Contains the Property accessors for all application-wide settings
            </summary>
        </member>
        <member name="M:Checkbox.Management.AppSettings.GetValue``1(System.String,``0)">
            <summary>
            Get a setting value
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="settingName">Name of the setting</param>
            <param name="defaultValue">Default value of the setting</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.AppSettings.SetValue``1(System.String,``0)">
            <summary>
            Set the setting value
            </summary>
            <typeparam name="T">Setting Type</typeparam>
            <param name="settingName">Name of the setting</param>
            <param name="settingValue">Value for the setting</param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Management.AppSettings.UseReportingService">
            <summary>
            Get/set whether to enable single installation and multi-database operation.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.WebFarm">
            <summary>
            Specify whether running in web farm or not.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.EnableMultiDatabase">
            <summary>
            Get whether to enable single installation and multi-database operation.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.EnvironmentName">
            <summary>
            Get environment name to place it to footer
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.EnableSslOffloading">
            <summary>
            Get whether to enable ssl offloading.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.InstallSuccess">
            <summary>
            Get/set whether to enable single installation and multi-database operation.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ShowReportItemPreviewWatermark">
            <summary>
            Get/set whether to show the preview watermark for report item previews.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.MaxReportPreviewOptions">
            <summary>
            Get/set maximum number of options per item to include in report previews
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.WorkflowInstanceUnloadTime">
            <summary>
            Length of time a response workflow may be idle before it
            is unloaded.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.PreventWorkflowLocking">
            <summary>
            Length of time a response workflow may be idle before it
            is unloaded.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ResponseDataExportChunkSize">
            <summary>
            Get/set the number of lines to export at a time before flushing
            the Response output buffer when exporting response data.  Note that 
            ASP.NET may cause flushing earlier, so this is technically the
            MAX number of lines to write before flushing.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ViewReportTicketDuration">
            <summary>
            Get/set the duration (in minutes) of the login ticket created when a
            respondent completes a survey and is redirected to particular report
            or the view response page.
            The ticket is used to grant access to the report, regardless of the
            reports security settings.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SetSurveyDefaultButton">
            <summary>
            Get/set whether to set the default button on a survey.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.EnableOptOutScreen">
            <summary>
            Get/set whether to show invitation opt out functionality
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.OptOutScreenGreetingsText">
            <summary>
            Get/set "greetings" text which could be shown to the user on opt out screen
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.OptOutScreenUserReasonsText">
            <summary>
            Get/set "user's reasons" text which could be shown to the user on opt out screen
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.OptOutScreenThankYouText">
            <summary>
            Get/set "thank you" text which could be shown to the user on opt out screen
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.IncludeIncompleteResponsesToTotalAmount">
            <summary>
            Get/set whether to set the default button on a survey.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SmtpPassword">
            <summary>
            Get/set the password for smtp email authentication
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SmtpUserName">
            <summary>
            Get/set the username to use for Smtp authentication
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.EnableSmtpAuthentication">
            <summary>
            Get/set whether the connection to the STMP server uses authentication or not
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SmtpPort">
            <summary>
            Get/set the SMTP port for the mail server
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.EnableSmtpSsl">
            <summary>
            Get/set whether to use SSL for smtp connections
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.MessagingServiceUserName">
            <summary>
            Get/set user name for Messaging Service
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.MessagingServicePassword">
            <summary>
            Get/set password for Messaging Service
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowSurveyUrlRewriting">
            <summary>
            Get/set whether survey URL rewriting is enabled
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowEditSelf">
            <summary>
            Get/set whether users are allowed to edit their own information by clicking on the Welcome: UserName link.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.EnableUploadItem">
            <summary>
            Gets or sets a flag indicating if upload items can be used
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowJavascriptItem">
            <summary>
            Indicates if Javascript item is allowed by license.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowAutocompleteRemoteSource">
            <summary>
            Indicates if autocomplete remote source is allowed by license.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.EnableJavascriptItem">
            <summary>
            Gets or sets a flag indicating if javascript items can be used
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.RestrictUploadFileExport">
            <summary>
            Gets or sets a flag indicating that exporting file uploads should be restricted to
            only users in the System Administrator role.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CacheResponseTemplates">
            <summary>
            Get/set whether response templates should be cached to enhance
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.IsInvitationTextEnabled">
            <summary>
            Get/set whether to limit maximum email message line length
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.LimitEmailMessageLineLength">
            <summary>
            Get/set whether to limit maximum email message line length
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.MaxEmailMessageLineLength">
            <summary>
            Get set the maximum length for email message lines
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.MSSMode">
            <summary>
            Get set the messaging service mode
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.MaxIdentityInClauseSize">
            <summary>
            Get the upper bound for constructing identity query "in" clauses
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ShowDeleteConfirmationPopups">
            <summary>
            Get/set whether to show javascript confirmation popups when deleting pages or items
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.PipePrefix">
            <summary>
            Get/set the prefix for pipes
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.TermPrefix">
            <summary>
            Get/set the prefix for pipes
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ShowNavWhenNotAuthenticated">
            <summary>
            Gets and sets whether to show the left hand navigation menu to users who have not been authenticated
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DisplayAvailableSurveyList">
            <summary>
            Get/set whether to display the list of publicly available surveys
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DisplayAvailableReportList">
            <summary>
            Get/set whether to display the list of publicly available reports
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ReportIncompleteResponses">
            <summary>
            Get/set whether to include incomplete responses in reporting
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ReportTestResponses">
            <summary>
            Get/set whether to include test responses in reporting
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.LogErrorsToUI">
            <summary>
            Get/set whether to log error information to the UI when an unhandled error occurs
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.LogStackTraceToUI">
            <summary>
            Get/sets whether to log stack trace information to the UI when an unhandled error occurs
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.LogServerParamsToUI">
            <summary>
            Get/sets whether server variables are logged to the UI when an unhandled error occurs
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ImageUploadPreviewPath">
            <summary>
            Get/set the preview path for uploaded images
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ImageUploadPreviewUrl">
            <summary>
            Get/set the preview url for upload images
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.HeaderLogo">
            <summary>
            Gets and sets the path to the image used in the header logo of the application
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CompanySignatureEnabled">
            <summary>
            Gets or sets a value indicating whether [company signature enabled].
            </summary>
            <value>
            <c>true</c> if [company signature enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CompanySignatureImageUrl">
            <summary>
            Gets and sets the path to the image used in the header logo of the application
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultEditView">
            <summary>
            Gets and sets the default view when editing a Form (All Pages, Single Page)
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ShowPreviewInAnalysis">
            <summary>
            Get/set whether to show preview graphs in the analysis editor
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.UseHTMLEditor">
            <summary>
            Get/set whether to use the enhanced HTML editor
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.PreventSessionReuse">
            <summary>
            Prevent session id reuse
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DisplayHtmlItemsAsPlainText">
            <summary>
            Get/set whether or not HTML is displayed as plain text
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultQuestionEditorView">
            <summary>
            Get/set whether to use HTML editor by default.
            </summary>
            <remarks>Valid values are "HTML" or "TEXT"</remarks>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultOptionEntryType">
            <summary>
            Gets and sets the default entry type for adding item options
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.MessageThrottle">
            <summary>
            Gets and sets the number of email invitations to send at once
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.MessageThrottleDelay">
            <summary>
            Get/set the wait time between batches of emails
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.TimeZone">
            <summary>
            Get/set clients time zone for current application. It is used to show proper time stamp values
            for users.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.IsTimeZoneSet">
            <summary>
            Determine if time zone for the system is set or not.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.StoreImagesInDatabase">
            <summary>
            Get/set whether to store uploaded images in the database
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowResponseTemplateIDLookup">
            <summary>
            Get/set whether surveys can be accessed by database ID in addition to by GUID
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.PreventAdminAutoLogin">
            <summary>
            Get/set whether prevent Admin auto login
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.RedirectHTTPtoHTTPS">
            <summary>
            Get/set whether redirect http requests to https
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SimpleSecurity">
            <summary>
            Get/set whether security mode is simple
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.StoreSessionKeyInHttpSesssion">
            <summary>
            Get/set whether survey session key can be stored in HTTP session as a backup
            to view state.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.LogNetworkUser">
            <summary>
            Gets and sets whether to log the network user name of users responding to anonymous surveys
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.LogIpAddresses">
            <summary>
            Gets and sets whether to log the respondent's ip addresses
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.UseEncryption">
            <summary>
            Gets and sets whether to encrypt user passwords
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.UseDatePicker">
            <summary>
            Gets and sets whether to use the javascript datepicker in the application.  Used to limit incompatibility
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.EmailEnabled">
            <summary>
            Gets and sets whether email is enabled for this application
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.EmailSurveyResumeUrlEnabled">
            <summary>
            Gets and sets whether respondent's are able to email the survey resume url to themselves
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.EmailTestModeEnabled">
            <summary>
            Gets and sets whether email is in test mode or not. When in test mode no emails are sent.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.EmailTestModeSleepTime">
            <summary>
            Gets and sets the amount of time that the thread sleeps when EmailTestModeEnabled is enabled.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowPublicRegistration">
            <summary>
            Gets and sets whether to allow public registration of Users
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowPasswordReset">
            <summary>
            Gets and sets whether to allow Checkbox Users are allowed to reset their passwords
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultLoginUsername">
            <summary>
            Gets the default username for pre-populating the login fields
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultLoginPassword">
            <summary>
            Gets the default password for pre-populating the login fields
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.GroupCacheSize">
            <summary>
            Get/set size of group cache.  Value should be relatively small since the
            cache is designed to be used in places where iteration occurs.
            </summary>
            <remarks>Default value is 20 groups.</remarks>
        </member>
        <member name="P:Checkbox.Management.AppSettings.NTAuthentication">
            <summary>
            Gets and sets whether to activate NT domain authentication of Users
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.NTAuthenticationVariableName">
            <summary>
            Gets and sets the name of the server variable used to store information about NT authenticated users.
            </summary> 
        </member>
        <member name="P:Checkbox.Management.AppSettings.RequireRegisteredUsers">
            <summary>
            Gets and sets whether network users should be automatically logged-in without attempting
            to authenticate them via the application's configured authentication provider.
            </summary>
            <remarks>This setting has no effect if NTAuthentication is set to false.</remarks>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ActiveDirectoryNamingContext">
            <summary>
            Gets and sets the Naming Context used to access Active Directory.
            </summary>
            <example>DC=prezzatech,DC=com</example>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultRolesForUnAuthenticatedNetworkUsers">
            <summary>
            Get/set the default roles to apply to network users that are authenticated but do not exist in the ultimate survey identity store
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CookieName">
            <summary>
            Gets and sets the name of the cookie used by the application
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultEmailFromName">
            <summary>
            Gets and sets the default from name when creating email invitations
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowHTMLNames">
            <summary>
            Gets or sets a flag indicating whether HTML is allowed in folder, survey, and report names
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultStyleTemplate">
            <summary>
            Gets the default style template for new Forms
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultStyleTemplateTablet">
            <summary>
            Gets the default style template for new Forms
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultStyleTemplateSmartPhone">
            <summary>
            Gets the default style template for new Forms
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultChartStyle">
            <summary>
            Get/set the default chart style template for new reports
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultSurveySecurityType">
            <summary>
            Gets or sets the default survey security type
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultReportSecurityType">
            <summary>
            Gets or sets the default report security type
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultTotalResponseLimit">
            <summary>
            Gets or sets the default total response limit per survey. -1 = no limit
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultUserResponseLimit">
            <summary>
            Gets or sets the default per-user response limit per survey. -1 = no limit
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultAllowResumeResponse">
            <summary>
            Gets or sets the default value of the allow resume property for a new survey
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultAllowEditResponse">
            <summary>
            Gets or sets the default value of the allow edit property for a new survey
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowEditSurveyStyleTemplate">
            <summary>
            Gets or sets a flag indicating if the survey's style template may be changed
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowEditActiveSurvey">
            <summary>
            Gets or sets a flag indicating if the survey may be changed while active
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SavePartialResponsesOnBackNavigation">
            <summary>
            Gets or sets a flag indicating if partial responses should be saved when a respondent navigates 
            backward in a survey
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultEmailInvitationSubject">
            <summary>
            Gets the default email subject used for email invitations
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultEmailInvitationBody">
            <summary>
            Gets the default email body used for email invitations
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SessionTimeOut">
            <summary>
            Gets and sets the session timeout length for the application
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SmtpServer">
            <summary>
            Gets and sets the SMTP server used by the application to send email
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.EnableEmailAddressValidation">
            <summary>
            Determines if email address' are analyzed for valid composition.
            When enabled email addresses must adhere to the format specified in RFC 822 and 5321
            When disabled no validation of the address format is performed.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.EmailAddressOptionalCharacters">
            <summary>
            A comma separated list of valid but uncommon characters that are allowed in the local part of an email address.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SystemEmailAddress">
            <summary>
            Gets and sets the email address used by the system when sending emails
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.UploadedImagesUrl">
            <summary>
            Gets and sets the uploaded images URL
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.UploadedImagesFolder">
            <summary>
            Gets and sets the uploaded images folder
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.HeaderTypeChosen">
            <summary>
            Gets and sets the Type of header used by the application (HTML or Logo/Image)
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SessionMode">
            <summary>
            Gets and sets the session mode (cookies or session)
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ConcurrentLoginMode">
            <summary>
            Gets and sets whether to prevent the same user id from logging in more than once at a time
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.HeaderFontSize">
            <summary>
            Gets and sets the header font size
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.HeaderFont">
            <summary>
            Gets and sets the font used in the header
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.HeaderTextColor">
            <summary>
            Gets and sets the font color used in the header
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CenterMenuTextColor">
            <summary>
            Gets and sets the center menu font color
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultSingleLineTextWidth">
            <summary>
            Gets and sets the default width for SingleLineText items.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultAlias">
            <summary>
            Whether or not to use aliases in reports by default
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.PagingResultsPerPage">
            <summary>
            Gets and sets the results per page used in paging
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowDeviceAutoRegister">
            <summary>
            Gets and sets the results per page used in paging
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.RequireEmailAddressOnRegistration">
            <summary>
            Gets and sets whether to require an email address during User registration
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.RequireTermsofUseAgreement">
            <summary>
            Gets and sets whether to require Terms of Use agreement on user login
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultUserRoles">
            <summary>
            Gets and sets the default roles for User registration
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultSingleLineText">
            <summary>
            Gets and sets the default analysis item to use for open-ended single-line text items
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultMultiLineText">
            <summary>
            Gets and sets the default analysis item to use for open-ended multi-line text items
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultCheckboxes">
            <summary>
            Gets and sets the default analysis item to use for checkbox items
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultRadioButtons">
            <summary>
            Gets and sets the default analysis item to use for radio button items
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultSlider">
            <summary>
            Gets and sets the default analysis item to use for slider item
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultNetPromoterScore">
            <summary>
            Gets and sets the default analysis item to use for net promoter score item
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultRankOrder">
            <summary>
            Gets and sets the default analysis item to use for rank order item
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultRadioButtonScale">
            <summary>
            Gets and sets the default analysis item to use for rating items
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultDropDownList">
            <summary>
            Gets and sets the default analysis item to use for drop down list items
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultMatrix">
            <summary>
            Gets and sets the default analysis item to use for matrix items
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultMaxOptions">
            <summary>
            Gets and sets the default maximum number of options a SelectItemData may have before using a Summary Table in a report 
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultHiddenItems">
            <summary>
            Gets and sets the default analysis item to use for hidden items
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultUseAliases">
            <summary>
            Gets and sets the default setting for using aliases in autogenerated reports
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDisplayStatistics">
            <summary>
            Gets and sets the default setting for displaying dataistics tables for the charts in autogenerated reports
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDisplayAnswers">
            <summary>
            Gets and sets the default setting for displaying dataistics tables for the charts in autogenerated reports
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultIncludeIncompleteResponses">
            <summary>
            Gets and sets the default setting for including incomplete responses in autogenerated reports
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultMultiplePages">
            <summary>
            Gets and sets the default for whether to use the survey paging scheme when autogenerating a report
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DisplaySurveyTitle">
            <summary>
            Gets and sets the default for whether to display the survey title when autogenerating a report
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DisplayPdfExportButton">
            <summary>
            Gets and sets the default for whether to display the pdf-export button when autogenerating a report
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultItemPosition">
            <summary>
            Gets and sets the default item position for the Autogenerate Report Wizard
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AutogenReportDefaultPieLabelStyle">
            <summary>
            Gets and sets the default label style for pie/doughnut charts
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ResponseDetailsDisplayIncompleteResponses">
            <summary>
            Determines if incomplete responses are displayed by default when viewing
            the response details page. When this option is disabled a user can toggle
            the display of incomplete on the page if they would like to see them.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ResponseDetailsResultsPerPage">
            <summary>
            The default number of responses to display when viewing the response details page.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ResponseDisplayDetails">
            <summary>
            Determines if detailed response information is displayed when viewing the response details.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ResponseDisplayUserDetails">
            <summary>
            Determines if user information is displayed when viewing the response details.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ResponseDisplayQuestionNumbers">
            <summary>
            Determines if question numbers are displayed when viewing the response details.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ResponseDisplayUnansweredQuestions">
            <summary>
            Determines if unanswered questions are displayed when viewing the response details.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ResponseDisplayRankOrderPoints">
            <summary>
            Shows Rank OrderPoint near each option
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultExportType">
            <summary>
            Get/set the default export type for exported survey results.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultExportEncoding">
            <summary>
            Get/set the default file encoding for exported survey results.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CsvExportIncludeResponseDetails">
            <summary>
            Get/Set the default value for the "Export incomplete responses" response export option.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CsvExportIncludeUserDetails">
            <summary>
            Get/Set the default value for the "Detailed user info" response export option.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CsvExportMergeCheckboxResults">
            <summary>
            Get/Set the default value for the "Merge checkbox results" response export option.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CsvExportIncludeOpenendedResults">
            <summary>
            Get/Set the default value for the "Export open ended results" response export option.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CsvExportUseAliases">
            <summary>
            Get/Set the default value for the "Export with aliases" response export option.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CsvExportIncludeHiddenItems">
            <summary>
            Get/Set the default value for the "Export hidden items" response export option.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CsvExportIncludeIncompleteResponses">
            <summary>
            Get/Set the default value for the "Export incomplete responses" response export option.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CsvExportSplitExport">
            <summary>
            Get/Set the default value for the "Split export" response export option.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CsvExportStripHtmlTagsFromAnswers">
            <summary>
            Get/set html tags cut from answers in csv export of a response
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CsvExportRankOrderPoints">
            <summary>
            Get/set rank order export mode
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CsvExportIncludeDetailedScoreInfo">
            <summary>
            Get/set where the detailed score info should be included into the file
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CsvExportIncludePossibleScore">
            <summary>
            Get/set where the possible score should be included into the file
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ExportIncludeTestResponses">
            <summary>
            Get/set where the test responses should be included into the file
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SpssExportIncludeResponseId">
            <summary>
            Get/Set the default value for the "Include response id in export" response SPSS export option.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SpssExportIncludeIncompleteResponses">
            <summary>
            Get/Set the default value for the "Export incomplete responses" response SPSS export option.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SpssExportIncludeOpenendedResults">
            <summary>
            Get/Set the default value for the "Export open ended results" response SPSS export option.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.LimitDebugMode">
            <summary>
            Get whether license limit debug mode is enabled.  When enabled, all license limits will have a limit value of 1
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DisplayProductTour">
            <summary>
            Determines if product tour messages should be displayed.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ReplaceNewLine">
            <summary>
            Determines if the new line character should be removed from exported responses.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.NewLineReplacement">
            <summary>
            The value used to replace new line characters when exporting responses.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.KeepAlive">
            <summary>
            The maximum consecutive number of times an idle client connection is 
            kept alive before a client is disconnected. A value of zero disables 
            the keep alive functionality.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowExclusionaryAclEntries">
            <summary>
            Controls whether or not authorization queries check for access control list 
            entries which revoke a user/groups rights.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.UseS3ForUploadedFiles">
            <summary>
            Return a value indicating whether file uploads should be sent to an S3 Bucket
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.S3AccessKeyID">
            <summary>
            Return the Amazon S3 Access Key ID
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.S3SecretAccessKey">
            <summary>
            Return the Amazon S3 Secret Access Key
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.S3BucketName">
            <summary>
            Name of S3 Bucket to use to store files
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.UseS3ForTempFiles">
            <summary>
            Get/set whether to use S3 repository for temporary export files
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.S3TempBucketName">
            <summary>
            Get/set whether to use S3 repository for temporary export files
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.TimelineRequestExpiration">
            <summary>
            Get/set the seconds count after which Timeline request is considered as expired
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.TimelineRecordsPerPage">
            <summary>
            Get/set the seconds count after which Timeline request is considered as expired
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.ShowCreatedBy">
            <summary>
             Show created by for folders
             </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SearchAccessibleObjectExpPeriodSeconds">
            <summary>
            Get/set the seconds count after which available objects in the cache will be expired
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SearchResultsExpPeriodSeconds">
            <summary>
            Get/set the seconds count after which search results in the cache will be expired
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SearchPageSize">
            <summary>
            Get/set the records count of each object type to be displayed on a quick search div
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SearchMaxResultRecordsPerObjectType">
            <summary>
            Get/set the records count of each object type to be collect in the cache
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SearchCachePeriodDays">
            <summary>
            Get/set the days count after that all cached results must be deleted
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CacheVolatileDataInApplication">
            <summary>
            Gets and sets the ApplicationRoot directory
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CacheAppSettings">
            <summary>
            Get whether to cache app settings
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CacheRolePermissions">
            <summary>
            Get whether to cache app settings
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.MailDbConnectionString">
            <summary>
            Connection string to the email relay database
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CacheIdentityRoles">
            <summary>
            Get whether to cache app settings
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CacheUserNonProfileProperties">
            <summary>
            Get whether to cache user non profile properties
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DefaultConnectionString">
            <summary>
            Gets and sets the database connection string used by the application
            </summary>
            <remarks>Present only because it is required for backwards compatibility.</remarks>
        </member>
        <member name="P:Checkbox.Management.AppSettings.LanguageDebugMode">
            <summary>
            Get whether language debug mode is enabled.  When enabled, the text manager will return the textID of the string if no matching
            text is found.  Otherwise it will return null.  Value is configured through settings in web.config.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SimpleSecurityDebugMode">
            <summary>
            Get whether simple security debug mode is enabled.  When enabled, simple security will be turned on regardless
            of end-user's license setting.  Value is configured through settings in web.config.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.MinPercentOfAvailableLimit">
            <summary>
            Min percent of Available Limit. If actual percent is less than it, the limit should be highlighted.-->
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowedUrlRewriteExtensions">
            <summary>
            Get the list of allowed extensions for URL Rewriting
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.InvitationLockMinutes">
            <summary>
            The time span that is used for locking scheduled invitation before sending
            
            By default : 5 minutes
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.UserMapColumnNames">
            <summary>
            Gets a collection of reserved property names
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.CustomFields">
            <summary>
            Gets a collection of custom user field names 
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.BufferResponseExport">
            <summary>
            Returns a value indicating whether the application enables / disabled buffering when exporting response data.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.DisableUserListForAD">
            <summary>
            Returns a value indicating whether the application enables / disabled user list preloading.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.PersistViewStateToDb">
            <summary>
            Return a value indicating whether viewstate should be read/written to/from database
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AddressFinderEnabled">
            <summary>
            Return a value indicating whether address finder item is enabled
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AddressFinderScriptKey">
            <summary>
            Get address finder key
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AddressFinderShowCoordinates">
            <summary>
            Tells address finder to show text fields with coordinates
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowHttps">
            <summary>
            Get/set whether https is supported. This feature is only intended to be used with hosted installations.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowInvitations">
            <summary>
            Indicates if the use of invitations is allowed.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowNativeSpssExport">
            <summary>
            Indicates if native spss export is allowed.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowSendEmail">
            <summary>
            Indicates if user can send one email or not.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowMultiLanguage">
            <summary>
            Indicated if MLS is allowed.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowLibraries">
            <summary>
            Indicated if MLS is allowed.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.UseSimpleSecurity">
            <summary>
            Indicates if simpleSecurityMode is enabled.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.IsPrepMode">
            <summary>
            Indicates if simpleSecurityMode is enabled.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.UseMandatoryCheckboxFooter">
            <summary>
            Indicates if Checkbox logo footer should be shown mandatory.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowRatingScaleStatisticsReportItem">
            <summary>
            Indicates if RatingScaleStatistics item is allowed in Report.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowScoredSurveys">
            <summary>
            Indicates if scoredSurveys are allowed.
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.AllowNetworkUsers">
            <summary>
            Indicated if users are allowed to authenticate against active directroy.
            </summary>
        </member>
        <member name="T:Checkbox.Management.AppSettings.SessionType">
            <summary>
            Describes the different Session types available for state management
            </summary>
        </member>
        <member name="F:Checkbox.Management.AppSettings.SessionType.Cookies">
            <summary>
            Stores persistent cookies on the user's browser
            </summary>
        </member>
        <member name="F:Checkbox.Management.AppSettings.SessionType.Cookieless">
            <summary>
            Stores cookies only in the user's browser memory.  These are destroyed when the browser closes
            </summary>
        </member>
        <member name="T:Checkbox.Management.AppSettings.HeaderType">
            <summary>
            Describes the different header types for the admin interface
            </summary>
        </member>
        <member name="F:Checkbox.Management.AppSettings.HeaderType.Logo">
            <summary>
            Uses a graphical logo for the header
            </summary>
        </member>
        <member name="F:Checkbox.Management.AppSettings.HeaderType.Text">
            <summary>
            Uses text for the header
            </summary>
        </member>
        <member name="T:Checkbox.Management.AppSettings.EditSurveyView">
            <summary>
            Describes the different available views when editing a Form
            </summary>
        </member>
        <member name="F:Checkbox.Management.AppSettings.EditSurveyView.AllPages">
            <summary>
            View all pages of a survey on one screen when editing a survey
            </summary>
        </member>
        <member name="F:Checkbox.Management.AppSettings.EditSurveyView.IndividualPages">
            <summary>
            View each page individually when editing a survey
            </summary>
        </member>
        <member name="T:Checkbox.Management.AppSettings.OptionEntryType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Checkbox.Management.AppSettings.OptionEntryType.Normal">
            <summary>
            Normal entry interface for options.
            </summary>
        </member>
        <member name="F:Checkbox.Management.AppSettings.OptionEntryType.QuickEntry">
            <summary>
            Use quick-entry interface
            </summary>
        </member>
        <member name="F:Checkbox.Management.AppSettings.OptionEntryType.XMLImport">
            <summary>
            Use XML import interface
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.MinPasswordLength">
            <summary>
            Minimum length allowed for user passwords. 
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.MinPasswordNonAlphaNumeric">
            <summary>
            Minimum number of non-alphanumeric characters required for a password.  
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.MaxFailedLoginAttempts">
            <summary>
            Maximum number of consecutive failed login attempts allowed for an account until it is “locked”. 
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.EnforcePasswordLimitsGlobally">
            <summary>
            By default, password requirements (if enabled) will only apply to users using Register.aspx 
            to self-register.  When the EnforcePasswordLimitsGlobally setting is turned on, 
            the requirements will also apply to creating and importing users in the User Manager
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.FacebookAppID">
            <summary>
            Facebook Application ID
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SsoProviderOPEndpoint">
            <summary>
            Endpoint for OpenId Support - By default this is Google Authentication
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.SsoProviderOPIdentifier">
            <summary>
            Provider for OpenId Support - By default this is Google Authentication
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.TypeKitGuid">
            <summary>
            Guid for the typekit embed URL 
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.JwtAccessKey">
            <summary>
            Access key for Zendesk SSO
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.FooterEnabled">
            <summary>
            Template for the invitation footer
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.FooterText">
            <summary>
            Template for the invitation footer
            </summary>
        </member>
        <member name="P:Checkbox.Management.AppSettings.InitialFooterText">
            <summary>
            Initial template for the invitation footer
            </summary>
        </member>
        <member name="M:Checkbox.Management.AppSettings.GetCompanyProperty(System.String)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Management.AppSettings.SetCompanyProperty(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Management.AppSettings.GetPdfExportMarginTop">
            <summary>
            Gets the PDF export margin top.
            </summary>
            <value>
            The get PDF export margin top.
            </value>
            <param name="name">The name.</param>
        </member>
        <member name="P:Checkbox.Management.AppSettings.GetPdfExportMarginBottom">
            <summary>
            Gets the get PDF export margin bottom.
            </summary>
            <value>
            The get PDF export margin bottom.
            </value>
        </member>
        <member name="T:Checkbox.Management.ConcurrentLoginMode">
            <summary>
            Support for concurrent logins by same user.
            </summary>
        </member>
        <member name="F:Checkbox.Management.ConcurrentLoginMode.Allowed">
            <summary>
            User can be logged-in multiple times concurrently.
            </summary>
        </member>
        <member name="F:Checkbox.Management.ConcurrentLoginMode.NotAllowed">
            <summary>
            Attempt to login as user already logged in will fail.
            </summary>
        </member>
        <member name="F:Checkbox.Management.ConcurrentLoginMode.LogoutCurrent">
            <summary>
            Attempt to login as user already logged in will result in first user being logged out
            and second user being logged in.
            </summary>
        </member>
        <member name="T:Checkbox.Management.ErrorMessages">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="F:Checkbox.Management.ErrorMessages.NoPermission">
            <summary>
            
            </summary>
        </member>
        <member name="F:Checkbox.Management.ErrorMessages.InvalidSurvey">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Management.UserLoginInfo">
            <summary>
            Simple container class for information about a currently logged-in user.
            </summary>
        </member>
        <member name="M:Checkbox.Management.UserLoginInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="userName">User name of the logged-in user.</param>
            <param name="userHostName">Users host name.</param>
            <param name="userHostIp">Users host IP.</param>
            <param name="userAgent">User Agent.</param>
        </member>
        <member name="P:Checkbox.Management.UserLoginInfo.UserName">
            <summary>
            Get the name of the logged-in user.
            </summary>
        </member>
        <member name="T:Checkbox.PdfExport.PdfExportManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.PdfExport.PdfExportManager.ExportReport(System.Int32,Checkbox.PdfExport.PdfExportSettings)">
            <summary>
            
            </summary>
            <param name="reportId"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.PdfExport.PdfExportManager.ExportReportHtml(System.String,System.Guid,Checkbox.PdfExport.PdfExportSettings)">
            <summary>
            
            </summary>
            <param name="reportId"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.PdfExport.PdfExportManager.ExportSurvey(System.Int32,Checkbox.PdfExport.PdfExportSettings)">
            <summary>
            
            </summary>
            <param name="surveyId"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.PdfExport.PdfExportManager.CommonReportExport(System.IO.Stream,System.Int32,Checkbox.PdfExport.PdfExportSettings)">
            <summary>
            
            </summary>
            <param name="tw"> </param>
            <param name="reportId"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.PdfExport.PdfExportOrientation">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.PdfExport.PdfExportResult">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.PdfExport.PdfExportSettings">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Progress.CacheableProgressProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Progress.CacheableProgressProvider.#ctor">
            <summary>
            Default constructor to initialize the cache
            </summary>
        </member>
        <member name="M:Checkbox.Progress.CacheableProgressProvider.GetCacheItem(System.String)">
            <summary>
            Get cached progress item from cache manager or static dictionary, depending
            on context.
            </summary>
            <param name="progressKey"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Progress.CacheableProgressProvider.AddItemToCache(System.String,Checkbox.Progress.ProgressData)">
            <summary>
            Add item to progress cache
            </summary>
            <param name="progressKey"></param>
            <param name="progressData"></param>
        </member>
        <member name="M:Checkbox.Progress.CacheableProgressProvider.RemoveCacheItem(System.String)">
            <summary>
            Remove item from progress cache
            </summary>
            <param name="progressKey"></param>
        </member>
        <member name="M:Checkbox.Progress.CacheableProgressProvider.GetProgress(System.String)">
            <summary>
            Get progress data associated with the specified key.
            </summary>
            <param name="key">Key representing progress to delete.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Progress.CacheableProgressProvider.ClearProgress(System.String)">
            <summary>
            Clear/delete progress data associated with the specified key.
            </summary>
            <param name="key">Key representing progress data to remove.</param>
        </member>
        <member name="M:Checkbox.Progress.CacheableProgressProvider.SetProgress(System.String,System.String,System.String,Checkbox.Progress.ProgressStatus,System.Int32,System.Int32)">
            <summary>
            Set current progress for the specified progress key
            </summary>
            <param name="key">Key to uniquely identify progress data.</param>
            <param name="message">Progress status message</param>
            <param name="errorMessage">Error message.</param>
            <param name="status">Status of progress.</param>
            <param name="currentItem">Current item number in progress batch.</param>
            <param name="itemCount">Total number of items in progress batch.</param>
        </member>
        <member name="M:Checkbox.Progress.CacheableProgressProvider.SetProgress(System.String,Checkbox.Progress.ProgressData)">
            <summary>
            Set current progress for the specified progress key
            </summary>
            <param name="key">Key to uniquely identify progress data.</param>
            <param name="progressData">Progress data to store</param>
        </member>
        <member name="M:Checkbox.Progress.CacheableProgressProvider.SetProgress(System.String,System.String,System.Int32)">
            <summary>
            Set import progress
            </summary>
            <param name="progressKey"></param>
            <param name="message"></param>
            <param name="currentItem"></param>
        </member>
        <member name="T:Checkbox.Progress.DatabaseProvider.DatabaseProgressProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Progress.DatabaseProvider.DatabaseProgressProvider.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="appContextName"></param>
        </member>
        <member name="M:Checkbox.Progress.DatabaseProvider.DatabaseProgressProvider.GetProgress(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Progress.DatabaseProvider.DatabaseProgressProvider.ClearProgress(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Checkbox.Progress.DatabaseProvider.DatabaseProgressProvider.SetProgress(System.String,System.String,System.String,Checkbox.Progress.ProgressStatus,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="message"></param>
            <param name="errorMessage"></param>
            <param name="status"></param>
            <param name="currentItem"></param>
            <param name="itemCount"></param>
        </member>
        <member name="M:Checkbox.Progress.DatabaseProvider.DatabaseProgressProvider.SetProgress(System.String,Checkbox.Progress.ProgressData)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="progressData"></param>
        </member>
        <member name="M:Checkbox.Progress.DatabaseProvider.DatabaseProgressProvider.SetProgress(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="progressKey"></param>
            <param name="message"></param>
            <param name="currentItem"></param>
        </member>
        <member name="T:Checkbox.Progress.DatabaseProvider.ProgressProvider">
            <summary>
            Support for storing and retrieving progress-related information.
            </summary>
        </member>
        <member name="M:Checkbox.Progress.DatabaseProvider.ProgressProvider.SetProgressCounter(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Set import progress
            </summary>
            <param name="progressKey"></param>
            <param name="baseMessage"></param>
            <param name="currentCounterItem"></param>
            <param name="totalCounterItems"></param>
            <param name="stepMagnitude">Total percentage of process represented by current steps</param>
            <param name="stepCompletePercent">Total percentage complete when current step is done</param>
            <param name="appContexName"> </param>
        </member>
        <member name="M:Checkbox.Progress.DatabaseProvider.ProgressProvider.SetProgress(System.String,System.String,System.Int32,System.String)">
            <summary>
            Set import progress
            </summary>
            <param name="progressKey"></param>
            <param name="message"></param>
            <param name="currentItem"></param>
            <param name="appContexName"> </param>
        </member>
        <member name="M:Checkbox.Progress.DatabaseProvider.ProgressProvider.SetProgress(System.String,Checkbox.Progress.ProgressData,System.String)">
            <summary>
            Set current progress for the specified progress key
            </summary>
            <param name="key">Key to uniquely identify progress data.</param>
            <param name="progressData">Progress data to store</param>
            <param name="appContexName"> </param>
        </member>
        <member name="M:Checkbox.Progress.DatabaseProvider.ProgressProvider.SetProgress(System.String,System.String,System.String,Checkbox.Progress.ProgressStatus,System.Int32,System.Int32,System.String)">
            <summary>
            Set current progress for the specified progress key
            </summary>
            <param name="key">Key to uniquely identify progress data.</param>
            <param name="message">Progress status message</param>
            <param name="errorMessage">Error message.</param>
            <param name="status">Status of progress.</param>
            <param name="currentItem">Current item number in progress batch.</param>
            <param name="itemCount">Total number of items in progress batch.</param>
            <param name="appContexName"> </param>
        </member>
        <member name="M:Checkbox.Progress.DatabaseProvider.ProgressProvider.ClearProgress(System.String,System.String)">
            <summary>
            Clear/delete progress data associated with the specified key.
            </summary>
            <param name="key">Key representing progress data to remove.</param>
            <param name="appContexName"> </param>
        </member>
        <member name="M:Checkbox.Progress.DatabaseProvider.ProgressProvider.GetProgress(System.String,System.String)">
            <summary>
            Get progress data associated with the specified key.
            </summary>
            <param name="key">Key representing progress to delete.</param>
            <param name="appContexName"> </param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Progress.DatabaseProvider.ProgressProvider.GetProvider(System.String)">
            <summary>
            
            </summary>
            <param name="appContext"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Progress.IProgressProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Progress.IProgressProvider.GetProgress(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Progress.IProgressProvider.ClearProgress(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Checkbox.Progress.IProgressProvider.SetProgress(System.String,System.String,System.String,Checkbox.Progress.ProgressStatus,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="message"></param>
            <param name="errorMessage"></param>
            <param name="status"></param>
            <param name="currentItem"></param>
            <param name="itemCount"></param>
        </member>
        <member name="M:Checkbox.Progress.IProgressProvider.SetProgress(System.String,Checkbox.Progress.ProgressData)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="progressData"></param>
        </member>
        <member name="M:Checkbox.Progress.IProgressProvider.SetProgress(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="progressKey"></param>
            <param name="message"></param>
            <param name="currentItem"></param>
        </member>
        <member name="M:Checkbox.Progress.IProgressProvider.SetProgressCounter(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="progressKey"></param>
            <param name="baseMessage"></param>
            <param name="currentCounterItem"></param>
            <param name="totalCounterItems"></param>
            <param name="stepMagnitude"></param>
            <param name="stepCompletePercent"></param>
        </member>
        <member name="T:Checkbox.Progress.ProgressProviderBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Progress.ProgressProviderBase.GetCacheKey(System.String)">
            <summary>
            Get the cache key for progress data.
            </summary>
            <param name="progressKey">Progress key.</param>
            <returns>Cache key.</returns>
        </member>
        <member name="M:Checkbox.Progress.ProgressProviderBase.CalculateProgressItem(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="totalCounterItems"></param>
            <param name="stepCompletePercent"></param>
            <param name="stepMagnitude"></param>
            <param name="currentCounterItem"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Progress.ProgressProviderBase.SetProgressCounter(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="progressKey"></param>
            <param name="baseMessage"></param>
            <param name="currentCounterItem"></param>
            <param name="totalCounterItems"></param>
            <param name="stepMagnitude"></param>
            <param name="stepCompletePercent"></param>
        </member>
        <member name="T:Checkbox.Progress.ProgressData">
            <summary>
            Simple container class for storing progress information.
            </summary>
        </member>
        <member name="P:Checkbox.Progress.ProgressData.Message">
            <summary>
            Message associated with progress or current status
            </summary>
        </member>
        <member name="P:Checkbox.Progress.ProgressData.ErrorMessage">
            <summary>
            Message specific to error status
            </summary>
        </member>
        <member name="P:Checkbox.Progress.ProgressData.Status">
            <summary>
            Get/set status of the operation
            </summary>
        </member>
        <member name="P:Checkbox.Progress.ProgressData.PercentComplete">
            <summary>
            Get/set percentage of current operation completed.
            </summary>
        </member>
        <member name="P:Checkbox.Progress.ProgressData.CurrentItem">
            <summary>
            Get/set the current "item" in the progress
            </summary>
        </member>
        <member name="P:Checkbox.Progress.ProgressData.TotalItemCount">
            <summary>
            Get/set total number of items.
            </summary>
        </member>
        <member name="P:Checkbox.Progress.ProgressData.Result">
            <summary>
            Result of operation.
            </summary>
        </member>
        <member name="P:Checkbox.Progress.ProgressData.AdditionalData">
            <summary>
            Additional data that can be used as result of operation
            </summary>
        </member>
        <member name="T:Checkbox.Progress.ProgressProvider">
            <summary>
            Support for storing and retrieving progress-related information.
            </summary>
        </member>
        <member name="M:Checkbox.Progress.ProgressProvider.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Progress.ProgressProvider.SetProgressCounter(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set import progress
            </summary>
            <param name="progressKey"></param>
            <param name="baseMessage"></param>
            <param name="currentCounterItem"></param>
            <param name="totalCounterItems"></param>
            <param name="stepMagnitude">Total percentage of process represented by current steps</param>
            <param name="stepCompletePercent">Total percentage complete when current step is done</param>
        </member>
        <member name="M:Checkbox.Progress.ProgressProvider.SetProgress(System.String,System.String,System.Int32)">
            <summary>
            Set import progress
            </summary>
            <param name="progressKey"></param>
            <param name="message"></param>
            <param name="currentItem"></param>
        </member>
        <member name="M:Checkbox.Progress.ProgressProvider.SetProgress(System.String,Checkbox.Progress.ProgressData)">
            <summary>
            Set current progress for the specified progress key
            </summary>
            <param name="key">Key to uniquely identify progress data.</param>
            <param name="progressData">Progress data to store</param>
        </member>
        <member name="M:Checkbox.Progress.ProgressProvider.SetProgress(System.String,System.String,System.String,Checkbox.Progress.ProgressStatus,System.Int32,System.Int32)">
            <summary>
            Set current progress for the specified progress key
            </summary>
            <param name="key">Key to uniquely identify progress data.</param>
            <param name="message">Progress status message</param>
            <param name="errorMessage">Error message.</param>
            <param name="status">Status of progress.</param>
            <param name="currentItem">Current item number in progress batch.</param>
            <param name="itemCount">Total number of items in progress batch.</param>
        </member>
        <member name="M:Checkbox.Progress.ProgressProvider.ClearProgress(System.String)">
            <summary>
            Clear/delete progress data associated with the specified key.
            </summary>
            <param name="key">Key representing progress data to remove.</param>
        </member>
        <member name="M:Checkbox.Progress.ProgressProvider.GetProgress(System.String)">
            <summary>
            Get progress data associated with the specified key.
            </summary>
            <param name="key">Key representing progress to delete.</param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Progress.ProgressStatus">
            <summary>
            Progress status enumerated type
            </summary>
        </member>
        <member name="F:Checkbox.Progress.ProgressStatus.Pending">
            <summary>
            Action has not started and is pending.
            </summary>
        </member>
        <member name="F:Checkbox.Progress.ProgressStatus.Running">
            <summary>
            Action is in progress
            </summary>
        </member>
        <member name="F:Checkbox.Progress.ProgressStatus.Completed">
            <summary>
            Action completed
            </summary>
        </member>
        <member name="F:Checkbox.Progress.ProgressStatus.Error">
            <summary>
            An error occurred
            </summary>
        </member>
        <member name="T:Checkbox.Search.SearchManager">
            <summary>
            Implements multithreaded logic for Universal Search
            </summary>
        </member>
        <member name="M:Checkbox.Search.SearchManager.InitializeAvailableObjects(Checkbox.Security.Principal.CheckboxPrincipal,System.Int32)">
            <summary>
            Collect all available objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Search.SearchManager.GetStatus(Checkbox.Security.Principal.CheckboxPrincipal,System.String,System.Guid@)">
            <summary>
            Get request status or create a new request
            </summary>
            <param name="callingPrincipal"></param>
            <param name="searchTerm"></param>
            <param name="expPeriodSeconds"></param>
            <param name="RequestID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Search.SearchManager.CollectResults(Checkbox.Security.Principal.CheckboxPrincipal,System.Guid,System.String)">
            <summary>
            Collects all search results
            </summary>
            <param name="callingPrincipal"></param>
            <param name="RequestID"></param>
            <param name="Term"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Search.SearchManager.RunSearch(Checkbox.Security.Principal.CheckboxPrincipal,System.Guid,System.String)">
            <summary>
            Runs a search request
            </summary>
            <param name="callingPrincipal"></param>
            <param name="RequestID"></param>
            <param name="Term"></param>
        </member>
        <member name="P:Checkbox.Search.SearchManager.LastCleanCacheDate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Search.SearchManager.clearOldRequests(System.Object)">
            <summary>
            Clears caches
            </summary>
            <param name="param"></param>
        </member>
        <member name="T:Checkbox.Search.SearchManager.SearchParams">
            <summary>
            Params for search routines
            </summary>
        </member>
        <member name="M:Checkbox.Search.SearchManager.searchWorkerRoutine(System.Object)">
            <summary>
            The method being runned in a separate thread. 
            It calls Timeline_run procedure that collects events from the Checkbox database to the timeline results table.
            </summary>
            <param name="??"></param>
        </member>
        <member name="M:Checkbox.Search.SearchManager.GetSearchSettings">
            <summary>
            Returns object types that can be used in the search
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Search.SearchManager.getObjectTypeRoles(System.String)">
            <summary>
            Returns roles which can user this object type in the search
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Search.SearchManager.UpdateSearchResultsOrder(System.String,System.Int32)">
            <summary>
            Updates the order for the object type
            </summary>
            <param name="objectType"></param>
            <param name="order"></param>
        </member>
        <member name="M:Checkbox.Search.SearchManager.UpdateObjectsRoles(System.String,System.String)">
            <summary>
            Updates the roles list for the object type
            </summary>
            <param name="objectType"></param>
            <param name="roles"></param>
        </member>
        <member name="M:Checkbox.Search.SearchManager.addRoleToObjectType(System.String,System.String)">
            <summary>
            Adds a role to the object type
            </summary>
            <param name="objectType"></param>
            <param name="role"></param>
        </member>
        <member name="M:Checkbox.Search.SearchManager.deleteRoleFromObjectType(System.String,System.String)">
            <summary>
            Removes a role from the object type
            </summary>
            <param name="objectType"></param>
            <param name="role"></param>
        </member>
        <member name="M:Checkbox.Search.SearchManager.ToggleSearchObjectType(System.String,System.Boolean)">
            <summary>
            Includes or excludes object type from the search
            </summary>
            <param name="objectType"></param>
            <param name="included"></param>
        </member>
        <member name="T:Checkbox.Styles.MobileStyle">
            <summary>
            Mobile style
            </summary>
        </member>
        <member name="P:Checkbox.Styles.MobileStyle.StyleId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Styles.MobileStyle.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Styles.MobileStyle.CssUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Styles.MobileStyle.IsDefault">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Styles.MobileStyleManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Styles.MobileStyleManager.CreateStyle(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="cssUrl"></param>
            <param name="languageCode"> </param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.MobileStyleManager.DeleteStyle(System.Int32)">
            <summary>
            
            </summary>
            <param name="styleId"></param>
        </member>
        <member name="M:Checkbox.Styles.MobileStyleManager.GetDefaultStyle(System.String)">
            <summary>
            
            </summary>
            <param name="languageCode"> </param>
        </member>
        <member name="M:Checkbox.Styles.MobileStyleManager.GetStyle(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="styleId"></param>
            <param name="languageCode"> </param>
        </member>
        <member name="M:Checkbox.Styles.MobileStyleManager.GetAllStyles(System.String)">
            <summary>
            
            </summary>
            <param name="languageCode"> </param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Styles.ChartStyleManager">
            <summary>
            Routines and methods for managing chart styles.  Chart styles are an association between a chart appearance and
            a "preset" which maps a couple additional properties, such as name, public, etc. to the appearance.
            </summary>
        </member>
        <member name="M:Checkbox.Styles.ChartStyleManager.ListAvailableStyles(System.String,System.Boolean)">
            <summary>
            List all chart styles available to the specified user.
            </summary>
            <param name="uniqueIdentifier">Uniqueidentifier to get available styles for.</param>
            <param name="onlyEditable">Specify whether to only get styles editable by the user.</param>
            <returns>DataSet containing table with list of styles.</returns>
        </member>
        <member name="M:Checkbox.Styles.ChartStyleManager.GetPagedStyleData(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.Boolean,Checkbox.Pagination.PaginationContext)">
            <summary>
            Get paged list of styles available to the user
            </summary>
            <param name="principal"></param>
            <param name="onlyEditable"></param>
            <param name="paginationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.ChartStyleManager.ListAllStyles">
            <summary>
            List all styles available
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.ChartStyleManager.ListChartStyles(System.String,System.Boolean)">
            <summary>
            List available chart style ids
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="onlyEditable"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.ChartStyleManager.CreateStyle(System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Persist a new style preset to the database.
            </summary>
            <param name="appearanceID"></param>
            <param name="name"></param>
            <param name="createdBy"></param>
            <param name="isPublic"></param>
            <param name="isEditable"></param>
            <returns>ID of the created preset.</returns>
        </member>
        <member name="M:Checkbox.Styles.ChartStyleManager.UpdateStyle(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Update a style preset's properties.  This is done separately from updating the appearance
            </summary>
            <param name="presetID"></param>
            <param name="name"></param>
            <param name="isPublic"></param>
            <param name="isEditable"></param>
        </member>
        <member name="M:Checkbox.Styles.ChartStyleManager.DeleteStyle(System.Int32)">
            <summary>
            Delete a style preset
            </summary>
            <param name="presetID"></param>
        </member>
        <member name="M:Checkbox.Styles.ChartStyleManager.GetStyleIDFromName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns>ID of the preset if a preset with the name is found, otherwise</returns>
        </member>
        <member name="M:Checkbox.Styles.ChartStyleManager.GetChartStyle(System.Int32)">
            <summary>
            Get a simple container with information about a chart style
            </summary>
            <param name="chartStyleID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.ChartStyleManager.GetChartStyleAppearance(System.Int32)">
            <summary>
            Get the appearance data associated with a chart style
            </summary>
            <param name="chartStyleID">ID of the chart style to get appearance for.</param>
            <returns>Chart style appearance</returns>
        </member>
        <member name="M:Checkbox.Styles.ChartStyleManager.IsStyleNameInUse(System.String)">
            <summary>
            Return true if a chart style with the specified name already exists
            </summary>
            <param name="styleName">Name of the chart style</param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Styles.LightweightStyleTemplate">
            <summary>
            Lightweight style template that contains basic information about a style template and
            is suitable for databinding applications where it may be too expensive to load a list
            of full style templates.
            </summary>
        </member>
        <member name="P:Checkbox.Styles.LightweightStyleTemplate.TemplateId">
            <summary>
            The database id of the style
            </summary>
        </member>
        <member name="P:Checkbox.Styles.LightweightStyleTemplate.AppearanceId">
            <summary>
            The database id of the analysis appearance id
            </summary>
            <remarks>This is only used for chart styles, otherwise it is null</remarks>
        </member>
        <member name="P:Checkbox.Styles.LightweightStyleTemplate.Name">
            <summary>
            Style name
            </summary>
        </member>
        <member name="P:Checkbox.Styles.LightweightStyleTemplate.Type">
            <summary>
            Style type
            </summary>
        </member>
        <member name="P:Checkbox.Styles.LightweightStyleTemplate.IsPublic">
            <summary>
            Indicates whether this style is usable by the public
            </summary>
        </member>
        <member name="P:Checkbox.Styles.LightweightStyleTemplate.IsEditable">
            <summary>
            Indicates whether this style can be edited by other users
            </summary>
        </member>
        <member name="P:Checkbox.Styles.LightweightStyleTemplate.CanBeEdited">
            <summary>
            Indicates whether this style can be edited by the current user
            </summary>
        </member>
        <member name="P:Checkbox.Styles.LightweightStyleTemplate.CreatedBy">
            <summary>
            Name of the style's creator
            </summary>
        </member>
        <member name="P:Checkbox.Styles.LightweightStyleTemplate.DateCreated">
            <summary>
            Date the style was created
            </summary>
        </member>
        <member name="T:Checkbox.Styles.StyleTemplate">
            <summary>
            Style template
            </summary>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.InitializeData">
            <summary>
            Initialize data for the template
            </summary>
        </member>
        <member name="P:Checkbox.Styles.StyleTemplate.TemplateID">
            <summary>
            Get the style template ID
            </summary>
        </member>
        <member name="P:Checkbox.Styles.StyleTemplate.Name">
            <summary>
            Get/set the style template name
            </summary>
        </member>
        <member name="P:Checkbox.Styles.StyleTemplate.Type">
            <summary>
            Get/set the style template type
            </summary>
        </member>
        <member name="P:Checkbox.Styles.StyleTemplate.IsPublic">
            <summary>
            Get/set whether the style template can be used by any survey editor or just
            the creator.
            </summary>
        </member>
        <member name="P:Checkbox.Styles.StyleTemplate.IsEditable">
            <summary>
            Get/set whether the style template can be edited by any survey editor or
            just the creator.
            </summary>
        </member>
        <member name="P:Checkbox.Styles.StyleTemplate.CreatedBy">
            <summary>
            Get/set the creator of the template
            </summary>
        </member>
        <member name="P:Checkbox.Styles.StyleTemplate.DateCreated">
            <summary>
            Get/set the created date of the item
            </summary>
        </member>
        <member name="P:Checkbox.Styles.StyleTemplate.HeaderHTML">
            <summary>
            Get/set the HTML header
            </summary>
        </member>
        <member name="P:Checkbox.Styles.StyleTemplate.FooterHTML">
            <summary>
            Get/set the HTML footer
            </summary>
        </member>
        <member name="P:Checkbox.Styles.StyleTemplate.HeaderTextID">
            <summary>
            Get the text id for the header
            </summary>
        </member>
        <member name="P:Checkbox.Styles.StyleTemplate.FooterTextID">
            <summary>
            Get the text id for the footer
            </summary>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.SetTemplateID(System.Int32)">
            <summary>
            Set ID, for use by factory
            </summary>
            <param name="templateID"></param>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.Load(System.String)">
            <summary>
            Load the style template from XML
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.LoadCssClasses(System.Xml.XmlDocument)">
            <summary>
            Load the css classes from the XML export
            </summary>
            <param name="xmlDoc"></param>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.LoadPreviousVersionExport(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            Load a stylesheet exported from a pre 4.0 release
            </summary>
            <param name="xmlDoc"></param>
            <param name="ns"></param>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.Load(System.Data.DataSet)">
            <summary>
            Load the stylesheet from the datarow
            </summary>
            <param name="ds"></param>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.Save">
            <summary>
            Save the style template
            </summary>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.Create(System.Data.IDbTransaction)">
            <summary>
            Create the db entry
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.Update(System.Data.IDbTransaction)">
            <summary>
            Update the db entry
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.GetElementInsertCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get the command to insert a css element
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.GetElementUpdateCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get the command to update a css element
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.GetElementDeleteCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get the command to delete a css element
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.GetElementPropertyInsertCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get the command to insert a css element property
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.GetElementPropertyUpdateCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get the command to update a css element property
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.GetElementPropertyDeleteCommand(Prezza.Framework.Data.Database)">
            <summary>
            Get the command to delete a css element property
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Styles.StyleTemplate.Elements">
            <summary>
            Get the elements of the style template
            </summary>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.GetElementStyle(System.String)">
            <summary>
            Get the styles for an element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.GetElementProperty(System.String,System.String)">
            <summary>
            Get the proprety value for an element style
            </summary>
            <param name="element"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.SetElementStyle(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set the element style
            </summary>
            <param name="element"></param>
            <param name="styles"></param>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.SetElementStyleProperty(System.String,System.String,System.String)">
            <summary>
            Set the element style property
            </summary>
            <param name="element"></param>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.RemoveElement(System.String)">
            <summary>
            Remove an element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.RemoveElementStyleProperty(System.String,System.String)">
            <summary>
            Remove a style property of an element
            </summary>
            <param name="element"></param>
            <param name="property"></param>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.RemoveElementStyleProperty(System.Int32,System.String)">
            <summary>
            Remove a style property from an element
            </summary>
            <param name="elementID"></param>
            <param name="property"></param>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.GetCssForMobile">
            <summary>
            Get the CSS for this style template adapted for mobile
            </summary>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.GetCss">
            <summary>
            Get the CSS for this style template
            </summary>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.GetCss(System.String)">
            <summary>
            Get the Css for a specific element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.GetCss(System.Int32)">
            <summary>
            Get the css for a specific element
            </summary>
            <param name="elementID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplate.ToXml">
            <summary>
            Get the template in XML format
            </summary>
        </member>
        <member name="T:Checkbox.Styles.StyleTemplateManager">
            <summary>
            Handles creating/deleting/storing style templates
            </summary>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateManager.CreateStyleTemplate(Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Get a new style template
            </summary>
            <param name="currentPrincipal">User attempting to create template</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateManager.CreateStyleTemplate(System.Xml.XmlDocument,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Load a style template from xml
            </summary>
            <param name="xmlDoc"></param>
            <param name="currentPrincipal"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateManager.GetStyleTemplate(System.Int32)">
            <summary>
            Get a style template with the specified ID
            </summary>
            <param name="templateID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateManager.GetLightweightStyleTemplate(System.Int32,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Get a lightweight style template with the specified ID
            </summary>
            <param name="templateID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateManager.SaveTemplate(Checkbox.Styles.StyleTemplate,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Save the specified style template
            </summary>
            <param name="template"></param>
            <param name="currentPrincipal"></param>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateManager.DeleteTemplate(System.Int32,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Delete the specified style template.
            </summary>
            <param name="styleTemplateID">ID of the template to delete.</param>
            <param name="currentPrincipal"></param>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateManager.CopyTemplate(Checkbox.Styles.StyleTemplate,System.String,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Copy a style template
            </summary>
            <param name="template"></param>
            <param name="languageCode"></param>
            <param name="currentPrincipal"></param>
            <remarks>This method saves the copied template to the DB</remarks>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateManager.ListStyleTemplates(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.Nullable{Checkbox.Styles.StyleTemplateType})">
            <summary>
            A list of available style templates
            </summary>
            <param name="currentPrincipal"></param>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateManager.ListStyleTemplatesForDataBinding(Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            
            </summary>
            <param name="currentPrincipal"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateManager.ListStyleTemplatesForDataBinding(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Styles.StyleTemplateType)">
            <summary>
            
            </summary>
            <param name="currentPrincipal"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateManager.GetPagedStyleData(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext)">
            <summary>
            Get style data 
            </summary>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateManager.IsStyleInUse(System.Int32)">
            <summary>
            Detect if the style in use by a response template or an analysis template
            </summary>
            <param name="styleTemplateID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateManager.IsStyleNameInUse(System.String)">
            <summary>
            Get a boolean indicating if the specified style name is already being used
            </summary>
            <param name="styleName"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Styles.StyleTemplateTextDecorator">
            <summary>
            Text decorator for configuring multi-language style templates.  Adds support for
            multi-language headers/footers, including copying and import/export.
            </summary>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateTextDecorator.#ctor(Checkbox.Styles.StyleTemplate,System.String)">
            <summary>
            Constructor for style template.
            </summary>
            <param name="language">Language to use for operations.</param>
            <param name="template">Style template to "decorate" with multi-language text.</param>
            <exception cref="T:System.NullReferenceException">When template is NULL</exception>
        </member>
        <member name="P:Checkbox.Styles.StyleTemplateTextDecorator.HeaderText">
            <summary>
            Get/set the header text
            </summary>
        </member>
        <member name="P:Checkbox.Styles.StyleTemplateTextDecorator.FooterText">
            <summary>
            Get/set the footer text
            </summary>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateTextDecorator.SetLocalizedTexts">
            <summary>
            Save localized text
            </summary>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateTextDecorator.GetTemplateXml">
            <summary>
            Create an XML representation of the style template, including localized headers/footers that is
            suitable for export.
            </summary>
            <returns>Style template XML</returns>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateTextDecorator.LoadTemplateFromXml(System.Xml.XmlDocument,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Load the style template from the specified XML document, including localized texts
            </summary>
            <param name="doc">Document containing style template Xml</param>
            <param name="currentPrincipal"></param>
            <exception cref="T:System.NullReferenceException">When xml document is null.</exception>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateTextDecorator.Save(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.Data.IDbTransaction)">
            <summary>
            Save the template
            </summary>
            <param name="currentPrincipal"></param>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateTextDecorator.Save">
            <summary>
            Save the style template
            </summary>
        </member>
        <member name="M:Checkbox.Styles.StyleTemplateTextDecorator.Save(System.Data.IDbTransaction)">
            <summary>
            Save the style template.  The transaction context is not used, but the method must be implemented.
            </summary>
            <param name="t">Transaction context (ignored)</param>
        </member>
        <member name="T:Checkbox.SystemMode.SystemModeEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.SystemMode.SystemModeEvent.EventType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.SystemMode.SystemModeEvent.User">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.SystemMode.SystemModeManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.SystemMode.SystemModeManager.LogEvent(Checkbox.SystemMode.SystemModeEvent)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.SystemMode.SystemModeManager.AddPrepModeUser(System.Guid,System.Boolean)">
            <summary>
            Adds the prep mode user to ivitation list.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="isChecked">if set to <c>true</c> [is checked].</param>
        </member>
        <member name="M:Checkbox.SystemMode.SystemModeManager.IsPrepModeUser(System.Guid)">
            <summary>
            Determines whether [is prep mode user] [the specified unique identifier].
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>
              <c>true</c> if [is prep mode user] [the specified unique identifier]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Checkbox.SystemMode.SystemModeManager.GetPrepModeUserGuids">
            <summary>
            Gets the prep mode users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.SystemMode.SystemModeManager.ClearLogHistory">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.SystemMode.SystemModeEventType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Checkbox.SystemMode.SystemModeEventType.PREPMODE_ON">
            <summary>
            Represents event
            </summary>
        </member>
        <member name="F:Checkbox.SystemMode.SystemModeEventType.PREPMODE_OFF">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Timeline.TimelineManager">
            <summary>
            Processes requests for timeline
            </summary>
        </member>
        <member name="M:Checkbox.Timeline.TimelineManager.GetRequestStatus(Checkbox.Security.Principal.CheckboxPrincipal,System.Int64,System.String@)">
            <summary>
            Get Request Status
            </summary>
            <param name="RequestID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Timeline.TimelineManager.GetPeriodDates(System.Int32,System.Nullable{System.DateTime}@,System.Nullable{System.DateTime}@)">
            <summary>
            
            </summary>
            <param name="period"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Checkbox.Timeline.TimelineManager.GetRequest(Checkbox.Security.Principal.CheckboxPrincipal,System.String,System.Int32)">
            <summary>
            Get request ID
            </summary>
            <param name="userAuthID"></param>
            <param name="manager"></param>
            <param name="timelineRequestExpiration"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Timeline.TimelineManager.GetResults(Checkbox.Security.Principal.CheckboxPrincipal,System.Int64,System.Int64,System.String)">
            <summary>
            Returns aggregated results for request
            </summary>
            <param name="userAuthID"></param>
            <param name="RequestID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Timeline.TimelineManager.GetVisibleEvents(System.String)">
            <summary>
            Get visible events of the specific Manager
            </summary>
            <param name="managerName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Timeline.TimelineManager.timelineWorkerRoutine(System.Object)">
            <summary>
            The method being runned in a separate thread. 
            It calls Timeline_run procedure that collects events from the Checkbox database to the timeline results table.
            </summary>
            <param name="??"></param>
        </member>
        <member name="M:Checkbox.Timeline.TimelineManager.runRequest(System.Int64)">
            <summary>
            Runs request in a separate thread
            </summary>
            <param name="RequestID"></param>
        </member>
        <member name="M:Checkbox.Timeline.TimelineManager.GetStartFilterDate(System.Int32)">
            <summary>
            Create a date to filter events by period.
            </summary>
            <param name="period">
            Period: 
                1 - immediate (latest single event)
                2 - daily
                3 - weekly
                4 - monthly
            </param>
            <returns>Current date minus period</returns>
        </member>
        <member name="M:Checkbox.Timeline.TimelineManager.ProtectFieldNameFromSQLInjections(System.String)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Timeline.TimelineManager.ClearByACLEntry(System.String,System.String)">
            <summary>
            Clear timeline cache by user name
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Timeline.TimelineManager.ClearByPolicy(System.Int32)">
            <summary>
            Clear timeline cache by policy that was granted or revoked to / from user
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Timeline.TimelineManager.ClearByPrincipal(System.String)">
            <summary>
            Clear timeline for the given user
            </summary>
            <param name="uniqueIdentifier"></param>
        </member>
        <member name="M:Checkbox.Timeline.TimelineManager.GetTimelineSettings(Checkbox.Security.Principal.CheckboxPrincipal,System.String)">
            <summary>
            Get timeline settings for all events of the specific manager
            </summary>
            <param name="callingPrincipal"> </param>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Timeline.TimelineManager.UpdateTimelineEventPeriod(Checkbox.Security.Principal.CheckboxPrincipal,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Update period value for specified manager and event
            </summary>
            <param name="callingPrincipal"> </param>
            <param name="manager"></param>
            <param name="eventName"></param>
            <param name="periodName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Timeline.TimelineManager.UpdateTimelineEventOrder(Checkbox.Security.Principal.CheckboxPrincipal,System.String,System.String,System.Int32)">
            <summary>
            Update value of event order of the specific event
            </summary>
            <param name="callingPrincipal"> </param>
            <param name="manager"></param>
            <param name="eventName"></param>
            <param name="eventOrder"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Content.ContentFolder">
            <summary>
            Generic representation of a content folder
            </summary>
        </member>
        <member name="P:Checkbox.Content.ContentFolder.FolderName">
            <summary>
            Get/set folder name
            </summary>
        </member>
        <member name="P:Checkbox.Content.ContentFolder.FolderPath">
            <summary>
            Get/set the folder path
            </summary>
        </member>
        <member name="P:Checkbox.Content.ContentFolder.IsPublic">
            <summary>
            Get/set whether the folder is public
            </summary>
        </member>
        <member name="P:Checkbox.Content.ContentFolder.Items">
            <summary>
            Get the list of content items
            </summary>
        </member>
        <member name="P:Checkbox.Content.ContentFolder.Folders">
            <summary>
            Get the folders that are children of this folder
            </summary>
        </member>
        <member name="M:Checkbox.Content.ContentFolder.AddContentItem(Checkbox.Content.ContentItem)">
            <summary>
            Add a content item to the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Checkbox.Content.ContentFolder.RemoveContentItem(Checkbox.Content.ContentItem)">
            <summary>
            Remove the specified content item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Checkbox.Content.ContentFolder.StoreContentItem(Checkbox.Content.ContentItem)">
            <summary>
            Store the specified content item in the folder
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Checkbox.Content.ContentFolder.DeleteContentItem(Checkbox.Content.ContentItem)">
            <summary>
            Delete the specified content item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Checkbox.Content.ContentFolder.LoadItems">
            <summary>
            Load the child items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Content.ContentFolder.LoadFolders">
            <summary>
            Load the content folders
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Content.ContentItem">
            <summary>
            Abstract content item base class
            </summary>
        </member>
        <member name="P:Checkbox.Content.ContentItem.ItemName">
            <summary>
            Get/set the item name
            </summary>
        </member>
        <member name="P:Checkbox.Content.ContentItem.ItemUrl">
            <summary>
            Get/set item url
            </summary>
        </member>
        <member name="P:Checkbox.Content.ContentItem.ContentType">
            <summary>
            Get/set item type
            </summary>
        </member>
        <member name="P:Checkbox.Content.ContentItem.IsPublic">
            <summary>
            Get/set is public
            </summary>
        </member>
        <member name="P:Checkbox.Content.ContentItem.LastUpdated">
            <summary>
            Get/set last updated
            </summary>
        </member>
        <member name="P:Checkbox.Content.ContentItem.Data">
            <summary>
            Get/set data
            </summary>
        </member>
        <member name="M:Checkbox.Content.ContentItem.LoadItemData">
            <summary>
            Load the item data
            </summary>
        </member>
        <member name="T:Checkbox.Content.DBContentFolder">
            <summary>
            Representation of a content folder
            </summary>
        </member>
        <member name="M:Checkbox.Content.DBContentFolder.#ctor(System.Nullable{System.Int32},System.String,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Construct a new folder object
            </summary>
            <param name="folderID"></param>
            <param name="folderPath"></param>
            <param name="currentUser"></param>
        </member>
        <member name="P:Checkbox.Content.DBContentFolder.FolderID">
            <summary>
            Get/set the folder id
            </summary>
        </member>
        <member name="P:Checkbox.Content.DBContentFolder.FolderPath">
            <summary>
            Get/set the folder path
            </summary>
        </member>
        <member name="P:Checkbox.Content.DBContentFolder.ParentFolderID">
            <summary>
            Get/set parent folder id
            </summary>
        </member>
        <member name="P:Checkbox.Content.DBContentFolder.FolderName">
            <summary>
            Get/set folder name
            </summary>
        </member>
        <member name="P:Checkbox.Content.DBContentFolder.IsPublic">
            <summary>
            Get/set is public
            </summary>
        </member>
        <member name="P:Checkbox.Content.DBContentFolder.CreatedBy">
            <summary>
            Get/set created by
            </summary>
        </member>
        <member name="M:Checkbox.Content.DBContentFolder.StoreContentItem(Checkbox.Content.ContentItem)">
            <summary>
            Store the item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Checkbox.Content.DBContentFolder.DeleteContentItem(Checkbox.Content.ContentItem)">
            <summary>
            Delete the item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Checkbox.Content.DBContentFolder.LoadItems">
            <summary>
            Load child items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Content.DBContentFolder.LoadFolders">
            <summary>
            Load child folders
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Content.DBContentFolder.Save">
            <summary>
            Save the item
            </summary>
        </member>
        <member name="M:Checkbox.Content.DBContentFolder.Delete">
            <summary>
            Delete the item
            </summary>
        </member>
        <member name="M:Checkbox.Content.DBContentFolder.Load">
            <summary>
            Load the item
            </summary>
        </member>
        <member name="T:Checkbox.Content.DBContentItem">
            <summary>
            Database persisted content item
            </summary>
        </member>
        <member name="M:Checkbox.Content.DBContentItem.#ctor(System.Nullable{System.Int32})">
            <summary>
            Construct a new content item
            </summary>
            <param name="itemID"></param>
        </member>
        <member name="P:Checkbox.Content.DBContentItem.ItemID">
            <summary>
            Get/set the item database id
            </summary>
        </member>
        <member name="P:Checkbox.Content.DBContentItem.CreatedBy">
            <summary>
            Get/set creator of item
            </summary>
        </member>
        <member name="P:Checkbox.Content.DBContentItem.ItemUrl">
            <summary>
            Get/set item url
            </summary>
        </member>
        <member name="P:Checkbox.Content.DBContentItem.FolderID">
            <summary>
            Get/set parent folder db id
            </summary>
        </member>
        <member name="P:Checkbox.Content.DBContentItem.ContentType">
            <summary>
            Get/set content type
            </summary>
        </member>
        <member name="P:Checkbox.Content.DBContentItem.IsPublic">
            <summary>
            Get/set whether the item is public
            </summary>
        </member>
        <member name="P:Checkbox.Content.DBContentItem.ItemName">
            <summary>
            Get/set the name of the item
            </summary>
        </member>
        <member name="P:Checkbox.Content.DBContentItem.LastUpdated">
            <summary>
            Get/set when the item was last updated
            </summary>
        </member>
        <member name="P:Checkbox.Content.DBContentItem.Data">
            <summary>
            Get/set the item data
            </summary>
        </member>
        <member name="M:Checkbox.Content.DBContentItem.LoadItemData">
            <summary>
            Load the item's data from the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Content.DBContentItem.Save">
            <summary>
            Save the item
            </summary>
        </member>
        <member name="M:Checkbox.Content.DBContentItem.Delete">
            <summary>
            Delete the item
            </summary>
        </member>
        <member name="M:Checkbox.Content.DBContentItem.Load">
            <summary>
            Load the item
            </summary>
        </member>
        <member name="T:Checkbox.Content.DBContentManager">
            <summary>
            Content manager for database content
            </summary>
        </member>
        <member name="M:Checkbox.Content.DBContentManager.GetFolder(System.Int32,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Load a folder
            </summary>
            <param name="contentFolderID"></param>
            <param name="currentPrincipal"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Content.DBContentManager.GetFolder(System.String,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Load a folder
            </summary>
            <param name="folderPath"></param>
            <param name="currentPrincipal"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Content.DBContentManager.GetItem(System.Int32)">
            <summary>
            Get the db content item
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Content.DBContentManager.ListItems(System.String,Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String[])">
            <summary>
            List content items in a folder
            </summary>
            <param name="folderPath"></param>
            <param name="currentUser"></param>
            <param name="contentFilters"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Content.DBContentManager.ListFolders(System.String,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Get a list of all children of the parent folder
            </summary>
            <param name="currentUser"></param>
            <param name="folderPath"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Globalization.Configuration.GlobalizationConfiguration">
            <summary>
            Configuration object for framework security configuration information, including configuration information
            for the various security providers.
            </summary>
        </member>
        <member name="F:Checkbox.Globalization.Configuration.GlobalizationConfiguration._textProviders">
            <summary>
            Collection of text provider configuration objects.
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Configuration.GlobalizationConfiguration.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Configuration.GlobalizationConfiguration.#ctor(System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="M:Checkbox.Globalization.Configuration.GlobalizationConfiguration.GetTextProviderConfig(System.String)">
            <summary>
            Get the custom configuration object for the specified text provider.
            </summary>
            <param name="providerName">Name of the text provider.</param>
            <returns>Custom configuration object that extends the <see cref="T:Prezza.Framework.Configuration.ProviderData" /> class.</returns>
        </member>
        <member name="M:Checkbox.Globalization.Configuration.GlobalizationConfiguration.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load globalization configuration from Xml.
            </summary>
            <param name="node">Xml node containing globalization information.</param>
            <remarks>
            In addition to loading globalization information, this method will cause the configurations
            for custom providers to be loaded through calls to ConfigurationManager.GetConfiguration (<see cref="T:Prezza.Framework.Configuration.ConfigurationManager"/>).  The GetConfiguration
            method will be called for each child node in the providers sub groups.
            </remarks>
        </member>
        <member name="P:Checkbox.Globalization.Configuration.GlobalizationConfiguration.DefaultLanguage">
            <summary>
            Default language for globalization
            </summary>
        </member>
        <member name="P:Checkbox.Globalization.Configuration.GlobalizationConfiguration.DefaultTextProvider">
            <summary>
            Name of the default text provider (if specified in the configuration file)
            </summary>
        </member>
        <member name="P:Checkbox.Globalization.Configuration.GlobalizationConfiguration.ApplicationLanguages">
            <summary>
            Get supported application languages
            </summary>
        </member>
        <member name="P:Checkbox.Globalization.Configuration.GlobalizationConfiguration.SurveyLanguages">
            <summary>
            Get supported survey languages
            </summary>
        </member>
        <member name="P:Checkbox.Globalization.Configuration.GlobalizationConfiguration.DatePickerLocalizationFiles">
            <summary>
            Get DatePicker localization files by locale
            </summary>
        </member>
        <member name="P:Checkbox.Globalization.Configuration.GlobalizationConfiguration.DatePickerDefaultLocalization">
            <summary>
            Get default DatePicker locale
            </summary>
        </member>
        <member name="T:Checkbox.Globalization.Configuration.ISOCode">
            <summary>
            Simple class to contain ISO code information
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Configuration.ISOCode.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Configuration.ISOCode.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">ISO name</param>
            <param name="code">ISO Code</param>
        </member>
        <member name="P:Checkbox.Globalization.Configuration.ISOCode.Code">
            <summary>
            Get/Set the ISO Code
            </summary>
        </member>
        <member name="P:Checkbox.Globalization.Configuration.ISOCode.Name">
            <summary>
            Get/Set the code name
            </summary>
        </member>
        <member name="T:Checkbox.Globalization.GlobalizationManager">
            <summary>
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.GlobalizationManager.GetDatePickerLocalizationFile">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.GlobalizationManager.FormatTheDate(System.DateTime)">
            <summary>
            
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.GlobalizationManager.GetDateFormat">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.GlobalizationManager.GetTimeFormat">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Globalization.Text.IImportExportTextProvider">
            <summary>
            Text provider supports getting/setting localizable texts
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.IImportExportTextProvider.ImportTexts(System.IO.TextReader)">
            <summary>
            Import texts from a stream and write them to the database.
            </summary>
            <param name="reader">Opened reader containing the stream to read data from.</param>
        </member>
        <member name="M:Checkbox.Globalization.Text.IImportExportTextProvider.ExportAllTexts(System.IO.TextWriter)">
            <summary>
            Export all texts from the database and write them to a stream.
            </summary>
            <param name="writer">Opened writer to write data do.</param>
        </member>
        <member name="M:Checkbox.Globalization.Text.IImportExportTextProvider.ExportFilteredTexts(System.IO.TextWriter,System.String[],System.String[])">
            <summary>
            Export all texts that have a TextID which contains the specified partial TextID.
            This is useful for getting all tText of a specific type, for example validation messages.
            </summary>
            <param name="writer">Opened writer to write data to.</param>
            <param name="languageCodes">Language codes to export text for. If null, Application Languages will be used.</param>
            <param name="partialTextId">List of partial TextIDs to search for. </param>
        </member>
        <member name="M:Checkbox.Globalization.Text.IImportExportTextProvider.ExportTextsById(System.IO.TextWriter,System.String[],System.String[])">
            <summary>
            Export all texts that have an id equal to the specified TextID and the language code.
            </summary>
            <param name="writer">Opened writer to write data to.</param>
            <param name="languageCodes">Language codes to export text for. If null, Application Languages will be used.</param>
            <param name="textIds">The List of TextIds to export.</param>
        </member>
        <member name="T:Checkbox.Globalization.Text.ITextProvider">
            <summary>
            Text provider supports getting/setting localizable texts
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.ITextProvider.GetText(System.String,System.String)">
            <summary>
            Get the specified text string.
            </summary>
            <param name="textIdentifier">Identifier of the text string.</param>
            <param name="languageCode">Language code for the text string.  This is the concatenation of the two letter ISO 639-1 language code with the
            two letter ISO 3166 region code.  e.g.  en-US.</param>
            <returns>Specified string. NULL if the string is not found.</returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.ITextProvider.GetAllTexts(System.String)">
            <summary>
            Gets all text strings for a specified textID in a key/value dictionary where the languagecode is the key and the text is the value
            </summary>
            <param name="textIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.ITextProvider.GetTextData(System.String)">
            <summary>
            Gets a DataTable of strings selected from the Text table
            </summary>
            <param name="textIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.ITextProvider.GetMatchingTextData(System.String[])">
            <summary>
            Get a datatable of strings selected from the text table with textids that
            match the supplied regular expression.
            The DataTable has three columns: TextId, LanguageCode, TextValue
            </summary>
            <param name="matchExpressions"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.ITextProvider.SetText(System.String,System.String,System.String)">
            <summary>
            Set the value of the specified string.
            </summary>
            <param name="textIdentifier">Identifier of the text string.</param>
            <param name="languageCode">Language code for the text string.  This is the concatenation of the two letter ISO 639-1 language code with the
            two letter ISO 3166 region code.  e.g.  en-US.</param>
            <param name="textValue">Text string to store</param>
        </member>
        <member name="T:Checkbox.Globalization.Text.LanguageTextComparer">
            <summary>
            Comparer to compare two language codes based on their localized texts
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.LanguageTextComparer.#ctor(System.String)">
            <summary>
            Constructor that accepts the language code to use to retrieve the language text
            </summary>
            <param name="languageCode"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.LanguageTextComparer.Compare(System.String,System.String)">
            <summary>
            Compare the two strings
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProvider">
            <summary>
            Database authentication provider
            </summary>
        </member>
        <member name="F:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProvider._config">
            <summary>
            Provider configuration
            </summary>
        </member>
        <member name="F:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProvider._configurationName">
            <summary>
            Provider name.
            </summary>
        </member>
        <member name="F:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProvider._cacheManager">
            <summary>
            Cache manager for texts
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProvider.GetAllTexts(System.String)">
            <summary>
            Gets the specified text only using the default language
            </summary>
            <param name="textIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProvider.GetTextData(System.String)">
            <summary>
            Get all text data for 
            </summary>
            <param name="textIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProvider.GetText(System.String,System.String)">
            <summary>
            Get the specified text, but use the default language instead of the specified language.
            </summary>
            <param name="textIdentifier">Id of text to retrieve.</param>
            <param name="languageCode">(ignored)</param>
            <returns>Requested string</returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProvider.getCacheKey(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="textIdentifier"></param>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProvider.SetText(System.String,System.String,System.String)">
            <summary>
            Store the localized text associated with a given text id
            </summary>
            <param name="textIdentifier"></param>
            <param name="languageCode"></param>
            <param name="textValue"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProvider.GetMatchingTextData(System.String[])">
            <summary>
            Get a data table containing matching texts
            </summary>
            <param name="matchExpressions"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProvider.ConfigurationName">
            <summary>
            Name of the provider.
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProvider.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the authentication provider with the supplied configuration object.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProvider.bulkInit">
            <summary>
            Read all texts for all languages and put them into the cache
            </summary>
        </member>
        <member name="T:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProviderData">
            <summary>
            Configuration information for the <see cref="T:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProvider"/>.
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProviderData.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="providerName">Name of the provider instance.</param>
        </member>
        <member name="M:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProviderData.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load authentication provider configuration from the supplied Xml node.
            </summary>
            <param name="providerNode"><see cref="T:System.Xml.XmlNode"/> containing <see cref="T:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProvider"/> configuration information.</param>
        </member>
        <member name="P:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProviderData.DefaultLanguage">
            <summary>
            Get the default text language
            </summary>
        </member>
        <member name="P:Checkbox.Globalization.Text.Providers.DefaultLanguageTextProviderData.CacheManagerName">
            <summary>
            Get/Set the name of the cache manager to use
            </summary>
        </member>
        <member name="T:Checkbox.Globalization.Text.TextDecorator">
            <summary>
            Abstract base class for decorating an item with localized text.  An implemented
            decorator will expose public text properties and internally call the protected get/set
            methods when appropriate.
            This class is designed to handle localization for items with text ids that depend on the
            item id, even though the item may not have been committed to the database.
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextDecorator.#ctor(System.String)">
            <summary>
            Constructor.  Initialize with the language for this decorator
            </summary>
            <param name="language"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextDecorator.AddAlternateLanguages(System.Collections.Generic.List{System.String})">
            <summary>
            Add alternate languages to look text up in
            </summary>
            <param name="alternateLanguages">List of alternate languages to use when Getting text</param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextDecorator.GetAlternateLanguages">
            <summary>
            Public accessor to get an array of the alternate languages that have been set.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Globalization.Text.TextDecorator.AlternateLanguages">
            <summary>
            Get alternate languages
            </summary>
        </member>
        <member name="P:Checkbox.Globalization.Text.TextDecorator.Language">
            <summary>
            Get/set the language for the decorator
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextDecorator.GetText(System.String)">
            <summary>
            Get the specified localized text using the configured language for this decorator.  If
            the text is not found, will try to get the text using the app default language, then will
            search for text using any specified alternate languages.
            </summary>
            <param name="textID">ID of the text to rectrieve.</param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextDecorator.GetAllTexts(System.String)">
            <summary>
            Get text in all languages for the specified text id.
            </summary>
            <param name="textID">ID of the text to get.</param>
            <returns>Dictionary keyed by language code containing texts.</returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextDecorator.SetText(System.String,System.String)">
            <summary>
            Set localized text. If there is no language set, will do nothing.
            </summary>
            <param name="textID">ID of the text.</param>
            <param name="textValue">Text to store.</param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextDecorator.SetText(System.String,System.String,System.String)">
            <summary>
            Set localized text.  All arguments are mandatory.
            </summary>
            <param name="textID"></param>
            <param name="textValue"></param>
            <param name="language"></param>
            <exception cref="T:System.NullReferenceException">When textID or language argument is null.</exception>
            <exception cref="T:System.ArgumentException">When textID or language argument is an empty string.</exception>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextDecorator.SetLocalizedTexts">
            <summary>
            Protected method where child classes will do the work of
            calling the protected setters
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextDecorator.Save">
            <summary>
            Save the decorated object and associated localized text
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextDecorator.Save(System.Data.IDbTransaction)">
            <summary>
            Save the decorated object and associated text.  The object will be saved
            as part of the specified transaction
            </summary>
            <param name="t"></param>
        </member>
        <member name="E:Checkbox.Globalization.Text.TextDecorator.TransactionAborted">
            <summary>
            
            </summary>
        </member>
        <member name="E:Checkbox.Globalization.Text.TextDecorator.TransactionCommitted">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextDecorator.Rollback">
            <summary>
            Handle rollback
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextDecorator.NotifyAbort(System.Object,System.EventArgs)">
            <summary>
            Notify decorator transaction has been aborted
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextDecorator.NotifyCommit(System.Object,System.EventArgs)">
            <summary>
            Notify decorator transaction has been committed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextDecorator.OnRollback">
            <summary>
            Rollback, does nothing unless overridden
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextDecorator.OnAbort(System.Object,System.EventArgs)">
            <summary>
            Abort, does nothing unless overridden
            </summary>
            <param name="sender">Object firing event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextDecorator.OnCommit(System.Object,System.EventArgs)">
            <summary>
            Commit, does nothing unless overridden
            </summary>
            <param name="sender">Object firing event.</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Checkbox.Globalization.Text.TextFactory">
            <summary>
            Creates and initializes text provider objects.
            </summary>
            <remarks>
            The text factory creates text provider objects that
            implement the <see cref="T:Checkbox.Globalization.Text.ITextProvider" /> interface.
            </remarks>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextFactory.#cctor">
            <summary>
            Constructor.  Since this class only exposes static methods, there
            should be no need to call the constructor.
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextFactory.GetTextProvider">
            <summary>
            Create and initialize an instance of the default text 
            provider. 
            </summary>
            <returns>Initialized instance of a text provider.</returns>
            <remarks>
            The returned text provider implements the 
            <see cref="T:Checkbox.Globalization.Text.ITextProvider" /> interface.</remarks>
            <exception cref="T:System.Exception">Unable to create default ITextProvider</exception>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextFactory.GetTextProvider(System.String)">
            <summary>
            Create and initialize an instance of the specified text 
            provider. 
            </summary>
            <param name="textProvider">Name of the text provider to instantiate and initialize.</param>
            <returns>Initialized instance of an text provider.</returns>
            <remarks>
            The returned text provider implements the 
            <see cref="T:Checkbox.Globalization.Text.ITextProvider" /> interface.</remarks>
            <exception cref="T:System.ArgumentNullException">textProvider is null</exception>
            <exception cref="T:System.ArgumentException">textProvider is empty</exception>
            <exception cref="T:System.Exception">Could not find instance specified in textProvider</exception>
            <exception cref="T:System.InvalidOperationException">Error processing configuration information defined in application configuration file.</exception>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextFactory.AddApplicationLanguage(System.String)">
            <summary>
            Adds an application language to the cache
            </summary>
            <param name="language"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextFactory.RemoveApplicationLanguage(System.String)">
            <summary>
            Removes an application language from the cache
            </summary>
            <param name="language"></param>
        </member>
        <member name="P:Checkbox.Globalization.Text.TextFactory.ApplicationLanguages">
            <summary>
            Get an array list containing <see cref="T:Checkbox.Globalization.Configuration.ISOCode"/> objects representing application languages.
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextFactory.AddSurveyLanguage(System.String)">
            <summary>
            Adds an survey language to the cache
            </summary>
            <param name="language"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextFactory.RemoveSurveyLanguage(System.String)">
            <summary>
            Removes an survey language from the cache
            </summary>
            <param name="language"></param>
        </member>
        <member name="P:Checkbox.Globalization.Text.TextFactory.SurveyLanguages">
            <summary>
            Get an array list containing <see cref="T:Checkbox.Globalization.Configuration.ISOCode"/> objects representing application languages.
            </summary>
        </member>
        <member name="P:Checkbox.Globalization.Text.TextFactory.DefaultLanguage">
            <summary>
            Get an array list containing the application default language.
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextFactory.RefreshGlobalizationConfiguration">
            <summary>
            Clears the configuration cache for Checkbox Globalization section
            </summary>
        </member>
        <member name="T:Checkbox.Globalization.Text.TextManager">
            <summary>
            Provides static routines for accessing strings used by Checkbox.
            </summary>
        </member>
        <member name="F:Checkbox.Globalization.Text.TextManager._cacheManager">
            <summary>
            Cache Manager
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="P:Checkbox.Globalization.Text.TextManager.ApplicationLanguages">
            <summary>
            Get an array of <see cref="T:Checkbox.Globalization.Configuration.ISOCode"/> objects representing available app. languages
            </summary>
        </member>
        <member name="P:Checkbox.Globalization.Text.TextManager.SurveyLanguages">
            <summary>
            Get an array of <see cref="T:Checkbox.Globalization.Configuration.ISOCode"/> objects representing available survey languages
            </summary>
        </member>
        <member name="P:Checkbox.Globalization.Text.TextManager.DefaultLanguage">
            <summary>
            Get the default application language
            </summary>
        </member>
        <member name="P:Checkbox.Globalization.Text.TextManager.MultiLanguageEnabled">
            <summary>
            Get whether multi-language modules is installed
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.GetText(System.String,System.String)">
            <summary>
            Retrieve the specified text.
            </summary>
            <param name="textIdentifier">String identifying the text to retrieve</param>
            <param name="languageCode">Language code for the string.  Format is 2 letter ISO 639 language code concatenated with the 2 letter ISO 3166 region code.  e.g. en-us</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.GetText(System.String)">
            <summary>
            Retrieve the specified text for default language.
            </summary>
            <param name="textIdentifier">String identifying the text to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.GetText(System.String,System.String,System.String,System.String[])">
            <summary>
            Retrieve specified text, falling back on alternate languages and finally default text if necessary.
            </summary>
            <param name="textIdentifier">Text ID</param>
            <param name="languageCode">Language to try.</param>
            <param name="defaultText">Default text to return in case of no text found.</param>
            <param name="alternateLanguages">Alternate languages to check.</param>
            <returns>String</returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.GetTextData(System.String)">
            <summary>
            Get a data table containing all texts with the given text identifier
            </summary>
            <param name="textIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.GetAllTexts(System.String)">
            <summary>
            Get a dictionary containing all texts with the given text identifier
            </summary>
            <param name="textIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.GetAllMatchingTexts(System.String[])">
            <summary>
            Get a data table containing all matching texts.  Return table contains three columns: TextId, LanguageCode, and TextValue
            </summary>
            <param name="matchExpressions">Parameter array of regular expressions to match</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.SetText(System.String,System.String,System.String)">
            <summary>
            Set the specified text string
            </summary>
            <param name="textIdentifier"></param>
            <param name="languageCode"></param>
            <param name="textValue"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.SetText(System.String,System.String)">
            <summary>
            Set the specified text string for default language
            </summary>
            <param name="textIdentifier"></param>
            <param name="textValue"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.ExportTextBase(System.IO.TextWriter)">
            <summary>
            Logic common to all ExportText scenarios.
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.ExportAllTexts(System.IO.TextWriter)">
            <summary>
            Write all texts to the text writer.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.ExportFilteredTexts(System.IO.TextWriter,System.String[],System.String[])">
            <summary>
            Write all matching texts to the text writer.
            </summary>
            <param name="writer"></param>
            <param name="languageCodes">Language codes to export texts for.  If null or length == 0, list of application languages will be used.</param>
            <param name="partialTextId">A list of partial text ids used to filter the exported text. </param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.ExportTextsById(System.IO.TextWriter,System.String[],System.String[])">
            <summary>
            Write all specified texts to the text writer.
            </summary>
            <param name="writer"></param>
            <param name="languageCodes">Language codes to export texts for.  If null or length == 0, list of application languages will be used.</param>
            <param name="textIds">The list of full text ids to export.</param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.ImportTexts(System.IO.TextReader)">
            <summary>
            Import texts from the specified reader.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.GetEnumLocalizedValues(System.Type,System.String)">
            <summary>
            Get localized values for enumerated types
            </summary>
            <param name="enumType"></param>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.GetPageTexts(System.String,System.String)">
            <summary>
            List texts associated with an application page.
            </summary>
            <param name="pagePath"></param>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.addCachedKey(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.clearPageTextIDsCache">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.RefreshGlobalizationConfiguration">
            <summary>
            Clears the configuration cache
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.AddApplicationLanguage(System.String)">
            <summary>
             Adds an application language to the cache
            </summary>
            <param name="language"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.RemoveApplicationLanguage(System.String)">
            <summary>
            Removes an application language from the cache
            </summary>
            <param name="language"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.AddSurveyLanguage(System.String)">
            <summary>
             Adds an survey language to the cache
            </summary>
            <param name="language"></param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextManager.RemoveSurveyLanguage(System.String)">
            <summary>
            Removes an survey language from the cache
            </summary>
            <param name="language"></param>
        </member>
        <member name="T:Checkbox.Globalization.Text.TextProviderFactory">
            <summary>
            Handles creation and initialization of instances of text provider objects.
            </summary>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextProviderFactory.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="factoryName">Name of the provider factory.</param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextProviderFactory.#ctor(System.String,Checkbox.Globalization.Configuration.GlobalizationConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="factoryName">Name of the provider factory.</param>
            <param name="config">Globalization configuration information.</param>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextProviderFactory.GetTextProvider">
            <summary>
            Get an instance of an text provider.
            </summary>
            <returns>Instance of the default <see cref="T:Checkbox.Globalization.Text.ITextProvider" />.</returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextProviderFactory.GetTextProvider(System.String)">
            <summary>
            Get an instance of an text provider with the specified name.
            </summary>
            <param name="providerName">Name of the provider to get an instance of.</param>
            <returns>Instance of the specified <see cref="T:Checkbox.Globalization.Text.ITextProvider" />.</returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextProviderFactory.GetConfigurationObject(System.String)">
            <summary>
            Get the configuration object for the specified provider.
            </summary>
            <param name="providerName">Name of the provider to get configuration for.</param>
            <returns><see cref="T:Prezza.Framework.Configuration.ProviderData" /> object for the specified provider.</returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextProviderFactory.GetConfigurationType(System.String)">
            <summary>
            Get the <see cref="T:System.Type" /> of the specified text provider.
            </summary>
            <param name="textProviderName">Name of the text provider.</param>
            <returns><see cref="T:System.Type" /> of the specified text provider.</returns>
        </member>
        <member name="M:Checkbox.Globalization.Text.TextProviderFactory.GetDefaultInstanceName">
            <summary>
            Get the name of the default text provider (if specified in the configuration).
            </summary>
            <returns>Name of the default text provider.</returns>
        </member>
        <member name="T:Checkbox.Help.HelpManager">
            <summary>
            Static class for providing context-sensitive help links.
            </summary>
        </member>
        <member name="P:Checkbox.Help.HelpManager.HelpContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Help.HelpManager.GetHelpContext(System.String)">
            <summary>
            Retrieve the help URL for a specified page context.
            If an associated help file can not be found an empty string is returned.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Help.HelpManager.GetContextId(System.String,System.String)">
            <summary>
            Retrieve the id of the help page associated with a given page and skin type.
            </summary>
            <param name="pageContext">The page.</param>
            <param name="skinName">The skin type.</param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Messaging.Email.BaseEmailProvider">
            <summary>
            Base email provider class.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.BaseEmailProvider.ConfigurationName">
            <summary>
            Get/set configuration name for the email provider
            </summary>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the provider with its configuration
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.AddLineBreaks(System.String)">
            <summary>
            Add line breaks to a string using the max line length application setting if it is enabled.
            </summary>
            <param name="stringToBreak"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Messaging.Email.BaseEmailProvider.SupportsBatches">
            <summary>
            Return a boolean indicating if the email provider supports batches or not.
            </summary>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.SendMessage(System.String,System.String,Checkbox.Messaging.Email.IEmailMessage,System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="createdBy"></param>
            <param name="message"></param>
            <param name="earliestSendDate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.CreateEmailMessageBatch(System.String,System.String,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="createdBy"></param>
            <param name="earliestSendDate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.AddEmailMessageToBatch(System.Int64,Checkbox.Messaging.Email.IEmailMessage)">
            <summary>
            
            </summary>
            <param name="batchId"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.CloseEmailMessageBatch(System.Int64)">
            <summary>
            
            </summary>
            <param name="batchId"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.GetEmailMessageStatus(System.Int64)">
            <summary>
            
            </summary>
            <param name="emailId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.GetEmailMessageBatchStatus(System.Int64)">
            <summary>
            
            </summary>
            <param name="batchId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.DeleteEmailMessage(System.Int64)">
            <summary>
            Delete a queued message.
            </summary>
            <param name="messageId"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.DeleteEmailMessageBatch(System.Int64)">
            <summary>
            Delete a queued message batch.
            </summary>
            <param name="batchId"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.RegisterMessageAttachment(Checkbox.Messaging.Email.IEmailAttachment)">
            <summary>
            Register a message attachment for inclusion with email messages.
            </summary>
            <param name="attachment"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.DeleteMessageAttachment(System.Int64)">
            <summary>
            Delete an email message attachment
            </summary>
            <param name="attachmentId"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.GetMessage(System.Int64)">
            <summary>
            Retrieve an email message.
            </summary>
            <param name="messageId">Id of message to retrieve.</param>
            <returns>Message values.</returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.SetMessageBatchDate(System.Int64,System.DateTime)">
            <summary>
            Changes the scheduled date for the batch
            </summary>
            <param name="batchId">Id of the batch</param>
            <param name="scheduledDate">New date when the batch should be sent</param>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.DoInitialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Overridable configuration method
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.Send(Checkbox.Messaging.Email.IEmailMessage)">
            <summary>
            Perform the work of sending the email message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.DoSendMessage(Checkbox.Messaging.Email.IEmailMessage)">
            <summary>
            Overridable method to send the message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.DoSendMessage(System.String,System.String,Checkbox.Messaging.Email.IEmailMessage,System.Nullable{System.DateTime})">
            <summary>
            Send message for specific providers to override.
            </summary>
            <param name="name"></param>
            <param name="createdBy"></param>
            <param name="message"></param>
            <param name="earliestSendDate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.DoCreateEmailMessageBatch(System.String,System.String,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Create batch  for specific providers to override.
            </summary>
            <param name="name"></param>
            <param name="createdBy"></param>
            <param name="earliestSendDate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.DoAddEmailMessageToBatch(System.Int64,Checkbox.Messaging.Email.IEmailMessage)">
            <summary>
            Add message to batch  for specific providers to override.
            </summary>
            <param name="message"></param>
            <param name="batchId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.DoCloseEmailMessageBatch(System.Int64)">
            <summary>
            Close batch  for specific providers to override.
            </summary>
            <param name="batchId"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.DoGetEmailMessageStatus(System.Int64)">
            <summary>
            Get message status for specific providers to override.
            </summary>
            <param name="emailId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.DoGetEmailMessageBatchStatus(System.Int64)">
            <summary>
            Get message batch status  for specific providers to override.
            </summary>
            <param name="batchId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.DoDeleteEmailMessage(System.Int64)">
            <summary>
            Delete an email message
            </summary>
            <param name="messageId"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.DoDeleteEmailMessageBatch(System.Int64)">
            <summary>
            Delete an email batch for specific providers to override.
            </summary>
            <param name="batchId"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.DoRegisterEmailAttachment(Checkbox.Messaging.Email.IEmailAttachment)">
            <summary>
            Register an attachment for specific providers to override.
            </summary>
            <param name="attachment"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.DoDeleteMessageAttachment(System.Int64)">
            <summary>
            Delete a previously-registered email attachment for specific providers to override.
            </summary>
            <param name="attachmentId"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.DoGetMessage(System.Int64)">
            <summary>
            Overridable method to get an email message.
            </summary>
            <param name="messageId"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.GetBatchErrorText(System.Int32)">
            <summary>
            Returns recent status of the batch
            </summary>
            <param name="scheduleID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.BaseEmailProvider.GetBouncedEmails(System.Int32)">
            <summary>
            Returns an array of bounced emails
            </summary>
            <param name="scheduleID"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Messaging.Email.BatchStatus">
            <summary>
            Enumerated type defining email message batch status.
            </summary>
        </member>
        <member name="F:Checkbox.Messaging.Email.BatchStatus.Unknown">
            <summary>
            Unknown, reserved for error cases.
            </summary>
        </member>
        <member name="F:Checkbox.Messaging.Email.BatchStatus.Pending">
            <summary>
            Batch is pending.  It has been created and can still accept new email messages.
            </summary>
        </member>
        <member name="F:Checkbox.Messaging.Email.BatchStatus.Closed">
            <summary>
            Batch is closed.  It is ready for sending and no messages can be accepted.
            </summary>
        </member>
        <member name="F:Checkbox.Messaging.Email.BatchStatus.Sending">
            <summary>
            Messages in the batch are currently sending.
            </summary>
        </member>
        <member name="F:Checkbox.Messaging.Email.BatchStatus.Completed">
            <summary>
            All messages have been sent for delivery.  Completed status indicates only that an attempt
            to send each message was made, not whether all messages were sent successfully.
            </summary>
        </member>
        <member name="T:Checkbox.Messaging.Email.DatabaseRelayEmailProvider">
            <summary>
            Custom email provider that operates by placing sent mail data into a database for later retrieval and 
            sending by an external process.
            </summary>
            <remarks>Uses the default or master database depending on whether multi db mode is enabled.</remarks>
        </member>
        <member name="P:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.SupportsBatches">
            <summary>
            Provider supports batches, so always return true
            </summary>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.DoSendMessage(Checkbox.Messaging.Email.IEmailMessage)">
            <summary>
            Send a message outside of a batch
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.DoSendMessage(System.String,System.String,Checkbox.Messaging.Email.IEmailMessage,System.Nullable{System.DateTime})">
            <summary>
            Send a message outside of a batch.
            </summary>
            <param name="name"></param>
            <param name="createdBy"></param>
            <param name="message"></param>
            <param name="earliestSendDate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.DoInitialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the provider with its connection string
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.GetBatchErrorText(System.Int32)">
            <summary>
            Returns recent status of the batch
            </summary>
            <param name="scheduleID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.GetBouncedEmails(System.Int32)">
            <summary>
            Returns an array of bounced emails
            </summary>
            <param name="scheduleID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.DoCreateEmailMessageBatch(System.String,System.String,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Create an email message batch
            </summary>
            <param name="name"></param>
            <param name="createdBy"></param>
            <param name="earliestSendDate"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.DoCloseEmailMessageBatch(System.Int64)">
            <summary>
            Mark a batch as closed
            </summary>
            <param name="batchId"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.DoAddEmailMessageToBatch(System.Int64,Checkbox.Messaging.Email.IEmailMessage)">
            <summary>
            Add an email message to a batch.
            </summary>
            <param name="batchId"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.DoRegisterEmailAttachment(Checkbox.Messaging.Email.IEmailAttachment)">
            <summary>
            Register an email attachment.
            </summary>
            <param name="attachment"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.DoDeleteEmailMessage(System.Int64)">
            <summary>
            Delete an email message
            </summary>
            <param name="messageId"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.DoDeleteEmailMessageBatch(System.Int64)">
            <summary>
            Delete a message batch
            </summary>
            <param name="batchId"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.DoDeleteMessageAttachment(System.Int64)">
            <summary>
            Delete a message attachment
            </summary>
            <param name="attachmentId"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.DoGetEmailMessageBatchStatus(System.Int64)">
            <summary>
            Get the status of an email message batch
            </summary>
            <param name="batchId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.DoGetEmailMessageStatus(System.Int64)">
            <summary>
            Get the status of an email message
            </summary>
            <param name="emailId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.DoGetMessage(System.Int64)">
            <summary>
            Get data for a particular email message.
            </summary>
            <param name="messageId">Id of message to get.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.GetDatabaseProvider">
            <summary>
            Get a reference to a database provider for the mail queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.QueueEmailMessage(System.Nullable{System.Int64},Checkbox.Messaging.Email.IEmailMessage,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="batchId"></param>
            <param name="message"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.QueueEmailMessageAttachments(System.Int64,System.Collections.Generic.List{System.Int64},System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="messageId"></param>
            <param name="attachments"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.QueueEmailMessageAttachments(System.Int64,System.Collections.Generic.List{Checkbox.Messaging.Email.IEmailAttachment},System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="messageId"></param>
            <param name="attachments"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.AddAttachmentToMessage(System.Int64,System.Int64,System.Data.IDbTransaction)">
            <summary>
            Add a reference to an attachment to a message.
            </summary>
            <param name="messageId"></param>
            <param name="attachmentId"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.RegisterEmailMessageAttachment(System.Nullable{System.Int64},Checkbox.Messaging.Email.IEmailAttachment,System.Data.IDbTransaction)">
            <summary>
            Store an email attachment and return its database id
            </summary>
            <param name="messageId"></param>
            <param name="attachment"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.QueueEmailMessage(System.Nullable{System.Int64},Checkbox.Messaging.Email.IEmailMessage)">
            <summary>
            Queue an email message for sending
            </summary>
            <param name="batchId"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProvider.SetMessageBatchDate(System.Int64,System.DateTime)">
            <summary>
            Changes the scheduled date for the batch
            </summary>
            <param name="batchId">Id of the batch</param>
            <param name="scheduledDate">New date when the batch should be sent</param>
        </member>
        <member name="T:Checkbox.Messaging.Email.DatabaseRelayEmailProviderData">
            <summary>
            Data store for database relay email provider.
            </summary>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProviderData.#ctor(System.String)">
            <summary>
            Construct an instance of a new email provider data object.
            </summary>
            <param name="providerName"></param>
        </member>
        <member name="P:Checkbox.Messaging.Email.DatabaseRelayEmailProviderData.MailDbInstanceName">
            <summary>
            Get name of database connection to use for queuing emails.
            </summary>
        </member>
        <member name="M:Checkbox.Messaging.Email.DatabaseRelayEmailProviderData.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load provider configuration data from Xml
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Checkbox.Messaging.Email.EmailAttachment">
            <summary>
            Email attachment implementation.
            </summary>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailAttachment.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailAttachment.#ctor(System.String,System.String)">
            <summary>
            Construct an email attachment with string content
            </summary>
            <param name="contentType">Attachment content type.</param>
            <param name="content"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailAttachment.#ctor(System.String,System.Byte[])">
            <summary>
            Construct an email attachment with binary content
            </summary>
            <param name="contentType">Attachment content type.</param>
            <param name="content"></param>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailAttachment.FileName">
            <summary>
            Get/set file name
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailAttachment.MimeContentTypeString">
            <summary>
            Get/set content type
            </summary>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailAttachment.GetContentStream">
            <summary>
            Get a stream for the content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailAttachment.GetContentStream(System.String)">
            <summary>
            Get a stream for reading string content.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailAttachment.GetContentStream(System.Byte[])">
            <summary>
            Get a stream for byte content.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Messaging.Email.EmailMessageBatchStatus">
            <summary>
            Container class for providing email message batch status
            information.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessageBatchStatus.SuccessfullySent">
            <summary>
            Get/set indicator of whether the batch, as a whole, was succesful.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessageBatchStatus.BatchSendStarted">
            <summary>
            Get/set the time the batch started
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessageBatchStatus.BatchSendCompleted">
            <summary>
            Get/set the time the batch ended
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessageBatchStatus.NextSendAttempt">
            <summary>
            Get/set the next send attempt for the batch.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessageBatchStatus.CurrentStatus">
            <summary>
            Get/set the current batch status.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessageBatchStatus.FailedMessages">
            <summary>
            Get/set list of identifiers for failed messages.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessageBatchStatus.AttemptedCount">
            <summary>
            Get/set number of messages attempted to send as part of batch
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessageBatchStatus.SucceededCount">
            <summary>
            Get/set number of messages sent successfully
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessageBatchStatus.FailedCount">
            <summary>
            Get/set number of messages failed
            </summary>
        </member>
        <member name="T:Checkbox.Messaging.Email.EmailMessageStatus">
            <summary>
            Container class used to provide message status information.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessageStatus.SuccessfullySent">
            <summary>
            Get/set whether the email was sent successfully.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessageStatus.LastSendAttempt">
            <summary>
            Get/set the date/time of the last send attempt
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessageStatus.NextSendAttempt">
            <summary>
            Get/set the date/time of the next send attempt.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessageStatus.LastSendError">
            <summary>
            Get/set the text of the last send error.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessageStatus.BatchId">
            <summary>
            Get BatchId value.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessageStatus.QueuedDate">
            <summary>
            Get/set when message was queued
            </summary>
        </member>
        <member name="T:Checkbox.Messaging.Email.EmailProviderDoesNotSupportBatchesException">
            <summary>
            Exception for cases where an attempt was made to call batch methods on an email provider that does not support
            batches.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailProviderDoesNotSupportBatchesException.Message">
            <summary>
            Get the error message.
            </summary>
        </member>
        <member name="T:Checkbox.Messaging.Email.IEmailAttachment">
            <summary>
            Interface definiation for email attachments for the Checkbox
            email gateway.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailAttachment.FileName">
            <summary>
            Attachment file name
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailAttachment.MimeContentTypeString">
            <summary>
            Get the email attachment mime content type
            </summary>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailAttachment.GetContentStream">
            <summary>
            Get a stream for reading the attachment content.
            </summary>
            <returns>Content stream.</returns>
        </member>
        <member name="T:Checkbox.Messaging.Email.IEmailMessageBatchStatus">
            <summary>
            Get status information for a batch of emails.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessageBatchStatus.SuccessfullySent">
            <summary>
            Get a boolean indicating if the message was sent successfully.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessageBatchStatus.BatchSendStarted">
            <summary>
            Get the date/time the last attempt to send the message was started.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessageBatchStatus.BatchSendCompleted">
            <summary>
            Get date/time send completed
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessageBatchStatus.NextSendAttempt">
            <summary>
            Get the date/time the next attempt to send the message will occur.  Generally,
            this will only apply to messages that have a "Do Not Send Before" time specified.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessageBatchStatus.CurrentStatus">
            <summary>
            Get the current status of the batch.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessageBatchStatus.FailedMessages">
            <summary>
            Get a list of identifiers for messages that were not sent successfully.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessageBatchStatus.AttemptedCount">
            <summary>
            Get the number of message sends attempted.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessageBatchStatus.SucceededCount">
            <summary>
            Get the number of successfully sent messages.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessageBatchStatus.FailedCount">
            <summary>
            Get the number of failed messages.
            </summary>
        </member>
        <member name="T:Checkbox.Messaging.Email.IEmailMessageStatus">
            <summary>
            Interface definition for an object that provides status information about email messages.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessageStatus.SuccessfullySent">
            <summary>
            Get a boolean indicating if the message was sent successfully.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessageStatus.LastSendAttempt">
            <summary>
            Get the date/time the last attempt to send the message was made.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessageStatus.NextSendAttempt">
            <summary>
            Get the date/time the next attempt to send the message will occur.  Generally,
            this will only apply to messages that have a "Do Not Send Before" time specified.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessageStatus.LastSendError">
            <summary>
            Get the error message from an unsuccessful send attempt.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessageStatus.BatchId">
            <summary>
            Get BatchId value.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessageStatus.QueuedDate">
            <summary>
            Get/set when message was queued
            </summary>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailFactory.#cctor">
            <summary>
            Constructor.  Since this class only exposes static methods, there
            should be no need to call the constructor.
            </summary>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailFactory.ChangeEmailProvider(System.String)">
            <summary>
            
            </summary>
            <param name="providerName"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailFactory.GetEmailProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailFactory.GetEmailProvider(System.String)">
            <summary>
            Create and initialize an instance of the specified email 
            provider. 
            </summary>
            <param name="emailProvider">Name of the email provider to instantiate and initialize.</param>
            <returns>Initialized instance of an email provider.</returns>
            <remarks>
            The returned email provider implements the 
            <see cref="T:Checkbox.Messaging.Email.IEmailProvider" /> interface.</remarks>
            <exception cref="T:System.ArgumentNullException">emailProvider is null</exception>
            <exception cref="T:System.ArgumentException">emailProvider is empty</exception>
            <exception cref="T:System.Exception">Could not find instance specified in emailProvider</exception>
            <exception cref="T:System.InvalidOperationException">Error processing configuration information defined in application configuration file.</exception>
        </member>
        <member name="T:Checkbox.Messaging.Email.EmailGateway">
            <summary>
            Public gateway for sending email messages.  Handles some batch support as well as other operations.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailGateway.ProviderSupportsBatches">
            <summary>
            Return a boolean indicating if the designated email provider supports email batching
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailGateway.HasBatchSupportiveProvider">
            <summary>
            Return a boolean indicating if the configuration contains the provider that supports batches
            </summary>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailGateway.ChangeEmailProvider(System.String)">
            <summary>
            Changes the default e-mail provider
            </summary>
            <param name="providerName"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailGateway.Send(Checkbox.Messaging.Email.IEmailMessage)">
            <summary>
            If application email is enabled, instantiate an email provider and use it to send the specified message.
            If email is not enabled, no email sending occurs.
            If email test mode is enabled, the executing thread sleeps for a configurable amount of time. <see cref="P:Checkbox.Management.AppSettings.EmailTestModeSleepTime"/>
            </summary>
            <param name="message">Message to send.</param>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailGateway.CreateEmailBatch(System.String,System.String,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Create a new batch for sending emails.  
            </summary>
            <param name="batchName">Name of new batch.</param>
            <param name="createdBy">Creator of the new batch.</param>
            <param name="earliestSendDate">Earliest date/time batch should be sent, subject to support by the 
            configured email provider.</param>
            <returns>Identifer for the batch.</returns>
            <remarks>Configured email provider must support batch operations or an exception will be thrown.</remarks>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailGateway.MarkEmailBatchReady(System.Int64)">
            <summary>
            Mark a previously created email batch as ready for sending.
            </summary>
            <param name="batchId">Database Id of batch to send.</param>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailGateway.AddEmailMessageToBatch(System.Int64,Checkbox.Messaging.Email.IEmailMessage)">
            <summary>
            Add the specified email message to a previously created message batch.
            </summary>
            <param name="batchId">Id of batch to add the message to.</param>
            <param name="message">Message to add.</param>
            <returns>Identifier for the added message.</returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailGateway.RegisterAttachment(Checkbox.Messaging.Email.IEmailAttachment)">
            <summary>
            Register an attachment with the email provider for inclusion "by reference" in separate emails.
            </summary>
            <param name="attachment"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailGateway.GetMessageBatchStatus(System.Int64)">
            <summary>
            Get the status of a previously created email batch.
            </summary>
            <param name="batchId">ID of batch to get status of.</param>
            <returns>Object containing batch status information.</returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailGateway.GetMessageStatus(System.Int64)">
            <summary>
            Get the status of a previously created email message.
            </summary>
            <param name="messageId">ID of message to get status of.</param>
            <returns>Object containing message status information.</returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailGateway.DeleteMessage(System.Int64)">
            <summary>
            Delete an email message from the message Queue.
            </summary>
            <param name="messageId">Id of message to delete.</param>
            <remarks>This will remove a message from the messaging queue.</remarks>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailGateway.DeleteMessageBatch(System.Int64)">
            <summary>
            Delete an email message from the message Queue.
            </summary>
            <param name="batchId">Id of batch to delete.</param>
            <remarks>This will remove a batch and associated messages from the messaging queue.</remarks>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailGateway.GetMessageFromBatch(System.Int64)">
            <summary>
            Retrieve a message that was previously submitted to the message Queue.  Not all providers
            support this method, so null values may be returned when the message can't be found AND
            when the provider does not support retrieving messages at a later date.
            </summary>
            <param name="messageId">Id of message to retrieve.</param>
            <returns>Message object representing email message.</returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailGateway.SetMessageBatchDate(System.Int64,System.DateTime)">
            <summary>
            
            </summary>
            <param name="messageId"></param>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailGateway.GetBatchErrorText(System.Int32)">
            <summary>
            Get the status of a previously created email batch.
            </summary>
            <param name="batchId">ID of batch to get status of.</param>
            <returns>Object containing batch status information.</returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailGateway.GetBouncedEmails(System.Int32)">
            <summary>
            Returns an array of bounced emails
            </summary>
            <param name="scheduleID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailGateway.GetBouncedEmails">
            <summary>
            Returns an array of bounced emails
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailProviderFactory.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="factoryName">Name of the provider factory.</param>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailProviderFactory.#ctor(System.String,Checkbox.Messaging.Configuration.MessagingConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="factoryName">Name of the provider factory.</param>
            <param name="config">Messaging configuration information.</param>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailProviderFactory.GetEmailProvider">
            <summary>
            Get an instance of an email provider.
            </summary>
            <returns>Instance of the default <see cref="T:Checkbox.Messaging.Email.IEmailProvider" />.</returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailProviderFactory.GetEmailProvider(System.String)">
            <summary>
            Get an instance of an email provider with the specified name.
            </summary>
            <param name="providerName">Name of the provider to get an instance of.</param>
            <returns>Instance of the specified <see cref="T:Checkbox.Messaging.Email.IEmailProvider" />.</returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailProviderFactory.GetConfigurationObject(System.String)">
            <summary>
            Get the configuration object for the specified provider.
            </summary>
            <param name="providerName">Name of the provider to get configuration for.</param>
            <returns><see cref="T:Prezza.Framework.Configuration.ProviderData" /> object for the specified provider.</returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailProviderFactory.GetConfigurationType(System.String)">
            <summary>
            Get the <see cref="T:System.Type" /> of the specified email provider.
            </summary>
            <param name="emailProviderName">Name of the email provider.</param>
            <returns><see cref="T:System.Type" /> of the specified email provider.</returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.EmailProviderFactory.GetDefaultInstanceName">
            <summary>
            Get the name of the default email provider (if specified in the configuration).
            </summary>
            <returns>Name of the default email provider.</returns>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailProviderFactory.HasBatchSupportiveProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Messaging.Email.IEmailMessage">
            <summary>
            Interface definition for email messages distributed by Checkbox.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessage.From">
            <summary>
            Get the email message "From" address.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessage.To">
            <summary>
            Get the address of the email recipient.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessage.Subject">
            <summary>
            Get the email message subject
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessage.Body">
            <summary>
            Get the email message body.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessage.IsBodyHtml">
            <summary>
            Get a boolean indicating if the message body contains html
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessage.Attachments">
            <summary>
            Get a list of attachments for the email
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailMessage.AttachmentsByRef">
            <summary>
            For sake of efficiency, also support adding attachments by "reference" 
            with attachment id.  This feature is only used by batch email providers.
            </summary>
        </member>
        <member name="T:Checkbox.Messaging.Email.IEmailProvider">
            <summary>
            Interface for email providers used by Checkbox.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.IEmailProvider.SupportsBatches">
            <summary>
            Get a boolean value indicating if the email provider supports batch operations.
            </summary>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailProvider.Send(Checkbox.Messaging.Email.IEmailMessage)">
            <summary>
            Send the specified email message and return an identifier that can be used later
            to check the status of the sent message.  For email providers that don't support
            later querying for message status, a NULL value will be returned.  Messages sent using
            this method are not part of any email batches.
            </summary>
            <param name="message">Message to send.</param>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailProvider.SendMessage(System.String,System.String,Checkbox.Messaging.Email.IEmailMessage,System.Nullable{System.DateTime})">
            <summary>
            Queue an email to be sent outside the context of a batch.
            </summary>
            <param name="name">Name associated with the message.</param>
            <param name="createdBy">Creator of the message.</param>
            <param name="message">Message to sent.</param>
            <param name="earliestSendDate">Optional earliest send date for the message.  If the value is null,
            the message will be queued for immediate delivery.</param>
            <returns>Identifier representing the message.</returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailProvider.CreateEmailMessageBatch(System.String,System.String,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Create an email message batch.  
            </summary>
            <param name="name">Name of batch.</param>
            <param name="createdBy">Creator of the batch.</param>
            <param name="earliestSendDate">Earliest delivery date for the batch.  A NULL value indicates that the batch should be sent
            as soon as it is "closed".</param>
            <param name="scheduleID">Id of the schedule record</param>
            <returns>Identifier of newly created batch.</returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailProvider.AddEmailMessageToBatch(System.Int64,Checkbox.Messaging.Email.IEmailMessage)">
            <summary>
            Add an email message to the specified batch.
            </summary>
            <param name="batchId">Identifier of batch to add.</param>
            <param name="message">Email message to add to the batch.</param>
            <returns>Identifier for the email message.</returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailProvider.CloseEmailMessageBatch(System.Int64)">
            <summary>
            "Close" a batch, which means all emails have been added and it is now ready to be sent.
            </summary>
            <param name="batchId">Identifier of the batch to close.</param>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailProvider.GetEmailMessageStatus(System.Int64)">
            <summary>
            Get the status of an email message.
            </summary>
            <param name="emailId">Identifier of email message to get the status of.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailProvider.GetMessage(System.Int64)">
            <summary>
            Get the contents of an email message.
            </summary>
            <param name="emailId"></param>
            <returns>IEmailMessage object containing message information.</returns>
            <remarks>Not all email providers will support this method.  Providers that do not support this method
            should return null values.</remarks>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailProvider.GetEmailMessageBatchStatus(System.Int64)">
            <summary>
            Get the status of an email message batch.
            </summary>
            <param name="batchId">Identifier of message batch to get status of.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailProvider.RegisterMessageAttachment(Checkbox.Messaging.Email.IEmailAttachment)">
            <summary>
            Register a message attachment to be used a a "by ref" attachment.  This allows multiple
            emails to have the same attachment without the need to upload the attachment to the queue
            database for each message.
            </summary>
            <param name="attachment"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailProvider.DeleteEmailMessage(System.Int64)">
            <summary>
            Delete an email message from the queue of messages to send.
            </summary>
            <param name="messageId">Id of message to delete.</param>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailProvider.DeleteEmailMessageBatch(System.Int64)">
            <summary>
            Delete a message batch and all messages that are part of the batch.
            </summary>
            <param name="batchId">Id of batch to delete.</param>
            <remarks>Batches that are in-progress can be deleted.  Depending on the underlying provider implementation,
            the deleting the batch mid-send may not abort the batch.</remarks>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailProvider.DeleteMessageAttachment(System.Int64)">
            <summary>
            Remove a message attachment from the database.  If the attachment is in use by any existing messages, it will
            be removed from those messages as well.
            </summary>
            <param name="attachmentId">Id of attachment to delete.</param>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailProvider.SetMessageBatchDate(System.Int64,System.DateTime)">
            <summary>
            Changes the scheduled date for the batch
            </summary>
            <param name="batchId">Id of the batch</param>
            <param name="scheduledDate">New date when the batch should be sent</param>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailProvider.GetBatchErrorText(System.Int32)">
            <summary>
            Returns recent status of the batch
            </summary>
            <param name="scheduleID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailProvider.GetBouncedEmails(System.Int32)">
            <summary>
            Returns an array of bounced emails
            </summary>
            <param name="scheduleID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Messaging.Email.IEmailProvider.GetBouncedEmails">
            <summary>
            Returns all bounced emails
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Messaging.Email.EmailMessage">
            <summary>
            Handles operations relating to the sending of Email through the application
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessage.From">
            <summary>
            Gets and sets the From address for this EmailMessage
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessage.To">
            <summary>
            Gets and sets the To address for this EmailMessage
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessage.Subject">
            <summary>
            Gets and sets the Subject for this EmailMessage
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessage.Body">
            <summary>
            Gets and sets the Body for this EmailMessage
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessage.Format">
            <summary>
            Gets and sets the <see cref="T:Checkbox.Messaging.Email.MailFormat"/> for this EmailMessage
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessage.IsBodyHtml">
            <summary>
            Return a boolean indicating if the body is html
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessage.Attachments">
            <summary>
            Get the email message attachments
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Email.EmailMessage.AttachmentsByRef">
            <summary>
            Message reference attachments
            </summary>
        </member>
        <member name="T:Checkbox.Messaging.Email.MailFormat">
            <summary>
            Email message format.
            </summary>
        </member>
        <member name="F:Checkbox.Messaging.Email.MailFormat.Html">
            <summary>
            HTML
            </summary>
        </member>
        <member name="F:Checkbox.Messaging.Email.MailFormat.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="T:Checkbox.Messaging.Configuration.MessagingConfiguration">
            <summary>
            Configuration data for messaging services.
            </summary>
        </member>
        <member name="P:Checkbox.Messaging.Configuration.MessagingConfiguration.EMailProviders">
            <summary>
            All registered providers
            </summary>
        </member>
        <member name="M:Checkbox.Messaging.Configuration.MessagingConfiguration.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Checkbox.Messaging.Configuration.MessagingConfiguration.#ctor(System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="P:Checkbox.Messaging.Configuration.MessagingConfiguration.DefaultEmailProvider">
            <summary>
            Name of the default email provider (if specified in the configuration file)
            </summary>
        </member>
        <member name="M:Checkbox.Messaging.Configuration.MessagingConfiguration.GetEmailProviderConfig(System.String)">
            <summary>
            Get the custom configuration object for the specified email provider.
            </summary>
            <param name="providerName">Name of the email provider.</param>
            <returns>Custom configuration object that extends the <see cref="T:Prezza.Framework.Configuration.ProviderData" /> class.</returns>
        </member>
        <member name="M:Checkbox.Messaging.Configuration.MessagingConfiguration.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load messaging configuration from XML.
            </summary>
            <param name="node">Root node of messaging configuration file/section.</param>
        </member>
        <member name="T:Checkbox.Pagination.PaginationContext">
            <summary>
            An encapsulation of properties that are common to all paged/filtered/sorted lists of items.
            </summary>
        </member>
        <member name="P:Checkbox.Pagination.PaginationContext.StartDate">
            <summary>
             Filter by start date
            </summary>
        </member>
        <member name="P:Checkbox.Pagination.PaginationContext.EndDate">
            <summary>
             Filter by end date
            </summary>
        </member>
        <member name="P:Checkbox.Pagination.PaginationContext.DateFieldName">
            <summary>
             Filter by event
            </summary>
        </member>
        <member name="P:Checkbox.Pagination.PaginationContext.CurrentPage">
            <summary>
            The index of the current page being displayed in the grid.
            </summary>
        </member>
        <member name="P:Checkbox.Pagination.PaginationContext.FilterField">
            <summary>
            The property/column that grid data is filtered by.
            </summary>
        </member>
        <member name="P:Checkbox.Pagination.PaginationContext.FilterValue">
            <summary>
            The value to filter grid data by.
            </summary>
        </member>
        <member name="P:Checkbox.Pagination.PaginationContext.IsFiltered">
            <summary>
            Indicates if the content of the grid is filtered.
            </summary>
        </member>
        <member name="P:Checkbox.Pagination.PaginationContext.IsSorted">
            <summary>
            Indicates if the content of the grid is sorted.
            </summary>
        </member>
        <member name="P:Checkbox.Pagination.PaginationContext.ItemCount">
            <summary>
            The total number of items that fulfill the filter and permission requirements.
            </summary>
        </member>
        <member name="P:Checkbox.Pagination.PaginationContext.Permissions">
            <summary>
            The minimum permissions a user must have in order to view an item in the grid.
            </summary>
        </member>
        <member name="P:Checkbox.Pagination.PaginationContext.PageSize">
            <summary>
            The maximum number of items which can be displayed on a page.
            </summary>
        </member>
        <member name="P:Checkbox.Pagination.PaginationContext.SortAscending">
            <summary>
            Determines if grid data is sorted in ascending or descending order.
            </summary>
        </member>
        <member name="P:Checkbox.Pagination.PaginationContext.SortField">
            <summary>
            The property/column that grid data is sorted by.
            </summary>
        </member>
        <member name="P:Checkbox.Pagination.PaginationContext.PermissionJoin">
            <summary>
            Get/set how permissions should be joined.
            </summary>
        </member>
        <member name="M:Checkbox.Pagination.PaginationContext.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Pagination.PaginationContext.GetStartIndex">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Checkbox.Pagination.PaginationContext.GetEndIndex(System.Int32)">
            <summary>
            
            </summary>
            <param name="rowCount"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Panels.AdHocEmailListPanel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Panels.AdHocEmailListPanel.#ctor">
            <summary>
            Panel constructor
            </summary>
        </member>
        <member name="P:Checkbox.Panels.AdHocEmailListPanel.ObjectTypeName">
            <summary>
            Get name of object
            </summary>
        </member>
        <member name="P:Checkbox.Panels.AdHocEmailListPanel.PanelTypeName">
            <summary>
            Panel type name
            </summary>
        </member>
        <member name="M:Checkbox.Panels.AdHocEmailListPanel.AddEmailAddress(System.String)">
            <summary>
            Add an email address
            </summary>
            <param name="email"></param>
        </member>
        <member name="M:Checkbox.Panels.AdHocEmailListPanel.AddEmailAddresses(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add email addresses
            </summary>
            <param name="emailAddresses"></param>
        </member>
        <member name="M:Checkbox.Panels.AdHocEmailListPanel.RemoveEmailAddress(System.String)">
            <summary>
            Remove an email address from a panel
            </summary>
            <param name="email"></param>
        </member>
        <member name="M:Checkbox.Panels.AdHocEmailListPanel.RemoveEmailAddresses(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove email addresses from a panel
            </summary>
            <param name="emailAddresses"></param>
        </member>
        <member name="M:Checkbox.Panels.AdHocEmailListPanel.GetInsertPanelistCommand(Prezza.Framework.Data.Database,System.String)">
            <summary>
            Get a command to insert a panelist
            </summary>
            <param name="db"></param>
            <param name="panelistEmail"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.AdHocEmailListPanel.GetDeletePanelistCommand(Prezza.Framework.Data.Database,System.String)">
            <summary>
            Get a command to update a panelist
            </summary>
            <param name="db"></param>
            <param name="panelistEmail"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.AdHocEmailListPanel.GetDeletePanelistCommand_Old(Prezza.Framework.Data.Database,System.String)">
            <summary>
            Get a command to update a panelist
            Use this function to delete old-formatted names with apostrophe
            As example, there is in the database could be stored an address like o''neal@domen.com instead of o'neal@domen.com
            </summary>
            <param name="db"></param>
            <param name="panelistEmail"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.AdHocEmailListPanel.UpdatePanelists(System.Data.IDbTransaction)">
            <summary>
            Update the list of panelists
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Panels.AdHocEmailListPanel.GetPanelists">
            <summary>
            Get list of panelists
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Checkbox.Panels.EmailListManager.GetAccessibleEmailLists(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext)" -->
        <member name="M:Checkbox.Panels.EmailListManager.GetEmailListPanel(System.Int32)">
            <summary>
            
            </summary>
            <param name="panelId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.EmailListManager.IsDuplicateName(System.Nullable{System.Int32},System.String)">
            <summary>
            Determines if a proposed name is already used by an existing email list.
            </summary>
            <param name="emailListID">ID of an email list to ignore when checking for duplicates.</param>
            <param name="proposedName">Name to check.</param>
            <returns>True if an email list other than the one specified by emailListID exists with the specified name; 
            False in all other cases. 
            </returns>
        </member>
        <member name="M:Checkbox.Panels.EmailListManager.ListEmailLists(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext)">
            <summary>
            Gets all EmailLists available for use by the logged-in user.
            </summary>
        </member>
        <member name="M:Checkbox.Panels.EmailListManager.ListAvailableEmailLists(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext)">
            <summary>
            
            </summary>
            <param name="currentPrincipal">Principal accessing lists</param>
            <param name="paginationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.EmailListManager.ListEditableEmailLists(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext)">
            <summary>
            Gets a list of EmailLists available for editing by the logged-in user
            </summary>
            <param name="principal">Principal to make request on behalf of.</param>
            <param name="paginationContext"></param>
        </member>
        <member name="M:Checkbox.Panels.EmailListManager.CreateEmailList(System.String,System.String,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Create an email list panel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.EmailListManager.CopyEmailList(Checkbox.Panels.EmailListPanel,Checkbox.Security.Principal.CheckboxPrincipal,System.String)">
            <summary>
            Copy the list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.EmailListManager.GetEmailListAddressCount(System.Int32)">
            <summary>
             Get the count of email addresses associated with a given <see cref="T:Checkbox.Panels.EmailListPanel"/>.
            </summary>
            <param name="emailListID">ID of the <see cref="T:Checkbox.Panels.EmailListPanel"/> to get count from.</param>
            <returns>int count of associated email addresses.</returns>
        </member>
        <member name="T:Checkbox.Panels.EmailListPanel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Panels.EmailListPanel.PanelTypeName">
            <summary>
            Return email list panel
            </summary>
        </member>
        <member name="F:Checkbox.Panels.EmailListPanel.EMAIL_ADDRESS_KEY">
            <summary>
            Email address data column.
            </summary>
        </member>
        <member name="F:Checkbox.Panels.EmailListPanel.FIRST_NAME_KEY">
            <summary>
            First name data column.
            </summary>
        </member>
        <member name="F:Checkbox.Panels.EmailListPanel.LAST_NAME_KEY">
            <summary>
            Last name data column.
            </summary>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.RemoveAllAddresses">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.GetPanelists">
            <summary>
            Get list of panelists
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.AddPanelist(System.String)">
            <summary>
            
            </summary>
            <param name="emailAddress"></param>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.AddPanelist(System.String,System.String,System.String)">
            <summary>
            Add a panelist
            </summary>
            <param name="emailAddress"></param>
            <param name="fName"></param>
            <param name="lName"></param>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.RemovePanelists(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove a panelist
            </summary>
            <param name="emailAddresses"></param>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.PanelistExist(System.String)">
            <summary>
            Checks if the address exists in the list
            </summary>
            <param name="emailAddress"></param>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.RemovePanelist(System.String)">
            <summary>
            Removes an email address from the list
            </summary>
            <param name="emailAddress"></param>
        </member>
        <member name="P:Checkbox.Panels.EmailListPanel.Count">
            <summary>
            Gets the count of Panelists in this Panel
            </summary>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.UpdatePanelists(System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.GetInsertPanelistCommand(Prezza.Framework.Data.Database,System.String,System.String,System.String)">
            <summary>
            Get a command to insert panelists
            </summary>
            <param name="db"></param>
            <param name="panelistEmail"></param>
            <param name="fName"></param>
            <param name="lName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.GetDeletePanelistCommand(Prezza.Framework.Data.Database,System.String)">
            <summary>
            Get a command to delete panelists
            </summary>
            <param name="db"></param>
            <param name="panelistEmail"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.CanDelete">
            <summary>
            Determines if a EmailListPanel can be deleted. An EmailListPanel is eligible to be
            deleted if it is not in use by an invitation.
            </summary>
            <returns>True if the panel can be deleted. False if the panel can not be deleted.</returns>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.Delete(System.Data.IDbTransaction)">
            <summary>
            Delete the email list
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load panel data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.Save(Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Save panel
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.Save(Checkbox.Security.Principal.CheckboxPrincipal,System.Data.IDbTransaction)">
            <summary>
            Save panel
            </summary>
            <param name="p"></param>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Panels.EmailListPanel.Create(System.Data.IDbTransaction)">
            <summary>
            Create the panel
            </summary>
            <param name="t"></param>
        </member>
        <member name="T:Checkbox.Panels.GroupPanel">
            <summary>
            Group panel
            </summary>
        </member>
        <member name="M:Checkbox.Panels.GroupPanel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Checkbox.Panels.GroupPanel.PanelTypeName">
            <summary>
            Get panel type name
            </summary>
        </member>
        <member name="P:Checkbox.Panels.GroupPanel.GroupId">
            <summary>
            Get/set group id of group associated w/panel
            </summary>
        </member>
        <member name="P:Checkbox.Panels.GroupPanel.Group">
            <summary>
            Gets or sets the <see cref="P:Checkbox.Panels.GroupPanel.Group"/> for this GroupPanel
            </summary>
        </member>
        <member name="M:Checkbox.Panels.GroupPanel.Create(System.Data.IDbTransaction)">
            <summary>
            Create the group panel
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Panels.GroupPanel.GetPanelists">
            <summary>
            Get list of panelists
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.GroupPanel.GetPanelist(System.String)">
            <summary>
            Get a particular panelist
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.GroupPanel.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the panel from the datarow
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Checkbox.Panels.IPanel">
            <summary>
            Interface definition for invitation panels.
            </summary>
        </member>
        <member name="P:Checkbox.Panels.IPanel.PanelTypeName">
            <summary>
            Get string representation of panel type
            </summary>
        </member>
        <member name="P:Checkbox.Panels.IPanel.Panelists">
            <summary>
            Gets the <see cref="T:Checkbox.Panels.Panelist"/> collection for the IPanel implementation
            </summary>
        </member>
        <member name="M:Checkbox.Panels.IPanel.GetPanelist(System.String)">
            <summary>
            Gets a single <see cref="T:Checkbox.Panels.Panelist"/> given a string key
            </summary>
            <param name="identifier">the unique string id of the Panelist</param>
            <returns>a Panelist</returns>
        </member>
        <member name="T:Checkbox.Panels.LightweightPanel">
            <summary>
            Lightweight representation of a panel suitable for
            the authorization purposes.
            </summary>
        </member>
        <member name="M:Checkbox.Panels.LightweightPanel.#ctor(System.Int32)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="P:Checkbox.Panels.LightweightPanel.PanelID">
            <summary>
            Get/set the template id
            </summary>
        </member>
        <member name="T:Checkbox.Panels.Panel">
            <summary>
            Abstract base for panels
            </summary>
        </member>
        <member name="P:Checkbox.Panels.Panel.PanelId">
            <summary>
            Get id of panel
            </summary>
        </member>
        <member name="P:Checkbox.Panels.Panel.ObjectTypeName">
            <summary>
            Get type of object
            </summary>
        </member>
        <member name="P:Checkbox.Panels.Panel.PanelTypeName">
            <summary>
            Get type name of panel
            </summary>
        </member>
        <member name="P:Checkbox.Panels.Panel.PanelTypeId">
            <summary>
            Get type id of panel
            </summary>
        </member>
        <member name="P:Checkbox.Panels.Panel.Panelists">
            <summary>
            Get list of panelists
            </summary>
        </member>
        <member name="P:Checkbox.Panels.Panel.AddedPanelists">
            <summary>
            Get collection of added panelists
            </summary>
        </member>
        <member name="P:Checkbox.Panels.Panel.RemovedPanelists">
            <summary>
            Get collection of added panelists
            </summary>
        </member>
        <member name="P:Checkbox.Panels.Panel.Description">
            <summary>
            Get/set the panel description
            </summary>
        </member>
        <member name="P:Checkbox.Panels.Panel.CreatedBy">
            <summary>
            Get/set the panel's creator
            </summary>
        </member>
        <member name="P:Checkbox.Panels.Panel.ModifiedBy">
            <summary>
            Get/set the panel's editor
            </summary>
        </member>
        <member name="P:Checkbox.Panels.Panel.LoadSprocName">
            <summary>
            Get procedure used to load panel
            </summary>
        </member>
        <member name="M:Checkbox.Panels.Panel.CreateConfigurationDataSet">
            <summary>
            Create a panel configuration data set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.Panel.LoadPanelists">
            <summary>
            Load panelists for the panel.  Added separately to support
            lazy loading.
            </summary>
        </member>
        <member name="M:Checkbox.Panels.Panel.GetPanelists">
            <summary>
            Get panelists
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.Panel.GetPanelist(System.String)">
            <summary>
            Get the specfied panelist
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.Panel.Update(System.Data.IDbTransaction)">
            <summary>
            Update the panel
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Panels.Panel.Create(System.Data.IDbTransaction)">
            <summary>
            Insert the panel
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Panels.Panel.UpdatePanelists(System.Data.IDbTransaction)">
            <summary>
            Update the list of panelists
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Panels.Panel.Delete(System.Data.IDbTransaction)">
            <summary>
            Delete the panel
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Panels.Panel.LoadBaseObjectData(System.Data.DataRow)">
            <summary>
            Load the panel from the row
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Checkbox.Panels.Panel.DomainDBTableName">
            <summary>
            Currently, only email panels are access controllable, but eventually more panels will
            be.
            </summary>
        </member>
        <member name="P:Checkbox.Panels.Panel.DomainDBIdentityColumnName">
            <summary>
            Currently, only email panels are access controllable, but eventually more panels will
            be.
            </summary>
        </member>
        <member name="M:Checkbox.Panels.Panel.GetEditor">
            <summary>
            Currently, only email panels are access controllable, but eventually more panels will
            be.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Panels.PanelDataSet">
            <summary>
            Data set container for invitation panel data
            </summary>
        </member>
        <member name="M:Checkbox.Panels.PanelDataSet.#ctor(System.String)">
            <summary>
            Object type name for panel data
            </summary>
            <param name="objectTypeName"></param>
        </member>
        <member name="P:Checkbox.Panels.PanelDataSet.DataTableName">
            <summary>
            Get panel data
            </summary>
        </member>
        <member name="P:Checkbox.Panels.PanelDataSet.IdentityColumnName">
            <summary>
            Get identity column for panel data
            </summary>
        </member>
        <member name="M:Checkbox.Panels.PanelFactory.#cctor">
            <summary>
            Initialize the "cache"
            </summary>
        </member>
        <member name="M:Checkbox.Panels.PanelFactory.CreatePanel(System.Int32)">
            <summary>
            Create a panel with the specified type
            </summary>
            <param name="panelTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.PanelFactory.GetPanelTypeInfo(System.Int32)">
            <summary>
            Get panel type info
            </summary>
            <param name="panelTypeID"></param>
        </member>
        <member name="M:Checkbox.Panels.PanelFactory.CreatePanel(Checkbox.Panels.PanelFactory.PanelTypeInfo)">
            <summary>
            Create an item data of the specified type.
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.PanelFactory.CreateObject(System.Type)">
            <summary>
            Create an object of the specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.PanelFactory.GetType(System.String)">
            <summary>
            Get the <see cref="T:System.Type"/> from a type name.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.PanelFactory.ValidateTypeIsItemData(System.Type)">
            <summary>
            Validate that the specified <see cref="T:System.Type"/> is a valid <see cref="T:Checkbox.Forms.Items.Configuration.ItemData"/> type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Checkbox.Panels.PanelFactory.PanelTypeInfo">
            <summary>
            Container for type information
            </summary>
        </member>
        <member name="T:Checkbox.Panels.Panelist">
            <summary>
            Encapsulates an addressable member of a <see cref="T:Checkbox.Panels.Panel"/> as a collection of key/value string pairs
            </summary>
        </member>
        <member name="P:Checkbox.Panels.Panelist.PropertiesDictionary">
            <summary>
            Get a reference to the properties dictionary
            </summary>
        </member>
        <member name="M:Checkbox.Panels.Panelist.SetProperty(System.String,System.String)">
            <summary>
            Set the value of a panelist property
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:Checkbox.Panels.Panelist.ContainsProperty(System.String)">
            <summary>
            Return a boolean indicating 
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.Panelist.GetProperty(System.String)">
            <summary>
            Get the value of panelist property
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Checkbox.Panels.Panelist.Email">
            <summary>
            Get the panelist email
            </summary>
        </member>
        <member name="M:Checkbox.Panels.Panelist.ComputeHashKey(System.Int32)">
            <summary>
            Compute a hash key for internal use by invitation code to compare pending recipients with sent (persisted)
            recipients.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.Panelist.CompareTo(Checkbox.Panels.Panelist)">
            <summary>
            Compare to a panelist
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Panels.PanelManager">
            <summary>
            Class to provide command panel management functionality.
            </summary>
        </member>
        <member name="M:Checkbox.Panels.PanelManager.CreatePanel(System.Int32)">
            <summary>
            Create a panel of the specified type.
            </summary>
            <param name="panelTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.PanelManager.GetPanelTypeIdFromName(System.String)">
            <summary>
            Get panel type id from name
            </summary>
            <param name="panelTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.PanelManager.GetPanelTypeNameFromId(System.Int32)">
            <summary>
            Gets a panel type name from the type ID
            </summary>
            <param name="panelTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.PanelManager.SavePanel(Checkbox.Panels.Panel,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Save the specified panel
            </summary>
            <param name="p"></param>
            <param name="currentPrincipal"></param>
        </member>
        <member name="M:Checkbox.Panels.PanelManager.CreateEmailListPanel">
            <summary>
            Create an email list panel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.PanelManager.CreatePanel(System.String)">
            <summary>
            Create a panel of the specified type
            </summary>
            <param name="panelTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.PanelManager.GetPanel(System.Int32)">
            <summary>
            Get the panel with the specified id.
            </summary>
            <param name="panelID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.PanelManager.FilterPageAndSortPanelists(System.Collections.Generic.List{Checkbox.Panels.Panelist},Checkbox.Pagination.PaginationContext)">
            <summary>
            Applies filtering, sorting and pagination to a raw list of users
            </summary>
            <param name="rawPanelistList">A list of panelists</param>
            <param name="paginationContext"></param>
            <returns>A list of user unique identifiers meeting the filter, sort, and page criteria of the pagination context</returns>
            <remarks>This method allows lists of user unique identifiers to be filtered and sorted based on profile properties, which may not be known to the call that generates the raw list</remarks>
        </member>
        <member name="M:Checkbox.Panels.PanelManager.GetLightWeightPanel(System.Int32)">
            <summary>
            Get a AccessControllableResource which has the same ACL and DefaultPolicy as a given panel.
            </summary>
            <param name="panelID">ID of the panel to clone ACL and DefaultPolicy from.</param>
            <returns>A <see cref="T:Prezza.Framework.Security.LightweightAccessControllable"/> object initialized with a
            a given Panel's ACL and DefaultPolicy.</returns>
        </member>
        <member name="M:Checkbox.Panels.PanelManager.GetEmailListPanelAddressCount(System.Int32)">
            <summary>
             Get the count of email addresses associated with a given <see cref="T:Checkbox.Panels.EmailListPanel"/>.
            </summary>
            <param name="panelID">ID of the <see cref="T:Checkbox.Panels.EmailListPanel"/> to get count from.</param>
            <returns>int count of associated email addresses.</returns>
        </member>
        <member name="M:Checkbox.Panels.PanelManager.CopyEmailListPanel(Checkbox.Panels.EmailListPanel,Checkbox.Security.Principal.CheckboxPrincipal,System.String)">
            <summary>
            Copy the panel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.PanelManager.PanelWithNameExists(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Checks whether or not a proposed list name is in use
            </summary>
            <param name="panelName">Name to validate</param>
            <param name="panelTypeName"></param>
            <param name="idToIgnore">Existing panel id to ignore when  checking for duplicates</param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Panels.Security.EmailListPolicy">
            <summary>
            Email List security policy.
            </summary>
        </member>
        <member name="M:Checkbox.Panels.Security.EmailListPolicy.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Checkbox.Panels.Security.EmailListPolicy.#ctor(System.String[])">
            <summary>
            Constructor.
            </summary>
            <param name="permissions">Permissions to initialize policy with.</param>
        </member>
        <member name="T:Checkbox.Panels.Security.EmailListSecurityEditor">
            <summary>
            Editor implementation for editing email list security policies.
            </summary>
        </member>
        <member name="M:Checkbox.Panels.Security.EmailListSecurityEditor.#ctor(Checkbox.Panels.EmailListPanel)">
            <summary>
            Constructor.
            </summary>
            <param name="emailListPanel"><see cref="T:Prezza.Framework.Security.IAccessControllable"/> ControllableResource to edit security of.</param>
        </member>
        <member name="P:Checkbox.Panels.Security.EmailListSecurityEditor.RequiredEditorPermission">
            <summary>
            Get the permission required to edit email list security
            </summary>
        </member>
        <member name="T:Checkbox.Panels.UserPanel">
            <summary>
            Panel representing users
            </summary>
        </member>
        <member name="M:Checkbox.Panels.UserPanel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Checkbox.Panels.UserPanel.PanelTypeName">
            <summary>
            Get panel type name
            </summary>
        </member>
        <member name="M:Checkbox.Panels.UserPanel.AddIdentity(System.String)">
            <summary>
            Add an identity to the table
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:Checkbox.Panels.UserPanel.AddRecipient(System.String,System.String)">
            <summary>
            Adds the recipient.
            </summary>
            <param name="name">The name.</param>
            <param name="email">The email.</param>
            <exception cref="T:System.ArgumentNullException">Name or email is null</exception>
        </member>
        <member name="M:Checkbox.Panels.UserPanel.AddIdentities(System.Collections.Generic.IList{System.Security.Principal.IIdentity})">
            <summary>
            Add a list of identities
            </summary>
            <param name="identities"></param>
        </member>
        <member name="M:Checkbox.Panels.UserPanel.RemoveIdentity(System.String)">
            <summary>
            Remove an identity
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:Checkbox.Panels.UserPanel.RemoveIdentities(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove identities
            </summary>
            <param name="identities"></param>
        </member>
        <member name="M:Checkbox.Panels.UserPanel.UpdatePanelists(System.Data.IDbTransaction)">
            <summary>
            Update the panelist list
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Panels.UserPanel.GetInsertPanelistCommand(Prezza.Framework.Data.Database,System.String,System.String)">
            <summary>
            Get the insert panelist command
            </summary>
            <param name="db">The database.</param>
            <param name="panelistIdentifier">The panelist identifier.</param>
            <param name="email">The email.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.UserPanel.GetDeletePanelistCommand(Prezza.Framework.Data.Database,System.String)">
            <summary>
            Get the delete panelist command
            </summary>
            <param name="db"></param>
            <param name="panelistIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.UserPanel.GetPanelists">
            <summary>
            Get list of panelists
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.UserPanel.GetPanelist(System.String)">
            <summary>
            Get a particular panelist
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Panels.UserPanelist">
            <summary>
            Invitation panelist that is a user in the checkbox system.
            </summary>
        </member>
        <member name="P:Checkbox.Panels.UserPanelist.UniqueIdentifier">
            <summary>
            Get the unique identifier of the panelist.
            </summary>
        </member>
        <member name="M:Checkbox.Panels.UserPanelist.GetProperty(System.String)">
            <summary>
            Get a property value
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Panels.UserPanelist.GetProfileProperty(System.String)">
            <summary>
            Get value of profile property and assign it to a value in the properties dicitonary.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:Checkbox.Security.AccessControllablePDOSecurityEditor">
            <summary>
            Abstract base class for editor of access controllable persisted domain
            objects.
            </summary>
        </member>
        <member name="M:Checkbox.Security.AccessControllablePDOSecurityEditor.#ctor(Prezza.Framework.Security.IAccessControllable)">
            <summary>
            Constructor
            </summary>
            <param name="resource"></param>
        </member>
        <member name="P:Checkbox.Security.AccessControllablePDOSecurityEditor.DefaultPolicyIDFieldName">
            <summary>
            Get the name of the field containing the domain object's default policy
            </summary>
        </member>
        <member name="M:Checkbox.Security.AccessControllablePDOSecurityEditor.GetPermissbleEntity(Prezza.Framework.Security.IAccessControlEntry)">
            <summary>
            Get an access permissible entry
            </summary>
            <param name="entryData"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.AccessControllablePDOSecurityEditor.SetDefaultPolicy(Prezza.Framework.Security.Policy)">
            <summary>
            Set the default policy
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Checkbox.Security.AccessControllablePDOSecurityEditor.GetAccessPermissible(System.String,System.Int32,System.Int32,System.String,System.String[])">
            <summary>
            Get access permissible entities that can be added to the object acl
            </summary>
            <param name="pageSize"></param>
            <param name="permissions"></param>
            <param name="provider"></param>
            <param name="currentPage"></param>
            <param name="filterValue"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.AccessControllablePDOSecurityEditor.GetAccessPermissible(System.String[])">
            <summary>
            Get access permissible entities that can be added to the object acl
            </summary>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Security.AccessManager">
            <summary>
            Provides interface for defining Roles and Policies used in controlling access to resources
            </summary>
        </member>
        <member name="M:Checkbox.Security.AccessManager.#cctor">
            <summary>
            Initialize internal caches
            </summary>
        </member>
        <member name="M:Checkbox.Security.AccessManager.CreatePolicy(Prezza.Framework.Security.Policy)">
            <summary>
            Create the specified policy in the database.
            </summary>
            <param name="p">Policy to create.</param>
            <returns>Database identifier of the policy.</returns>
        </member>
        <member name="M:Checkbox.Security.AccessManager.DeleteUserEntriesInAllAcl(System.String)">
            <summary>
            Delete specific user in all ACL
            </summary>
            <param name="uniqueIdentifier"></param>
        </member>
        <member name="M:Checkbox.Security.AccessManager.UpdatePolicy(System.Int32,Prezza.Framework.Security.Policy)">
            <summary>
            Update the specified policy.
            </summary>
            <param name="policyID">ID of the policy to update.</param>
            <param name="p">Policy data.</param>
        </member>
        <member name="M:Checkbox.Security.AccessManager.AddPolicyPermissions(Prezza.Framework.Security.Policy,Prezza.Framework.Data.Database,Prezza.Framework.Data.DBCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="policy"></param>
            <param name="db"></param>
            <param name="command"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Checkbox.Security.AccessManager.GetPermissionMaskDisplayName(System.String)">
            <summary>
            Get the display name for a permission mask.  Return the mask's name if the display
            name can't be found.
            </summary>
            <param name="maskName"></param>
        </member>
        <member name="M:Checkbox.Security.AccessManager.GetPermissionMaskPermissions(System.String)">
            <summary>
            Get the list of permissions associated with a permission mask
            </summary>
            <param name="maskName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.AccessManager.ListPermissions">
            <summary>
            Get the list of all permission names
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.AccessManager.AddEveryoneGroupWithPermissions(Prezza.Framework.Security.IAccessControllable,Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String[])">
            <summary>
            Add the everyone group to the survey ACL with the specified permissions.
            </summary>
            <param name="accessControllable">Controllable resource to modify access to.</param>
            <param name="principal">Principal modifying the resource.</param>
            <param name="permissions">Permissions to add to everyone group policy for the controllable resource.</param>
        </member>
        <member name="M:Checkbox.Security.AccessManager.AddPermissionsToDefaultPolicy(Prezza.Framework.Security.IAccessControllable,Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String[])">
            <summary>
            Add a set of permissions to the survey's default policy
            </summary>
            <param name="accessControllable">Controllable resource to modify permissions of.</param>
            <param name="principal">Principal modifying the resource.</param>
            <param name="permissions">Permissions to add to the default policy.</param>
        </member>
        <member name="M:Checkbox.Security.AccessManager.RemovePermissionsFromDefaultPolicy(Prezza.Framework.Security.IAccessControllable,Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String[])">
            <summary>
            Remove a set of permissions from the survey's default policy
            </summary>
            <param name="accessControllable">Controllable resource to update.</param>
            <param name="principal">Principal modifying the resource.</param>
            <param name="permissions">Permissions to remove from the default policy.</param>
        </member>
        <member name="M:Checkbox.Security.AccessManager.AddPermissionsToAllAclEntries(Prezza.Framework.Security.IAccessControllable,Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String[])">
            <summary>
            Add permissions to all entries in the survey ACL
            </summary>
            <param name="accessControllable">Controllable resource to modify permissions of.</param>
            <param name="principal">Principal modifying the resource.</param>
            <param name="permissions">Permissions to add</param>
        </member>
        <member name="M:Checkbox.Security.AccessManager.RemovePermissionsFromAllAclEntries(Prezza.Framework.Security.IAccessControllable,Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String,System.String[])">
            <summary>
            Remove permissions from all ACL entries for the CurrentSurvey.
            </summary>
            <param name="accessControllable">Access controllable entity to update permissions for.</param>
            <param name="entryIdToIgnore">ID of entry to ignore when removing permissions.  This is useful when one entry represents an "owner" 
            entry that shouldn't be modified.</param>
            <param name="principal">Principal modifying the resource.</param>
            <param name="permissions">Permissions to remove.</param>
        </member>
        <member name="T:Checkbox.Security.Encryption">
            <summary>
            Summary description for Encryption.
            </summary>
        </member>
        <member name="M:Checkbox.Security.Encryption.HashOldString(System.String)">
            <summary>
            Hash a plaintext string using the MD5 hash algorithm
            </summary>
            <param name="plaintext">A plaintext string to encrypt</param>
            <returns>An encrypted string</returns>
        </member>
        <member name="M:Checkbox.Security.Encryption.HashString(System.String,System.String)">
            <summary>
             Hash a plaintext string using the SHA 512 algorithim
            </summary>
            <param name="plaintext">A plaintext string to encrypt</param>
            <param name="salt">Salt to apply to the encryption</param>
            <returns>An encrtyped string</returns>
        </member>
        <member name="M:Checkbox.Security.Encryption.HashStringDotNetOneFormat(System.String)">
            <summary>
            Hash a plaintext string using the MD5 hash algorithm.
            The way that ACII encoded text is handled has changed in the 2.0 framework. This method emulates
            the behavior exhibited in the 1.0 and 1.1 frameworks. New passwords should NEVER be encrypted with
            this method. Its only intended to provided backwards compatibility with passwords which where 
            hashed using the 1.1 framework.
            </summary>
            <param name="plaintext"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Security.PermissionJoin">
            <summary>
            Method to join permissions when doing permissions queries.
            </summary>
        </member>
        <member name="F:Checkbox.Security.PermissionJoin.All">
            <summary>
            All permissions must match.
            </summary>
        </member>
        <member name="F:Checkbox.Security.PermissionJoin.Any">
            <summary>
            Any permission must match.
            </summary>
        </member>
        <member name="T:Checkbox.Security.Principal.CheckboxPrincipal">
            <summary>
            Extension of Extended Principal specific to Checkbox.  Allows principal to include 
            profile properties/settings. 
            </summary>
        </member>
        <member name="M:Checkbox.Security.Principal.CheckboxPrincipal.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.Dictionary{System.String,System.Object},System.String[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="identity"></param>
            <param name="intrinsicUserProperties"></param>
            <param name="identityRoles"></param>
            <param name="profileProperties"></param>
        </member>
        <member name="P:Checkbox.Security.Principal.CheckboxPrincipal.ProfileProperties">
            <summary>
            Get the user's profile
            </summary>
        </member>
        <member name="P:Checkbox.Security.Principal.CheckboxPrincipal.UserGuid">
            <summary>
            Get/set user guid
            </summary>
        </member>
        <member name="P:Checkbox.Security.Principal.CheckboxPrincipal.Email">
            <summary>
            Get/Set user's email address
            </summary>
            <remarks>The email address is a required part of a user identity, hence its inclusion here rather than as a profile property</remarks>
        </member>
        <member name="P:Checkbox.Security.Principal.CheckboxPrincipal.LockedOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:Checkbox.Security.Principal.CheckboxPrincipal.Item(System.String)">
            <summary>
            Shortcut to get/set principal profile properties in string format.
            </summary>
            <param name="profilePropertyName"></param>
            <returns>Value of property or string.empty if property does not exist/is null.</returns>
            <remarks>Setting profile value does not cause profile to be saved.  Profile must still be saved
            w/call to user manager.</remarks>
        </member>
        <member name="M:Checkbox.Security.Principal.CheckboxPrincipal.LoadProfileProperties">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Security.Principal.CheckboxPrincipal.SaveProfile">
            <summary>
            Persist profile to database.
            </summary>
        </member>
        <member name="T:Checkbox.Security.ProfileManager">
            <summary>
            Static manager for application to use to access profile information.
            </summary>
        </member>
        <member name="F:Checkbox.Security.ProfileManager.DefaultItemTextPattern">
            <summary>
            The default item text pattern
            </summary>
        </member>
        <member name="F:Checkbox.Security.ProfileManager.DefaultLanguageCode">
            <summary>
            The default language code
            </summary>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.Initialize(Checkbox.Security.Providers.ICheckboxProfileProvider)">
            <summary>
            Initialize the manager with the profile provider to use.
            </summary>
            <param name="profileProvider"></param>
        </member>
        <member name="P:Checkbox.Security.ProfileManager.CheckboxProvider">
            <summary>
            Get a reference to the profile provider.
            </summary>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.GetProfile(System.String,System.Boolean,System.Boolean)">
            <summary>
            Get a profile dictionary for the specified user.
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="useCache"></param>
            <param name="encode"> </param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.GetProfileProperties(System.String,System.Boolean,System.Boolean,System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Get a profile dictionary for the specified user.
            </summary>
            <param name="uniqueIdentifier">The unique identifier.</param>
            <param name="useCache">if set to <c>true</c> [use cache].</param>
            <param name="encode">if set to <c>true</c> [encode].</param>
            <param name="userId">The user identifier.</param>
            <param name="addMatrixJsonValue">if set to <c>true</c> [add matrix json value].</param>
            <param name="addRadioJsonValue">if set to true then value for radio button will be serialized to json</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.GetMatrixJsonByItemId(System.Int32,System.String)">
            <summary>
            Get matrix in JSON format by Item id
            </summary>
            <param name="itemId"></param>
            /// <param name="uniqueIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.CacheProfile(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.StoreProfile(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Persist a user's profile.
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="profileProperties"></param>
            <param name="useChache"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.StoreProfilePropertiesModel(System.String,System.Collections.Generic.List{Checkbox.Users.ProfileProperty})">
            <summary>
            Persist a user's profile.
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="profileProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.DeleteProfile(System.String)">
            <summary>
            Delete the profile for the spedified user.
            </summary>
            <param name="uniqueIdentifier"></param>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.ListPropertyNames">
            <summary>
            List available profile properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.ListPropertyNames(System.Int32)">
            <summary>
            List available profile properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.GetPropertiesList">
            <summary>
            gets profile properties list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.GetFiledTypesList">
            <summary>
            Gets profile properties list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.ListUserManagerPropertyNames">
            <summary>
            Lists profile properties that are marked for display on the user manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.GetRadioButtonField(System.String,System.Guid)">
            <summary>
            Gets radio button field
            </summary>
            <param name="name"></param>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.GetRadioOptionAliases(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.GetMatrixField(System.String,System.Guid)">
            <summary>
            Gets the matrix field.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.AddProfileField(System.String,System.Boolean,System.Boolean)">
            <summary>
            Add a custom user field to the database.
            </summary>
            <param name="fieldName"></param>
            <param name="isDeletable"></param>
            <param name="isHidden"></param>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.UpdateProfileField(Checkbox.Users.ProfileProperty)">
            <summary>
            Updates custom user field type
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.AddRadioButtonField(Checkbox.Users.RadioButtonField,System.Nullable{System.Guid})">
            <summary>
            Adds radio button field
            </summary>
            <param name="radioButtonField"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.DeleteRadioButtonOptions(System.String)">
            <summary>
            Deletes radio button field along with its options
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.AddRadioButtonFieldOptionAlias(System.Int32,System.Collections.Generic.List{Checkbox.Users.RadioButtonFieldOption},System.String)">
            <summary>
            Adds or updates radio field options aliases for given item
            </summary>
            <param name="itemId"></param>
            <param name="options"></param>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.DeleteRadioButtonFieldOptionAliases(System.Int32)">
            <summary>
            Deletes all the option aliases for given item
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.AddMatrixField(Checkbox.Users.MatrixField,System.Boolean,System.Nullable{System.Guid})">
            <summary>
            Adds the type of the matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="withHeaders">if set to <c>true</c> [with headers].</param>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.AddCustomMatrixCells(Checkbox.Users.MatrixField,System.Guid)">
            <summary>
            Adds the custom matrix cells.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="userId">The user identifier.</param>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.AddMatrixCells(Checkbox.Users.MatrixField,Prezza.Framework.Data.Database,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Adds matrix cells.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="db">The database.</param>
            <param name="transaction">The transaction.</param>
            <param name="customOnly">if set to <c>true</c> [custom only].</param>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.DeleteProfileField(System.String)">
            <summary>
            Update the custom user field metadata table to delete the field name
            </summary>
            <param name="fieldName">Name of the field to delete.</param>
            <api>User Management</api>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.ClearPropertyDefaultTextValues(System.String)">
            <summary>
            Clears the property default text values.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.BuildIdentityProfileViewString(System.String,System.Boolean)">
            <summary>
            Build the query to create the identity profile view
            </summary>
            <param name="propName"></param>
            <param name="add"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.MoveProfileField(System.String,System.Boolean)">
            <summary>
            Update the custom user field metadata table to increment or decrement a property position.
            </summary>
            <param name="fieldName">Name of the field to move.</param>
            <param name="moveUp">If true, position is decremented, otherwise it is decremented.</param>
            <api>User Management</api>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.IsValidFieldName(System.String)">
            <summary>
            Determines if a proposed property name is valid.
            </summary>
            <param name="newProperty">The name of the new property</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.IsFieldHidden(System.String)">
            <summary>
            Determines if a custom user field is visible to users
            </summary>
            <param name="name">The name of the custom field</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.RemoveProfileFromCache(System.String)">
            <summary>
            Remove profile from profile cache
            </summary>
            <param name="uniqueIdentifier"></param>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.UpdateUserProfile(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Saves bulk of profile values into the database
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="profilePropertyValues"></param>
            <param name="selectedUserFields"></param>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.GetProfileKeysWithIds(System.String)">
            <summary>
            Returns profile property keys along with its id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.GetCustomFieldDataByItemId(System.Int32,System.String)">
            <summary>
            Returns custom field key and custom field value if it has been connected to a survey item
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="userName">Name of the user.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.GetConnectedProfileFieldName(System.Int32)">
            <summary>
            Gets the name of the connected profile field.
            </summary>
            <param name="itemId">The item identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.IsItemBindedTo(System.Int32,System.Int32)">
            <summary>
            Determines whether [is item binded to] [the specified item identifier].
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="profilePropertyId">The profile property identifier.</param>
            <returns>
              <c>true</c> if [is item binded to] [the specified item identifier]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.listToString(System.Collections.Generic.List{System.String})">
            <summary>
            Lists to string.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.UnbindItemFromProfileField(System.Int32)">
            <summary>
            Unbind item from Profile filed
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.ClearMatrixRowsAndColumns(System.Int32)">
            <summary>
            Clears the matrix rows and columns.
            </summary>
            <param name="itemId">The item identifier.</param>
        </member>
        <member name="M:Checkbox.Security.ProfileManager.UpdateRadioFieldSelectedOption(System.String,System.String,System.Guid)">
            <summary>
            Updates radio button field selected option
            </summary>
            <param name="optionText"></param>
            <param name="propertyKey"></param>
            <param name="user"></param>
        </member>
        <member name="T:Checkbox.Security.Providers.DbAuthorizationProvider">
            <summary>
            Summary description for DbAuthorizationProvider.
            </summary>
        </member>
        <member name="F:Checkbox.Security.Providers.DbAuthorizationProvider._config">
            <summary>
            Provider configuration
            </summary>
        </member>
        <member name="M:Checkbox.Security.Providers.DbAuthorizationProvider.GetAuthorizationErrorType">
            <summary>
            Get the type of the last error
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.DbAuthorizationProvider.Authorize(Prezza.Framework.Security.Principal.ExtendedPrincipal,Prezza.Framework.Security.IAccessControllable,System.String)">
            <summary>
            Authorize the specified principal to access a given resource against the specified context.
            </summary>
            <param name="principal">the <see cref="T:Prezza.Framework.Security.Principal.ExtendedPrincipal"/> to authorize.</param>
            <param name="resource">the <see cref="T:Prezza.Framework.Security.IAccessControllable"/> resource to authorize against</param>
            <param name="context">Context to authorize the principal against.</param>
            <returns>True if authorization is given, false otherwise.</returns>
        </member>
        <member name="M:Checkbox.Security.Providers.DbAuthorizationProvider.CheckPolicy(Prezza.Framework.Security.Policy,System.String,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            
            </summary>
            <param name="policy"></param>
            <param name="context"></param>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.DbAuthorizationProvider.Authorize(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String)">
            <summary>
            Authorize the specified principal against the specified
            context.
            </summary>
            <param name="principal"><see cref="T:System.Security.Principal.IPrincipal" /> to authorize.</param>
            <param name="context">Context to authorize the principal against.</param>
            <returns>True if authorization is given, false otherwise.</returns>
        </member>
        <member name="P:Checkbox.Security.Providers.DbAuthorizationProvider.ConfigurationName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
        </member>
        <member name="M:Checkbox.Security.Providers.DbAuthorizationProvider.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the authorization provider with the supplied configuration object.
            </summary>
            <param name="config">the configuration object</param>
        </member>
        <member name="T:Checkbox.Security.Providers.DbAuthorizationProviderData">
            <summary>
            Summary description for DbAuthorizationProviderData.
            </summary>
        </member>
        <member name="M:Checkbox.Security.Providers.DbAuthorizationProviderData.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="providerName">Name of the authorization provider.</param>
        </member>
        <member name="M:Checkbox.Security.Providers.DbAuthorizationProviderData.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load authorization data from XML.
            </summary>
            <param name="providerData">Node containing authorization provider configuration informaiton.</param>
        </member>
        <member name="T:Checkbox.Security.Providers.ICheckboxMembershipProvider">
            <summary>
            Interface definition for membership provider used by Checkbox.
            </summary>
        </member>
        <member name="P:Checkbox.Security.Providers.ICheckboxMembershipProvider.ProviderName">
            <summary>
            Name of membership provider
            </summary>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxMembershipProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Change user password.
            </summary>
            <param name="username"></param>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxMembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.String,System.String@)">
            <summary>
            Create a user
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="password"></param>
            <param name="email"></param>
            <param name="passwordQuestion"></param>
            <param name="passwordAnswer"></param>
            <param name="isApproved"></param>
            <param name="providerUserKey"></param>
            <param name="statusText"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxMembershipProvider.GetUser(System.String,System.Boolean)">
            <summary>
            Gets membership user
            </summary>
            <param name="username"></param>
            <param name="userIsOnline"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxMembershipProvider.GetUserIdentity(System.String)">
            <summary>
            Gets a user
            </summary>
            <param name="uniqueIdentifer"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxMembershipProvider.DeleteUser(System.String,System.Boolean)">
            <summary>
            Delete a user.
            </summary>
            <param name="userName"></param>
            <param name="deleteAllRelatedData"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxMembershipProvider.ListUsersByEmail(System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Int32@)">
            <summary>
            Find users based on email address.
            </summary>
            <param name="emailToMatch"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="sortAscending"></param>
            <param name="totalRecords"></param>
            <param name="sortField"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxMembershipProvider.ListUsersByName(System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Int32@)">
            <summary>
            Find users by email address.
            </summary>
            <param name="usernameToMatch"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="sortAscending"></param>
            <param name="totalRecords"></param>
            <param name="sortField"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxMembershipProvider.ValidateUser(System.String,System.String)">
            <summary>
            Validate a given user's credentials
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxMembershipProvider.ListAllUsers(Checkbox.Pagination.PaginationContext)">
            <summary>
            List all available users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxMembershipProvider.ListOnlyTenantUsers(Checkbox.Pagination.PaginationContext)">
            <summary>
            List all users with tenant id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxMembershipProvider.GetPassword(System.String,System.String)">
            <summary>
            Get a user's password
            </summary>
            <param name="userName"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxMembershipProvider.GetUserIntrinsicProperties(System.String)">
            <summary>
            Get intrinsic properties (i.e. non profile) of a user.
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxMembershipProvider.GetUserNameFromGuid(System.Guid)">
            <summary>
            Get the name of a user based on the user's guid
            </summary>
            <param name="userGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxMembershipProvider.UpdateUser(System.String,System.String,System.String,System.String,System.String,System.String,System.String@)">
            <summary>
            Update a user's properties.
            </summary>
            <param name="userUniqueIdentifier"></param>
            <param name="newUserName"></param>
            <param name="newDomain"></param>
            <param name="newPassword"></param>
            <param name="newEmailAddress"></param>
            <param name="status"></param>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxMembershipProvider.ExpireCachedUserNonProfileProperties(System.String)">
            <summary>
            Remove user from cache with user non profile properties
            </summary>
            <param name="uniqueIdentifier"></param>
        </member>
        <member name="T:Checkbox.Security.Providers.ICheckboxProfileProvider">
            <summary>
            Base interface for profile provider used by Checkbox.  Definition is required so that 
            core Checkbox components can make use of web providers, such as chaining profile provider
            even though Checkbox assembly does not have reference to System.Web.
            </summary>
        </member>
        <member name="P:Checkbox.Security.Providers.ICheckboxProfileProvider.ProviderName">
            <summary>
            Name of provider
            </summary>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxProfileProvider.DeleteProfiles(System.String[])">
            <summary>
            Delete profiles for the specified users.
            </summary>
            <param name="userUniqueIdentifiers">Names of user to delete profile of.</param>
            <returns>Number of profiles deleted.</returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxProfileProvider.GetProfile(System.String)">
            <summary>
            Get dictionary of profile properties and values for the specified user.
            </summary>
            <param name="userUniqueIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxProfileProvider.GetProfileProperties(System.String)">
            <summary>
            Gets profile properties.
            </summary>
            <param name="userUniqueIdentifier">The user unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxProfileProvider.GetPropertiesList">
            <summary>
            Gets profile properties list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxProfileProvider.GetFiledTypesList">
            <summary>
            Gets full list of available filed types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxProfileProvider.StoreProfile(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Store profile data for the user.
            </summary>
            <param name="userUniqueIdentifier"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxProfileProvider.ListPropertyNames">
            <summary>
            List names of available profile properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxProfileProvider.ListPropertyNames(System.Int32)">
            <summary>
            List names of available profile properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxProfileProvider.PreLoadProfilesForTemplateResponses(System.Int32)">
            <summary>
            Load profile information for survey respondents.  Used for better efficiency in reports
            and exports
            </summary>
            <param name="responseTemplateId"></param>
        </member>
        <member name="T:Checkbox.Security.Providers.ICheckboxRoleProvider">
            <summary>
            Interface definition of a Checkbox role provider to allow role providers defined
            in web namespace to be used elsewhere.
            </summary>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxRoleProvider.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Add the specified users to the specified roles
            </summary>
            <param name="userNames"></param>
            <param name="roleNames"></param>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Remove the specified users from the specified roles
            </summary>
            <param name="userNames"></param>
            <param name="roleNames"></param>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxRoleProvider.GetUsersInRole(System.String)">
            <summary>
            List users in a given role
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxRoleProvider.GetAllRoles">
            <summary>
            List all system roles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.Providers.ICheckboxRoleProvider.GetRolesForUser(System.String)">
            <summary>
            List roles for a given user
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Security.QueryHelper">
            <summary>
            Simple helper for creating commands for accessing Checkbox security sprocs.
            </summary>
        </member>
        <member name="M:Checkbox.Security.QueryHelper.CreateListAccessibleCommand(System.String,Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext)">
            <summary>
            Return a query command wrapper populated with common inputs for listing securable resources
            </summary>
            <param name="procName"></param>
            <param name="currentPrincipal"></param>
            <param name="paginationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.QueryHelper.AddPagingAndFilteringToCommandWrapper(Prezza.Framework.Data.DBCommandWrapper,Checkbox.Pagination.PaginationContext)">
            <summary>
            Add paging and filtering parameters to sproc.
            </summary>
            <param name="command"></param>
            <param name="paginationContext"></param>
        </member>
        <member name="T:Checkbox.Security.RoleManager">
            <summary>
            Provides interface accessing user role data
            </summary>
        </member>
        <member name="M:Checkbox.Security.RoleManager.Initialize(Checkbox.Security.Providers.ICheckboxRoleProvider)">
            <summary>
            Initialize the manager with the role provider to use.
            </summary>
            <param name="roleProvider"></param>
        </member>
        <member name="P:Checkbox.Security.RoleManager.Provider">
            <summary>
            Get a reference to the profile provider.
            </summary>
        </member>
        <member name="M:Checkbox.Security.RoleManager.ListSimpleSecurityRoles">
            <summary>
            Get all Simple Security roles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.RoleManager.ListRoles">
            <summary>
            Gets all available roles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.RoleManager.ListRoles(System.Boolean)">
            <summary>
            Gets all available roles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.RoleManager.AddRole(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="roles"></param>
            <param name="role"></param>
            <param name="skipSysAdmin"></param>
        </member>
        <member name="M:Checkbox.Security.RoleManager.ListRolesForUser(System.String)">
            <summary>
            List roles for a specific user
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.RoleManager.ListNonDefaultRolesForUser(System.String)">
            <summary>
            List roles for a specific user
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.RoleManager.IsJustARespondent(System.String)">
            <summary>
            Checks that the user doesn't have any roles except Respondent
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.RoleManager.GetRole(System.String)">
            <summary>
            Factory method to create an instance of a given role.
            </summary>
            <param name="roleName">Role name to instantiate.</param>
            <returns>Name of roll.</returns>
        </member>
        <member name="M:Checkbox.Security.RoleManager.GetRoleCacheKey(System.String)">
            <summary>
            Get a role cache key name from role name
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.RoleManager.GetRoleId(System.String)">
            <summary>
            Get the ID of the named role
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.RoleManager.UserHasRoleWithPermission(System.String,System.String)">
            <summary>
            Determine if the specified identiy has a role with the specified permission.
            </summary>
            <param name="userIdentity">Identity to check role permissions for.</param>
            <param name="permission">Permissiont to check.</param>
        </member>
        <member name="M:Checkbox.Security.RoleManager.AddUserToRoles(System.String,System.String[])">
            <summary>
            Add users to a specific role
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="userRoles"></param>
        </member>
        <member name="M:Checkbox.Security.RoleManager.CheckLicenseForAddUserToRoles(System.String,System.Collections.Generic.IEnumerable{System.String},System.String@)">
            <summary>
            
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="userRoles"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Security.RoleManager.RemoveUserFromRoles(System.String,System.String[])">
            <summary>
            Add users to a specific role
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="userRoles"></param>
        </member>
        <member name="M:Checkbox.Security.RoleManager.GetUsersInRole(System.String)">
            <summary>
            List users in a given role
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Security.Ticketing">
            <summary>
            Simple static class for storing and retrieving tickets.  Currently, the logic contained is pretty limited but
            it can eventually be extended to be more useful
            </summary>
        </member>
        <member name="M:Checkbox.Security.Ticketing.CreateTicket(System.Guid,System.DateTime)">
            <summary>
            Insert a ticket with the specified ID and expiration into the database.  If a ticket with the specified ID
            exists, a new ticket will not be inserted but the expiration will be updated.
            </summary>
            <param name="ticketID">GUID of the ticket</param>
            <param name="expiration">Ticket expiration date</param>
        </member>
        <member name="M:Checkbox.Security.Ticketing.DeleteTicket(System.Guid)">
            <summary>
            Delete ticket with specified guid
            </summary>
            <param name="ticketId"></param>
        </member>
        <member name="M:Checkbox.Security.Ticketing.ValidateTicket(System.Guid)">
            <summary>
            Validate that the ticket with the given ID has not expired
            </summary>
            <param name="ticketID">ID of the ticket to validate.</param>
            <returns>True if the ticket is valid, false otherwise (ticket expired or does not exist)</returns>
        </member>
        <member name="T:Checkbox.Users.CustomFieldType">
            <summary>
            Profile field types
            </summary>
        </member>
        <member name="F:Checkbox.Users.CustomFieldType.SingleLine">
            <summary>
            The single line field
            </summary>
        </member>
        <member name="F:Checkbox.Users.CustomFieldType.MultiLine">
            <summary>
            The multi line
            </summary>
        </member>
        <member name="F:Checkbox.Users.CustomFieldType.RadioButton">
            <summary>
            The radio button field
            </summary>
        </member>
        <member name="F:Checkbox.Users.CustomFieldType.Matrix">
            <summary>
            Matrix field type 
            </summary>
        </member>
        <member name="F:Checkbox.Users.CustomFieldType.Email">
            <summary>
            The email
            </summary>
        </member>
        <member name="T:Checkbox.Users.Data.UserDto">
            <summary>
            User data transfer object. 
            This class is intended to be a light weight container used for short term storage
            and the transfering of user data. By design it contains no business logic.
            </summary>
        </member>
        <member name="M:Checkbox.Users.Data.UserDto.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="emailAddress"></param>
            <param name="domain"></param>
            <param name="password"></param>
        </member>
        <member name="T:Checkbox.Users.EveryoneGroup">
            <summary>
            An implicit group that contains all users in the system.
            </summary>
        </member>
        <member name="M:Checkbox.Users.EveryoneGroup.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Checkbox.Users.EveryoneGroup.AddUser(System.Security.Principal.IPrincipal)">
            <summary>
            Throws exception.
            </summary>
            <param name="principal"></param>
        </member>
        <member name="M:Checkbox.Users.EveryoneGroup.AddUser(System.Security.Principal.IIdentity)">
            <summary>
            Throws exception.
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:Checkbox.Users.EveryoneGroup.AddUser(System.String)">
            <summary>
            Throws exception.
            </summary>
            <param name="uniqueName"></param>
        </member>
        <member name="M:Checkbox.Users.EveryoneGroup.RemoveUser(System.Security.Principal.IPrincipal)">
            <summary>
            Throws exception.
            </summary>
            <param name="principal"></param>
        </member>
        <member name="M:Checkbox.Users.EveryoneGroup.RemoveUser(System.Security.Principal.IIdentity)">
            <summary>
            Throws exception.
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:Checkbox.Users.EveryoneGroup.RemoveUser(System.String)">
            <summary>
            Throws exception.
            </summary>
            <param name="uniqueName"></param>
        </member>
        <member name="M:Checkbox.Users.EveryoneGroup.GetUsers">
            <summary>
            Throws exception.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.EveryoneGroup.GetUserIdentities">
            <summary>
            Throws exception.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Users.Group">
            <summary>
            Container for information about what users (principals) exist in a group. 
            </summary>
        </member>
        <member name="P:Checkbox.Users.Group.ObjectTypeName">
            <summary>
            Get object type
            </summary>
        </member>
        <member name="P:Checkbox.Users.Group.LoadSprocName">
            <summary>
            Get load procedure for group, currently none though this will change when groups start tracking
            last modified status information.
            </summary>
        </member>
        <member name="P:Checkbox.Users.Group.Modifier">
            <summary>
            User id who modified the group
            </summary>
        </member>
        <member name="M:Checkbox.Users.Group.CreateConfigurationDataSet">
            <summary>
            Get load configuration container for a group, currently none though this will change when groups start tracking
            last modified status information.
            </summary>
        </member>
        <member name="M:Checkbox.Users.Group.#ctor(System.String,System.String,System.Int32,System.String[])">
            <summary>
            Constructor.  Initialize a group with a name, id, and list of members.
            </summary>
            <param name="name">Name of the group.</param>
            <param name="description">Description of the group.</param>
            <param name="id">ID of the group.</param>
            <param name="userIdentifiers">List of group members.</param>
        </member>
        <member name="P:Checkbox.Users.Group.DomainDBTableName">
            <summary>
            Get domain db table
            </summary>
        </member>
        <member name="P:Checkbox.Users.Group.DomainDBIdentityColumnName">
            <summary>
            Get domain identity column name
            </summary>
        </member>
        <member name="P:Checkbox.Users.Group.MemberCount">
            <summary>
            Get/set group member count.  Value is intended only to be used in cases where it is not desireable to load
            all group members, such as when listing groups.  In other cases, GetUserIdentities().Count should be used.
            </summary>
        </member>
        <member name="M:Checkbox.Users.Group.AddUser(System.Security.Principal.IPrincipal)">
            <summary>
            Add a user to the list of members for the particular group.  If the user is already in the group, 
            nothing will be done. Changes are not persisted to the database until the Group.Commit() is called
            for the group.
            </summary>
            <param name="principal"><see cref="T:System.Security.Principal.IPrincipal"/> object representing the user to add to the group.</param>
        </member>
        <member name="M:Checkbox.Users.Group.AddUser(System.Security.Principal.IIdentity)">
            <summary>
            Add a user to the list of members for the particular group.  If the user is already in the group, 
            nothing will be done. Changes are not persisted to the database until the Group.Commit() is called
            for the group.
            </summary>
            <param name="identity"><see cref="T:System.Security.Principal.IIdentity"/> object representing the user to add to the group.</param>
        </member>
        <member name="M:Checkbox.Users.Group.AddUser(System.String)">
            <summary>
            Add a user to the list of members for the particular group.  If the user is already in the group, 
            nothing will be done. Changes are not persisted to the database until the Group.Commit() is called
            for the group.
            </summary>
            <param name="uniqueName">Unique identifier of the user to add to this group.</param>
        </member>
        <member name="M:Checkbox.Users.Group.RemoveUser(System.Security.Principal.IPrincipal)">
            <summary>
            Remove the specified user from the list of members for the particular group.  If the user is not in the group,
            nothing is done. Changes are not persisted to the database until the Group.Commit() is called
            for the group.
            </summary>
            <param name="principal"><see cref="T:System.Security.Principal.IPrincipal"/> representing the user to remove from the group.</param>
        </member>
        <member name="M:Checkbox.Users.Group.RemoveUser(System.Security.Principal.IIdentity)">
            <summary>
            Remove the specified user from the list of members for the particular group.  If the user is not in the group,
            nothing is done. Changes are not persisted to the database until the Group.Commit() is called
            for the group.
            </summary>
            <param name="identity"><see cref="T:System.Security.Principal.IIdentity"/> representing the user to remove from the group.</param>
        </member>
        <member name="M:Checkbox.Users.Group.RemoveUser(System.String)">
            <summary>
            Remove the specified user from the list of members for the particular group.  If the user is not in the group,
            nothing is done. Changes are not persisted to the database until the Group.Commit() is called
            for the group.
            </summary>
            <param name="uniqueName">Unique identifier of the user to remove from the group.</param>
        </member>
        <member name="M:Checkbox.Users.Group.RemoveUserFromCache(System.String)">
            <summary>
            Removes a record from the cache. We need to do it when user name is changed.
            </summary>
            <param name="uniqueName"></param>
        </member>
        <member name="M:Checkbox.Users.Group.EnsureMembersLoaded">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.Users.Group.GetUserIdentifiers">
            <summary>
            Get an <see cref="T:System.Array"/> of unique identifiers for users that are members of the user group.
            </summary>
            <returns><see cref="T:System.Array"/> of unique identifiers.</returns>
        </member>
        <member name="M:Checkbox.Users.Group.LoadMembers">
            <summary>
            Lazy loader for the members of this group
            </summary>
        </member>
        <member name="P:Checkbox.Users.Group.Description">
            <summary>
            Get/set the description of the user group.
            </summary>
        </member>
        <member name="P:Checkbox.Users.Group.CreatedBy">
            <summary>
            Get/set the creator of the user group.
            </summary>
        </member>
        <member name="M:Checkbox.Users.Group.SetAclID(System.Int32)">
            <summary>
            Set the ACL id
            </summary>
            <param name="aclId"></param>
        </member>
        <member name="M:Checkbox.Users.Group.SetDefaultPolicyID(System.Int32)">
            <summary>
            Set default policy id
            </summary>
            <param name="defaultPolicyId"></param>
        </member>
        <member name="M:Checkbox.Users.Group.GetEditor">
            <summary>
            Get a <see cref="T:Prezza.Framework.Security.SecurityEditor"/> object that can be used to modify access control list and default policy information
            for the user group.
            </summary>
            <returns><see cref="T:Prezza.Framework.Security.SecurityEditor"/> object for this user group.</returns>
        </member>
        <member name="M:Checkbox.Users.Group.Create(System.Data.IDbTransaction)">
            <summary>
            Create an instance of the group.  Should not be called directly.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Users.Group.Update(System.Data.IDbTransaction)">
            <summary>
            Create an instance of the group.  Should not be called directly.  Static method Group.Commit
            should be called.  This will eventually change so that it fits the persisted domain object model.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Checkbox.Users.Group.Commit">
            <summary>
            Commit changes to the group
            </summary>
        </member>
        <member name="M:Checkbox.Users.Group.DoUpdate">
            <summary>
            Perform the actual update of the user group by making changes to ckbx_GroupMembers and the
            ckbx_Group table.
            </summary>
        </member>
        <member name="M:Checkbox.Users.Group.DoInsert(System.String)">
            <summary>
            Create an entry for a group in ckbx_Group table.
            </summary>
            <param name="creatorUniqueIdentifier">Unique identifier of the group creator.</param>
            <exception cref="T:System.Data.DataException">When ckbx_sp_Group_Create does not return a valid Group ID or Group ACL ID.</exception>
        </member>
        <member name="M:Checkbox.Users.Group.AddMembersToGroup(Prezza.Framework.Data.Database,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="db"></param>
            <param name="members"></param>
            <param name="transaction"></param>
        </member>
        <member name="P:Checkbox.Users.Group.AclEntryIdentifier">
            <summary>
            Get the identifier for this group when used in access control list entries.
            </summary>
        </member>
        <member name="F:Checkbox.Users.Group.GroupAclTypeIdentifier">
            <summary>
            Get the string representation of the ACL type for this principal
            </summary>
        </member>
        <member name="P:Checkbox.Users.Group.AclTypeIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="T:Checkbox.Users.GroupCache">
            <summary>
            Simple container for caching results of the last access to some
            group methods...Done to speed up access in cases where iteration
            causes group memberships, etc. to be loaded many times but also in
            places (such as authorization providers) where local data caching
            is not appropriate.
            </summary>
        </member>
        <member name="P:Checkbox.Users.GroupCache.IdentityName">
            <summary>
            Get/set identity name group memberships were last listed
            for.
            </summary>
        </member>
        <member name="P:Checkbox.Users.GroupCache.GroupMemberships">
            <summary>
            Get/set list of groups belonged-to by a user
            </summary>
        </member>
        <member name="P:Checkbox.Users.GroupCache.GroupList">
            <summary>
            Get list of loaded groups
            </summary>
        </member>
        <member name="M:Checkbox.Users.GroupCache.GetGroup(System.Int32)">
            <summary>
            Get a group, if it exists in the cache.
            </summary>
            <param name="groupId">ID of group.</param>
            <returns>NULL if group not found. </returns>
        </member>
        <member name="M:Checkbox.Users.GroupCache.AddGroup(Checkbox.Users.Group)">
            <summary>
            Add a group to the cache.
            </summary>
            <param name="groupToAdd"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.GroupCache.RemoveGroup(System.Int32)">
            <summary>
            Remove a group from the list
            </summary>
            <param name="groupId"></param>
        </member>
        <member name="M:Checkbox.Users.GroupCache.RemoveGroup(Checkbox.Users.Group)">
            <summary>
            Remove a group from the list
            </summary>
            <param name="group"></param>
        </member>
        <member name="T:Checkbox.Users.GroupManager">
            <summary>
            Static manager class for groups that encapsulates functionality previously implemented by
            static methods on the Group class itself.
            </summary>
        </member>
        <member name="F:Checkbox.Users.GroupManager.DEFAULT_ID">
            <summary>
            Default ID for new groups before they are saved.
            </summary>
        </member>
        <member name="M:Checkbox.Users.GroupManager.#cctor">
            <summary>
            Initialize membership cache
            </summary>
        </member>
        <member name="M:Checkbox.Users.GroupManager.ListGroupMembershipIds(System.String)">
            <summary>
            Get a list of ids of groups the specified user belongs to.
            </summary>
            <param name="userUniqueIdentifier">ID of user.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.GroupManager.InvalidateUserMemberships(System.String)">
            <summary>
            Clears cache of the user memberships
            </summary>
            <param name="userUniqueIdentifier"></param>
        </member>
        <member name="M:Checkbox.Users.GroupManager.GetGroupMemberships(System.String)">
            <summary>
             Get a list of groups the specified principal is a member of, sorted in ascending alphabetical order by name.
            </summary>
            <param name="userUniqueIdentifier">Identity of user to get group memberships for.</param>
            <returns>List of groups the specified principal belongs to.</returns>
        </member>
        <member name="M:Checkbox.Users.GroupManager.GetGroup(System.String)">
            <summary>
            Get a user group based on name
            </summary>
            <param name="groupName">Name of user group.</param>
            <returns>User group or null if no group with specified name found.</returns>
        </member>
        <member name="M:Checkbox.Users.GroupManager.GetGroup(System.Int32)">
            <summary>
            Load the group with the specified ID and return a <see cref="T:Checkbox.Users.Group"/> object representing that group.
            </summary>
            <param name="id">Database ID of the group to load.</param>
            <returns>Loaded group object or null if a group with the specified ID is not found or an exception occurs while
            loading the group.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Checkbox.Users.GroupManager.GetAccessibleGroups(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext)" -->
        <member name="M:Checkbox.Users.GroupManager.ListAccessibleGroups(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext,System.Boolean)">
            <summary>
            List groups accessible to the specified principal.
            </summary>
            <param name="currentPrincipal"></param>
            <param name="paginationContext"></param>
            <param name="includeEveryoneGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.GroupManager.ListMembersOfAccessibleGroups(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext)">
            <summary>
            List members of groups user can view/edit.
            </summary>
            <param name="currentPrincipal"></param>
            <param name="paginationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.GroupManager.DeleteGroup(System.Int32,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Delete the user group with the specified ID.  Note that this does not delete users.
            </summary>
            <param name="id">Database id of the user group to delete.</param>
            <param name="userContext">User attempting to delete the group.</param>
            <exception cref="T:Prezza.Framework.Security.AuthorizationException">When the principal object does not have permission
            to delete the specified group.</exception>
        </member>
        <member name="M:Checkbox.Users.GroupManager.CreateGroup(System.String,System.String)">
            <summary>
            Create a new user group with the specified name and description.
            </summary>
            <param name="name">Name of the new user group.</param>
            <param name="description">Description of the new user group.</param>
            <returns>Newly created <see cref="T:Checkbox.Users.Group"/> object that has not yet been persisted to the database.</returns>
        </member>
        <member name="M:Checkbox.Users.GroupManager.CopyGroup(Checkbox.Users.Group,System.String,Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Copy the specified user group.
            </summary>
            <param name="group">User group to copy.</param>
            <param name="languageCode">Language code to use when storing the name and description of the copy.</param>
            <param name="currentPrincipal">User copying the group.</param>
            <returns>Newly created and persisted user group.</returns>
        </member>
        <member name="M:Checkbox.Users.GroupManager.InvalidateGroupCache(Checkbox.Users.Group)">
            <summary>
            Invalidate a group's cache
            </summary>
            <param name="group">Group containing changes to persist to the database.</param>
            <exception cref="T:Prezza.Framework.Security.AuthorizationException">When the principal object does not have permission
            to modify the group.</exception>
        </member>
        <member name="M:Checkbox.Users.GroupManager.IsDuplicateName(System.Nullable{System.Int32},System.String)">
            <summary>
            Determines if a proposed name is already used by an existing user group.
            </summary>
            <param name="groupId">ID of a group to ignore when checking for duplicates.</param>
            <param name="groupName">Name to check.</param>
            <returns>True if a group, other than the one specified by groupId, exists with the specified name; 
            False in all other cases. 
            </returns>
        </member>
        <member name="M:Checkbox.Users.GroupManager.GetEveryoneGroup">
            <summary>
            Get an instance of the <see cref="T:Checkbox.Users.EveryoneGroup"/>, which implicitly contains all users
            in the system.  The group does not support listing members or modifying membership, but
            can be used to check permissions and is an Access Permissible <seealso cref="T:Prezza.Framework.Security.IAccessPermissible"/> 
            which can be granted/denied access to secured objects.
            </summary>
        </member>
        <member name="M:Checkbox.Users.GroupManager.GetMembersCount(System.Int32)">
            <summary>
            Get a count of users in the specified user group.
            </summary>
            <param name="groupID">ID of the user group to get the membership count for.</param>
            <returns>Number of users in the specified user group.</returns>
        </member>
        <member name="M:Checkbox.Users.GroupManager.IsUserInGroup(Prezza.Framework.Data.Database,System.Int32,System.String,System.Data.IDbTransaction)">
            <summary>
            Determines if a user is not already a member of a user group.
            </summary>
            <param name="db"></param>
            <param name="groupID">The user group's unique identifier.</param>
            <param name="member">The user's unique identifier.</param>
            <param name="transaction">The Transaction that database queries are being executed under. </param>
            <returns>True if the user is not a member. False if the user is a member.</returns>
        </member>
        <member name="M:Checkbox.Users.GroupManager.UserCanCreateUsers(Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Determine whether the provided user can create other users by having access to at least one group 
            </summary>
            <param name="currentPrincipal"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.GroupManager.ListCurrentUsersForNewGroup(Checkbox.Security.Principal.CheckboxPrincipal,System.String)">
            <summary>
            Get the list of current users for new group
            </summary>
            <param name="callingPrincipal"></param>
            <param name="sortField"></param>
            <param name="sortAscending"></param>
            <param name="filterValue"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.GroupManager.ListCurrentUsersForNewGroupRemoveUser(Checkbox.Security.Principal.CheckboxPrincipal,System.String)">
            <summary>
            Remove user from list of current users of new group
            </summary>
            <param name="callingPrincipal"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.GroupManager.ListCurrentUsersForNewGroupAddUser(Checkbox.Security.Principal.CheckboxPrincipal,System.String)">
            <summary>
            Remove user to the list of current users of new group
            </summary>
            <param name="callingPrincipal"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.GroupManager.CleanCurrentUsersForNewGroup">
            <summary>
            Clean the list of current user for new group
            </summary>
        </member>
        <member name="T:Checkbox.Users.MatrixField">
            <summary>
            Custom user field - matrix type
            </summary>
        </member>
        <member name="P:Checkbox.Users.MatrixField.FieldName">
            <summary>
            Gets or sets the name of the field.
            </summary>
            <value>
            The name of the field.
            </value>
        </member>
        <member name="P:Checkbox.Users.MatrixField.UserID">
            <summary>
            Gets or sets the name of the field.
            </summary>
            <value>
            The name of the field.
            </value>
        </member>
        <member name="P:Checkbox.Users.MatrixField.RowsCount">
            <summary>
            Gets the rows count.
            </summary>
            <value>
            The rows count.
            </value>
        </member>
        <member name="P:Checkbox.Users.MatrixField.GridLines">
            <summary>
            Determines whether default grid lines should be rendered on survey item
            </summary>
        </member>
        <member name="P:Checkbox.Users.MatrixField.ColumnCount">
            <summary>
            Gets the column count.
            </summary>
            <value>
            The column count.
            </value>
        </member>
        <member name="P:Checkbox.Users.MatrixField.BaseColumnCount">
            <summary>
            Gets the base column count.
            </summary>
            <value>
            The base column count.
            </value>
        </member>
        <member name="P:Checkbox.Users.MatrixField.BaseRowsCount">
            <summary>
            Gets the base rows count.
            </summary>
            <value>
            The base rows count.
            </value>
        </member>
        <member name="P:Checkbox.Users.MatrixField.ColumnHeaders">
            <summary>
            Gets the column headers.
            </summary>
            <value>
            The column headers.
            </value>
        </member>
        <member name="P:Checkbox.Users.MatrixField.RowsHeaders">
            <summary>
            Gets the rows headers.
            </summary>
            <value>
            The rows headers.
            </value>
        </member>
        <member name="P:Checkbox.Users.MatrixField.Cells">
            <summary>
            Gets or sets the cells.
            </summary>
            <value>
            The cells.
            </value>
        </member>
        <member name="P:Checkbox.Users.MatrixField.Rows">
            <summary>
            Gets the rows.
            </summary>
            <value>
            The rows.
            </value>
        </member>
        <member name="P:Checkbox.Users.MatrixField.IsRowsFixed">
            <summary>
            Gets or sets a value indicating whether this instance is rows headers fixed.
            </summary>
            <value>
            <c>true</c> if this instance is rows headers fixed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Users.MatrixField.IsColumnsFixed">
            <summary>
            Gets or sets a value indicating whether this instance is headers fixed.
            </summary>
            <value>
            <c>true</c> if this instance is headers fixed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Users.MatrixField.HasFixedStructure">
            <summary>
            Gets a value indicating whether this instance has fixed structure.
            </summary>
            <value>
            <c>true</c> if this instance has fixed structure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Users.MatrixField.HasRowHeaders">
            <summary>
            Gets a value indicating whether this instance has fixed structure.
            </summary>
            <value>
            <c>true</c> if this instance has fixed structure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Users.MatrixField.HasHeaders">
            <summary>
            Gets a value indicating whether this instance has fixed structure.
            </summary>
            <value>
            <c>true</c> if this instance has fixed structure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Checkbox.Users.MatrixField._rows">
            <summary>
            Gets or sets the rows.
            </summary>
            <value>
            The rows.
            </value>
        </member>
        <member name="F:Checkbox.Users.MatrixField._cells">
            <summary>
            The cells
            </summary>
        </member>
        <member name="M:Checkbox.Users.MatrixField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Checkbox.Users.MatrixField"/> class.
            </summary>
        </member>
        <member name="M:Checkbox.Users.MatrixField.FillUpRows">
            <summary>
            Fills up rows.
            </summary>
        </member>
        <member name="M:Checkbox.Users.MatrixField.CreateDataCells(System.Int32,System.Int32,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Creates the data cells.
            </summary>
            <param name="rows">The rows.</param>
            <param name="columns">The columns.</param>
            <param name="values">The values.</param>
            <param name="customCell">if set to <c>true</c> [custom cell].</param>
        </member>
        <member name="M:Checkbox.Users.MatrixField.CreateCustomRowDataCells(System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Creates the custom row data cells.
            </summary>
            <param name="rows">The rows.</param>
            <param name="columns">The columns.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Checkbox.Users.MatrixField.CreateCustomColumnDataCells(System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Creates the custom column data cells.
            </summary>
            <param name="rows">The rows.</param>
            <param name="columns">The columns.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Checkbox.Users.MatrixField.CreateCustomRowHeaders(System.Collections.Generic.List{System.String})">
            <summary>
            Creates the custom row headers.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Checkbox.Users.MatrixField.BuildMatrixCells(System.Collections.Generic.List{Checkbox.Users.MatrixProfileProperty.Cell},System.Collections.Generic.List{Checkbox.Users.MatrixProfileProperty.Cell},System.Int32,System.Int32)">
            <summary>
            Builds the matrix cells.
            </summary>
            <param name="headerValues">The header values.</param>
            <param name="rowHeaderValues">The row header values.</param>
            <param name="rows">The rows.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:Checkbox.Users.MatrixField.CreateCustomColumnHeaders(System.Collections.Generic.List{System.String})">
            <summary>
            Creates the custom column headers.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Checkbox.Users.MatrixField.RemoveDataCells">
            <summary>
            Removes the data cells.
            </summary>
        </member>
        <member name="M:Checkbox.Users.MatrixField.RemoveCustomStructure">
            <summary>
            Removes the custom structure.
            </summary>
        </member>
        <member name="M:Checkbox.Users.MatrixField.ConvertMatrixToCsvState">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Checkbox.Users.MatrixField.PopulateMatrixFields(System.Collections.Generic.List{Checkbox.Users.ProfileProperty}@,System.Nullable{System.Guid})">
            <summary>
            
            </summary>
            <param name="profileProperties"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Checkbox.Users.MatrixField.BindMatrixProfielFieldToItem(Checkbox.Wcf.Services.Proxies.ItemProxyObject,Checkbox.Forms.RenderMode,System.Nullable{System.Guid})">
            <summary>
            Binds the matrix profiel field to item.
            </summary>
            <param name="item">The item.</param>
            <param name="renderMode">The render mode.</param>
            <param name="responseGuid">The response unique identifier.</param>
        </member>
        <member name="M:Checkbox.Users.MatrixField.GetBindedMatrixJsonByItemId(System.Int32,System.Guid)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <param name="uniqueIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.MatrixField.JsonToMatrix(System.String)">
            <summary>
            Matrixes to json.
            </summary>
            <param name="json">The json.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">json</exception>
        </member>
        <member name="M:Checkbox.Users.MatrixField.MatrixToJson(Checkbox.Users.MatrixField)">
            <summary>
            Matrixes to json.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">matrix</exception>
        </member>
        <member name="M:Checkbox.Users.MatrixField.GetResponseMatrixJsonByItemId(System.Int32,System.String,System.Guid)">
            <summary>
            Get json on response matrix
            </summary>
            <param name="itemId"></param>
            <param name="userName"></param>
            <param name="responseTemplateGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.MatrixField.BuildMatrixHtmlFromJobject(System.String)">
            <summary>
            Builds html markup from matrix json
            </summary>
            <param name="jsonValue"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.MatrixField.IsMatrixInResponces(System.Int32,System.Guid,System.String)">
            <summary>
            Returns true if matrix exists in response table
            </summary>
            <param name="itemId"></param>
            <param name="responseTemplateGuid"></param>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.MatrixField.SetRows">
            <summary>
            Sets the rows.
            </summary>
        </member>
        <member name="M:Checkbox.Users.MatrixField.MatrixRowsToJson(Checkbox.Users.MatrixField)">
            <summary>
            Converts matrix rows to json to render on view as tables 
            </summary>
            <param name="matrixField">The matrix field.</param>
            <returns></returns>
        </member>
        <member name="T:Checkbox.Users.Cell">
            <summary>
            Cell class for matrix types
            </summary>
        </member>
        <member name="P:Checkbox.Users.Cell.RowNumber">
            <summary>
            Gets or sets the row number.
            </summary>
            <value>
            The row number.
            </value>
        </member>
        <member name="P:Checkbox.Users.Cell.ColumnNumber">
            <summary>
            Gets or sets the column number.
            </summary>
            <value>
            The column number.
            </value>
        </member>
        <member name="P:Checkbox.Users.Cell.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:Checkbox.Users.Cell.IsHeader">
            <summary>
            Gets or sets a value indicating whether this instance is header.
            </summary>
            <value>
              <c>true</c> if this instance is header; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Users.Cell.IsRowHeader">
            <summary>
            Gets or sets a value indicating whether this instance is header.
            </summary>
            <value>
              <c>true</c> if this instance is header; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Users.Cell.CustomUserCell">
            <summary>
            Gets or sets a value indicating whether [custom user cell].
            </summary>
            <value>
              <c>true</c> if [custom user cell]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Users.Cell.ColumnWidth">
            <summary>
            Gets or sets column width where the cell is displayed
            </summary>
        </member>
        <member name="T:Checkbox.Users.Row">
            <summary>
            Row class for matrix implementation
            </summary>
        </member>
        <member name="P:Checkbox.Users.Row.Cells">
            <summary>
            Gets or sets the cells.
            </summary>
            <value>
            The cells.
            </value>
        </member>
        <member name="M:Checkbox.Users.Row.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Checkbox.Users.Row"/> class.
            </summary>
        </member>
        <member name="T:Checkbox.Users.HtmlMatrix">
            <summary>
            Used for deserizlization
            </summary>
        </member>
        <member name="T:Checkbox.Users.HtmlCell">
            <summary>
            Used for deserizlization
            </summary>
        </member>
        <member name="T:Checkbox.Users.MatrixProfileProperty.Cell">
            <summary>
            Represents a cell in a matrix
            </summary>
        </member>
        <member name="T:Checkbox.Users.ProfileProperty">
            <summary>
            Class that defines profile fields in the account section 
            </summary>
        </member>
        <member name="P:Checkbox.Users.ProfileProperty.FieldId">
            <summary>
            Gets Field Id
            </summary>
            <value>
            Id
            </value>
        </member>
        <member name="P:Checkbox.Users.ProfileProperty.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Checkbox.Users.ProfileProperty.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Checkbox.Users.ProfileProperty.FieldType">
            <summary>
            Gets or sets the type of the field.
            </summary>
            <value>
            The type of the field.
            </value>
        </member>
        <member name="P:Checkbox.Users.ProfileProperty.IsHidden">
            <summary>
            Gets or sets a value indicating whether this instance is hidden.
            </summary>
            <value>
              <c>true</c> if this instance is hidden; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Checkbox.Users.ProfileProperty.BindedItemId">
            <summary>
            If userFieldType is binded to any Item
            </summary>
            <value>
              <c>Item Id</c> if this instance is binded; otherwise, <c>0</c>.
            </value>
        </member>
        <member name="T:Checkbox.Users.PropertyBindingManager">
            <summary>
            PropertyBindingManager
            </summary>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.GetCurrentUserGuid">
            <summary>
            Gets the current user unique identifier based on current user principal or ivnitation query param.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.GetCurrentUserName">
            <summary>
            Gets the name of the current user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.GetBindedPropertyByItemId(System.Int32)">
            <summary>
            Gets the binded property by item identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.SaveBindedFieldResponse(System.Int32,System.Guid,Checkbox.Security.Principal.CheckboxPrincipal,System.String)">
            <summary>
            Saves the binded field response.
            </summary>
            <param name="itemID">The item identifier.</param>
            <param name="responseGuid">The response unique identifier.</param>
            <param name="principal">The principal.</param>
            <param name="fieldType">Type of the field.</param>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.GetBindedRadioButtonJsonByItemId(System.Int32,System.Guid)">
            <summary>
            Gets the binded RadioButton json by item identifier.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="uniqueIdentifier">The unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.SaveResponseRadioButtonState(System.Int32,System.Guid,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Saves the state of the response RadioButton.
            </summary>
            <param name="itemID">The item identifier.</param>
            <param name="responseGuid">The response unique identifier.</param>
            <param name="principal">The principal.</param>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.SaveResponseMatrixState(System.Int32,System.Guid,Checkbox.Security.Principal.CheckboxPrincipal)">
            <summary>
            Saves matrix user field state on response completed
            </summary>
            <param name="itemID">The item identifier.</param>
            <param name="responseGuid">The response unique identifier.</param>
            <param name="principal">The principal.</param>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.GetSessionAnonymousBindedFieldJson(System.String)">
            <summary>
            Gets the session matrces json for anonymous user.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">fieldName</exception>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.GetResponseStateField``1(System.Int32,System.Guid,System.String)">
            <summary>
            Gets the response state field.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="itemId">The item identifier.</param>
            <param name="responseGuid">The response unique identifier.</param>
            <param name="userName">Name of the user.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.GetResponseFieldState(System.Int32,System.Guid,System.String)">
            <summary>
                Get user profile field item state
            </summary>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.GetAllRadioButtonOptionsByName(System.String)">
            <summary>
            Gets the name of all RadioButton options by.
            </summary>
            <param name="radioButtonName">Name of the radio button.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.GetBindedItemIdsByPropertyName(System.String)">
            <summary>
            Gets the name of the binded item ids by property.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.RemoveResponseMatrixSate(System.Int32)">
            <summary>
                Remove all item states for response
            </summary>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.RemoveAllSurveyMatrixResponses(System.Int32)">
            <summary>
                Revove all survey responses for response template
            </summary>
            <param name="responseTemplateId"></param>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.IsBinded(System.Int32)">
            <summary>
            Check if item is binded
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.AddItemMapping(System.Int32,System.Int32,Checkbox.Users.CustomFieldType)">
            <summary>
            Validate property type and adds the item mapping .
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="profilePropertyId">The profile property identifier.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Checkbox.Users.PropertyBindingManager.AddSurveyItemProfilePropertyMapping(System.Int32,System.Int32)">
            <summary>
            Saves profile property and survey item mapping to the database
            </summary>
            <param name="itemId"></param>
            <param name="profilePropertyId"></param>
        </member>
        <member name="T:Checkbox.Users.RadioButtonField">
            <summary>
            Represents radio button custom user field
            </summary>
        </member>
        <member name="P:Checkbox.Users.RadioButtonField.Options">
            <summary>
            a list options for radio button type
            </summary>
        </member>
        <member name="P:Checkbox.Users.RadioButtonField.AllItemOptions">
            <summary>
            a list options for radio button type
            </summary>
        </member>
        <member name="M:Checkbox.Users.RadioButtonField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Checkbox.Users.RadioButtonField"/> class.
            </summary>
        </member>
        <member name="P:Checkbox.Users.RadioButtonField.FieldType">
            <summary>
            It is used to determine field type when object is serialized
            </summary>
        </member>
        <member name="M:Checkbox.Users.RadioButtonField.BindRadioProfileFieldToItem(Checkbox.Wcf.Services.Proxies.ItemProxyObject,Checkbox.Forms.RenderMode,System.Nullable{System.Guid})">
            <summary>
            Binds Radio button item with radio profile field
            </summary>
            <param name="item">The item.</param>
            <param name="renderMode">The render mode.</param>
        </member>
        <member name="M:Checkbox.Users.RadioButtonField.GetAllOptions">
            <summary>
            Adds the empty option.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.RadioButtonField.AddOption(System.String,System.Boolean)">
            <summary>
            Adds the option.
            </summary>
            <param name="title">The title.</param>
            <param name="isChecked">if set to <c>true</c> [is checked].</param>
        </member>
        <member name="M:Checkbox.Users.RadioButtonField.CheckOption(System.Int32)">
            <summary>
            Checks the option.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Checkbox.Users.RadioButtonField.CheckOption(System.String)">
            <summary>
            Checks the option.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Checkbox.Users.RadioButtonField.UnCheckOptions">
            <summary>
            Uns the check options.
            </summary>
        </member>
        <member name="M:Checkbox.Users.RadioButtonField.HasOption(System.String)">
            <summary>
            Determines whether the specified title has option.
            </summary>
            <param name="title">The title.</param>
            <returns>
              <c>true</c> if the specified title has option; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Checkbox.Users.RadioButtonFieldOption">
            <summary>
            Represents an option for radio button field
            </summary>
        </member>
        <member name="P:Checkbox.Users.RadioButtonFieldOption.Id">
            <summary>
            Radio Button option id
            </summary>
        </member>
        <member name="P:Checkbox.Users.RadioButtonFieldOption.Name">
            <summary>
            Option name
            </summary>
        </member>
        <member name="P:Checkbox.Users.RadioButtonFieldOption.IsSelected">
            <summary>
            is current option selected
            </summary>
        </member>
        <member name="P:Checkbox.Users.RadioButtonFieldOption.Alias">
            <summary>
            alias that displayed in a survey instead of option name
            </summary>
        </member>
        <member name="P:Checkbox.Users.RadioButtonFieldOption.ItemId">
            <summary>
            Gets or sets the item identifier.
            </summary>
            <value>
            The item identifier.
            </value>
        </member>
        <member name="M:Checkbox.Users.RadioButtonFieldOption.#ctor(System.String,System.Boolean)">
            <summary>
            constructor with parameters
            </summary>
            <param name="name">The name.</param>
            <param name="isSelected">if set to <c>true</c> [is selected].</param>
        </member>
        <member name="M:Checkbox.Users.RadioButtonFieldOption.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            constructor that takes alias
            </summary>
            <param name="name">The name.</param>
            <param name="isSelected">if set to <c>true</c> [is selected].</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:Checkbox.Users.RadioButtonFieldOption.#ctor(System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Checkbox.Users.RadioButtonFieldOption" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="isSelected">if set to <c>true</c> [is selected].</param>
            <param name="alias">The alias.</param>
            <param name="id">The identifier.</param>
            <param name="itemId">The item identifier.</param>
        </member>
        <member name="M:Checkbox.Users.RadioButtonFieldOption.#ctor">
            <summary>
            constructor without parameters
            </summary>
        </member>
        <member name="T:Checkbox.Users.Security.GroupPolicy">
            <summary>
            Summary description for GroupPolicy.
            </summary>
        </member>
        <member name="M:Checkbox.Users.Security.GroupPolicy.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Checkbox.Users.Security.GroupPolicy.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="permissions"></param>
        </member>
        <member name="T:Checkbox.Users.Security.GroupSecurityEditor">
            <summary>
            Policy and ACL editor class for user <see cref="T:Checkbox.Users.Group"/> objects.
            </summary>
        </member>
        <member name="M:Checkbox.Users.Security.GroupSecurityEditor.#ctor(Checkbox.Users.Group)">
            <summary>
            Constructor.
            </summary>
            <param name="group"><see cref="T:Checkbox.Users.Group"/> this editor will modify.</param>
        </member>
        <member name="P:Checkbox.Users.Security.GroupSecurityEditor.RequiredEditorPermission">
            <summary>
            Get the required permission to edit user group security
            </summary>
        </member>
        <member name="T:Checkbox.Users.UserImportConfigManager">
            <summary>
            Represents the user import configs manager
            </summary>
        </member>
        <member name="M:Checkbox.Users.UserImportConfigManager.RemoveUserImportConfigs">
            <summary>
            Removes the user import configs.
            </summary>
        </member>
        <member name="M:Checkbox.Users.UserImportConfigManager.SaveUserImportConfigs(System.Collections.Generic.List{System.String})">
            <summary>
            Saves CSV configuration to the database
            </summary>
            <param name="userImportConfigs">The user import configs.</param>
        </member>
        <member name="T:Checkbox.Users.UserManager">
            <summary>
             Manage application interaction with user objects and mangage state information for application users.
            </summary>
        </member>
        <member name="F:Checkbox.Users.UserManager.EXTERNAL_USER_AUTHENTICATION_TYPE">
            <summary>
            Authentication type indicating user is authenticated outside of Checkbox, such as with
            an IIS authenticated network user, AD user, or other user.
            </summary>
        </member>
        <member name="F:Checkbox.Users.UserManager.NETWORK_USER_AUTHENTICATION_TYPE">
            <summary>
            User is a "Network User" added to Checkbox user store.
            </summary>
        </member>
        <member name="F:Checkbox.Users.UserManager.PASSWORD_USER_AUTHENTICATION_TYPE">
            <summary>
            User is a standard Checkbox user.
            </summary>
        </member>
        <member name="F:Checkbox.Users.UserManager.ERROR_USER_NOT_UNIQUE">
            <summary>
            Error code indicating an attempt to create/rename a user with an existing name
            </summary>
        </member>
        <member name="M:Checkbox.Users.UserManager.Initialize(Checkbox.Security.Providers.ICheckboxMembershipProvider)">
            <summary>
            Initialize the user manager.  As part of the initialization process, caches for security tokens, logged-in 
            user contexts, and user session tokens (which provide mappings between security tokens and user contexts)
            are created.
            
            </summary>
        </member>
        <member name="M:Checkbox.Users.UserManager.SetAuthTimeout(System.Int32)">
            <summary>
            Set auth timeout. Generally should be the same as forms auth timeout
            </summary>
            <param name="timeoutInMinutes"></param>
        </member>
        <member name="P:Checkbox.Users.UserManager.MembershipProvider">
            <summary>
            Get membership provider reference
            </summary>
        </member>
        <member name="M:Checkbox.Users.UserManager.ExpireCachedPrincipal(System.String)">
            <summary>
            Remove princpal from principal cache
            </summary>
            <param name="uniqueIdentifier"></param>
        </member>
        <member name="M:Checkbox.Users.UserManager.ParseUserName(System.String)">
            <summary>
            Get user name from full unique identifier, which may include domain name.
            </summary>
            <param name="userUniqueIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.IsCheckboxUser(System.String)">
            <summary>
            Return a boolean indicating if a user is a checkbox user
            </summary>
            <param name="userUniqueIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetUserPassword(System.String)">
            <summary>
            Get user password.  Return empty string if not found
            </summary>
            <param name="userUniqueIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetUserPrincipal(System.String)">
            <summary>
            Construct and return a principal for the user associated with the specified identity.  Attempts
            to find user before returning.
            </summary>
            <param name="uniqueIdentifier">Unique user identifier.</param>
            <returns>CheckboxPrincipal object.</returns>
            <api>User Management</api>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetUserPrincipal(System.String,System.Boolean)">
            <summary>
            Construct a principal for the user
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="useCache"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.GenerateUniqueIdentifier(System.String,System.String)">
            <summary>
            Generate a unique identifier from a user name and domain name
            </summary>
            <param name="userName"></param>
            <param name="domainName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.IsDomainUser(System.String)">
            <summary>
            Determine if user is a domain user.
            </summary>
            <param name="userUniqueIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetUserPrincipal(System.Security.Principal.IIdentity,System.Boolean)">
            <summary>
            
            </summary>
            <param name="userIdentity"></param>
            <param name="useCache"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetUserGuid(System.String)">
            <summary>
            Get a GUID associated with the user
            </summary>
            <param name="uniqueIdentifier">User unique identifier.</param>
            <returns>String representation of the guid.</returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetUserEmail(System.String)">
            <summary>
            Get the email address associated with the user
            </summary>
            <param name="uniqueIdentifier">User unique identifier.</param>
            <returns>String representation of the email address.</returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetUserWithEmail(System.String)">
            <summary>
            Get a principal for the first user with a matching email address.
            </summary>
            <param name="emailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.FindUser(System.String,System.String)">
            <summary>
            Get a principal for the first user with a matching name and email address.
            </summary>
            <param name="name"></param>
            <param name="emailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetUserByGuid(System.Guid)">
            <summary>
            Get a user principal based on the GUID associated with the user.
            </summary>
            <param name="userGuid">GUID associated with the user.</param>
            <returns>CheckboxPrincipal object representing the user, or null if no user is
            associated with the specified GUID.</returns>
            <api>User Management</api>
        </member>
        <member name="M:Checkbox.Users.UserManager.UserExists(System.String)">
            <summary>
            Determines if a user already exists with the specified user unique identifier
            </summary>
            <param name="uniqueIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.ValidateUniqueIdentifierFormat(System.String)">
            <summary>
            Validates a proposed unique identifier to ensure it meets formatting requirements
            - Uniqueidentifiers may not contain the characters $ ' 
            </summary>
            <param name="proposedUniqueIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.SetUserContext(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set the context for the logged in user.  The context contains information about
            what the user is doing and what screens the user is viewing.
            </summary>
            <param name="userName">Name of user.</param>
            <param name="userHostName">Name of the computer the user is accessing Checkbox from.</param>
            <param name="userHostAddress">IP address the user is accessing Checkbox from.</param>
            <param name="userAgent">User agent string returned by the user's web browser.</param>
            <param name="currentContext">Current context of the user within Checkbox.  Typically, this
            is path to the aspx page the user is accessing.</param>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetCurrentPrincipal">
            <summary>
            Return the current logged-in principal.
            </summary>
            <returns><see cref="T:Checkbox.Security.Principal.CheckboxPrincipal"/> object for the logged-in user.</returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.CheckPrincipalPermissionForUser(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="principal"></param>
            <param name="uniqueIdentifier"></param>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.CheckCurrentPrincipalPermissionForUser(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="permission"></param>
        </member>
        <member name="M:Checkbox.Users.UserManager.CanCurrentPrincipalEditUser(System.String)">
            <summary>
            Return a boolean indicating if the current principal can edit the specified user.
            </summary>
            <param name="uniqueIdentifier">Unique identifier of user to check.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.CanCurrentPrincipalViewUser(System.String)">
            <summary>
            Return a boolean indicating if the current principal can edit the specified user.
            </summary>
            <param name="uniqueIdentifier">Unique identifier of user to check.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.DeleteUser(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String,System.Boolean,System.String@)">
            <summary>
            Delete a user and associated information.
            </summary>
            <param name="callingPrincipal">User attempting to perform the operation.</param>
            <param name="status">Status message to return.</param>
            <param name="userUniqueIdentifier">Identity of the user to delete.</param>
            <param name="deleteResponses">Indicates whether the users responses should be deleted.</param>
            <returns>Boolean indicating the success of the operation.</returns>
            <api>User Management</api>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetDomain(System.String)">
            <summary>
            Get the domain associated with the identity.
            </summary>
            <param name="uniqueIdentifier">Identity of the user.</param>
            <returns>Domain associated with the user.</returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.UpdateUser(System.String,System.String,System.String,System.String,System.String,System.String,System.String@)">
            <summary>
            Update the user's identity and profile information.
            </summary>
            <param name="userUniqueIdentifier">Unique identifier of the user to update.</param>
            <param name="newUserName">New user name for the user.  A NULL value should be passed if the user name is not to be changed.</param>
            <param name="newDomain">New NT/AD domain name for the user.</param>
            <param name="newPassword">New password for the user.  A NULL value should be passed if the password is not to be changed.</param>
            <param name="newEmailAddress">New email address for the user.</param>
            <param name="modifier"> </param>
            <param name="status">Output parameter with status from the stored procedure or an error message.</param>
            <returns><see cref="T:Checkbox.Security.Principal.CheckboxPrincipal"/> representing the updated user.</returns>
            <api>User Management</api>
        </member>
        <member name="M:Checkbox.Users.UserManager.FilterPageAndSortUserList(System.Collections.Generic.List{System.String},Checkbox.Pagination.PaginationContext)">
            <summary>
            Applies filtering, sorting and pagination to a raw list of users
            </summary>
            <param name="rawUserList">A list of user unique identifiers</param>
            <param name="paginationContext"></param>
            <returns>A list of user unique identifiers meeting the filter, sort, and page criteria of the pagination context</returns>
            <remarks>This method allows lists of user unique identifiers to be filtered and sorted based on profile properties, which may not be known to the call that generates the raw list</remarks>
        </member>
        <member name="M:Checkbox.Users.UserManager.ListUsers(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext)">
            <summary>
            List users in the system.
            </summary>
            <param name="callingPrincipal"></param>
            <param name="paginationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.IntersectMembers(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext)">
            <summary>
            
            </summary>
            <param name="callingPrincipal"></param>
            <param name="paginationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.ListUsers(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext,System.String)">
            <summary>
            List users in the system by given provider. Implements true paging.
            </summary>
            <param name="callingPrincipal"></param>
            <param name="paginationContext"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.ListUsersByTenantId(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext,System.String)">
            <summary>
            List users in the system by given provider. Implements true paging.
            </summary>
            <param name="callingPrincipal"></param>
            <param name="paginationContext"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.IsActiveDirectoryMembershipProvider(System.String)">
            <summary>
            
            </summary>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetPageItemUsersData(Prezza.Framework.Security.Principal.ExtendedPrincipal,Checkbox.Pagination.PaginationContext,System.String)">
            <summary>
            List users in the system by given provider. Implements true paging.
            </summary>
            <param name="callingPrincipal"></param>
            <param name="paginationContext"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.HasEveryoneGroupAccess(Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            
            </summary>
            <param name="callingPrincipal"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetDomainMembershipUser(System.Web.Security.MembershipUser)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetDomainMembershipUsers(System.Web.Security.MembershipUserCollection)">
            <summary>
            </summary>
            <param name="users"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.ListUsersInRole(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String,Checkbox.Pagination.PaginationContext)">
            <summary>
            List users in the system for the given role.
            </summary>
            <param name="callingPrincipal"></param>
            <param name="paginationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.ListUsers(Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            
            </summary>
            <param name="callingPrincipal"></param>
            <returns></returns>
        </member>
        <member name="F:Checkbox.Users.UserManager._emailValidator">
            <summary>
            Validator for user emails
            </summary>
        </member>
        <member name="M:Checkbox.Users.UserManager.CreateUser(System.String,System.String,System.String,System.String,System.String,System.String@)">
            <summary>
            Create a user and return an identity for it.
            </summary>
            <param name="name">UserName of the user to create.</param>
            <param name="password">Created user's password.</param>
            <param name="domain">Domain of the created user.</param>
            <param name="emailAddress"></param>
            <param name="status">Status message for the operation.</param>
            <returns>User Identity</returns>
            <api>User Management</api>
        </member>
        <member name="M:Checkbox.Users.UserManager.GeneratePassword(System.Int32)">
            <summary>
            Generate a pseudo random password which is length characters long.
            </summary>
            <param name="length">The length of the password being generated.</param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.AuthenticateUser(System.Guid)">
            <summary>
            Given a user guid, return an authenticated principal.
            </summary>
            <param name="guid">GUID identifying a user.</param>
            <returns>CheckboxPrincipal associated with the user, or NULL if the guid is not associated with a user.</returns>
            <api>User Management</api>
        </member>
        <member name="M:Checkbox.Users.UserManager.ValidateLoginCredentials(System.String,System.String)">
            <summary>
            Validate user login credentials are correct
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.AuthenticateUser(System.String,System.String)">
            <summary>
            Authenticate a user using name/password credentials.
            </summary>
            <param name="name">Unique name for the user.</param>
            <param name="password">User password.</param>
            <returns>CheckboxPrincipal associated with the user if the user is successfully authenticated.</returns>
            <api>User Management</api>
        </member>
        <member name="M:Checkbox.Users.UserManager.LoggedInUsers">
            <summary>
            Return a list of UserLoginInfo objects for all users currently logged-in.
            </summary>
            <returns>List of UserLoginInfo objects.</returns>
            <api>User Management</api>
        </member>
        <member name="M:Checkbox.Users.UserManager.ExpireLoggedInUser(System.String)">
            <summary>
            Remove user from logged-in user cache.  This does not cause a user to be logged-out.
            </summary>
            <param name="uniqueIdentifier">Unique identifier of the user to remove from cache</param>
            <returns>Boolean indicating success.</returns>
            <api>User Management</api>
        </member>
        <member name="M:Checkbox.Users.UserManager.CountUnencryptedPasswords">
            <summary>
            Count number of unencrypted passwords in db
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.UnlockUser(System.String)">
            <summary>
            Unlock user
            </summary>
            <param name="userName"></param>       
        </member>
        <member name="M:Checkbox.Users.UserManager.LockUser(System.String)">
            <summary>
            Lock user
            </summary>
            <param name="userName"></param>       
        </member>
        <member name="M:Checkbox.Users.UserManager.ListUnencryptedPasswordUsers">
            <summary>
            List unencrypted user passwords.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.EncryptUserPassword(Checkbox.Users.Data.UserDto,System.String)">
            <summary>
            Hash passwords for all users that have not had passwords hashed yet.
            </summary>
            <returns>Boolean indicating whether the operation was successful or not.</returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetProductTourMessages(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String)">
            <summary>
            Determines if product information is available to be displayed to a user.
            </summary>
            <param name="principal"></param>
            <param name="applicationPath"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.OptOutOfProductTourMessages(System.String,System.Collections.Generic.List{System.IO.FileInfo})">
            <summary>
            Opt a user out of the product tour messages.
            </summary>
            <param name="userName">Name of user to opt-out.</param>
            <param name="messages">Messages to opt out of.</param>
        </member>
        <member name="M:Checkbox.Users.UserManager.LoadTourMessages(System.String)">
            <summary>
            Load the list of files available for display when a user logs in.
            </summary>
            <param name="messagePath"></param>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetMessagesByRole(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String)">
            <summary>
            Determines if there are messages available for a specified user.
            </summary>
            <param name="identity"></param>
            <param name="messagePath"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.SetUserModifier(System.String,System.String)">
            <summary>
            Set modifier that edits user info
            </summary>
            <param name="userToEdit"></param>
            <param name="modifier"></param>
        </member>
        <member name="M:Checkbox.Users.UserManager.GenerateAuthenticationTicket(Checkbox.Security.Principal.CheckboxPrincipal,System.String@)">
            <summary>
            
            </summary>
            <param name="principal"></param>
            <param name="encryptedTicket"> </param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetPrincipalByTicket(System.String)">
            <summary>
            
            </summary>
            <param name="encryptedTicket"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.Users.UserManager.GetUserImportConfigs">
            <summary>
            Gets CSV import user column data
            </summary>
            <returns></returns>
        </member>
        <member name="T:Checkbox.XmlExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Checkbox.XmlExtensions.WriteElementValue``1(System.Xml.XmlWriter,System.String,System.Nullable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="writer"></param>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Checkbox.XmlExtensions.WriteHtml(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="writer"></param>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Checkbox.XmlExtensions.WriteNull(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Checkbox.XmlExtensions.ReadElementNode(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="element"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.XmlExtensions.EnsureElement(System.Xml.XmlReader,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="element"></param>
            <param name="throwException"></param>
        </member>
        <member name="M:Checkbox.XmlExtensions.EnsureElement(System.Xml.XmlReader,System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="element"></param>
            <param name="throwException"></param>
        </member>
        <member name="M:Checkbox.XmlExtensions.ReadAttributeInt(System.Xml.XmlReader,System.Int32)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="attrIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.XmlExtensions.ReadAttributeAt(System.Xml.XmlReader,System.Int32)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="attrIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.XmlExtensions.ReadElementNodeInt(System.Xml.XmlReader,System.String)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.XmlExtensions.ReadElementNodeDouble(System.Xml.XmlReader,System.String)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.XmlExtensions.ReadElementNodeDate(System.Xml.XmlReader,System.String)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.XmlExtensions.ReadElementNodeBool(System.Xml.XmlReader,System.String)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Checkbox.XmlExtensions.MoveToNextElement(System.Xml.XmlReader,System.String)">
            <summary>
            Advances XmlTextReader to next element with given name
            </summary>
            <param name="reader"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:TokenType">
            <summary>
            Type of token for piping.
            </summary>
        </member>
        <member name="F:TokenType.Answer">
            <summary>
            Answer to a question.
            </summary>
        </member>
        <member name="F:TokenType.Profile">
            <summary>
            Value from respondent's profile
            </summary>
        </member>
        <member name="F:TokenType.Response">
            <summary>
            Property of current response.
            </summary>
        </member>
        <member name="F:TokenType.ResponseTemplate">
            <summary>
            Property of template associated with current response.
            </summary>
        </member>
        <member name="F:TokenType.Other">
            <summary>
            Other
            </summary>
        </member>
    </members>
</doc>
