//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace Checkbox.Wcf.Services.Proxies
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public class InvitationManagementServiceProxy : System.ServiceModel.ClientBase<IInvitationManagementService>, IInvitationManagementService
    {

        public InvitationManagementServiceProxy()
        {
        }

        public InvitationManagementServiceProxy(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public InvitationManagementServiceProxy(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public InvitationManagementServiceProxy(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public InvitationManagementServiceProxy(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        public ServiceOperationResult<string> AuthenticateUser(string userName, string password)
        {
            return Channel.AuthenticateUser(userName, password);
        }

        public ServiceOperationResult<InvitationData> CreateInvitation(string authTicket, int responseTemplateID, string name)
        {
            return Channel.CreateInvitation(authTicket, responseTemplateID, name);
        }

        public ServiceOperationResult<InvitationData> GetInvitation(string authTicket, int invitationID)
        {
            return Channel.GetInvitation(authTicket, invitationID);
        }

        public ServiceOperationResult<object> UpdateInvitation(string authTicket, InvitationData invitation)
        {
            return Channel.UpdateInvitation(authTicket, invitation);
        }

        public ServiceOperationResult<object> DeleteInvitation(string authTicket, int invitationId)
        {
            return Channel.DeleteInvitation(authTicket, invitationId);
        }

        public ServiceOperationResult<object> DeleteInvitations(string authTicket, int[] invitationIds)
        {
            return Channel.DeleteInvitations(authTicket, invitationIds);
        }

        public ServiceOperationResult<object> AddEmailAddressesToInvitation(string authTicket, int invitationID, string[] emailAddresses)
        {
            return Channel.AddEmailAddressesToInvitation(authTicket, invitationID, emailAddresses);
        }

        public ServiceOperationResult<object> AddUsersToInvitation(string authTicket, int invitationID, string[] userNames)
        {
            return Channel.AddUsersToInvitation(authTicket, invitationID, userNames);
        }

        public ServiceOperationResult<object> GenerateUsersLinks(string authTicket, int surveyId, string[] userNames)
        {
            return Channel.GenerateUsersLinks(authTicket, surveyId, userNames);
        }

        public ServiceOperationResult<object> AddEmailListPanelsToInvitation(string authTicket, int invitationID, int[] emailListPanelIDs)
        {
            return Channel.AddEmailListPanelsToInvitation(authTicket, invitationID, emailListPanelIDs);
        }

        public ServiceOperationResult<object> AddUserGroupsToInvitation(string authTicket, int invitationID, int[] userGroupIDs)
        {
            return Channel.AddUserGroupsToInvitation(authTicket, invitationID, userGroupIDs);
        }

        public ServiceOperationResult<PagedListResult<RecipientData[]>> ListInvitationRecipients(string authTicket, int invitationID, string recipientStatusFilter, string recipientNameFilter, int pageNumber, int pageSize)
        {
            return Channel.ListInvitationRecipients(authTicket, invitationID, recipientStatusFilter, recipientNameFilter, pageNumber, pageSize);
        }

        public ServiceOperationResult<RecipientData[]> ListRecentInvitationRecipients(string authTicket, int invitationID, int count)
        {
            return Channel.ListRecentInvitationRecipients(authTicket, invitationID, count);
        }

        public ServiceOperationResult<object> RemoveRecipients(string authTicket, int invitationID, long[] recipientList)
        {
            return Channel.RemoveRecipients(authTicket, invitationID, recipientList);
        }

        public ServiceOperationResult<object> SendInvitationToFilteredRecipientList(string authTicket, int invitationID, string recipientFilter)
        {
            return Channel.SendInvitationToFilteredRecipientList(authTicket, invitationID, recipientFilter);
        }

        public ServiceOperationResult<SimpleNameValueCollection> SendInvitationToRecipientList(string authToken, int invitationId, string recipientEmails, string InvitationType)
        {
            return Channel.SendInvitationToRecipientList(authToken, invitationId, recipientEmails, InvitationType);
        }

        public ServiceOperationResult<PagedListResult<InvitationData[]>> ListInvitations(string authTicket, int responseTemplateId, int pageNumber, int pageSize, string sortField, bool sortAscending, string filterField, string filterValue)
        {
            return Channel.ListInvitations(authTicket, responseTemplateId, pageNumber, pageSize, sortField, sortAscending, filterField, filterValue);
        }

        public ServiceOperationResult<PagedListResult<InvitationData[]>> ListFilteredInvitations(string authTicket, int responseTemplateId, int pageNumber, int pageSize, string sortField, bool sortAscending, string filterField, string filterValue, string filterKey = null)
        {
            return Channel.ListFilteredInvitations(authTicket, responseTemplateId, pageNumber, pageSize, sortField, sortAscending, filterField, filterValue, filterKey);
        }

        public ServiceOperationResult<PagedListResult<InvitationData[]>> ListFilteredUsersInvitations(string authTicket, int responseTemplateId, int pageNumber, int pageSize, string sortField, bool sortAscending, string filterField, string filterValue, string filterKey = null)
        {
            return Channel.ListFilteredUsersInvitations(authTicket, responseTemplateId, pageNumber, pageSize, sortField, sortAscending, filterField, filterValue, filterKey);
        }

        public ServiceOperationResult<PagedListResult<InvitationData[]>> ListSentInvitations(string authTicket, int responseTemplateId, int pageNumber, int pageSize)
        {
            return Channel.ListSentInvitations(authTicket, responseTemplateId, pageNumber, pageSize);
        }

        public ServiceOperationResult<PagedListResult<InvitationData[]>> ListScheduledInvitations(string authTicket, int responseTemplateId, int pageNumber, int pageSize)
        {
            return Channel.ListScheduledInvitations(authTicket, responseTemplateId, pageNumber, pageSize);
        }

        public ServiceOperationResult<OptedOutInvitationData> GetEmailOptOutDetails(string authTicket, string email, int responseTemplateId, int invitationId)
        {
            return Channel.GetEmailOptOutDetails(authTicket, email, responseTemplateId, invitationId);
        }

        public ServiceOperationResult<int> GetInvitationCountForSurvey(string authTicket, int responseTemplateId)
        {
            return Channel.GetInvitationCountForSurvey(authTicket, responseTemplateId);
        }

        public ServiceOperationResult<int> GetInvitationCountForSurveyByType(string authTicket, int responseTemplateId, bool isSent)
        {
            return Channel.GetInvitationCountForSurveyByType(authTicket, responseTemplateId, isSent);
        }

        public ServiceOperationResult<PagedListResult<EmailListPanelData[]>> ListEmailPanels(string authTicket, string permission, int pageNumber, int pageSize, string sortField, bool sortAscending, string filterField, string filterValue)
        {
            return Channel.ListEmailPanels(authTicket, permission, pageNumber, pageSize, sortField, sortAscending, filterField, filterValue);
        }

        public ServiceOperationResult<PagedListResult<EmailListPanelData[]>> ListEmailPanelsByPeriod(string authTicket, int pageNumber, int pageSize, string sortField, bool sortAscending, string filterField, string filterValue, int period, string dateFieldName)
        {
            return Channel.ListEmailPanelsByPeriod(authTicket, pageNumber, pageSize, sortField, sortAscending, filterField, filterValue, period, dateFieldName);
        }

        public ServiceOperationResult<EmailListPanelData> CreateEmailListPanel(string authTicket, string name, string description)
        {
            return Channel.CreateEmailListPanel(authTicket, name, description);
        }

        public ServiceOperationResult<EmailListPanelData> GetEmailListPanelInfo(string authTicket, int emailListPanelID)
        {
            return Channel.GetEmailListPanelInfo(authTicket, emailListPanelID);
        }

        public ServiceOperationResult<int> CopyEmailListPanel(string authTicket, int emailListPanelID, string languageCode)
        {
            return Channel.CopyEmailListPanel(authTicket, emailListPanelID, languageCode);
        }

        public ServiceOperationResult<int[]> CopyEmailListPanels(string authTicket, int[] emailListPanelIdList, string languageCode)
        {
            return Channel.CopyEmailListPanels(authTicket, emailListPanelIdList, languageCode);
        }

        public ServiceOperationResult<object> UpdateEmailListPanel(string authTicket, EmailListPanelData panelInfo)
        {
            return Channel.UpdateEmailListPanel(authTicket, panelInfo);
        }

        public ServiceOperationResult<object> AddEmailAddressesToEmailListPanel(string authTicket, int emailListPanelID, string[] emailAddresses)
        {
            return Channel.AddEmailAddressesToEmailListPanel(authTicket, emailListPanelID, emailAddresses);
        }

        public ServiceOperationResult<object> RemoveEmailAddressesFromEmailListPanel(string authTicket, int emailListPanelID, string[] emailAddresses)
        {
            return Channel.RemoveEmailAddressesFromEmailListPanel(authTicket, emailListPanelID, emailAddresses);
        }

        public ServiceOperationResult<PagedListResult<string[]>> ListEmailListPanelAddresses(string authTicket, int emailListPanelID, int pageNumber, int pageSize)
        {
            return Channel.ListEmailListPanelAddresses(authTicket, emailListPanelID, pageNumber, pageSize);
        }        

        public ServiceOperationResult<string[]> ListEmailListPanelDefaultPolicyPermissions(string authTicket, int emailListPanelID)
        {
            return Channel.ListEmailListPanelDefaultPolicyPermissions(authTicket, emailListPanelID);
        }

        public ServiceOperationResult<object> SetEmailListPanelDefaultPolicyPermissions(string authTicket, int emailListPanelID, string[] permissions)
        {
            return Channel.SetEmailListPanelDefaultPolicyPermissions(authTicket, emailListPanelID, permissions);
        }

        public ServiceOperationResult<string[]> ListEmailListPanelAccessListPermissionsForUser(string authTicket, int emailListPanelID, string uniqueIdentifier)
        {
            return Channel.ListEmailListPanelAccessListPermissionsForUser(authTicket, emailListPanelID, uniqueIdentifier);
        }

        public ServiceOperationResult<string[]> ListEmailListPanelAccessListPermissionsForGroup(string authTicket, int emailListPanelID, int userGroupID)
        {
            return Channel.ListEmailListPanelAccessListPermissionsForGroup(authTicket, emailListPanelID, userGroupID);
        }

        public ServiceOperationResult<object> RemoveUserFromEmailListPanelAccessList(string authTicket, int emailListPanelID, string uniqueIdentifier)
        {
            return Channel.RemoveUserFromEmailListPanelAccessList(authTicket, emailListPanelID, uniqueIdentifier);
        }

        public ServiceOperationResult<object> RemoveGroupFromEmailListPanelAccessList(string authTicket, int emailListPanelID, int userGroupID)
        {
            return Channel.RemoveGroupFromEmailListPanelAccessList(authTicket, emailListPanelID, userGroupID);
        }

        public ServiceOperationResult<object> AddUserToEmailListPanelAccessList(string authTicket, int emailListPanelID, string uniqueIdentifier, string[] permissions)
        {
            return Channel.AddUserToEmailListPanelAccessList(authTicket, emailListPanelID, uniqueIdentifier, permissions);
        }

        public ServiceOperationResult<object> AddGroupToEmailListPanelAccessList(string authTicket, int emailListPanelID, int userGroupID, string[] permissions)
        {
            return Channel.AddGroupToEmailListPanelAccessList(authTicket, emailListPanelID, userGroupID, permissions);
        }

        public ServiceOperationResult<InvitationRecipientSummary> GetRecipientSummary(string authTicket, int invitationId)
        {
            return Channel.GetRecipientSummary(authTicket, invitationId);
        }

        public ServiceOperationResult<ResponseData[]> ListRecentResponses(string authTicket, int invitationId, int count)
        {
            return Channel.ListRecentResponses(authTicket, invitationId, count);
        }

        public ServiceOperationResult<PagedListResult<ResponseData[]>> ListResponses(string authTicket, int invitationId, int pageNumber, int pageSize, string sortField, bool sortAscending, string filterField, string filterValue)
        {
            return Channel.ListResponses(authTicket, invitationId, pageNumber, pageSize, sortField, sortAscending, filterField, filterValue);
        }

        public ServiceOperationResult<object> DeleteEmailListPanel(string authTicket, int emailListPanelID)
        {
            return Channel.DeleteEmailListPanel(authTicket, emailListPanelID);
        }

        public ServiceOperationResult<object> DeleteEmailListPanels(string authTicket, int[] emailListPanelIdList)
        {
            return Channel.DeleteEmailListPanels(authTicket, emailListPanelIdList);
        }

        public ServiceOperationResult<PagedListResult<UserData[]>> ListAvailableUsersForInvitation(string authTicket, string provider, int invitationId, int pageNumber, int pageSize, string sortField, bool sortAscending, string filterField, string filterValue)
        {
            return Channel.ListAvailableUsersForInvitation(authTicket, provider, invitationId, pageNumber, pageSize, sortField, sortAscending, filterField, filterValue);
        }

        public ServiceOperationResult<PagedListResult<PageItemUserData[]>> ListAvailablePageItemUserDataForInvitation(string authTicket, string provider, int invitationId,
            int pageNumber, int pageSize, string sortField, bool sortAscending, string filterField, string filterValue)
        {
            return Channel.ListAvailablePageItemUserDataForInvitation(authTicket, provider, invitationId, pageNumber, pageSize, sortField, sortAscending, filterField, filterValue);
        }

        public ServiceOperationResult<PagedListResult<UserGroupData[]>> ListAvailableUserGroupsForInvitation(string authTicket, int invitationId, int pageNumber, int pageSize, string sortField, bool sortAscending, string filterField, string filterValue)
        {
            return Channel.ListAvailableUserGroupsForInvitation(authTicket, invitationId, pageNumber, pageSize, sortField, sortAscending, filterField, filterValue);
        }

        public ServiceOperationResult<PagedListResult<EmailListPanelData[]>> ListAvailableEmailListsForInvitation(string authTicket, int invitationId, int pageNumber, int pageSize, string sortField, bool sortAscending, string filterField, string filterValue)
        {
            return Channel.ListAvailableEmailListsForInvitation(authTicket, invitationId, pageNumber, pageSize, sortField, sortAscending, filterField, filterValue);
        }

        public ServiceOperationResult<GroupedResult<InvitationData>[]> SearchInvitations(string authTicket, string searchTerm)
        {
            return Channel.SearchInvitations(authTicket, searchTerm);
        }

        public ServiceOperationResult<object> RemovePendingRecipients(string authTicket, int invitationId, string[] recipientUserNames, string[] recipientEmailAddresses, string[] recipientGroupIds, string[] recipientEmailListIds)
        {
            return Channel.RemovePendingRecipients(authTicket, invitationId, recipientUserNames, recipientEmailAddresses, recipientGroupIds, recipientEmailListIds);
        }

        public ServiceOperationResult<object> MarkRecipientsOptedOut(string authTicket, int invitationId, long[] recipientList)
        {
            return Channel.MarkRecipientsOptedOut(authTicket, invitationId, recipientList);
        }

        public ServiceOperationResult<object> MarkRecipientsResponded(string authTicket, int invitationId, long[] recipientList)
        {
            return Channel.MarkRecipientsResponded(authTicket, invitationId, recipientList);
        }

        public ServiceOperationResult<PagedListResult<InvitationScheduleData[]>> ListInvitationSchedule(string authTicket, int invitationID, bool sortAscending, int pageNumber, int pageSize)
        {
            return Channel.ListInvitationSchedule(authTicket, invitationID, sortAscending, pageNumber, pageSize);
        }

        public ServiceOperationResult<bool> DeleteScheduleItems(string authTicket, int invitationId, int[] scheduleItemList)
        {
            return Channel.DeleteScheduleItems(authTicket, invitationId, scheduleItemList);
        }

        public ServiceOperationResult<object> SetScheduledDate(string authTicket, int invitationID, int? scheduleID, string scheduledDate)
        {
            return Channel.SetScheduledDate(authTicket, invitationID, scheduleID, scheduledDate);
        }

        public ServiceOperationResult<string> GetScheduleStatus(string authTicket, int scheduleID)
        {
            return Channel.GetScheduleStatus(authTicket, scheduleID);
        }

        public ServiceOperationResult<object> RequestBatchMessages(string authTicket, int scheduleID)
        {
            return Channel.RequestBatchMessages(authTicket, scheduleID);
        }

        public ServiceOperationResult<int> RequestBatchMessagesPartially(string authTicket, int scheduleID, int batchSize)
        {
            return Channel.RequestBatchMessagesPartially(authTicket, scheduleID, batchSize);
        }

        public ServiceOperationResult<object> UpdateBatchStatus(string authTicket, int scheduleID, string Status, string ErrorText)
        {
            return Channel.UpdateBatchStatus(authTicket, scheduleID, Status, ErrorText);
        }

        public ServiceOperationResult<int> GetInvitationSentCount(string authTicket, int responseTemplateId)
        {
            return Channel.GetInvitationSentCount(authTicket, responseTemplateId);
        }

        public ServiceOperationResult<InvitationData[]> ListRecentlySentInvitations(string authToken, int surveyId, int count)
        {
            return Channel.ListRecentlySentInvitations(authToken, surveyId, count);
        }

        public ServiceOperationResult<object> ResetProcessingBatchForRecipients(string authTicket, int scheduleID)
        {
            return Channel.ResetProcessingBatchForRecipients(authTicket, scheduleID);
        }

        public ServiceOperationResult<int> GetRelatedInvitationBatchId(string authTicket, int scheduleID)
        {
            return Channel.GetRelatedInvitationBatchId(authTicket, scheduleID);
        }
    }
}