//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Checkbox.Wcf.Services.Proxies
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public class SurveyResponseServiceProxy : System.ServiceModel.ClientBase<ISurveyResponseService>, ISurveyResponseService
    {

        public SurveyResponseServiceProxy()
        {
        }

        public SurveyResponseServiceProxy(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public SurveyResponseServiceProxy(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public SurveyResponseServiceProxy(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public SurveyResponseServiceProxy(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }


        public ServiceOperationResult<ResponseSessionState> InitializeRespondent(Guid sessionKey, string respondentUniqueIdentifier, Guid? anonymousRespondentGuid, Guid? invitationRecipientGuid, Guid? directInvitationRecipientGuid, object cacheContext)
        {
            return Channel.InitializeRespondent(sessionKey, respondentUniqueIdentifier, anonymousRespondentGuid,
                                                invitationRecipientGuid, directInvitationRecipientGuid, cacheContext);
        }

        public ServiceOperationResult<ResponseSessionState> SetAuthenticatedRespondent(Guid sessionKey, string respondentUniqueIdentifier, object cacheContext)
        {
            return Channel.SetAuthenticatedRespondent(sessionKey, respondentUniqueIdentifier, cacheContext);
        }

        public ServiceOperationResult<ResponseSessionState> SetPassword(Guid sessionKey, string password, object cacheContext)
        {
            return Channel.SetPassword(sessionKey, password, cacheContext);
        }

        public ServiceOperationResult<ResponseSessionState> SetLanguage(Guid sessionKey, string languageCode, object cacheContext)
        {
            return Channel.SetLanguage(sessionKey, languageCode, cacheContext);
        }

        public ServiceOperationResult<ResponseSessionState> SelectResponse(Guid sessionKey, int responseId)
        {
            return Channel.SelectResponse(sessionKey, responseId);
        }

        public ServiceOperationResult<bool> GetMoreResponsesAllowed(Guid sessionKey, object cacheContext)
        {
            return Channel.GetMoreResponsesAllowed(sessionKey, cacheContext);
        }

        public ServiceOperationResult<string> GetLanguageForSession(Guid sessionKey, object cacheContext)
        {
            return Channel.GetLanguageForSession(sessionKey, cacheContext);
        }

        public ServiceOperationResult<ResponseSessionState> GetCurrentSessionState(Guid sessionKey, object cacheContext)
        {
            return Channel.GetCurrentSessionState(sessionKey, cacheContext);
        }

        public ServiceOperationResult<int> GetTemplateIdForSession(Guid sessionKey, object cacheContext)
        {
            return Channel.GetTemplateIdForSession(sessionKey, cacheContext);
        }

        public ServiceOperationResult<SurveyResponseData> GetResponse(Guid sessionKey, object cacheContext)
        {
            return Channel.GetResponse(sessionKey, cacheContext);
        }

        public ServiceOperationResult<SurveyResponsePage> GetCurrentResponsePage(Guid sesssionKey, object cacheContext)
        {
            return Channel.GetCurrentResponsePage(sesssionKey, cacheContext);
        }

        public ServiceOperationResult<Dictionary<int, bool>> GetVisitedPageVisibilities(Guid sesssionKey, object cacheContext)
        {
            return Channel.GetVisitedPageVisibilities(sesssionKey, cacheContext);
        }

        public ServiceOperationResult<SurveyResponsePage[]> GetAllResponsePages(Guid sesssionKey, object cacheContext, Guid? rGuid)
        {
            return Channel.GetAllResponsePages(sesssionKey, cacheContext, rGuid);
        }

        //public ServiceOperationResult<ItemProxyObject[]> GetItems(Guid sesssionKey, int[] itemIds)
        //{
        //    return Channel.GetItems(sesssionKey, itemIds);
        //}

        public ServiceOperationResult<ItemProxyObject[]> GetAllCurrentPageItems(Guid sesssionKey, object cacheContext)
        {
            return Channel.GetAllCurrentPageItems(sesssionKey, cacheContext);
        }

        //public void SetPage(Guid sessionKey, int? pageId, object cacheContext)
        //{
        //     //Channel.SetPage(sessionKey, pageId ,cacheContext);
        //}

        public ServiceOperationResult<ResponseSessionState> CreateResponseSession(Guid sessionKey, ResponseSessionData sessionData, object cacheContext)
        {
            return Channel.CreateResponseSession(sessionKey, sessionData, cacheContext);
        }

        public ServiceOperationResult<SurveyResponseData[]> ListResponsesForRespondent(Guid sessionKey, object cacheContext)
        {
            return Channel.ListResponsesForRespondent(sessionKey, cacheContext);
        }

        public ServiceOperationResult<SurveyResponsePage> GetResponsePage(Guid sessionKey, int pageId, object cacheContext)
        {
            return Channel.GetResponsePage(sessionKey, pageId, cacheContext);
        }

        public ServiceOperationResult<ItemProxyObject[]> GetAllPageItems(Guid sessionKey, int pageId, object cacheContext)
        {
            return Channel.GetAllPageItems(sessionKey, pageId, cacheContext);
        }

        public ServiceOperationResult<ResponseSessionData> GetResponseSessionData(Guid sessionKey, object cacheContext, Guid? rGuid = null, bool forceSet = false)
        {
            return Channel.GetResponseSessionData(sessionKey, cacheContext, rGuid, forceSet);
        }

        public ServiceOperationResult<PagePostResult> MoveToNextPage(Guid sessionKey, object cacheContext)
        {
            return Channel.MoveToNextPage(sessionKey, cacheContext);
        }

        public ServiceOperationResult<PagePostResult> UpdateConditions(Guid sessionKey, object cacheContext)
        {
            return Channel.UpdateConditions(sessionKey, cacheContext);
        }

        public ServiceOperationResult<PagePostResult> SaveProgress(Guid sessionKey, object cacheContext)
        {
            return Channel.SaveProgress(sessionKey, cacheContext);
        }

        public ServiceOperationResult<PagePostResult> MoveToPreviousPage(Guid sessionKey, object cacheContext)
        {
            return Channel.MoveToPreviousPage(sessionKey, cacheContext);
        }

        public ServiceOperationResult<ResponseItemPostResult[]> PostResponseItems(Guid sessionKey, SurveyResponseItem[] item, object cacheContext)
        {
            return Channel.PostResponseItems(sessionKey, item, cacheContext);
        }

        public ServiceOperationResult<PageNumberInfo> GetPageNumber(Guid sessionKey, object cacheContext)
        {
            return Channel.GetPageNumber(sessionKey, cacheContext);
        }

        public ServiceOperationResult<ResponseSessionState> ResumeSavedResponse(Guid sessionKey, object cacheContext)
        {
            return Channel.ResumeSavedResponse(sessionKey, cacheContext);
        }

        public void SetPage(Guid sessionKey, int? pageId, object cacheContext)
        {
            throw new NotImplementedException();
        }

        public ServiceOperationResult<Guid?> GetResumeSessionKey(Guid sessionKey, object cacheContext)
        {
            return Channel.GetResumeSessionKey(sessionKey, cacheContext);
        }
    }
}
