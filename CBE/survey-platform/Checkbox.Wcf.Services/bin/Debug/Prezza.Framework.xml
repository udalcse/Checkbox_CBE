<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Prezza.Framework</name>
    </assembly>
    <members>
        <member name="T:Prezza.Framework.Caching.BackgroundScheduler">
            <summary>
            Scheduler for background cache scavenging.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.BackgroundScheduler.#ctor(Prezza.Framework.Caching.ExpirationTask,Prezza.Framework.Caching.ScavengerTask)">
            <summary>
            Constructor.
            </summary>
            <param name="expirer">Task for expiration.</param>
            <param name="scavenger">Cache scavenger task.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.BackgroundScheduler.Start">
            <summary>
            Start servicing the queue.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.BackgroundScheduler.Stop">
            <summary>
            Stop servicing the queue.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.BackgroundScheduler.ExpirationTimeoutExpired(System.Object)">
            <summary>
            
            </summary>
            <param name="notUsed"></param>
        </member>
        <member name="P:Prezza.Framework.Caching.BackgroundScheduler.IsActive">
            <summary>
            Indicate that the scheduler is active.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.BackgroundScheduler.StartScavenging">
            <summary>
            Enqueue a scavenging task.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.BackgroundScheduler.DoStartScavenging">
            <summary>
            Have the scavenger start scavenging.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.BackgroundScheduler.DoExpirationTimeoutExpired">
            <summary>
            Handle expiration timeouts
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.BackgroundScheduler.QueueReader">
            <summary>
            Read the queue and run tasks
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.BackingStoreFactory">
            <summary>
            Represents a factory for creating <see cref="T:Prezza.Framework.Caching.IBackingStore"/> object
            from the configuration data in a specified <see cref="T:Prezza.Framework.Configuration.ConfigurationBase"/>.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreFactory.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Prezza.Framework.Caching.BackingStoreFactory"/> class.</para>
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreFactory.#ctor(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Prezza.Framework.Caching.BackingStoreFactory"/> class.
            </summary>
            <param name="config">Current configuration context</param>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreFactory.CreateBackingStore(System.String)">
            <summary>
            Creates an <see cref="T:Prezza.Framework.Caching.IBackingStore"/> from the configuration
            data associated with the specified Cache Manager.
            </summary>
            <param name="cacheManagerName">The name of the cache manager that is creating the <see cref="T:Prezza.Framework.Caching.IBackingStore"/>.</param>
            <returns>An <see cref="T:Prezza.Framework.Caching.IBackingStore"/>.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreFactory.GetConfigurationType(System.String)">
             <summary>
             <para>Gets the <see cref="T:System.Type"/> of the <see cref="T:Prezza.Framework.Caching.IBackingStore"/> for the factory to create for a <see cref="T:Prezza.Framework.Caching.CacheManager"/>.</para>
             </summary>
            <param name="backingStoreName">Name of the backing store to use.</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreFactory.GetConfigurationObject(System.String)">
            <summary>
            Get the configuration information for the specified <see cref="T:Prezza.Framework.Caching.CacheManager"/>.
            </summary>
            <param name="providerName">Name of <see cref="T:Prezza.Framework.Caching.CacheManager"/> to get the configuration for.</param>
            <returns><see cref="T:Prezza.Framework.Caching.Configuration.CacheManagerData"/> object containing <see cref="T:Prezza.Framework.Caching.CacheManager"/> configuration.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreFactory.InitializeConfigurationProvider(System.String,Prezza.Framework.Configuration.IConfigurationProvider)">
            <summary>
            <para>Initialize the <see cref="T:Prezza.Framework.Configuration.IConfigurationProvider"/> by invoking the <see cref="M:Prezza.Framework.Configuration.IConfigurationProvider.Initialize(Prezza.Framework.Configuration.ConfigurationBase)"/> method.</para>
            </summary>
            <param name="cacheManagerName">
            <para>The name of the <see cref="T:Prezza.Framework.Caching.CacheManager"/>.</para>
            </param>
            <param name="provider">
            <para>The <see cref="T:Prezza.Framework.Configuration.IConfigurationProvider"/> to initialize.</para>
            </param>
        </member>
        <member name="T:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore">
            <summary>
            Base class for backing stores.
            </summary>
        </member>
        <member name="E:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.CacheItemRemoved">
            <summary>
            Event fired when an item is removed from the cache
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.CurrentCacheManager">
            <summary>
            <para>Gets the current name of the <see cref="T:Prezza.Framework.Caching.CacheManager"/> using this instance.</para>
            </summary>
            <value>
            <para>The current name of the <see cref="T:Prezza.Framework.Caching.CacheManager"/> using this instance.</para>
            </value>
        </member>
        <member name="P:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.Count">
            <summary>
            Number of objects stored in the backing store
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.Remove(System.String)">
            <summary>
            Removes an item with the given key from the backing store
            </summary>
            <param name="key">Key to remove. Must not be null.</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Remove
            </p>
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.DoRemove(System.String)">
            <summary>
            Removes an item with the given storage key from the backing store.
            </summary>
            <param name="storageKey">Unique storage key for the cache item to be removed</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Remove
            </p>
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.Contains(System.String)">
            <summary>
            Return a boolean indicating if the cache contains an item with the specified key.
            </summary>
            <param name="key">Key of cache item to check for existence of.  Must not be null.</param>
            <returns>True if the cache contains an item with the specified key, false otherwise.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.DoContains(System.String)">
            <summary>
            Return a boolean indicating if the cache contains an item with the specified key.
            </summary>
            <param name="storageKey">Key of cache item to check for existence of.  Must not be null.</param>
            <returns>True if the cache contains an item with the specified key, false otherwise.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.UpdateLastAccessedTime(System.String,System.DateTime)">
            <summary>
            Updates the last accessed time for a cache item.
            </summary>
            <param name="key">Key to update</param>
            <param name="timestamp">Time at which item updated</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during UpdateLastAccessedTime
            </p>
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.DoUpdateLastAccessedTime(System.String,System.DateTime)">
            <summary>
            Updates the last accessed time for a cache item referenced by this unique storage key
            </summary>
            <param name="storageKey">Unique storage key for cache item</param>
            <param name="timestamp">Time at which item updated</param>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.Flush">
            <summary>
            Flushes all CacheItems from backing store. This method must meet the Strong Exception Safety guarantee.
            </summary>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Flush
            </p>
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.Add(Prezza.Framework.Caching.CacheItem)">
            <summary>
            <p>
            This method is responsible for adding a CacheItem to the BackingStore. This operation must be successful 
            even if an item with the same key already exists. This method must also meet the exception safety guarantee
            and make sure that all traces of the new or old item are gone if the add fails in any way.
            </p> 
            </summary>
            <param name="newItem">CacheItem to be added</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Add
            </p>
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.GetData(System.String)">
            <summary>
            Get the data associated with the cache item with the specified key.
            </summary>
            <param name="key">Key of cache item.</param>
            <returns>Cache item data.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.DoGetData(System.String)">
            <summary>
            Get the data associated with the cache item with the specified key.
            </summary>
            <param name="storageKey">Key of cache item.</param>
            <returns>Cache item data.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.GetCacheItem(System.String)">
            <summary>
            Get the cache item associated with the specified key.
            </summary>
            <param name="key">Key of cache item.</param>
            <returns>Cache Item associated with the specified key.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.DoGetCacheItem(System.String)">
            <summary>
            Get the cache item associated with the specified key.
            </summary>
            <param name="storageKey">Key of cache item.</param>
            <returns>Cache Item associated with the specified key.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.Load">
            <summary>
            Loads all CacheItems from underlying database.
            </summary>
            <returns>Hashtable containing all existing CacheItems.</returns>
            <remarks>Exceptions thrown depend on the implementation of the underlying database.</remarks>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.RemoveOldItem(System.String)">
            <summary>
            Removed existing item stored in persistence store with same key as new item
            </summary>
            <param name="storageKey">Unique key for cache item</param>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.AddNewItem(System.String,Prezza.Framework.Caching.CacheItem)">
            <summary>
            Adds new item to persistence store
            </summary>
            <param name="storageKey">Unique key for cache item</param>
            <param name="newItem">Item to be added to cache. May not be null.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.LoadDataFromStore">
            <summary>
            Responsible for loading items from underlying persistence store. This method should do
            no filtering to remove expired items.
            </summary>
            <returns>Hash table of all items loaded from persistence store</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.TouchCacheItem(Prezza.Framework.Caching.CacheItem,System.Boolean)">
            <summary>
            Touch the cache item.  Allows child classes to access internal cache item methods
            </summary>
            <param name="item"></param>
            <param name="removedFromCache"></param>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.ReplaceCacheItem(Prezza.Framework.Caching.CacheItem,System.Object,Prezza.Framework.Caching.ICacheItemRefreshAction,Prezza.Framework.Caching.CacheItemPriority,Prezza.Framework.Caching.ICacheItemExpiration[])">
            <summary>
            Replace the value of a cache item
            </summary>
            <param name="cacheItem"></param>
            <param name="value"></param>
            <param name="refreshAction"></param>
            <param name="scavengingPriority"></param>
            <param name="expirations"></param>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.InvokeRefreshAction(Prezza.Framework.Caching.CacheItem,Prezza.Framework.Caching.CacheItemRemovedReason)">
            <summary>
            Invoke a refresh action when a cache item has been updated
            </summary>
            <param name="item"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.HashString(System.String)">
            <summary>
            Hash a plaintext string using the MD5 hash algorithm
            </summary>
            <param name="plaintext">A plaintext string to encrypt</param>
            <returns>An encrypted string</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.Dispose">
            <summary>
            Dispose method for all backing stores. This implementation is sufficient for any class that does not need any finalizer behavior
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.BaseBackingStore.Dispose(System.Boolean)">
            <summary>
            Disposing method as used in the Dispose pattern
            </summary>
            <param name="disposing">True if we are called during Dispose. False if we are called from finalizer</param>
        </member>
        <member name="T:Prezza.Framework.Caching.BackingStoreImplementations.NullBackingStore">
            <summary>
            This class is used when no backing store is needed to support the caching storage policy.
            Its job is to provide an implementation of a backing store that does nothing, enabling
            the cache to provide a strictly in-memory cache.
            </summary>
        </member>
        <member name="E:Prezza.Framework.Caching.BackingStoreImplementations.NullBackingStore.CacheItemRemoved">
            <summary>
            Support event required by IBackingStore interface to notify subscriber caches that
            an item has been removed from the backing store.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.BackingStoreImplementations.NullBackingStore.CurrentCacheManager">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.BackingStoreImplementations.NullBackingStore.Count">
            <summary>
            Always returns 0
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.NullBackingStore.#ctor">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.NullBackingStore.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Not Used
            </summary>
            <param name="config">Not used</param>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.NullBackingStore.Add(Prezza.Framework.Caching.CacheItem)">
            <summary>
            Not used
            </summary>
            <param name="newCacheItem">Not used</param>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.NullBackingStore.Remove(System.String)">
            <summary>
            Not used
            </summary>
            <param name="key">Not used</param>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.NullBackingStore.Contains(System.String)">
            <summary>
            Always returns false.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.NullBackingStore.GetData(System.String)">
            <summary>
            Always returns null.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.NullBackingStore.GetCacheItem(System.String)">
            <summary>
            Always returns null.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.NullBackingStore.UpdateLastAccessedTime(System.String,System.DateTime)">
            <summary>
            Not used
            </summary>
            <param name="key">Not used</param>
            <param name="timestamp">Not used</param>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.NullBackingStore.Flush">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.NullBackingStore.Load">
            <summary>
            Always returns an empty hash table.
            </summary>
            <returns>Empty hash table</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.BackingStoreImplementations.NullBackingStore.Dispose">
            <summary>
            Empty dispose implementation
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.Cache">
            <summary>
            Thread-safe caching class.  All cache items are locked before modification in the cache.  In the case where a backing
            store is present, the backing store is used as the data store instead of the in-memory cache.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.Cache._inMemoryCache">
            <summary>
            In-memory store of cached items.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.Cache._cacheScavenger">
            <summary>
            Cache scavenger.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.Cache._backingStore">
            <summary>
            Implementation of a cache storage
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.Cache._scavengingPolicy">
            <summary>
            Policy to define operation of the cache scavenger.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.Cache._addInProgressFlag">
            <summary>
            Dummy flag used when addition of an item to the cache is in progress.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.Cache._cacheName">
            <summary>
            Cache name used when syncing multiple caches to the same backing store.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.#ctor(Prezza.Framework.Caching.IBackingStore,Prezza.Framework.Caching.CacheCapacityScavengingPolicy,System.String,Prezza.Framework.Caching.Configuration.ICacheConfiguration)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.CacheKeyToBackingStoreKey(System.String)">
            <summary>
            Get the key to use for the backing store based on this cache's key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.BackingStoreKeyToCacheKey(System.String)">
            <summary>
            Based on the backing store key, determine the local cache key
            </summary>
            <param name="backingStoreKey"></param>
            <returns></returns>
        </member>
        <member name="P:Prezza.Framework.Caching.Cache.Count">
            <summary>
            Number of items stored in the cache.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.Contains(System.String)">
            <summary>
            Determine if an item with the specified key exists in the cache.
            </summary>
            <param name="key">Key of item to check.</param>
            <returns>True if the item with the specified key is contained in the cache, false otherwise.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.Initialize(Prezza.Framework.Caching.ICacheScavenger)">
            <summary>
            Initialize the cache with a scavenger.
            </summary>
            <param name="cacheScavenger">Cache scavenger.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.Add(System.String,System.Object)">
            <summary>
            Add the object with the specified key to the cache.
            </summary>
            <param name="key">Key of the object to add.</param>
            <param name="value">Object to add to the cache.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.Add(System.String,System.Object,Prezza.Framework.Caching.CacheItemPriority,Prezza.Framework.Caching.ICacheItemRefreshAction,Prezza.Framework.Caching.ICacheItemExpiration[])">
            <summary>
            Add the object with the specified key to the cache.
            </summary>
            <param name="key">Key of the object to add.</param>
            <param name="value">Object to add.</param>
            <param name="scavengingPriority">Scavenging priority associated with the item.</param>
            <param name="refreshAction">Refresh action to take upon item expiration.</param>
            <param name="expirations">Expirations</param>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.Remove(System.String)">
            <summary>
            Manually remove the item with the specified key from the cache.  
            </summary>
            <param name="key">Key of the item to remove from the cache.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.Remove(System.String,Prezza.Framework.Caching.CacheItemRemovedReason)">
            <summary>
            Remove the item with the specified key from the cache.  The removal reason is used to trigger certain
            events on item removal.
            </summary>
            <param name="key">Key of the item to remove from the cache.</param>
            <param name="removalReason">Reason for removing item from the cache.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.RemoveItemFromCache(System.String,Prezza.Framework.Caching.CacheItemRemovedReason)">
            <summary>
            Remove the item with the specified key from the cache.  The removal reason is used to trigger certain
            events on item removal.
            </summary>
            <param name="key">Key of the item to remove from the cache.</param>
            <param name="removalReason">Reason for removing item from the cache.</param>
            <remarks> This seemingly redundant method is here to be called through the ICacheOperations 
            interface. I put this in place to break any dependency from any other class onto 
            the Cache class</remarks>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.GetData(System.String)">
            <summary>
            Retrieve the item with the specified key from the cache.
            </summary>
            <param name="key">Key of the item to retrieve.</param>
            <returns>Object with specified key.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.Flush">
            <summary>
            Flush the cache and remove all items.
            </summary>
            <remarks>
            There may still be thread safety issues in this class with respect to expirations
            and scavenging, but I really doubt that either of those will be happening while
            a Flush is in progress. It seems that the most likely scenario for a flush
            to be called is at the very start of a program, or when absolutely nothing else
            is going on. Calling flush in the middle of an application would seem to be
            an "interesting" thing to do in normal circumstances.
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.ListKeys">
            <summary>
            Get a list of keys currently in the cache.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.GetCurrentCacheState">
            <summary>
            Get a copy of the current state of the cache.  This copy represents the
            state of the cache at the time the copy is created, and will not 
            reflect any future changes.
            </summary>
            <returns><see cref="T:System.Collections.Hashtable"/> containing a copy of the cache.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.ValidateKey(System.String)">
            <summary>
            Validate that the specified key is neither null nor empty.  Throws an
            <see cref="T:System.ArgumentNullException"/> if the key is null or an <see cref="T:System.ArgumentException"/>
             if the key is String.Empty;
            </summary>
            <param name="key">Key to validate.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.EnsureCacheInitialized">
            <summary>
            Ensure cache has been initialized w/a cache scavenger
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.IsObjectInCache(Prezza.Framework.Caching.CacheItem)">
            <summary>
            Internal method used by cache operations that lock the cache item
            before modifying it.
            </summary>
            <param name="cacheItemBeforeLock"><see cref="T:Prezza.Framework.Caching.CacheItem"/> to check.</param>
            <returns>True if the item is null or equal to the <see cref="F:Prezza.Framework.Caching.Cache._addInProgressFlag"/></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.Finalize">
            <summary>
            Destructor, calls the Dispose method.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Cache.Dispose">
            <summary>
            Implement the IDisposable interface and calls Dispose on any member objects.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.CacheCapacityScavengingPolicy">
            <summary>
            Cache scavenging policy based on cache capacity.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheCapacityScavengingPolicy.configurationData">
            <summary>
            Cache configuration information
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheCapacityScavengingPolicy.cacheManagerName">
            <summary>
            Name of the cache manager.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheCapacityScavengingPolicy.#ctor(System.String,Prezza.Framework.Caching.Configuration.ICacheConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="cacheManagerName">Name of the cache manager.</param>
            <param name="configurationData">Cach configuration object.</param>
        </member>
        <member name="P:Prezza.Framework.Caching.CacheCapacityScavengingPolicy.MaximumItemsAllowedBeforeScavenging">
            <summary>
            Get the number of items that have to be added to the cache before scavenging occurred.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheCapacityScavengingPolicy.IsScavengingNeeded(System.Int32)">
            <summary>
            Determine if cache scavenging is needed.
            </summary>
            <param name="currentCacheItemCount">Current number of items in the cache.</param>
            <returns>True if the scavenging is necessary.</returns>
        </member>
        <member name="T:Prezza.Framework.Caching.CacheFactory">
            <summary>
            Interface for components to create instances of <see cref="T:Prezza.Framework.Caching.CacheManager"/> objects.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheFactory._contextProvider">
            <summary>
            Data context provider
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheFactory.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheFactory.Initialize(Prezza.Framework.Data.IDataContextProvider)">
            <summary>
            
            </summary>
            <param name="contextProvider"></param>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheFactory.GetCacheManager">
            <summary>
            Create and return an instance of the default <see cref="T:Prezza.Framework.Caching.CacheManager"/>.
            </summary>
            <returns>Instance of the default <see cref="T:Prezza.Framework.Caching.CacheManager"/>.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheFactory.GetCacheManager(System.String)">
            <summary>
            Create and return an instance of the specified <see cref="T:Prezza.Framework.Caching.CacheManager"/>.
            </summary>
            <param name="cacheManagerName">Name of the <see cref="T:Prezza.Framework.Caching.CacheManager"/> to instantiate.</param>
            <returns>Instance of the specified <see cref="T:Prezza.Framework.Caching.CacheManager"/> object.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheFactory.ConfigurationManager_ConfigurationChanged(System.Object,Prezza.Framework.Configuration.ConfigurationChangedEventArgs)">
            <summary>
            Clear providers when cache configuration changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheFactory.GetCacheManagers">
            <summary>
            Get all of the cache managers. This should only be used for debugging
            </summary>
            <returns></returns>
        </member>
        <member name="P:Prezza.Framework.Caching.CacheFactory.CacheType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.CacheItem">
            <summary>
            Items stored by the framework <see cref="T:Prezza.Framework.Caching.Cache"/>.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheItem.key">
            <summary>
            Item key
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheItem.value">
            <summary>
            Item value
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheItem.#ctor(System.String,System.Object,Prezza.Framework.Caching.CacheItemPriority,Prezza.Framework.Caching.ICacheItemRefreshAction,Prezza.Framework.Caching.ICacheItemExpiration[])">
            <summary>
            Create a new cache item with the specified key and value.
            </summary>
            <param name="key">Key of the cache item.</param>
            <param name="value">Value to store in the cache item.</param>
            <param name="scavengingPriority">Scavenging priority for the cache item.</param>
            <param name="refreshAction">Item refresh action.</param>
            <param name="expirations">Expiration evaluators.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheItem.#ctor(System.DateTime,System.String,System.Object,Prezza.Framework.Caching.CacheItemPriority,Prezza.Framework.Caching.ICacheItemRefreshAction,Prezza.Framework.Caching.ICacheItemExpiration[])">
            <summary>
            Create a new cache item with the specified key and value.
            </summary>
            <param name="lastAccessedTime">Last accessed time for the item.</param>
            <param name="key">Key of the cache item.</param>
            <param name="value">Value to store in the cache item.</param>
            <param name="scavengingPriority">Scavenging priority for the cache item.</param>
            <param name="refreshAction">Item refresh action.</param>
            <param name="expirations">Expiration evaluators.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheItem.Replace(System.Object,Prezza.Framework.Caching.ICacheItemRefreshAction,Prezza.Framework.Caching.CacheItemPriority,Prezza.Framework.Caching.ICacheItemExpiration[])">
            <summary>
            Replace the value of the CacheItem.
            </summary>
            <param name="scavengingPriority">Cache item scavenging priority.</param>
            <param name="refreshAction">Refresh action.</param>
            <param name="expirations">Expiration evaluators.</param>
            <param name="value">New value of CacheItem</param>
        </member>
        <member name="P:Prezza.Framework.Caching.CacheItem.ScavengingPriority">
            <summary>
            Cache scavenging priority.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.CacheItem.Expirations">
            <summary>
            Expiration evaluators for the item.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.CacheItem.LastAccessedTime">
            <summary>
            Time the cache item was last read or modified.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.CacheItem.WillBeExpired">
            <summary>
            Indicates the cache item is elibible to be expired.  It should only be used internally by framework code.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.CacheItem.EligibleForScavenging">
            <summary>
            Indicates whether the cache item is eligible for scavenging.  It should only be used internally by framework code.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.CacheItem.Value">
            <summary>
            Value of the CacheItem.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.CacheItem.Key">
            <summary>
            Key of the CacheItem
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.CacheItem.RefreshAction">
            <summary>
            Get the cache item refresh action.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheItem.HasExpired">
            <summary>
            Evaluate whether the cache item has expired or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheItem.TouchedByUserAction(System.Boolean)">
            <summary>
            Indicate that this cache item has been affected by the action of a <see cref="T:Prezza.Framework.Caching.Cache"/> user.  For internal framework use only.
            </summary>
            <param name="objectRemovedFromCache">True if the item has been removed from the cache.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheItem.TouchedByUserAction(System.Boolean,System.DateTime)">
            <summary>
            Indicate that this cache item has been affected by the action of a <see cref="T:Prezza.Framework.Caching.Cache"/> user.  For internal framework use only.
            </summary>
            <param name="objectRemovedFromCache">True if the item has been removed from the cache.</param>
            <param name="timestamp">Timestamp when the item was "touched."</param>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheItem.MakeEligibleForScavenging">
            <summary>
            Set eligible for scavenging flag to true.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheItem.MakeNotEligibleForScavenging">
            <summary>
            Set the eligible for scavenging flag to false.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheItem.InitializeExpirations(Prezza.Framework.Caching.CacheItem)">
            <summary>
            Expiration flush
            </summary>
            <param name="cacheItem"></param>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheItem.Initialize(System.String,System.Object,Prezza.Framework.Caching.ICacheItemRefreshAction,Prezza.Framework.Caching.CacheItemPriority,Prezza.Framework.Caching.ICacheItemExpiration[])">
            <summary>
            Initialize the CacheItem.
            </summary>
            <param name="key">Item Key.</param>
            <param name="value">Item Value.</param>
            <param name="refreshAction">Cache item refresh action.</param>
            <param name="scavengingPriority">Cache item scavenging priority.</param>
            <param name="expirations">Expiration evaluators.</param>
        </member>
        <member name="T:Prezza.Framework.Caching.CacheItemPriority">
            <summary>
            Priority of items stored in the cache.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheItemPriority.None">
            <summary>
            Lowest priority, generally won't be used in practice.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheItemPriority.Low">
            <summary>
            Low priority for scavenging.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheItemPriority.Normal">
            <summary>
            Normal priority for scavenging.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheItemPriority.High">
            <summary>
            High priority for scavenging.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheItemPriority.NotRemovable">
            <summary>
            Will never be removed by scavenging.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.CacheItemRemovedEventArgs">
            <summary>
            Container for event arguments when an item is removed from a cache.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheItemRemovedEventArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:Prezza.Framework.Caching.CacheItemRemovedEventArgs.Key">
            <summary>
            Get the key of the item that has been removed
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.CacheItemRemovedReason">
            <summary>
            Enumeration of reasons a <see cref="T:Prezza.Framework.Caching.CacheItem"/> may be removed from the <see cref="T:Prezza.Framework.Caching.Cache"/>.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheItemRemovedReason.Expired">
            <summary>
            The item has expired (NOT CURRENTLY USED).
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheItemRemovedReason.Removed">
            <summary>
            The item was manually removed from the cache.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheItemRemovedReason.Scavenged">
            <summary>
            The item was removed by the scavenger because it had a lower priority that any other item in the cache (NOT CURRENTLY USED).
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheItemRemovedReason.RemovedFromBackingStore">
            <summary>
            The item has been removed from teh backing store, and thus will be removed from the cache
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheItemRemovedReason.Unknown">
            <summary>
            Reserved. Do not use.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.CacheManager">
            <summary>
            Provides the public interface to caching operations.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheManager._realCache">
            <summary>
            Real cache object containing <see cref="T:Prezza.Framework.Caching.CacheItem"/>s.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheManager._scheduler">
            <summary>
            Scheduler for background tasks, such as cache scavenging.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheManager._pollTimer">
            <summary>
            Timer set to trigger cache expiration polling.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheManager._contextProvider">
            <summary>
            Context provider to use for storing cache data.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.CacheManager.ExpirationTime">
            <summary>
            Expiration period in seconds 
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.CacheManager.ExpirationMode">
            <summary>
            Expiration Mode
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManager.#ctor(Prezza.Framework.Caching.ICacheOperations,Prezza.Framework.Caching.BackgroundScheduler,Prezza.Framework.Caching.ExpirationPollTimer,Prezza.Framework.Data.IDataContextProvider,System.Nullable{System.Int32},System.String)">
            <summary>
             Contructor. Called by the <see cref="T:Prezza.Framework.Caching.CacheManagerFactory"/> when it instantiates a CacheManager.
            </summary>
            <param name="realCache"><see cref="T:Prezza.Framework.Caching.Cache"/> object to store the <see cref="T:Prezza.Framework.Caching.CacheItem"/>s.</param>
            <param name="scheduler"><see cref="T:Prezza.Framework.Caching.BackgroundScheduler"/> to schedule tasks such as the scavenging task.</param>
            <param name="pollTimer"><see cref="T:Prezza.Framework.Caching.ExpirationPollTimer"/> to trigger checks of cache item expiration.</param>
            <param name="contextProvider">Context provider for data access.</param>
        </member>
        <member name="P:Prezza.Framework.Caching.CacheManager.Count">
            <summary>
            Number of items in the cache.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManager.Contains(System.String)">
            <summary>
            Determine if the cache contains an item with the specified key.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True if the cache contains the item, false otherwise.</returns>
        </member>
        <member name="P:Prezza.Framework.Caching.CacheManager.Item(System.String)">
            <summary>
            Indexer for getting cache items.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManager.Add(System.String,System.Object)">
            <summary>
            Add a value with the specified key to the cache.  If an item with the specified key exists in the cache, it will
            be replaced.  If an error occurs during the add, the item will NOT be in the cache.
            </summary>
            <param name="key">Item key.</param>
            <param name="value">Item value</param>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManager.Add(System.String,System.Object,Prezza.Framework.Caching.CacheItemPriority,Prezza.Framework.Caching.ICacheItemRefreshAction,Prezza.Framework.Caching.ICacheItemExpiration[])">
            <summary>
            Add a value with the specified key to the cache.  If an item with the specified key exists in the cache, it will
            be replaced.  If an error occurs during the add, the item will NOT be in the cache.
            </summary>
            <param name="key">Item key.</param>
            <param name="value">Item value</param>
            <param name="scavengingPriority">Specifies the new item's scavenging priority. 
            See <see cref="T:Prezza.Framework.Caching.CacheItemPriority" /> for more information.</param>
            <param name="refreshAction">Object provided to allow the cache to refresh a cache item that has been expired. May be null.</param>
            <param name="expirations">Param array specifying the expiration policies to be applied to this item. May be null or omitted.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManager.Remove(System.String)">
            <summary>
            Remove the item with the specified key from the cache.
            </summary>
            <param name="key">Item key.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManager.GetData(System.String)">
            <summary>
            Get the value of the specified item from the cache.
            </summary>
            <param name="key">Key of item to retrieve value of.</param>
            <returns>Value of item associated with the specified key.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManager.Flush">
            <summary>
            Empty the cache.  Should only be called on startup or when no processing is occurring, including
            cache expirations (not yet supported) or scavenging (also not yet supported)
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManager.ListKeys">
            <summary>
            List keys, optionally with app context information stripped.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManager.ListKeys(System.Boolean)">
            <summary>
            Get a list of keys in the cache.
            </summary>
            <param name="stripContext">Specify whether to strip application context information from the key.</param>
            <returns>String array representation of cache keys.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManager.GetContextSpecificKey(System.String)">
            <summary>
            Get a key specific to the current application context, if any
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManager.StripContextSpecificKey(System.String)">
            <summary>
            Strip context information from the given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManager.KeyIsValidForContext(System.String)">
            <summary>
            Return a boolean indicating the key is valid for the current application context.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManager.Dispose">
            <summary>
            Implementation of IDisposable interface.  Calls the internal <see cref="T:Prezza.Framework.Caching.Cache"/>'s Dispose method.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.CacheManagerFactory">
            <summary>
            Factory to create <see cref="T:Prezza.Framework.Caching.CacheManager"/> objects.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.CacheManagerFactory._cacheManagers">
            <summary>
            Internal collection of created <see cref="T:Prezza.Framework.Caching.CacheManager"/> objects.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManagerFactory.#ctor(Prezza.Framework.Data.IDataContextProvider,Prezza.Framework.Caching.Configuration.ICacheConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="contextProvider">Application context provider.</param>
            <param name="config">Container of cache configuration settings.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManagerFactory.GetCacheManager">
            <summary>
            Get an instance of the default <see cref="T:Prezza.Framework.Caching.CacheManager"/>.
            </summary>
            <returns>Instance of the default <see cref="T:Prezza.Framework.Caching.CacheManager"/>.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManagerFactory.GetCacheManager(System.String)">
            <summary>
            Get an instance of the specified <see cref="T:Prezza.Framework.Caching.CacheManager"/>.
            </summary>
            <param name="cacheManagerName">Name of <see cref="T:Prezza.Framework.Caching.CacheManager"/> to instantiate and return.</param>
            <returns>Instance of specified <see cref="T:Prezza.Framework.Caching.CacheManager"/>.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManagerFactory.CreateObject(System.String,System.Type)">
            <summary>
            Create an object of the specified type and name.
            </summary>
            <param name="cacheManagerName">Name of <see cref="T:Prezza.Framework.Caching.CacheManager"/> object to create.</param>
            <param name="type"><see cref="T:System.Type"/> of object to create.</param> 
            <returns>Instance of a <see cref="T:Prezza.Framework.Caching.CacheManager"/> object.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManagerFactory.GetConfigurationObject(System.String)">
            <summary>
            Get the configuration information for the specified <see cref="T:Prezza.Framework.Caching.CacheManager"/>.
            </summary>
            <param name="providerName">Name of <see cref="T:Prezza.Framework.Caching.CacheManager"/> to get the configuration for.</param>
            <returns><see cref="T:Prezza.Framework.Caching.Configuration.CacheManagerData"/> object containing <see cref="T:Prezza.Framework.Caching.CacheManager"/> configuration.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManagerFactory.GetConfigurationType(System.String)">
            <summary>
            Get the <see cref="T:System.Type"/> of the specified <see cref="T:Prezza.Framework.Caching.CacheManager"/>.
            </summary>
            <param name="configurationName">Name of <see cref="T:Prezza.Framework.Caching.CacheManager"/> to get the <see cref="T:System.Type"/> of.</param>
            <returns><see cref="T:System.Type"/> of the specified <see cref="T:Prezza.Framework.Caching.CacheManager"/>.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManagerFactory.CreateCacheManager(System.String)">
            <summary>
            Create an instance of the specified <see cref="T:Prezza.Framework.Caching.CacheManager"/>.
            </summary>
            <param name="cacheManagerName">Name of the <see cref="T:Prezza.Framework.Caching.CacheManager"/> to create.</param>
            <returns>Instance of the specified <see cref="T:Prezza.Framework.Caching.CacheManager"/>.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.CacheManagerFactory.GetDefaultInstanceName">
            <summary>
            Get the name of the default <see cref="T:Prezza.Framework.Caching.CacheManager"/>.
            </summary>
            <returns>Name of the default <see cref="T:Prezza.Framework.Caching.CacheManager"/>.</returns>
        </member>
        <member name="T:Prezza.Framework.Caching.Configuration.BackingStoreProviderData">
            <summary>
            Base configuration data  class for cache backing store providers.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Configuration.BackingStoreProviderData.#ctor">
            <summary>
            Constructor.  Initializes the hashtable that caches the configurations.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.BackingStoreProviderData.DefaultCacheStorageData">
            <summary>
            Get the configuration for the default backing store.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Configuration.BackingStoreProviderData.GetCacheStorageData(System.String)">
            <summary>
            Get the configuration for the specified backing store.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.Configuration.BackingStoreProviderData.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load the backing store configurations from XML
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Prezza.Framework.Caching.Configuration.CacheConfiguration">
            <summary>
            Container for caching configuration information.  Used by the <see cref="T:Prezza.Framework.Caching.CacheManagerFactory"/>
            when instantiating <see cref="T:Prezza.Framework.Caching.CacheManager"/> objects.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.CacheConfiguration.CacheTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.Configuration.CacheConfiguration.defaultCacheManager">
            <summary>
            Name of the default <see cref="T:Prezza.Framework.Caching.CacheManager"/>.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.Configuration.CacheConfiguration.cacheManagers">
            <summary>
            Collection of configuration information for various <see cref="T:Prezza.Framework.Caching.CacheManager"/>.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.Configuration.CacheConfiguration.backingStoreData">
            <summary>
            The configuration data for all backing stores
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Configuration.CacheConfiguration.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Configuration.CacheConfiguration.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the cache configuration.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.Configuration.CacheConfiguration.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load caching configuration information from Xml.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> containing caching configuration.</param>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.CacheConfiguration.DefaultCacheManager">
            <summary>
            Name of the default <see cref="T:Prezza.Framework.Caching.CacheManager"/> configuration.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.CacheConfiguration.BackingStoreData">
            <summary>
            Get the data for the backing store used by the cache
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Configuration.CacheConfiguration.GetCacheManagerConfig(System.String)">
            <summary>
            Get the <see cref="T:Prezza.Framework.Caching.CacheManager"/> configuration with the specified name.
            </summary>
            <param name="cacheManagerName">Name of configuration object.</param>
            <returns><see cref="T:Prezza.Framework.Caching.Configuration.CacheManagerData"/> object containing configuration information for a <see cref="T:Prezza.Framework.Caching.CacheManager"/>.</returns>
        </member>
        <member name="T:Prezza.Framework.Caching.Configuration.CacheManagerData">
            <summary>
            Container of configuration information for <see cref="T:Prezza.Framework.Caching.CacheManager"/> objects.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Configuration.CacheManagerData.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the cache manager.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.Configuration.CacheManagerData.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Populate configuration object based on Xml data.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> containing cache manager configuration information.</param>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.CacheManagerData.TypeName">
            <summary>
            Type name of the <see cref="T:Prezza.Framework.Caching.CacheManager"/>.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.CacheManagerData.BackingStoreName">
            <summary>
            Name of the backing store
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.CacheManagerData.ExpirationMode">
            <summary>
            Mode of expiration (Sliding or Absolute)
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.CacheManagerData.ExpirationPollFrequencyInSeconds">
            <summary>
            Get/Set the frequency with which to poll the cache for expired items.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.CacheManagerData.ExpirationTimeInSeconds">
            <summary>
            Get/Set the expiration time in seconds for cached items.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.CacheManagerData.MaximumElementsInCacheBeforeScavenging">
            <summary>
            Get/Set the number of elements that can be added to the cache before the scavenging task runs
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.CacheManagerData.NumberToRemoveWhenScavenging">
            <summary>
            Number of cache elements to remove when the scavenging task runs.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.Configuration.CacheStorageData">
            <summary>
            Data object for cache storage
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Configuration.CacheStorageData.#ctor(System.String,System.String)">
            <summary>
            Parameterized constructor
            </summary>
            <param name="providerName"></param>
            <param name="typeName"></param>
        </member>
        <member name="M:Prezza.Framework.Caching.Configuration.CacheStorageData.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load the data from xml
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Prezza.Framework.Caching.Configuration.MemcachedCacheConfiguration">
            <summary>
            Container for caching configuration information.  Used by the <see cref="T:Prezza.Framework.Caching.CacheManagerFactory"/>
            when instantiating <see cref="T:Prezza.Framework.Caching.CacheManager"/> objects.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedCacheConfiguration.CacheTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.Configuration.MemcachedCacheConfiguration.defaultCacheManager">
            <summary>
            Name of the default <see cref="T:Prezza.Framework.Caching.CacheManager"/>.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.Configuration.MemcachedCacheConfiguration.cacheManagers">
            <summary>
            Collection of configuration information for various <see cref="T:Prezza.Framework.Caching.CacheManager"/>.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.Configuration.MemcachedCacheConfiguration.backingStoreData">
            <summary>
            The configuration data for all backing stores
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Configuration.MemcachedCacheConfiguration.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Configuration.MemcachedCacheConfiguration.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the cache configuration.</param>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedCacheConfiguration.Pools">
            <summary>
            All available pools
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedCacheConfiguration.Servers">
            <summary>
            
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Configuration.MemcachedCacheConfiguration.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load caching configuration information from Xml.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> containing caching configuration.</param>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedCacheConfiguration.DefaultCacheManager">
            <summary>
            Name of the default <see cref="T:Prezza.Framework.Caching.CacheManager"/> configuration.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedCacheConfiguration.BackingStoreData">
            <summary>
            Get the data for the backing store used by the cache
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Configuration.MemcachedCacheConfiguration.GetCacheManagerConfig(System.String)">
            <summary>
            Get the <see cref="T:Prezza.Framework.Caching.CacheManager"/> configuration with the specified name.
            </summary>
            <param name="cacheManagerName">Name of configuration object.</param>
            <returns><see cref="T:Prezza.Framework.Caching.Configuration.CacheManagerData"/> object containing configuration information for a <see cref="T:Prezza.Framework.Caching.CacheManager"/>.</returns>
        </member>
        <member name="T:Prezza.Framework.Caching.Configuration.ICacheConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.ICacheConfiguration.BackingStoreData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Configuration.ICacheConfiguration.GetCacheManagerConfig(System.String)">
            <summary>
            
            </summary>
            <param name="cacheManagerName"></param>
            <returns></returns>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.ICacheConfiguration.DefaultCacheManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.ICacheConfiguration.CacheTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.Configuration.MemcachedPoolConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedPoolConfiguration.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedPoolConfiguration.IsDefault">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedPoolConfiguration.InitialConnections">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedPoolConfiguration.MinSpareConnections">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedPoolConfiguration.MaxSpareConnections">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedPoolConfiguration.MaxIdleTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedPoolConfiguration.MaxBusyTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedPoolConfiguration.MainThreadSleep">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedPoolConfiguration.SocketTimeOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedPoolConfiguration.SocketConnectTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedPoolConfiguration.Failover">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedPoolConfiguration.NagleAlg">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedPoolConfiguration.ServerNames">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedPoolConfiguration.ServerWeights">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedPoolConfiguration.CacheManagers">
            <summary>
            
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.Configuration.MemcachedServerConfiguration">
            <summary>
            Memcached Server Data 
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedServerConfiguration.Endpoint">
            <summary>
            Endpoint
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Configuration.MemcachedServerConfiguration.Name">
            <summary>
            Server name
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.MemcachedCache">
            <summary>
            Memcached based cache
            
            Supports only absolute time expiration.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.MemcachedCache._cacheScavenger">
            <summary>
            Cache scavenger.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.MemcachedCache._backingStore">
            <summary>
            Implementation of a cache storage
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.MemcachedCache._serverEndpoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.MemcachedCache._scavengingPolicy">
            <summary>
            Policy to define operation of the cache scavenger.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.MemcachedCache._addInProgressFlag">
            <summary>
            Dummy flag used when addition of an item to the cache is in progress.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.MemcachedCache._cacheName">
            <summary>
            Cache name used when syncing multiple caches to the same backing store.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.MemcachedCache._config">
            <summary>
            Config data
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.#ctor(Prezza.Framework.Caching.IBackingStore,Prezza.Framework.Caching.CacheCapacityScavengingPolicy,System.String,Prezza.Framework.Caching.Configuration.ICacheConfiguration)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.CacheKeyToBackingStoreKey(System.String)">
            <summary>
            Get the key to use for the backing store based on this cache's key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.BackingStoreKeyToCacheKey(System.String)">
            <summary>
            Based on the backing store key, determine the local cache key
            </summary>
            <param name="backingStoreKey"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.getPoolFromConfig">
            <summary>
            Gets a pool from the configuration
            </summary>
            <returns></returns>
        </member>
        <member name="P:Prezza.Framework.Caching.MemcachedCache.Client">
            <summary>
            Memchached client class
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.MemcachedCache.Count">
            <summary>
            Number of items stored in the cache.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.Contains(System.String)">
            <summary>
            Determine if an item with the specified key exists in the cache.
            </summary>
            <param name="key">Key of item to check.</param>
            <returns>True if the item with the specified key is contained in the cache, false otherwise.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.Initialize(Prezza.Framework.Caching.ICacheScavenger)">
            <summary>
            Initialize the cache with a scavenger.
            </summary>
            <param name="cacheScavenger">Cache scavenger.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.Add(System.String,System.Object)">
            <summary>
            Add the object with the specified key to the cache.
            </summary>
            <param name="key">Key of the object to add.</param>
            <param name="value">Object to add to the cache.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.Add(System.String,System.Object,Prezza.Framework.Caching.CacheItemPriority,Prezza.Framework.Caching.ICacheItemRefreshAction,Prezza.Framework.Caching.ICacheItemExpiration[])">
            <summary>
            Add the object with the specified key to the cache.
            </summary>
            <param name="key">Key of the object to add.</param>
            <param name="value">Object to add.</param>
            <param name="scavengingPriority">Scavenging priority associated with the item.</param>
            <param name="refreshAction">Refresh action to take upon item expiration.</param>
            <param name="expirations">Expirations</param>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.Remove(System.String)">
            <summary>
            Manually remove the item with the specified key from the cache.  
            </summary>
            <param name="key">Key of the item to remove from the cache.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.Remove(System.String,Prezza.Framework.Caching.CacheItemRemovedReason)">
            <summary>
            Remove the item with the specified key from the cache.  The removal reason is used to trigger certain
            events on item removal.
            </summary>
            <param name="key">Key of the item to remove from the cache.</param>
            <param name="removalReason">Reason for removing item from the cache.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.RemoveItemFromCache(System.String,Prezza.Framework.Caching.CacheItemRemovedReason)">
            <summary>
            Remove the item with the specified key from the cache.  The removal reason is used to trigger certain
            events on item removal.
            </summary>
            <param name="key">Key of the item to remove from the cache.</param>
            <param name="removalReason">Reason for removing item from the cache.</param>
            <remarks> This seemingly redundant method is here to be called through the ICacheOperations 
            interface. I put this in place to break any dependency from any other class onto 
            the Cache class</remarks>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.GetData(System.String)">
            <summary>
            Retrieve the item with the specified key from the cache.
            </summary>
            <param name="key">Key of the item to retrieve.</param>
            <returns>Object with specified key.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.Flush">
            <summary>
            Flush the cache and remove all items.
            </summary>
            <remarks>
            There may still be thread safety issues in this class with respect to expirations
            and scavenging, but I really doubt that either of those will be happening while
            a Flush is in progress. It seems that the most likely scenario for a flush
            to be called is at the very start of a program, or when absolutely nothing else
            is going on. Calling flush in the middle of an application would seem to be
            an "interesting" thing to do in normal circumstances.
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.ListKeys">
            <summary>
            Get a list of keys currently in the cache.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.GetCurrentCacheState">
            <summary>
            Get a copy of the current state of the cache.  This copy represents the
            state of the cache at the time the copy is created, and will not 
            reflect any future changes.
            </summary>
            <returns><see cref="T:System.Collections.Hashtable"/> containing a copy of the cache.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.ValidateKey(System.String)">
            <summary>
            Validate that the specified key is neither null nor empty.  Throws an
            <see cref="T:System.ArgumentNullException"/> if the key is null or an <see cref="T:System.ArgumentException"/>
             if the key is String.Empty;
            </summary>
            <param name="key">Key to validate.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.EnsureCacheInitialized">
            <summary>
            Ensure cache has been initialized w/a cache scavenger
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.IsObjectInCache(Prezza.Framework.Caching.CacheItem)">
            <summary>
            Internal method used by cache operations that lock the cache item
            before modifying it.
            </summary>
            <param name="cacheItemBeforeLock"><see cref="T:Prezza.Framework.Caching.CacheItem"/> to check.</param>
            <returns>True if the item is null or equal to the <see cref="F:Prezza.Framework.Caching.MemcachedCache._addInProgressFlag"/></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.Finalize">
            <summary>
            Destructor, calls the Dispose method.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.MemcachedCache.Dispose">
            <summary>
            Implement the IDisposable interface and calls Dispose on any member objects.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.ExpirationPollTimer">
            <summary>
            Timer for determining when to poll the cache for expired items.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.ExpirationPollTimer.pollTimer">
            <summary>
            System timer object.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.ExpirationPollTimer.StartPolling(System.Threading.TimerCallback,System.Int32)">
            <summary>
            Start the polling timer.
            </summary>
            <param name="callbackMethod">Method to call on time out.</param>
            <param name="policyCycleInMilliseconds">Period of the timer.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.ExpirationPollTimer.StopPolling">
            <summary>
            Stop the polling timer.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.Expirations.AbsoluteTime">
            <summary>
            This class tests if a data item was expired using a absolute time 
            schema.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Expirations.AbsoluteTime.AbsoluteExpirationTime">
            <summary>
            Absolute time of expiration
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.AbsoluteTime.#ctor">
            <summary>
            Create a new instance of the class.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.AbsoluteTime.#ctor(System.DateTime)">
            <summary>
            Create an instance of the class with a time value as input and 
            convert it to UTC.
            </summary>
            <param name="absoluteTime">
            The time to be checked for expiration
            </param>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.AbsoluteTime.#ctor(System.TimeSpan)">
            <summary>
            Creates an instance based on a time interval starting from now.
            </summary>
            <param name="timeFromNow">Time interval</param>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.AbsoluteTime.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method performs the deserialziaton of members of the current 
            class.
            </summary>
            <param name="info">
            A SerializationInfo object which is deserialized by the formatter
            and then passed to current constructor
            </param>
            <param name="context">
            A StreamingContext that describes the source of the serialized 
            stream from where the Serialization object is retrieved
            </param>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.AbsoluteTime.HasExpired">
            <summary>
            Specifies if item has expired or not.
            </summary>
            <remarks>
            bool isExpired = ICacheItemExpiration.HasExpired();
            </remarks>
            <returns>
            "True", if the data item has expired or "false", if the data item 
            has not expired
            </returns>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.AbsoluteTime.Notify">
            <summary>
            Called to notify this object that the CacheItem owning this expiration was just touched by a user action
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.AbsoluteTime.Initialize(Prezza.Framework.Caching.CacheItem)">
            <summary>
            Called to give this object an opportunity to initialize itself from data inside a CacheItem
            </summary>
            <param name="owningCacheItem">CacheItem provided to read initialization information from. Will never be null.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.AbsoluteTime.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method performs the serialziaton of members of the current 
            class.
            </summary>
            <param name="info">
            A SerializationInfo object which is deserialized by the formatter 
            and then passed to current constructor
            </param>
            <param name="context">
            A StreamingContext that describes the source of the serialized 
            stream from where the Serialization object is retrieved
            </param>
        </member>
        <member name="T:Prezza.Framework.Caching.Expirations.ExtendedFormat">
             <devdoc>
             Represents the extended format for the cache.
             </devdoc>    
             <remarks>
             Extended format syntax : <br/><br/>
             
             Minute       - 0-59 <br/>
             Hour         - 0-23 <br/>
             Day of month - 1-31 <br/>
             Month        - 1-12 <br/>
             Day of week  - 0-6 (Sunday is 0) <br/>
             Wildcards    - * means run every <br/>
             Examples: <br/>
             * * * * *    - expires every minute<br/>
             5 * * * *    - expire 5th minute of every hour <br/>
             * 21 * * *   - expire every minute of the 21st hour of every day <br/>
             31 15 * * *  - expire 3:31 PM every day <br/>
             7 4 * * 6    - expire Saturday 4:07 AM <br/>
             15 21 4 7 *  - expire 9:15 PM on 4 July <br/>
            	Therefore 6 6 6 6 1 means:
            	•	have we crossed/entered the 6th minute AND
            	•	have we crossed/entered the 6th hour AND 
            	•	have we crossed/entered the 6th day AND
            	•	have we crossed/entered the 6th month AND
            	•	have we crossed/entered A MONDAY?
            
            	Therefore these cases should exhibit these behaviors:
            
            	getTime = DateTime.Parse( "02/20/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/07/2003 07:07:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 1", getTime, nowTime );
            	TRUE, ALL CROSSED/ENTERED
            			
            	getTime = DateTime.Parse( "02/20/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/07/2003 07:07:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 5", getTime, nowTime );
            	TRUE
            			
            	getTime = DateTime.Parse( "02/20/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 06:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 *", getTime, nowTime );
            	TRUE
            	
            			
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 06:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 5", getTime, nowTime );
            	TRUE
            						
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2005 05:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 1", getTime, nowTime );
            	TRUE
            						
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 05:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 1", getTime, nowTime );
            	FALSE:  we did not cross 6th hour, nor did we cross Monday
            						
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 06:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 5", getTime, nowTime );
            	TRUE, we cross/enter Friday
            
            
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 06:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 1", getTime, nowTime );
            	FALSE:  we don’t cross Monday but all other conditions satisfied
             </remarks>
        </member>
        <member name="T:Prezza.Framework.Caching.Expirations.ExtendedFormatTime">
            <summary>
            This provider tests if a item was expired using a extended format.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.ExtendedFormatTime.#ctor">
            <summary>
            Creates an instance of the class.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.ExtendedFormatTime.#ctor(System.String)">
            <summary>
            Convert the input format to the extented time format.
            </summary>
            <param name="timeFormat">
            This contains the expiration information
            </param>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.ExtendedFormatTime.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method performs the deserialziaton of members of the 
            current class.
            </summary>
            <param name="info">
            A SerializationInfo object which is deserialized by the 
            formatter and then passed to current constructor
            </param>
            <param name="context">
            A StreamingContext that describes the source of the 
            serialized stream from where the Serialization object 
            is retrieved
            </param>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.ExtendedFormatTime.HasExpired">
            <summary>
            Specifies if item has expired or not.
            </summary>
            <returns>
            Returns true if the data is expired otherwise false
            </returns>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.ExtendedFormatTime.Notify">
            <summary>
            Notifies that the item was recently used.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.ExtendedFormatTime.Initialize(Prezza.Framework.Caching.CacheItem)">
            <summary>
            Not used
            </summary>
            <param name="owningCacheItem">Not used</param>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.ExtendedFormatTime.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method performs the serialization of members of the 
            current class.
            </summary>
            <param name="info">
            A SerializationInfo object which is deserialized by the 
            formatter and then passed to current constructor.
            </param>
            <param name="context">
            A StreamingContext that describes the source of the 
            serialized stream from where the Serialization object 
            is retrieved.
            </param>
        </member>
        <member name="T:Prezza.Framework.Caching.Expirations.FileDependency">
            <summary>
            This class tracks a file cache dependency.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.FileDependency.#ctor(System.String)">
            <summary>
            Constructor with one argument.
            </summary>
            <param name="fullFileName">
            Indicates the name of the file
            </param>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.FileDependency.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method performs the deserialization of members of the 
            current class.
            </summary>
            <param name="info">
            A SerializationInfo object which is deserialized by the 
            formatter and then passed to current constructor
            </param>
            <param name="context">
            A StreamingContext that describes the source of the 
            serialized stream from where the Serialization object 
            is retrieved
            </param>
        </member>
        <member name="P:Prezza.Framework.Caching.Expirations.FileDependency.LastModifiedTime">
            <summary>
            Returns time watched file was last modified.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.FileDependency.HasExpired">
            <summary>
            Specifies if the item has expired or not.
            </summary>
            <returns>Returns true if the item has expired, otherwise false.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.FileDependency.Notify">
            <summary>
            Notifies that the item was recently used.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.FileDependency.Initialize(Prezza.Framework.Caching.CacheItem)">
            <summary>
            Not used
            </summary>
            <param name="owningCacheItem">Not used</param>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.FileDependency.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method performs the serialization of members of the 
            current class.
            </summary>
            <param name="info">
            A SerializationInfo object which is deserialized by the 
            formatter and then passed to current constructor
            </param>
            <param name="context">
            A StreamingContext that describes the source of the 
            serialized stream from where the Serialization object 
            is retrieved
            </param>
        </member>
        <member name="T:Prezza.Framework.Caching.Expirations.NeverExpired">
            <summary>
            This class reflects an expiration policy of never being expired.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.NeverExpired.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.NeverExpired.HasExpired">
            <summary>
            Always returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.NeverExpired.Notify">
            <summary>
            Do nothing, since there is no expiration.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.NeverExpired.Initialize(Prezza.Framework.Caching.CacheItem)">
            <summary>
            Nothign to to.
            </summary>
            <param name="owningCacheItem"></param>
        </member>
        <member name="T:Prezza.Framework.Caching.Expirations.SlidingTime">
            <summary>
            This provider tests if a item was expired using a time slice schema.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.SlidingTime.#ctor(System.TimeSpan)">
            <summary>
            Create an instance of this class with the timespan for expiration.
            </summary>
            <param name="slidingExpiration">
            Expiration time span
            </param>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.SlidingTime.#ctor(System.TimeSpan,System.DateTime)">
            <devdoc>
            This constructor is for testing purposes only. Never, ever call it in a real program
            </devdoc>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.SlidingTime.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method performs the deserialziaton of members of the current 
            class.
            </summary>
            <param name="info">
            A SerializationInfo object which is deserialized by the formatter 
            and then passed to current constructor
            </param>
            <param name="context">
            A StreamingContext that describes the source of the serialized 
            stream from where the Serialization object is retrieved
            </param>
        </member>
        <member name="P:Prezza.Framework.Caching.Expirations.SlidingTime.ItemSlidingExpiration">
            <summary>
            Returns sliding time window that must be exceeded for expiration to occur
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.Expirations.SlidingTime.TimeLastUsed">
            <summary>
            Returns time that this object was last touched
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.SlidingTime.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method performs the serialziaton of members of the current 
            class.
            </summary>
            <param name="info">
            A SerializationInfo object which is deserialized by the formatter 
            and then passed to current constructor
            </param>
            <param name="context">
            A StreamingContext that describes the source of the serialized 
            stream from where the Serialization object is retrieved
            </param>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.SlidingTime.HasExpired">
            <summary>
            Specifies if item has expired or not.
            </summary>
            <returns>Returns true if the item has expired otherwise false.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.SlidingTime.Notify">
            <summary>
            Notifies that the item was recently used.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.SlidingTime.Initialize(Prezza.Framework.Caching.CacheItem)">
            <summary>
            Used to set the initial value of TimeLastUsed. This method is invoked during the reinstantiation of
            an instance from a persistent store. 
            </summary>
            <param name="owningCacheItem">CacheItem to which this expiration belongs.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.Expirations.SlidingTime.CheckSlidingExpiration(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Check whether the sliding time has expired.
            </summary>
            <param name="nowDateTime">Current time </param>
            <param name="lastUsed">The last time when the item has been used</param>
            <param name="slidingExpiration">The span of sliding expiration</param>
            <returns>True if the item was expired, otherwise false</returns>
        </member>
        <member name="T:Prezza.Framework.Caching.ExpirationTimeoutExpiredMsg">
            <summary>
            Simple queue message to handling expiration timeouts.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.ExpirationTimeoutExpiredMsg.#ctor(Prezza.Framework.Caching.BackgroundScheduler)">
            <summary>
            Constructor.
            </summary>
            <param name="callback">Callback object</param>
        </member>
        <member name="M:Prezza.Framework.Caching.ExpirationTimeoutExpiredMsg.Run">
            <summary>
            Run expired process.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.ExpirationTask">
            <summary>
            Runs the expiration task to mark cacheItems as expired and remove those items from the cache.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.ExpirationTask.cacheOperations">
            <summary>
            Cache operations object used as a proxy to the cache.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.ExpirationTask.#ctor(Prezza.Framework.Caching.ICacheOperations)">
            <summary>
            Constructor.
            </summary>
            <param name="cacheOperations">Proxy operations object to the cache.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.ExpirationTask.DoExpirations">
            <summary>
            Run the expiration process.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.ExpirationTask.MarkAsExpired(System.Collections.Hashtable)">
            <summary>
            Mark the cache items as expired.
            </summary>
            <param name="liveCacheRepresentation">Current state of the cache.</param>
            <returns>Number of items marked for expiration.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.ExpirationTask.SweepExpiredItemsFromCache(System.Collections.Hashtable)">
            <summary>
            Remove the expired items from the cache.
            </summary>
            <param name="liveCacheRepresentation">Current state of the cache.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.ExpirationTask.PrepareForSweep">
            <summary>
            Place holder for future functionality.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.ExpirationTask.RemoveItemFromCache(Prezza.Framework.Caching.CacheItem)">
            <summary>
            Remove the specified item from the cache.
            </summary>
            <param name="itemToRemove">Remove the specified item from the cache.</param>
        </member>
        <member name="T:Prezza.Framework.Caching.BackingStoreCacheItemRemovedHandler">
            <summary>
            Delegate for event fired when backing store cache items are removed from the backing store.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Prezza.Framework.Caching.IBackingStore">
            <summary>
            This interface defines the contract that must be implemented by all backing stores.  Implementors 
            of this interface are responsible for interacting with all underlying persistence mechanisms to store 
            and retrieve <see cref="T:Prezza.Framework.Caching.CacheItem"/> objects.
            </summary>
            <remarks>
            The Cache class handles all thread-safety for backing stores
            </remarks>
        </member>
        <member name="P:Prezza.Framework.Caching.IBackingStore.CurrentCacheManager">
            <summary>
            <para>When implemented by a class, gets the current name of the <see cref="T:Prezza.Framework.Caching.CacheManager"/> using this instance.</para>
            </summary>
            <value>
            <para>The current name of the <see cref="T:Prezza.Framework.Caching.CacheManager"/> using this instance.</para>
            </value>
        </member>
        <member name="P:Prezza.Framework.Caching.IBackingStore.Count">
            <summary>
            Number of objects stored in the backing store
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.IBackingStore.Add(Prezza.Framework.Caching.CacheItem)">
            <summary>
            <p>
            This method is responsible for adding a CacheItem to the BackingStore. This operation must be successful 
            even if an item with the same key already exists. This method must also meet the Weak Exception Safety guarantee
            and remove the item from the backing store if any part of the Add fails.
            </p> 
            </summary>
            <param name="newCacheItem">CacheItem to be added</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Add
            </p>
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Caching.IBackingStore.Remove(System.String)">
            <summary>
            Removes an item with the given key from the backing store
            </summary>
            <param name="key">Key to remove. Must not be null.</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Remove
            </p>
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Caching.IBackingStore.Contains(System.String)">
            <summary>
            Return a boolean indicating if the cache contains an item with the specified key.
            </summary>
            <param name="key">Key of cache item to check for existence of.  Must not be null.</param>
            <returns>True if the cache contains an item with the specified key, false otherwise.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.IBackingStore.UpdateLastAccessedTime(System.String,System.DateTime)">
            <summary>
            Updates the last accessed time for a cache item.
            </summary>
            <param name="key">Key to update</param>
            <param name="timestamp">Time at which item updated</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during UpdateLastAccessedTime
            </p>
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Caching.IBackingStore.Flush">
            <summary>
            Flushes all CacheItems from backing store. This method must meet the Weak Exception Safety guarantee.
            </summary>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Flush
            </p>
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Caching.IBackingStore.GetData(System.String)">
            <summary>
            Retrieve the item with the specified key from the cache.
            </summary>
            <param name="key">Key of the item to retrieve.</param>
            <returns>Object with specified key.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.IBackingStore.GetCacheItem(System.String)">
            <summary>
            Retrieve the <see cref="T:Prezza.Framework.Caching.CacheItem"/> with the specified key from the cache.
            </summary>
            <param name="key">Key of the CacheItem to retrieve.</param>
            <returns>Object with specified key.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.IBackingStore.Load">
            <summary>
            Loads all CacheItems from backing store. 
            </summary>
            <returns>Hashtable filled with all existing CacheItems.</returns>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Load
            </p>
            </remarks>
        </member>
        <member name="E:Prezza.Framework.Caching.IBackingStore.CacheItemRemoved">
            <summary>
            Event fired when an item is removed from the caching store.  This allows listeners to remove
            the item from their own caches.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.ICacheItemExpiration">
            <summary>
            Interface for generation of custom cache expiration schemas.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.ICacheItemExpiration.HasExpired">
            <summary>
            Specifies if the item has expired or not.
            </summary>
            <returns>Returns true if the item has expired.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.ICacheItemExpiration.Notify">
            <summary>
            Inform the expiration that the cache item has been touched by a user.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.ICacheItemExpiration.Initialize(Prezza.Framework.Caching.CacheItem)">
            <summary>
            Allow the expiration instance to initialize itself with the cache item. 
            </summary>
            <param name="owningCacheItem"></param>
        </member>
        <member name="T:Prezza.Framework.Caching.ICacheItemRefreshAction">
            <summary>
            This interface defines the contract that must be implemented to create an object that can be used to refresh 
            an expired item from the cache. The implementing class must be serializable. Care must be taken when implementing 
            this interface not to create an object that maintains too much state about its environment, as all portions of its
            environment will be serialized as well, creating possibly a huge object graph.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.ICacheItemRefreshAction.Refresh(System.String,System.Object,Prezza.Framework.Caching.CacheItemRemovedReason)">
            <summary>
            Called when an item expires from the cache. This method can be used to notify an application that
            the expiration occured, cause the item to be refetched and refreshed from its original location, or 
            perform any other application-specific action. 
            </summary>
            <param name="removedKey">Key of item removed from cache. Will never be null.</param>
            <param name="expiredValue">Value from cache item that was just expired</param>
            <param name="removalReason">Reason the item was removed from the cache. See <see cref="T:Prezza.Framework.Caching.CacheItemRemovedReason"/></param>
            <remarks>This method should catch and handle any exceptions thrown during its operation. No exceptions should leak
            out of it.</remarks>
        </member>
        <member name="T:Prezza.Framework.Caching.ICacheOperations">
            <summary>
            Defines interfaces that cache objects must implement.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.ICacheOperations.GetCurrentCacheState">
            <summary>
            Get the current state of the cache.  A copy of the cache is returned, so it will not
            remain synchronized with the real cache.
            </summary>
            <returns><see cref="T:System.Collections.Hashtable"/> containing a copy of the hash.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.ICacheOperations.RemoveItemFromCache(System.String,Prezza.Framework.Caching.CacheItemRemovedReason)">
            <summary>
            Remove the item with the specified key from the cache.  The removal reason will be used to fire
            events for specific reasons.
            </summary>
            <param name="keyToRemove">Key of the cache item to remove.</param>
            <param name="removalReason"><see cref="T:Prezza.Framework.Caching.CacheItemRemovedReason"/> for the item's removal from the cache.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.ICacheOperations.Initialize(Prezza.Framework.Caching.ICacheScavenger)">
            <summary>
            
            </summary>
            <param name="cacheScavenger"></param>
        </member>
        <member name="M:Prezza.Framework.Caching.ICacheOperations.Add(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Prezza.Framework.Caching.ICacheOperations.Add(System.String,System.Object,Prezza.Framework.Caching.CacheItemPriority,Prezza.Framework.Caching.ICacheItemRefreshAction,Prezza.Framework.Caching.ICacheItemExpiration[])">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="scavengingPriority"></param>
            <param name="refreshAction"></param>
            <param name="expirations"></param>
        </member>
        <member name="M:Prezza.Framework.Caching.ICacheOperations.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.ICacheOperations.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Prezza.Framework.Caching.ICacheOperations.Remove(System.String,Prezza.Framework.Caching.CacheItemRemovedReason)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="removalReason"></param>
        </member>
        <member name="M:Prezza.Framework.Caching.ICacheOperations.GetData(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.ICacheOperations.ListKeys">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Caching.ICacheOperations.Flush">
            <summary>
            Clear che cache
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.ICacheScavenger">
            <summary>
            Cache scavenger interface.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.ICacheScavenger.StartScavenging">
            <summary>
            Start the cache scavenging task.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.IQueueMessage">
            <summary>
            Queue message interface for internal framework us.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.IQueueMessage.Run">
            <summary>
            Run the message.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.PriorityDateComparer">
            <summary>
            <see cref="T:System.Collections.IComparer"/> implementation for cache items.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.PriorityDateComparer.#ctor(System.Collections.Hashtable)">
            <summary>
            Constructor.
            </summary>
            <param name="unsortedItems">Items to be sorted.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.PriorityDateComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare two cache items.
            </summary>
            <param name="left">1st item to compare.</param>
            <param name="right">2nd item to compare.</param>
            <returns>0 if the items are equal, -1 if the left item is less than the right item, 1 if the left item is greater than the right item.</returns>
        </member>
        <member name="T:Prezza.Framework.Caching.ProducerConsumerQueue">
            <summary>
            Thread safe queuing, used by cache scavenging processes.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.ProducerConsumerQueue.lockObject">
            <summary>
            Lock object.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.ProducerConsumerQueue.queue">
            <summary>
            Queue of objects.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.ProducerConsumerQueue.Count">
            <summary>
            Number of queued items.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.ProducerConsumerQueue.DeQueue">
            <summary>
            Get the next item in the queue.
            </summary>
            <returns>Next object in queue.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.ProducerConsumerQueue.Enqueue(System.Object)">
            <summary>
            Add an object to the queue.
            </summary>
            <param name="o">Object to add to the queue.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.ProducerConsumerQueue.WaitUntilInterrupted">
            <summary>
            Wait for the lockObject to become unlocked OR for a ThreadInterruptException to occur.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Prezza.Framework.Caching.RefreshActionInvoker">
            <summary>
            Encapsulates invokation of cache item refresh handlers.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.RefreshActionInvoker.InvokeRefreshAction(Prezza.Framework.Caching.CacheItem,Prezza.Framework.Caching.CacheItemRemovedReason)">
            <summary>
            Invoke the refresh action for the specified cache item.
            </summary>
            <param name="removedCacheItem">Item to invoke the refresh action for.</param>
            <param name="removalReason">Reason item was removed from the cache.</param>
        </member>
        <member name="T:Prezza.Framework.Caching.RefreshActionInvoker.RefreshActionData">
            <summary>
            Invokes refresh action on a thread pool thread.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.RefreshActionInvoker.RefreshActionData.#ctor(Prezza.Framework.Caching.ICacheItemRefreshAction,System.String,System.Object,Prezza.Framework.Caching.CacheItemRemovedReason)">
            <summary>
            Constructor.
            </summary>
            <param name="refreshAction">Cache item refresh action.</param>
            <param name="keyToRefresh">Key of cache item</param>
            <param name="removedData">Value of cache item.</param>
            <param name="removalReason">Reason item was removed from cache.</param>
        </member>
        <member name="P:Prezza.Framework.Caching.RefreshActionInvoker.RefreshActionData.RefreshAction">
            <summary>
            Get the cache item refresh action.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.RefreshActionInvoker.RefreshActionData.KeyToRefresh">
            <summary>
            Get the key of the cache item.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.RefreshActionInvoker.RefreshActionData.RemovedData">
            <summary>
            Get the value of the cache item.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Caching.RefreshActionInvoker.RefreshActionData.RemovalReason">
            <summary>
            Get the reason the cache item was removed from the cache.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.RefreshActionInvoker.RefreshActionData.InvokeOnThreadPoolThread">
            <summary>
            Invoke the refresh action on a thread pool thread.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.RefreshActionInvoker.RefreshActionData.ThreadPoolRefreshActionInvoker(System.Object)">
            <summary>
            Refresh action invoker callback.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Caching.RefreshActions.DisposableItemExpiredHandler">
            <summary>
            Create handler for when the disposable item expires from the cache.  Sets item to null and
            calls dispose.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.RefreshActions.DisposableItemExpiredHandler.Refresh(System.String,System.Object,Prezza.Framework.Caching.CacheItemRemovedReason)">
            <summary>
            Handle cache expiration
            </summary>
            <param name="removedKey"></param>
            <param name="expiredValue"></param>
            <param name="removalReason"></param>
        </member>
        <member name="T:Prezza.Framework.Caching.ScavengerTask">
            <summary>
            Remove items from the cache according to the scavenging policy.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.ScavengerTask.scavengingPolicy">
            <summary>
            Cache scavenging policy based on the number of items in the cache.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.ScavengerTask.configurationData">
            <summary>
            Caching configuration information.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.ScavengerTask.cacheOperations">
            <summary>
            Cache operations proxy.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.ScavengerTask.cacheManagerName">
            <summary>
            Name of the cache manager.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.ScavengerTask.#ctor(System.String,Prezza.Framework.Caching.Configuration.ICacheConfiguration,Prezza.Framework.Caching.CacheCapacityScavengingPolicy,Prezza.Framework.Caching.ICacheOperations)">
            <summary>
            Constructor.
            </summary>
            <param name="cacheManagerName">Name of the cache manager.</param>
            <param name="configurationData">Caching configuration.</param>
            <param name="scavengingPolicy">Cache scavenging policy.</param>
            <param name="cacheOperations">Cache operations proxy.</param>
        </member>
        <member name="P:Prezza.Framework.Caching.ScavengerTask.NumberOfItemsToBeScavenged">
            <summary>
            Number of items to scavenge when the task is run.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.ScavengerTask.DoScavenging">
            <summary>
            Perform scavenging operations.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.ScavengerTask.ResetScavengingFlagInCacheItems(System.Collections.Hashtable)">
            <summary>
            Reset the scavenging eligibilty flags on the cache items.
            </summary>
            <param name="liveCacheRepresentation">Current cache state.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.ScavengerTask.SortItemsForScavenging(System.Collections.Hashtable)">
            <summary>
            Sort the cache items by priority and date.
            </summary>
            <param name="unsortedItemsInCache"><see cref="T:Prezza.Framework.Caching.CacheItem"/>s to sort.</param>
            <returns>Sorted list of cache items.</returns>
        </member>
        <member name="M:Prezza.Framework.Caching.ScavengerTask.RemoveScavengableItems(System.Collections.SortedList)">
            <summary>
            Remove scavengable items from the cache.
            </summary>
            <param name="scavengableItems">Items to remove.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.ScavengerTask.RemoveItemFromCache(Prezza.Framework.Caching.CacheItem)">
            <summary>
            Remove an item (if eligible) from the cache.
            </summary>
            <param name="itemToRemove">Item to remove from the cache.</param>
            <returns>True if the item was removed, false otherwise.</returns>
        </member>
        <member name="T:Prezza.Framework.Caching.StartScavengingMsg">
            <summary>
            Message to start cache scavenging.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Caching.StartScavengingMsg.callback">
            <summary>
            Background schdeduler callback.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Caching.StartScavengingMsg.#ctor(Prezza.Framework.Caching.BackgroundScheduler)">
            <summary>
            Constructor.
            </summary>
            <param name="callback">Background scheduler callback.</param>
        </member>
        <member name="M:Prezza.Framework.Caching.StartScavengingMsg.Run">
            <summary>
            Run the scavenging.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Configuration.ConfigurationBase">
            <summary>
            Base-class for configuration objects.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Configuration.ConfigurationBase.name">
            <summary>
            Name of the configuration
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationBase.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Configuration.ConfigurationBase.Name">
            <summary>
            Name of the configuration item.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Configuration.ConfigurationChangedEventHandler">
            <summary>
            <para>Represents the method that will handle the <seealso cref="E:Prezza.Framework.Configuration.ConfigurationManager.ConfigurationChanged"/> events.</para>
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Prezza.Framework.Configuration.ConfigurationChangedEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Prezza.Framework.Configuration.ConfigurationChangedEventArgs">
            <summary>
            Summary description for ConfigurationChangedEventArgs.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationChangedEventArgs.#ctor(System.String)">
            <summary>
            Constructor that accepts the configuration file name.
            </summary>
            <param name="configurationFile"></param>
        </member>
        <member name="P:Prezza.Framework.Configuration.ConfigurationChangedEventArgs.ConfigurationFile">
            <summary>
            The path of the file that has changed
            </summary>
        </member>
        <member name="T:Prezza.Framework.Configuration.ConfigurationChangeFileWatcher">
            <summary>
            Summary description for ConfigurationChangeFileWatcher.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationChangeFileWatcher.#ctor(System.String)">
            <summary>
            Watches a file for any changes.  ConfigurationChanged event is fired when file changes. 
            </summary>
            <param name="configFilePath">the path of the file the watch</param>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationChangeFileWatcher.Poller">
            <summary>
            Method run by background thread.  Monitors the file for changes.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Configuration.ConfigurationFactory">
            <summary>
            Summary description for ConfigurationFactory.
            </summary>
            <summary>
            Base configuration factory.
            </summary>
            <remarks>
            A developer of configuration-based factories will extend this class.  Currently, the main use of this class
            is as a placeholder for future extensions of the framework configuration.
            </remarks>
        </member>
        <member name="F:Prezza.Framework.Configuration.ConfigurationFactory.factoryName">
            <summary>
            Name of the factory.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Configuration.ConfigurationFactory.config">
            <summary>
            Configuration information for the factory.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationFactory.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="factoryName">Name of the factory.</param>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationFactory.#ctor(System.String,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="factoryName">Name of the factory.</param>
            <param name="config">Configuration information for the factory.</param>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationFactory.GetConfigurationType(System.String)">
            <summary>
            Get the <see cref="T:System.Type"/> corresponding to <see cref="N:Prezza.Framework.Configuration"/> specified by the <paramref name="configurationName" /> parameter.
            </summary>
            <param name="configurationName">Name of the configuration object to get the Type of.</param>
            <returns>System.Type corresponding to the specified <see cref="N:Prezza.Framework.Configuration"/> object.</returns>
            <remarks>
            The <see cref="T:System.Type" /> returned by this method will be used by the factory to instantiate objects.
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationFactory.PublishFailureEvent(System.String,System.Exception)">
            <summary>
            Use TBD.
            </summary>
            <param name="configurationName"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationFactory.CreateInstance(System.String)">
            <summary>
            Create an instance of the specified item.
            </summary>
            <param name="configurationName">Name of the <see cref="N:Prezza.Framework.Configuration" /> object containing information about the object instance to create.</param>
            <returns><see cref="T:System.Type" />.</returns>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationFactory.CreateObject(System.String,System.Type)">
            <summary>
            Create an object of the specified type.
            </summary>
            <param name="configurationName">Currently ignored</param>
            <param name="type"><see cref="T:System.Type" /> for the object to create.</param>
            <returns>Created object</returns>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationFactory.GetType(System.String)">
            <summary>
            Get the <see cref="T:System.Type" /> for the specified <paramref name="typeName" />
            </summary>
            <param name="typeName">Name of type to get the <see cref="T:System.Type" /> for.</param>
            <returns><see cref="T:System.Type" /> for the specified type.</returns>
        </member>
        <member name="P:Prezza.Framework.Configuration.ConfigurationFactory.FactoryName">
            <summary>
            Name of the factory.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Configuration.ConfigurationFactory.Config">
            <summary>
            Configuration object associated with the factory.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Configuration.ConfigurationManager">
            <summary>
            Handles loading, storing configuration for the application.
            </summary>
            <remarks>
            This version of the configuration manager supports loading
            loading configuration information from .config files such as
            web.config.  A developer creating an object that requires 
            configuration information should also develop a configuration
            section handler that implements the <see cref="T:System.Configuration.IConfigurationSectionHandler" />
            interface.
            Additionally, the configuration manager supports instantiating and loading objects that support the
            <see cref="T:Prezza.Framework.Configuration.IXmlConfigurationBase"/> interface.
            
            NOTE: Exception handling and logging are only performed if the configurations have been loaded by
            another component.  The ConfigurationManager will not autonomously cause those configurations to be
            loaded.
            </remarks>
        </member>
        <member name="F:Prezza.Framework.Configuration.ConfigurationManager._configurationCache">
            <summary>
            Cache of created configuration items.
            </summary>
        </member>
        <member name="E:Prezza.Framework.Configuration.ConfigurationManager.ConfigurationChanged">
            <summary>
            <para>Occurs after configuration is changed.</para>
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationManager.#cctor">
            <summary>
            Cause configurations to be loaded and cached.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationManager.GetConfiguration(System.String)">
            <summary>
            Return a <see cref="N:Prezza.Framework.Configuration" /> object containing
            configuration information for the specified section.
            </summary>
            <param name="sectionName">Name of the section to load the 
            configuration from.</param>
            <returns>Configuration object containing the configuration 
            information</returns>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationManager.GetConfiguration(System.Xml.XmlNode,System.String,System.Object[])">
            <summary>
            Return a <see cref="T:Prezza.Framework.Configuration.IXmlConfigurationBase"/> object loaded with the specified xml configuration information.
            </summary>
            <param name="node">Node containing configuration information.</param>
            <param name="typeName">Type of object that implements <see cref="T:Prezza.Framework.Configuration.IXmlConfigurationBase"/> to create.</param>
            <param name="extraParams">Extra parameters to use to construct the configuration object.</param>
            <returns>Loaded configuration object.</returns>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationManager.DetermineAppConfigPath">
            <summary>
            Determine base application path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationManager.GetConfiguration(System.String,System.String,System.Object[])">
            <summary>
            Create an object of the specified type, which must implement <see cref="T:Prezza.Framework.Configuration.IXmlConfigurationBase"/> inteface, and load
            it's configuration from the specified Xml file.
            </summary>
            <param name="filePath">Path of file containing configuration information.</param>
            <param name="typeName">TypeName of object to create and populate with configuration information.</param>
            <param name="extraParams">Extra parameters to use to construct the configuration object.</param>
            <returns>Object of specified type loaded with configuration information from specified file.</returns>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationManager.ValidateTypeIsIXmlConfigurationBase(System.Type)">
            <summary>
            Validate that the supplied type is compatible with <see cref="T:Prezza.Framework.Configuration.IXmlConfigurationBase"/>.
            </summary>
            <param name="type">Type to verify.</param>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationManager.LogMessage(System.String)">
            <summary>
            Attempt to log a message.
            </summary>
            <param name="message">Message to log.</param>
            <remarks>
            The message will be logged only if the following conditions are met:
              1) The configuration cache contains an object of type LoggingConfiguration.
              2) The Logger supports a Write method that accepts two strings as arguments.
            If the conditions are not met, no message will be logged.
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationManager.HandleException(System.Exception)">
            <summary>
            Attempt to use the exception handling framework to handle and/or log exceptions.
            </summary>
            <param name="ex">Exception to handle.</param>
            <returns>Boolean indicating whether the calling component should rethrow the exception.</returns>
            <remarks>
            The exception handling framework will only be used if the configuration cache contains a
            configuration object of type ExceptionHandlingConfiguration.
            
            If the excpetion is not handled by the framework, this method will return true, otherwise
            it will return the value indicated by the exception handling framework.
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationManager.CreateFileWatcher(System.String)">
            <summary>
            Creates a ConfigurationChangeFileWatcher on all loaded config files.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationManager.OnConfigurationChanged(System.Object,Prezza.Framework.Configuration.ConfigurationChangedEventArgs)">
            <summary>
            Handles the ConfigurationChanged event fired by any ConfigurationChangeFileWatcher monitoring the config files loaded during GetConfiguration
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationManager.FlushConfigurationCache">
            <summary>
            Flush the configuration cache, causing configuration items to be reloaded as necessary
            </summary>
        </member>
        <member name="T:Prezza.Framework.Configuration.ConfigurationProvider">
            <summary>
            Base class for configuration-based providers.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Configuration.ConfigurationProvider.configurationName">
            <summary>
            Name of the configuration.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Configuration.ConfigurationProvider.ConfigurationName">
            <summary>
            Get/Set the name of the configuration.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationProvider.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the configuration-based provider with configuration information.
            </summary>
            <param name="config">Configuration information for the provider.</param>
        </member>
        <member name="T:Prezza.Framework.Configuration.ConfigurationSectionHandler">
            <summary>
            Implementation of <see cref="T:System.Configuration.IConfigurationSectionHandler"/> that supports instantiating and loading
            self-loading configuration objects.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.ConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Instantiate an object of type specified by the configuration file and cause it to be
            loaded.
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns>Configuration object of type specified in Xml configuration.</returns>
        </member>
        <member name="T:Prezza.Framework.Configuration.IConfigurationChangeWatcher">
            <summary>
            Provides a way to watch for changes to configuration files
            </summary>
        </member>
        <member name="E:Prezza.Framework.Configuration.IConfigurationChangeWatcher.ConfigurationChanged">
            <summary>
            Event raised when the underlying persistence mechanism for configuration notices that
            the persistent representation of configuration information has changed.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.IConfigurationChangeWatcher.StartWatching">
            <summary>
            When implemented by a subclass, starts the object watching for configuration changes
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.IConfigurationChangeWatcher.StopWatching">
            <summary>
            When implemented by a subclass, stops the object from watching for configuration changes
            </summary>
        </member>
        <member name="T:Prezza.Framework.Configuration.IConfigurationProvider">
            <summary>
            Interface for configuration-based providers.
            </summary>
            <remarks>
            A configuration-based provider operated in a manner specified by its 
            configuration.  Configuration information is provided by the creator
            of a provider object by passing in a <see cref="T:Prezza.Framework.Configuration.ConfigurationBase" />
            object of a type specified in the application's configuration file.
            </remarks>
        </member>
        <member name="P:Prezza.Framework.Configuration.IConfigurationProvider.ConfigurationName">
            <summary>
            Name of the configuration provider.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.IConfigurationProvider.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the provider with the specified configuration object.
            </summary>
            <remarks>
            <see cref="T:Prezza.Framework.Configuration.ConfigurationBase" /> is an abstract class, and as such 
            can not be instantiated.  The author of a configuration provider will
            also create a class that extends <see cref="T:Prezza.Framework.Configuration.ConfigurationBase" /> to
            contain configuration information specific to the provider.  An object
            of this type will be passed to the Initialize method.
            </remarks>
            <param name="config"></param>
        </member>
        <member name="T:Prezza.Framework.Configuration.IXmlConfigurationBase">
            <summary>
            Interface for configuration objects that support loading configuration information from Xml.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.IXmlConfigurationBase.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load configuration information from the specified XML node.
            </summary>
            <param name="node">XML Node containing the configuration information to load.</param>
            <remarks>
            Implementations of the IXmlConfigurationBase interface must implement this method.  The data contained in the XML node
            may come from any source, including one or more XML files, database(s), etc.
            </remarks>
        </member>
        <member name="T:Prezza.Framework.Configuration.ProviderData">
            <summary>
            Base class for user-defined provider configuration classes. 
            </summary>
            
        </member>
        <member name="F:Prezza.Framework.Configuration.ProviderData.typeName">
            <summary>
            Type name of the the provider which will be instantiated by the
            appropriate provider factory.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderData.#ctor(System.String,System.String)">
            <summary>
            Base constructor that initializes the provider name and type.
            </summary>
            <param name="providerName">Name of the provider this configuration is associated with.</param>
            <param name="typeName">Type name of the provider.  The type name will be used to instantiate the provider.</param>
        </member>
        <member name="P:Prezza.Framework.Configuration.ProviderData.TypeName">
            <summary>
            Type name of the provider.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Configuration.ProviderDataCollection">
            <summary>
            Collection of configuration information objects for providers.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderDataCollection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderDataCollection.GetProvider(System.String)">
            <summary>
            Return the configuration for the provider with the specified name.
            </summary>
            <param name="name">Name of provider to get.</param>
            <returns><see cref="T:Prezza.Framework.Configuration.ProviderData" /> configuration for the specified provider.</returns>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderDataCollection.GetProvider(System.Int32)">
            <summary>
            Return the configuration for the provider with the specified index.
            </summary>
            <param name="index">Index of the provider configuration object to retrieve.</param>
            <returns>ProviderData object for the specified provider.</returns>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderDataCollection.SetProvider(System.String,Prezza.Framework.Configuration.ProviderData)">
            <summary>
            Set the provider configuration for the specified name.
            </summary>
            <param name="name">Name of provider configuration to set.</param>
            <param name="providerData">Configuration for the provider.</param>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderDataCollection.SetProvider(System.Int32,Prezza.Framework.Configuration.ProviderData)">
            <summary>
            Set the provider configuraiton for the specified index.
            </summary>
            <param name="index">Index of the provider to set the configuration for.</param>
            <param name="providerData">Configuration for the provider.</param>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderDataCollection.AddProvider(Prezza.Framework.Configuration.ProviderData)">
            <summary>
            Add provider configuration to the collection.
            </summary>
            <param name="providerData">Provider configuration to add.</param>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderDataCollection.AddProvider(System.String,Prezza.Framework.Configuration.ProviderData)">
            <summary>
            Add provider configuration with the specified name to the collection.
            </summary>
            <param name="name">Name of provider configuration.</param>
            <param name="providerData">Provider configuration to add.</param>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderDataCollection.AddProviders(Prezza.Framework.Configuration.ProviderDataCollection)">
            <summary>
            Add a collection of provider configuration objects to the collection.
            </summary>
            <param name="collection">Collection of provider configuration objects to add.</param>
        </member>
        <member name="T:Prezza.Framework.Configuration.ProviderFactory">
            <summary>
            Configuration factory specific to providers.  Supports default instances and initialization of providers
            upon instantiation.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Configuration.ProviderFactory.type">
            <summary>
            Base type of providers this factory will create.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderFactory.#ctor(System.String,System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="factoryName">Name of the factory.</param>
            <param name="type">Base type of providers that the factory will create.</param>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderFactory.#ctor(System.String,System.Type,Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Constructor.
            </summary>
            <param name="factoryName">Name of the factory.</param>
            <param name="type">Base type of providers that the factory will create.</param>
            <param name="config">Configuration information for the provider.</param>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderFactory.GetConfigurationObject(System.String)">
            <summary>
            Each provider will implement the <see cref="T:Prezza.Framework.Configuration.IConfigurationProvider" /> interface, which requires
            implementation of an Initialize method that accepts an object argument.  The GetConfigurationObject
            method is used to get the configuration object to initialize the provider with.
            </summary>
            <param name="providerName">Name of the provider to create the configuration object for.</param>
            <returns>Configuration object for the specified provider.</returns>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderFactory.InitializeConfigurationProvider(System.String,Prezza.Framework.Configuration.IConfigurationProvider)">
            <summary>
            Initialize the specified configuration provider by calling it's known Initialize method and passing
            it a configuration object.
            </summary>
            <param name="providerName">Name of the provider to initialize.</param>
            <param name="provider">Provider to initialize.</param>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderFactory.CreateObject(System.String,System.Type)">
            <summary>
            Create and initialize object with the specified <paramref name="proverName" /> and of the specified <paramref name="type" />.
            </summary>
            <param name="providerName">Name of provider object to create.</param>
            <param name="type"><see cref="T:System.Type"/> of the object to create.</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderFactory.InitializeObject(System.String,System.Object)">
            <summary>
            Initialize the specified object with it's associated configuration object.
            </summary>
            <param name="providerName">Name of provider to initialize.</param>
            <param name="Object">Provider object to initialize.</param>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderFactory.ValidateTypeIsIConfigurationProvider(System.Type)">
            <summary>
            Validate that the specified type is an <see cref="T:Prezza.Framework.Configuration.IConfigurationProvider" />.
            </summary>
            <param name="type"><see cref="T:System.Type" /> to verify.</param>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderFactory.CreateDefaultInstance">
            <summary>
            Create an instance of the default provider.
            </summary>
            <returns>An instance of the default provider.</returns>
        </member>
        <member name="M:Prezza.Framework.Configuration.ProviderFactory.GetDefaultInstanceName">
            <summary>
            Get the name of the default provider.
            </summary>
            <returns>Name of the default provider.</returns>
        </member>
        <member name="P:Prezza.Framework.Configuration.ProviderFactory.ProviderType">
            <summary>
            <see cref="T:System.Type" /> of providers the factory will create.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Data.CachingMechanism">
            <devdoc>
            CachingMechanism provides caching support for stored procedure 
            parameter discovery and caching
            </devdoc>
        </member>
        <member name="M:Prezza.Framework.Data.CachingMechanism.CloneParameters(System.Data.IDataParameter[])">
            <devdoc>
            Create and return a copy of the IDataParameter array.
            </devdoc>        
        </member>
        <member name="M:Prezza.Framework.Data.CachingMechanism.Clear">
            <devdoc>
            Empties all items from the cache
            </devdoc>
        </member>
        <member name="M:Prezza.Framework.Data.CachingMechanism.AddParameterSetToCache(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <devdoc>
            Add a parameter array to the cache for the command.
            </devdoc>        
        </member>
        <member name="M:Prezza.Framework.Data.CachingMechanism.GetCachedParameterSet(System.Data.IDbCommand)">
            <devdoc>
            Gets a parameter array from the cache for the command. Returns null if no parameters are found.
            </devdoc>        
        </member>
        <member name="M:Prezza.Framework.Data.CachingMechanism.IsParameterSetCached(System.Data.IDbCommand)">
            <devdoc>
            Gets if a given stored procedure on a specific connection string has a cached parameter set
            </devdoc>        
        </member>
        <member name="T:Prezza.Framework.Data.Configuration.DatabaseProviderData">
            <summary>
            Represents the configuration data used to initialize
            a <see cref="T:Prezza.Framework.Data.Database"/> object.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Configuration.DatabaseProviderData.#ctor(Prezza.Framework.Data.Configuration.InstanceData,Prezza.Framework.Data.Configuration.DatabaseTypeData)">
            <summary>
            Initializes a new instance of the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseProviderData"/> class.
            </summary>
            <param name="instance">An <see cref="T:Prezza.Framework.Data.Configuration.InstanceData"/> object.</param>
            <param name="type">A <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeData"/> object.</param>
        </member>
        <member name="M:Prezza.Framework.Data.Configuration.DatabaseProviderData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseProviderData"/> class.
            </summary>
            <param name="name">A name.</param>
        </member>
        <member name="M:Prezza.Framework.Data.Configuration.DatabaseProviderData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseProviderData"/> class.
            </summary>
            <param name="name">A name.</param>
            <param name="typeName">A type name of a class that implements the <see cref="T:Prezza.Framework.Data.Database"/> class.</param>
            <param name="connectionStringName">Name of the connection string (store in the app/web .config file to use</param>
        </member>
        <member name="P:Prezza.Framework.Data.Configuration.DatabaseProviderData.TypeName">
            <summary>
            <para>When implemented by a class, Gets or sets the <see cref="T:System.Type"/> name of the provider.</para>
            </summary>
            <value>
            <para>The name of the provider. The default is an empty string.</para>
            </value>
            <remarks>
            <para><b>Not to implementers:</b> You do not have to implement the set operation.  If you have only one type for your data object you can ignore the set.</para>
            </remarks>
        </member>
        <member name="P:Prezza.Framework.Data.Configuration.DatabaseProviderData.ConnectionStringName">
            <summary>
            Get/set name of connection string associated with this db.  The string is stored in the app/web.config file
            </summary>
        </member>
        <member name="T:Prezza.Framework.Data.Configuration.DatabaseSettings">
            <summary>
            <para>Represents the root configuration for data.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>databaseSettings</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="F:Prezza.Framework.Data.Configuration.DatabaseSettings.SectionName">
            <summary>
            The name of the data configuration section.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Data.Configuration.DatabaseSettings.ConfigurationNamespace">
            <summary>
            <para>Gets the Xml namespace for this root node.</para>
            </summary>
            <value>
            <para>The Xml namespace for this root node.</para>
            </value>
        </member>
        <member name="M:Prezza.Framework.Data.Configuration.DatabaseSettings.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseSettings"/> class.</para>
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.Configuration.DatabaseSettings.DatabaseTypes">
            <summary>
            <para>Gets the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeDataCollection"/>.</para>
            </summary>
            <value>
            <para>The database types available in configuration.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>databaseTypes</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="P:Prezza.Framework.Data.Configuration.DatabaseSettings.Instances">
            <summary>
            <para>Gets the <see cref="T:Prezza.Framework.Data.Configuration.InstanceDataCollection"/>.</para>
            </summary>
            <value>
            <para>The database instances available in configuration.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>instances</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="P:Prezza.Framework.Data.Configuration.DatabaseSettings.DefaultInstance">
            <summary>
            <para>Gets or sets the default database instance.</para>
            </summary>
            <value>
            <para>The default database instance.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>defaultInstance</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="T:Prezza.Framework.Data.Configuration.DatabaseTypeData">
            <summary>
            <para>Represents a type of database (e.g. Oracle, Sql Server) in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>databaseType</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Data.Configuration.DatabaseTypeData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeData"/> class.</para>
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Configuration.DatabaseTypeData.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeData"/> class with the name and the fully qualified type name of the class.</para>
            </summary>
            <param name="name">
            <para>The name of the database type.</para>
            </param>
            <param name="typeName">
            <para>The fully qualified type name of the assembly.</para>
            </param>
        </member>
        <member name="P:Prezza.Framework.Data.Configuration.DatabaseTypeData.Name">
            <summary>
            <para>Gets or sets the name of the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeData"/>.</para>
            </summary>
            <value>
            <para>The name of the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeData"/>. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>name</c> attribute in configuration.</para>
            </remarks>
        </member>
        <member name="P:Prezza.Framework.Data.Configuration.DatabaseTypeData.TypeName">
            <summary>
            <para>Gets or sets the fully qualified type name that implements this type.</para>
            </summary>
            <value>
            <para>The fully qualified type name that implements this type.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>type</c> attribute in configuration.</para>
            </remarks>
        </member>
        <member name="T:Prezza.Framework.Data.Configuration.DatabaseTypeDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeData"/>s for the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseSettings"/> in configuration for the block.</para>
            </summary>     
        </member>
        <member name="P:Prezza.Framework.Data.Configuration.DatabaseTypeDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Prezza.Framework.Data.Configuration.DatabaseTypeDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Prezza.Framework.Data.Configuration.DatabaseTypeDataCollection.Add(Prezza.Framework.Data.Configuration.DatabaseTypeData)">
            <summary>
            <para>Adds an <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeData"/> into the collection.</para>
            </summary>
            <param name="databaseTypeData">
            <para>The <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Prezza.Framework.Data.Configuration.DatabaseTypeData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="databaseTypeData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="P:Prezza.Framework.Data.Configuration.DatabaseTypeData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Prezza.Framework.Data.Configuration.DatabaseTypeDataCollection.Add(System.Object)">
            <summary>
            <para>Adds a value into the collection.</para>
            </summary>
            <param name="parameter">
            <para>The value to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>This method exists to support Xml Serialization.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="parameter"/> must be of type <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeData"/>.</para>
            </exception>
        </member>
        <member name="M:Prezza.Framework.Data.Configuration.DatabaseTypeDataCollection.CopyTo(Prezza.Framework.Data.Configuration.DatabaseTypeData[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeDataCollection"/> to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeDataCollection"/> array that is the destination of the elements copied from <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeDataCollection"/>. The <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeData"/> array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="T:Prezza.Framework.Data.Configuration.InstanceData">
            <summary>
            <para>Represents a database instance in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>instance</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Data.Configuration.InstanceData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Prezza.Framework.Data.Configuration.InstanceData"/> class.</para>
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Configuration.InstanceData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Prezza.Framework.Data.Configuration.InstanceData"/> class with a name, name of the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeData"/> and the name of the <see cref="P:Prezza.Framework.Data.Configuration.InstanceData.ConnectionString"/>.</para>
            </summary>
            <param name="name"><para>The name of the instance.</para></param>        
        </member>
        <member name="M:Prezza.Framework.Data.Configuration.InstanceData.#ctor(System.String,System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Prezza.Framework.Data.Configuration.InstanceData"/> class with a name, name of the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseTypeData"/> and the name of the <see cref="P:Prezza.Framework.Data.Configuration.InstanceData.ConnectionString"/>.</para>
            </summary>
            <param name="name">The name of the instance.</param>
            <param name="typeName">The fully qualified assembly name of the type.</param>
            <param name="connectionString">The connection string for the instance.</param>
        </member>
        <member name="P:Prezza.Framework.Data.Configuration.InstanceData.Name">
            <summary>
            <para>Gets or sets the name of the instance.</para>
            </summary>
            <value>
            <para>The name of the instance. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>name</c> attribute in configuration.</para>
            </remarks>
        </member>
        <member name="P:Prezza.Framework.Data.Configuration.InstanceData.DatabaseTypeName">
            <summary>
            <para>Gets or sets the type of the instance.</para>
            </summary>
            <value>
            <para>The type of the instance. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>type</c> attribute in configuration.</para>
            </remarks>
        </member>
        <member name="P:Prezza.Framework.Data.Configuration.InstanceData.ConnectionString">
            <summary>
            <para>Gets or sets name of the <see cref="P:Prezza.Framework.Data.Configuration.InstanceData.ConnectionString"/> for the instance.</para>
            </summary>
            <value>
            <para>Gets or sets name of the <see cref="P:Prezza.Framework.Data.Configuration.InstanceData.ConnectionString"/> for the instance. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>connectionString</c> attribute in configuration.</para>
            </remarks>
        </member>
        <member name="T:Prezza.Framework.Data.Configuration.InstanceDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Prezza.Framework.Data.Configuration.InstanceData"/> objects for the <see cref="T:Prezza.Framework.Data.Configuration.DatabaseSettings"/> in configuration for the block.</para>
            </summary>   
        </member>
        <member name="P:Prezza.Framework.Data.Configuration.InstanceDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Prezza.Framework.Data.Configuration.InstanceData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Prezza.Framework.Data.Configuration.InstanceData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Prezza.Framework.Data.Configuration.InstanceDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Prezza.Framework.Data.Configuration.InstanceData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Prezza.Framework.Data.Configuration.InstanceData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Prezza.Framework.Data.Configuration.InstanceDataCollection.Add(Prezza.Framework.Data.Configuration.InstanceData)">
            <summary>
            <para>Adds an <see cref="T:Prezza.Framework.Data.Configuration.InstanceData"/> into the collection.</para>
            </summary>
            <param name="instanceData">
            <para>The <see cref="T:Prezza.Framework.Data.Configuration.InstanceData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Prezza.Framework.Data.Configuration.InstanceData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="instanceData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="P:Prezza.Framework.Data.Configuration.InstanceData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Prezza.Framework.Data.Configuration.InstanceDataCollection.Add(System.Object)">
            <summary>
            <para>Adds a value into the collection.</para>
            </summary>
            <param name="parameter">
            <para>The value to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>This method exists to support Xml Serialization.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="parameter"/> must be of type <see cref="T:Prezza.Framework.Data.Configuration.InstanceData"/>.</para>
            </exception>
        </member>
        <member name="M:Prezza.Framework.Data.Configuration.InstanceDataCollection.CopyTo(Prezza.Framework.Data.Configuration.InstanceData[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Prezza.Framework.Data.Configuration.InstanceDataCollection"/> to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:Prezza.Framework.Data.Configuration.InstanceDataCollection"/> array that is the destination of the elements copied from <see cref="T:Prezza.Framework.Data.Configuration.InstanceDataCollection"/>. The <see cref="T:Prezza.Framework.Data.Configuration.InstanceData"/> array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="T:Prezza.Framework.Data.Database">
            <summary>
            Represents an abstract database that commands can be run against. 
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Database.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the database object with configuration data.
            </summary>
            <param name="config"></param>
        </member>
        <member name="P:Prezza.Framework.Data.Database.ConnectionString">
            <summary>
            <para>Gets the string used to open a database.</para>
            <seealso cref="P:System.Data.IDbConnection.ConnectionString"/>
            </summary>
            <value>
            <para>The string used to open a database.</para>
            </value>
        </member>
        <member name="P:Prezza.Framework.Data.Database.ParameterToken">
            <summary>
            <para>When implemented by a class, gets the parameter token used to delimit parameters for the database.</para>
            </summary>
            <value>
            <para>the parameter token used to delimit parameters for the database.</para>
            </value>
        </member>
        <member name="P:Prezza.Framework.Data.Database.ServiceKey">
            <summary>
            <para>Gets the service key used to create the database instance.</para>
            </summary>
            <value>
            <para>The service key used to create the database instance.</para>
            </value>
        </member>
        <member name="P:Prezza.Framework.Data.Database.DatabaseProviderData">
            <summary>
            Gets the <see cref="P:Prezza.Framework.Data.Database.DatabaseProviderData"/> from which
            this object was initialized.
            </summary>
            <value>A <see cref="P:Prezza.Framework.Data.Database.DatabaseProviderData"/>.</value>
        </member>
        <member name="M:Prezza.Framework.Data.Database.GetConnection">
            <summary>
            <para>When overridden in a derived class, gets the connection for this database.</para>
            <seealso cref="T:System.Data.IDbConnection"/>        
            </summary>
            <returns>
            <para>The <see cref="T:System.Data.IDbConnection"/> for this database.</para>
            </returns>
        </member>
        <member name="M:Prezza.Framework.Data.Database.GetStoredProcCommandWrapper(System.String)">
            <summary>
            <para>When overridden in a derived class, creates a <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <returns><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> for the stored procedure.</para></returns>       
        </member>
        <member name="M:Prezza.Framework.Data.Database.GetStoredProcCommandWrapper(System.String,System.Object[])">
            <summary>
            <para>When overridden in a derived class, creates an <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <param name="parameterValues"><para>The list of parameters for the procedure.</para></param>
            <returns><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> for the stored procedure.</para></returns>
            <remarks>
            <para>The parameters for the stored procedure will be discovered and the values are assigned in positional order.</para>
            </remarks>        
        </member>
        <member name="M:Prezza.Framework.Data.Database.GetStoredProcCommandWrapperWithSourceColumns(System.String,System.String[])">
            <summary>
            Wraps around a derived class's implementation of the GetStoredProcCommandWrapper method and adds functionality for
            using this method with UpdateDataSet.  The GetStoredProcCommandWrapper method (above) that takes a params array 
            expects the array to be filled with VALUES for the parameters. This method differs in that it allows a user to pass 
            in a string array and this method will dynamically discover the parameters for the stored procedure and set the 
            parameter's SourceColumns to the strings that are passed in.  It does this by mapping the parameters to the strings IN 
            ORDER.  Thus, order is very important.
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <param name="sourceColumns"><para>The list of DataFields for the procedure.</para></param>
            <returns><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> for the stored procedure.</para></returns>
        </member>
        <member name="M:Prezza.Framework.Data.Database.GetSqlStringCommandWrapper(System.String)">
            <summary>
            <para>When overridden in a derived class, creates an <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> for a SQL query.</para>
            </summary>
            <param name="query"><para>The text of the query.</para></param>        
            <returns><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> for the SQL query.</para></returns>        
        </member>
        <member name="M:Prezza.Framework.Data.Database.GetDataAdapter">
            <summary>
            Gets the DbDataAdapter with the given update behavior and connection from the proper derived class.
            Created this new, public method instead of modifying the protected, abstract one so there will be no
            breaking changes for any currently derived Database class
            </summary>
            <returns>An <see cref="T:System.Data.Common.DbDataAdapter"/>.</returns>
            <seealso cref="T:System.Data.Common.DbDataAdapter"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.GetDataAdapter(Prezza.Framework.Data.UpdateBehavior)">
            <summary>
            Gets the DbDataAdapter with the given update behavior and connection from the proper derived class.
            Created this new, public method instead of modifying the protected, abstract one so there will be no
            breaking changes for any currently derived Database class
            </summary>
            <param name="behavior">
            <para>One of the <see cref="T:Prezza.Framework.Data.UpdateBehavior"/> values.</para>
            </param>
            <returns>An <see cref="T:System.Data.Common.DbDataAdapter"/>.</returns>
            <seealso cref="T:System.Data.Common.DbDataAdapter"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.GetDataAdapter(Prezza.Framework.Data.UpdateBehavior,System.Data.IDbConnection)">
            <summary>
            <para>When overridden in a derived class, creates a <see cref="T:System.Data.Common.DbDataAdapter"/> with the given update behavior and connection.</para>        
            </summary>
            <param name="behavior">
            <para>One of the <see cref="T:Prezza.Framework.Data.UpdateBehavior"/> values.</para>
            </param>
            <param name="connection">
            <para>The open connection to the database.</para>
            </param>
            <returns>An <see cref="T:System.Data.Common.DbDataAdapter"/>.</returns>
            <seealso cref="T:System.Data.Common.DbDataAdapter"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.LoadDataSet(Prezza.Framework.Data.DBCommandWrapper,System.Data.DataSet,System.String)">
            <summary>
            <para>Execute the <paramref name="command"/> and add a new <see cref="T:System.Data.DataTable"></see> to the existing <see cref="T:System.Data.DataSet"></see></para>
            </summary>
            <param name="command">
            <para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to load.</para>
            </param>
            <param name="tableName">
            <para>The name for the new <see cref="T:System.Data.DataTable"/> to add to the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <seealso cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/>
            <exception cref="T:System.ArgumentNullException">Any input parameter was null</exception>
            <exception cref="T:System.ArgumentException">tableName was an empty string</exception>
        </member>
        <member name="M:Prezza.Framework.Data.Database.LoadDataSet(Prezza.Framework.Data.DBCommandWrapper,System.Data.DataSet,System.String,System.Data.IDbTransaction)">
            <summary>
            <para>Execute the <paramref name="command"/> within the given <paramref name="transaction" /> and add a new <see cref="T:System.Data.DataTable"></see> to the existing <see cref="T:System.Data.DataSet"></see></para>
            </summary>
            <param name="command">
            <para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to load.</para>
            </param>
            <param name="tableName">
            <para>The name for the new <see cref="T:System.Data.DataTable"/> to add to the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <seealso cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/>
            <exception cref="T:System.ArgumentNullException">Any input parameter was null</exception>
            <exception cref="T:System.ArgumentException">tableName was an empty string</exception>
        </member>
        <member name="M:Prezza.Framework.Data.Database.LoadDataSet(Prezza.Framework.Data.DBCommandWrapper,System.Data.DataSet,System.String[])">
            <summary>
            <para>Load a <see cref="T:System.Data.DataSet"/> from a <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/>.</para>
            </summary>
            <param name="command">
            <para>The command to execute to fill the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
        </member>
        <member name="M:Prezza.Framework.Data.Database.LoadDataSet(Prezza.Framework.Data.DBCommandWrapper,System.Data.DataSet,System.String[],System.Data.IDbTransaction)">
            <summary>
            <para>Load a <see cref="T:System.Data.DataSet"/> from a <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> in  a transaction.</para>
            </summary>
            <param name="command">
            <para>The command to execute to fill the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command in.</para>
            </param>
        </member>
        <member name="M:Prezza.Framework.Data.Database.LoadDataSet(System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            <para>Load a <see cref="T:System.Data.DataSet"/> from a <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/></para>
            </summary>
            <param name="storedProcedureName">
            <para>The stored procedure name to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
        </member>
        <member name="M:Prezza.Framework.Data.Database.LoadDataSet(System.Data.IDbTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            <para>Load a <see cref="T:System.Data.DataSet"/> from a stored procedure in  a transaction.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the stored procedure in.</para>
            </param>
            <param name="storedProcedureName">
            <para>The stored procedure name to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
        </member>
        <member name="M:Prezza.Framework.Data.Database.LoadDataSet(System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            <para>Load a <see cref="T:System.Data.DataSet"/> from command text.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
        </member>
        <member name="M:Prezza.Framework.Data.Database.LoadDataSet(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            <para>Load a <see cref="T:System.Data.DataSet"/> from command text in a transaction.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command in.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteDataSet(Prezza.Framework.Data.DBCommandWrapper)">
            <summary>
            <para>Execute the <paramref name="command"/> and return the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="command"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> to execute.</para></param>
            <returns>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="command"/>.</returns>
            <seealso cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteDataSet(Prezza.Framework.Data.DBCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            <para>Execute the <paramref name="command"/> as part of the <paramref name="transaction" /> and return the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="command"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> to execute.</para></param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="command"/>.</returns>
            <seealso cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            <para>Execute the <paramref name="storedProcedureName"/> with <paramref name="parameterValues" /> and return the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="storedProcedureName">
            <para>The stored procedure to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="storedProcedureName"/>.</para>
            </returns>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteDataSet(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            <para>Execute the <paramref name="storedProcedureName"/> ith <paramref name="parameterValues" /> as part of the <paramref name="transaction" /> and return the results in a new <see cref="T:System.Data.DataSet"/> within a transaction.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="storedProcedureName">
            <para>The stored procedure to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="storedProcedureName"/>.</para>
            </returns>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            <para>Execute the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> and return the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="commandText"/>.</para>
            </returns>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteDataSet(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            <para>Execute the <paramref name="commandText"/> as part of the given <paramref name="transaction" /> and return the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Data.DataSet"/> with the results of the <paramref name="commandText"/>.</para>
            </returns>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteScalar(Prezza.Framework.Data.DBCommandWrapper)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <returns>
            <para>The first column of the first row in the resultset.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteScalar(Prezza.Framework.Data.DBCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> within a <paramref name="transaction" />, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>
            <para>The first column of the first row in the resultset.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteScalar(System.String,System.Object[])">
            <summary>
            <para>Executes the <paramref name="storedProcedureName"/> with the given <paramref name="parameterValues" /> and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="storedProcedureName">
            <para>The stored procedure to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>The first column of the first row in the resultset.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteScalar(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            <para>Executes the <paramref name="storedProcedureName"/> with the given <paramref name="parameterValues" /> within a 
            <paramref name="transaction" /> and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="storedProcedureName">
            <para>The stored procedure to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>The first column of the first row in the resultset.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" />  and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>The first column of the first row in the resultset.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            <para>Executes the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> 
            within the given <paramref name="transaction" /> and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>The first column of the first row in the resultset.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteNonQuery(Prezza.Framework.Data.DBCommandWrapper)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns the number of rows affected.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>       
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
            <returns>Number of rows affected by the command.</returns>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteNonQuery(Prezza.Framework.Data.DBCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> within the given <paramref name="transaction" />, and returns the number of rows affected.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
            <returns>Number of rows affected by the command.</returns>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            <para>Executes the <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues" /> and returns the number of rows affected.</para>
            </summary>
            <param name="storedProcedureName">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>The number of rows affected</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteNonQuery(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            <para>Executes the <paramref name="storedProcedureName"/> using the given <paramref name="parameterValues" /> within a transaction and returns the number of rows affected.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="storedProcedureName">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>The number of rows affected</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            <para>Execute the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> and return the number of rows affected.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>The number of rows affected</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            <para>Execute the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> as part of the given <paramref name="transaction" /> and return the number of rows affected.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>The number of rows affected</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteReader(Prezza.Framework.Data.DBCommandWrapper)">
            <summary>
            <para>Executes the <paramref name="command"/> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteReader"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteReader(Prezza.Framework.Data.DBCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            <para>Executes the <paramref name="command"/> within a transaction and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="command">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteReader"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteReader(System.String,System.Object[])">
            <summary>
            <para>Executes the <paramref name="storedProcedureName"/> with the given <paramref name="parameterValues" /> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>        
            <param name="storedProcedureName">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteReader"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteReader(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            <para>Executes the <paramref name="storedProcedureName"/> with the given <paramref name="parameterValues" /> within the given <paramref name="transaction" /> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="storedProcedureName">
            <para>The command that contains the query to execute.</para>
            </param>
            <param name="parameterValues">
            <para>An array of paramters to pass to the stored procedure. The parameter values must be in call order as they appear in the stored procedure.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteReader"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            <para>Execute the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteReader"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            <para>Execute the <paramref name="commandText"/> interpreted as specified by the <paramref name="commandType" /> within the given 
            <paramref name="transaction" /> and returns an <see cref="T:System.Data.IDataReader"></see> through which the result can be read.
            It is the responsibility of the caller to close the connection and reader when finished.</para>
            </summary>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <param name="commandType">
            <para>One of the <see cref="T:System.Data.CommandType"/> values.</para>
            </param>
            <param name="commandText">
            <para>The command text to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Data.IDataReader"/> object.</para>
            </returns>
            <seealso cref="M:System.Data.IDbCommand.ExecuteReader"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.UpdateDataSet(System.Data.DataSet,System.String,Prezza.Framework.Data.DBCommandWrapper,Prezza.Framework.Data.DBCommandWrapper,Prezza.Framework.Data.DBCommandWrapper,Prezza.Framework.Data.UpdateBehavior)">
            <summary>
            <para>Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet"/>.</para>
            </summary>        
            <param name="dataSet"><para>The <see cref="T:System.Data.DataSet"/> used to update the data source.</para></param>
            <param name="tableName"><para>The name of the source table to use for table mapping.</para></param>
            <param name="insertCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Added"/></para></param>
            <param name="updateCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Modified"/></para></param>        
            <param name="deleteCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Deleted"/></para></param>        
            <param name="updateBehavior"><para>One of the <see cref="T:Prezza.Framework.Data.UpdateBehavior"/> values.</para></param>
            <returns>number of records affected</returns>
            <seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.UpdateDataSet(System.Data.DataSet,System.String,Prezza.Framework.Data.DBCommandWrapper,Prezza.Framework.Data.DBCommandWrapper,Prezza.Framework.Data.DBCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            <para>Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet"/> within a transaction.</para>
            </summary>        
            <param name="dataSet"><para>The <see cref="T:System.Data.DataSet"/> used to update the data source.</para></param>
            <param name="tableName"><para>The name of the source table to use for table mapping.</para></param>
            <param name="insertCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Added"/></para></param>
            <param name="updateCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Modified"/></para></param>        
            <param name="deleteCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Deleted"/></para></param>        
            <param name="transaction"><para>The <see cref="T:System.Data.IDbTransaction"/> to use.</para></param>
            <returns>number of records affected</returns>
            <seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.UpdateDataSet(System.Data.DataSet,System.String,Prezza.Framework.Data.DBCommandWrapper,Prezza.Framework.Data.DBCommandWrapper,Prezza.Framework.Data.DBCommandWrapper,System.Data.IDbTransaction,System.Data.DataViewRowState)">
            <summary>
            <para>Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet"/> within a transaction.</para>
            </summary>        
            <param name="dataSet"><para>The <see cref="T:System.Data.DataSet"/> used to update the data source.</para></param>
            <param name="tableName"><para>The name of the source table to use for table mapping.</para></param>
            <param name="insertCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Added"/></para></param>
            <param name="updateCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Modified"/></para></param>        
            <param name="deleteCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Deleted"/></para></param>        
            <param name="transaction"><para>The <see cref="T:System.Data.IDbTransaction"/> to use.</para></param>
            <param name="rowFilter">A DataViewRowStat to filter upon</param>
            <returns>number of records affected</returns>
            <seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.UpdateDataSet(System.Data.DataSet,System.String,Prezza.Framework.Data.DBCommandWrapper,Prezza.Framework.Data.DBCommandWrapper,Prezza.Framework.Data.DBCommandWrapper,System.Int32,Prezza.Framework.Data.UpdateBehavior)">
            <summary>
            <para>Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet"/>.</para>
            </summary>        
            <param name="dataSet"><para>The <see cref="T:System.Data.DataSet"/> used to update the data source.</para></param>
            <param name="tableName"><para>The name of the source table to use for table mapping.</para></param>
            <param name="insertCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Added"/></para></param>
            <param name="updateCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Modified"/></para></param>        
            <param name="deleteCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Deleted"/></para></param>        
            <param name="updateBatchSize"><para>The BatchSize for the update</para></param>
            <param name="updateBehavior"><para>One of the <see cref="T:Prezza.Framework.Data.UpdateBehavior"/> values.</para></param>
            <returns>number of records affected</returns>
            <seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.UpdateDataSet(System.Data.DataSet,System.String,Prezza.Framework.Data.DBCommandWrapper,Prezza.Framework.Data.DBCommandWrapper,Prezza.Framework.Data.DBCommandWrapper,System.Data.IDbTransaction,System.Int32)">
            <summary>
            <para>Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet"/> within a transaction.</para>
            </summary>        
            <param name="dataSet"><para>The <see cref="T:System.Data.DataSet"/> used to update the data source.</para></param>
            <param name="tableName"><para>The name of the source table to use for table mapping.</para></param>
            <param name="insertCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Added"/></para></param>
            <param name="updateCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Modified"/></para></param>        
            <param name="deleteCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Deleted"/></para></param>        
            <param name="transaction"><para>The <see cref="T:System.Data.IDbTransaction"/> to use.</para></param>
            <param name="updateBatchSize"><para>The BatchSize for the update</para></param>
            <returns>number of records affected</returns>
            <seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.UpdateDataSet(System.Data.DataSet,System.String,Prezza.Framework.Data.DBCommandWrapper,Prezza.Framework.Data.DBCommandWrapper,Prezza.Framework.Data.DBCommandWrapper,System.Data.IDbTransaction,System.Int32,System.Data.DataViewRowState)">
            <summary>
            <para>Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet"/> within a transaction.</para>
            </summary>        
            <param name="dataSet"><para>The <see cref="T:System.Data.DataSet"/> used to update the data source.</para></param>
            <param name="tableName"><para>The name of the source table to use for table mapping.</para></param>
            <param name="insertCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Added"/></para></param>
            <param name="updateCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Modified"/></para></param>        
            <param name="deleteCommand"><para>The <see cref="T:Prezza.Framework.Data.DBCommandWrapper"/> executed when <see cref="T:System.Data.DataRowState"/> is <seealso cref="F:System.Data.DataRowState.Deleted"/></para></param>        
            <param name="transaction"><para>The <see cref="T:System.Data.IDbTransaction"/> to use.</para></param>
            <param name="updateBatchSize"><para>The BatchSize for the update</para></param>
            <param name="rowFilter">A DataViewRowStat to filter upon</param>
            <returns>number of records affected</returns>
            <seealso cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>
        </member>
        <member name="M:Prezza.Framework.Data.Database.ClearParameterCache">
            <summary>
            Clears the parameter cache. Since there is only one parameter cache that is shared by all instances
            of this class, this clears all parameters cached for all databases.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Database.PrepareCommand(Prezza.Framework.Data.DBCommandWrapper,System.Data.IDbConnection)">
            <summary>
            <para>Assigns a <paramref name="connection"/> to the <paramref name="command"/> and discovers parameters if needed.</para>
            </summary>
            <param name="command"><para>The command that contains the query to prepare.</para></param>
            <param name="connection">The connection to assign to the command.</param>
        </member>
        <member name="M:Prezza.Framework.Data.Database.PrepareCommand(Prezza.Framework.Data.DBCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            <para>Assigns a <paramref name="transaction"/> to the <paramref name="command"/> and discovers parameters if needed.</para>
            </summary>
            <param name="command"><para>The command that contains the query to prepare.</para></param>
            <param name="transaction">The transaction to assign to the command.</param>
        </member>
        <member name="M:Prezza.Framework.Data.Database.OpenConnection">
            <summary>
            <para>Open a connection.</para>
            </summary>
            <returns>The opened connection.</returns>
        </member>
        <member name="T:Prezza.Framework.Data.DatabaseConfiguration">
            <summary>
            Configuration for database access class
            </summary>
        </member>
        <member name="F:Prezza.Framework.Data.DatabaseConfiguration.providers">
            <summary>
            Hashtable of configured database providers
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseConfiguration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseConfiguration.#ctor(System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseConfiguration.GetDatabaseSettings">
            <summary>
            Get the settings configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseConfiguration.GetDatabaseProviderConfig(System.String)">
            <summary>
            Load the configuration for the specified provider
            </summary>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="P:Prezza.Framework.Data.DatabaseConfiguration.DefaultDatabaseProvider">
            <summary>
            Get the name of the default db provider
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseConfiguration.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load the data from XML
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Prezza.Framework.Data.DatabaseFactory">
            <summary>
            Contains factory methods for creating Database objects
            </summary>
        </member>
        <member name="F:Prezza.Framework.Data.DatabaseFactory.MASTER_DB_NAME">
            <summary>
            Default name for master database when running in multi db mode
            </summary>
        </member>
        <member name="F:Prezza.Framework.Data.DatabaseFactory.DEFAULT_PROVIDER_NAME">
            <summary>
            Default database provider name
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseFactory.Initialize(Prezza.Framework.Data.IDataContextProvider)">
            <summary>
            Initialize the provider with a data context provider
            </summary>
            <param name="dataContextProvider"></param>
        </member>
        <member name="P:Prezza.Framework.Data.DatabaseFactory.CurrentDataContext">
            <summary>
            Get the current data context.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.DatabaseFactory.ConnectionStrings">
            <summary>
            Get the connection strings collection
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseFactory.LoadConnectionString(System.String,System.String)">
            <summary>
            Load connection strings for a given context.
            </summary>
            <param name="context"></param>
            <param name="databaseName"></param>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseFactory.CreateDatabase">
            <summary>
            Method for invoking a default Database object.  Reads default settings
            from the ConnectionSettings.config file.
            </summary>
            <example>
            <code>
            Database dbSvc = DatabaseFactory.CreateDatabase();
            </code>
            </example>
            <returns>Database</returns>
            <exception cref="T:System.Exception">
            <para>A error occured while reading the configuration.</para>
            </exception>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseFactory.CreateDatabase(System.String)">
            <summary>
            Method for invoking a specified Database service object.  Reads service settings
            from the ConnectionSettings.config file.
            </summary>
            <example>
            <code>
            Database dbSvc = DatabaseFactory.CreateDatabase("SQL_Customers");
            </code>
            </example>
            <param name="instanceName">configuration key for database service</param>
            <returns>Database</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">
            <para><paramref name="instanceName"/> is not defined in configuration.</para>
            <para>- or -</para>
            <para>An error exists in the configuration.</para>
            <para>- or -</para>
            <para>A error occured while reading the configuration.</para>        
            </exception>
            <exception cref="T:System.Reflection.TargetInvocationException">
            <para>The constructor being called throws an exception.</para>
            </exception>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseFactory.CreateDatabase(System.String,System.String)">
            <summary>
            Get a database object for the specified application and instance.
            </summary>
            <param name="applicationContext"></param>
            <param name="instanceName"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseFactory.InitializeProviderConnectionString(Prezza.Framework.Data.Database,System.String,System.String)">
            <summary>
            Initialize database provider connection strings.
            </summary>
            <param name="provider"></param>
            <param name="applicationContext"></param>
            <param name="instanceName"></param>
        </member>
        <member name="T:Prezza.Framework.Data.DatabaseProviderFactory">
            <summary>
            Handles creation and initialization of instances of text provider objects.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseProviderFactory.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="factoryName">Name of the provider factory.</param>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseProviderFactory.#ctor(System.String,Prezza.Framework.Data.DatabaseConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="factoryName">Name of the provider factory.</param>
            <param name="config">Globalization configuration information.</param>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseProviderFactory.CreateDefaultDatabase">
            <summary>
            Get an instance of an text provider.
            </summary>
            <returns>Instance of the default <see cref="T:Prezza.Framework.Data.Database" />.</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseProviderFactory.CreateDatabase(System.String)">
            <summary>
            Get an instance of an text provider with the specified name.
            </summary>
            <param name="providerName">Name of the provider to get an instance of.</param>
            <returns>Instance of the specified <see cref="T:Prezza.Framework.Data.Database" />.</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseProviderFactory.GetConfigurationObject(System.String)">
            <summary>
            Get the configuration object for the specified provider.
            </summary>
            <param name="providerName">Name of the provider to get configuration for.</param>
            <returns><see cref="T:Prezza.Framework.Configuration.ProviderData" /> object for the specified provider.</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseProviderFactory.GetConfigurationType(System.String)">
            <summary>
            Get the <see cref="T:System.Type" /> of the specified text provider.
            </summary>
            <param name="textProviderName">Name of the text provider.</param>
            <returns><see cref="T:System.Type" /> of the specified text provider.</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DatabaseProviderFactory.GetDefaultInstanceName">
            <summary>
            Get the name of the default text provider (if specified in the configuration).
            </summary>
            <returns>Name of the default text provider.</returns>
        </member>
        <member name="T:Prezza.Framework.Data.DataContextProvider">
            <summary>
            Base implementation of a data context provider
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.DataContextProvider.ApplicationContext">
            <summary>
            Get/set application context.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.DataContextProvider.Secured">
            <summary>
            Get/set whether application context is "secured"
            </summary>
        </member>
        <member name="T:Prezza.Framework.Data.DBCommandWrapper">
            <summary>
            <para>Represents a wrapper for <see cref="T:System.Data.IDbCommand"/> types. This class is abstract.</para>
            <seealso cref="T:System.Data.IDbCommand"/>
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.DBCommandWrapper.Command">
            <summary>
            <para>When overridden in a derived class, gets the underlying <see cref="T:System.Data.IDbCommand"/>.</para>
            </summary>
            <value>
            <para>The underlying <see cref="T:System.Data.IDbCommand"/>. The default is <see langword="null"/>.</para>
            </value>
        </member>
        <member name="P:Prezza.Framework.Data.DBCommandWrapper.RowsAffected">
            <summary>
            <para>When overridden in a derived class, gets or sets the rows affected by this command.</para>
            </summary>
            <value>
            <para>The rows affected by this command.</para>
            </value>
        </member>
        <member name="P:Prezza.Framework.Data.DBCommandWrapper.CommandTimeout">
            <summary>
            <para>When overridden in a derived class, gets or sets the wait time before terminating the attempt to execute a command and generating an error.</para>
            </summary>
            <value>
            <para>The wait time before terminating the attempt to execute a command and generating an error.</para>
            </value>
        </member>
        <member name="M:Prezza.Framework.Data.DBCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>When overridden in a derived class, adds a new instance of an <see cref="T:System.Data.IDataParameter"/> object to the command.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>Avalue indicating whether the parameter accepts null values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>       
        </member>
        <member name="M:Prezza.Framework.Data.DBCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>When overridden in a derived class, adds a new instance of an <see cref="T:System.Data.IDataParameter"/> object to the command.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>                
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>
        </member>
        <member name="M:Prezza.Framework.Data.DBCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.Int32,System.Object)">
            <summary>
            <para>When overridden in a derived class, adds a new instance of an <see cref="T:System.Data.IDataParameter"/> object to the command.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="size">Maximum size of data in the column.</param>
            <param name="value"><para>The value of the parameter.</para></param>
        </member>
        <member name="M:Prezza.Framework.Data.DBCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            <para>When overridden in a derived class, adds a new instance of an <see cref="T:System.Data.IDataParameter"/> object to the command set as <see cref="T:System.Data.ParameterDirection"/> value of Output.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="size"><para>The maximum size of the data within the column.</para></param>        
        </member>
        <member name="M:Prezza.Framework.Data.DBCommandWrapper.AddInParameter(System.String,System.Data.DbType)">
            <summary>
            <para>When overridden in a derived class, adds a new instance of an <see cref="T:System.Data.IDataParameter"/> object to the command set as <see cref="T:System.Data.ParameterDirection"/> value of Input.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <remarks>
            <para>This version of the method is used when you can have the same parameter object multiple times with different values.</para>
            </remarks>        
        </member>
        <member name="M:Prezza.Framework.Data.DBCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            <para>When overridden in a derived class,  adds a new instance of an <see cref="T:System.Data.IDataParameter"/> object to the command set as <see cref="T:System.Data.ParameterDirection"/> value of Input.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:Prezza.Framework.Data.DBCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            <para>When overridden in a derived class, adds a new instance of an <see cref="T:System.Data.IDataParameter"/> object to the command set as <see cref="T:System.Data.ParameterDirection"/> value of Input.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the value.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
        </member>
        <member name="M:Prezza.Framework.Data.DBCommandWrapper.GetParameterValue(System.String)">
            <summary>
            <para>When overridden in a derived class, returns the value of the parameter for the given <paramref name="name"/>.</para>
            </summary>
            <param name="name"><para>The name of the parameter to get the value.</para></param>
            <returns><para>The value of the parameter.</para></returns>
        </member>
        <member name="M:Prezza.Framework.Data.DBCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            <para>When overridden in a derived class, sets the value of a parameter for the given <paramref name="name"/>.</para>
            </summary>
            <param name="name"><para>The name of the parameter to set the value.</para></param>
            <param name="value"><para>The new value of the parameter.</para></param>
        </member>
        <member name="M:Prezza.Framework.Data.DBCommandWrapper.DiscoverParameters(System.Char)">
            <summary>
            Populate the parameter collection for a stored procedure by querying the database
            or loading a cached parameter set.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.DBCommandWrapper.IsFurtherPreparationNeeded">
            <summary>
            Determine if the parameters collection needs to be populated 
            using parameter discovery
            </summary>
            <returns>true if parameter discovery is needed</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DBCommandWrapper.AssignParameterValues">
            <summary>
            Assign values to parameters in positional orders
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.DBCommandWrapper.DoDiscoverParameters(System.Char)">
            <summary>
            <para>When overridden in a derived class, discover the parameters for a stored procedure using a separate connection and command.</para>
            </summary>
            <param name="parameterToken"><para>The parameter delimeter for database commands.</para></param>
        </member>
        <member name="M:Prezza.Framework.Data.DBCommandWrapper.DoAssignParameterValues">
            <summary>
            <para>When overridden in a derived class, assign the values provided by a user to the command parameters discovered in positional order.</para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <para>The number of parameters does not match number of values for stored procedure.</para>
            </exception>
        </member>
        <member name="M:Prezza.Framework.Data.DBCommandWrapper.DoIsFurtherPreparationNeeded">
            <summary>
            <para>When overridden in a derived class, determine if a stored procedure is using parameter discovery.</para>
            </summary>
            <returns>
            <para><see langword="true"/> if further preparation is needed.</para>
            </returns>
        </member>
        <member name="M:Prezza.Framework.Data.DBCommandWrapper.Dispose">
            <summary>
            <para>When overridden in a derived class, clean up resources.</para>
            </summary>
        </member>
        <member name="T:Prezza.Framework.Data.DbNonQueryTransactionWrapper">
            <summary>
            Summary description for DbTransactionWrapper.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Data.DbNonQueryTransactionWrapper.NonQueries">
            <summary>
            An <see cref="T:System.Collections.ArrayList"/> collection of <see cref="T:Prezza.Framework.Data.DbNonQueryTransactionWrapper.NonQuery"/> objects
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.DbNonQueryTransactionWrapper.AddNonQuery(System.String)">
            <summary>
            Adds a <see cref="T:Prezza.Framework.Data.DbNonQueryTransactionWrapper.NonQuery"/> to the transaction
            </summary>
            <param name="commandText">a sql command to execute</param>
        </member>
        <member name="M:Prezza.Framework.Data.DbNonQueryTransactionWrapper.AddNonQuery(System.String,System.Object[])">
            <summary>
            Adds a <see cref="T:Prezza.Framework.Data.DbNonQueryTransactionWrapper.NonQuery"/> to the transaction
            </summary>
            <param name="storedProcedureName">a stored procedure to execute</param>
            <param name="commandParameters">a parameterized array of IDataParamater objects</param>
        </member>
        <member name="T:Prezza.Framework.Data.DbNonQueryTransactionWrapper.NonQuery">
            <summary>
            A Parameter class to hold NonQuery info used in execution within a DbNonQueryTransactionWrapper
            </summary>
        </member>
        <member name="F:Prezza.Framework.Data.DbNonQueryTransactionWrapper.NonQuery.CommandType">
            <summary>
            The <see cref="F:Prezza.Framework.Data.DbNonQueryTransactionWrapper.NonQuery.CommandType"/> to execute
            </summary>
        </member>
        <member name="F:Prezza.Framework.Data.DbNonQueryTransactionWrapper.NonQuery.CommandText">
            <summary>
            The CommandText
            </summary>
        </member>
        <member name="F:Prezza.Framework.Data.DbNonQueryTransactionWrapper.NonQuery.CommandParameters">
            <summary>
            A collection of IDataParameters
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.DbNonQueryTransactionWrapper.NonQuery.#ctor(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="commandText">the CommandText</param>
            <param name="type">the <see cref="F:Prezza.Framework.Data.DbNonQueryTransactionWrapper.NonQuery.CommandType"/></param>
            <param name="commandParameters">a collection of IDataParameters</param>
        </member>
        <member name="T:Prezza.Framework.Data.DbUtility">
            <summary>
            Various database utility routines that don't fit in their own classes.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.GetTableColumnNames(System.String)">
            <summary>
            Get the names of columns in a given table.
            </summary>
            <param name="tableName">Table to get column names from.f</param>
            <returns>String array with column names.</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.DeleteImage(System.Int32)">
            <summary>
            Delete an image with the specified id
            </summary>
            <param name="imageID"></param>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.DeleteTempImages">
            <summary>
            Delete temporary images more than 1 hour old
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.SaveImage(System.Byte[],System.String,System.String,System.String,System.String)">
            <summary>
            Save the specified image information to the database.
            </summary>
            <param name="file">Image file name.</param>
            <param name="contentType">Image content type.</param>
            <param name="imageUrl">URL of image.</param>
            <param name="imageName">Name of image.</param>
            <param name="guid">GUID to associate with the image.</param>
            <returns>Database ID associated with image.</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.SaveImage(System.Byte[],System.String,System.String,System.String,System.String,System.DateTime,System.Boolean)">
            <summary>
            Save the specified image information to the database.
            </summary>
            <param name="file">Image file name.</param>
            <param name="contentType">Image content type.</param>
            <param name="imageUrl">URL of image.</param>
            <param name="imageName">Name of image.</param>
            <param name="guid">GUID to associate with the image.</param>
            <param name="createdDate">Created date for the image.</param>
            <param name="isTemporary">Indicates if the image is temporary.</param>
            <returns>Database ID associated with image.</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.GetImageContentType(System.String)">
            <summary>
            
            </summary>
            <param name="imageName"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.GetImage(System.Int32)">
            <summary>
            Get a data reader with information about the specified image.
            </summary>
            <param name="imageID">ID of image.</param>
            <returns><see cref="T:System.Data.IDataReader"/> object.</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.FindImage(System.String,System.Boolean)">
            <summary>
            Get a list of image ids for an image with the specified name
            </summary>
            <param name="imageName">Name of the image to find.</param>
            <param name="onlyInDb">When true, only images with data in database will be returned</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.ValidateDataIsType(System.Object,System.Type,System.Boolean)">
            <summary>
            Validate that a DBValue is of the specified type.
            </summary>
            <param name="propValue">Value to check.</param>
            <param name="propType">Type to validate.</param>
            <param name="nullAllowed">Indicates that a DB Null value is ok.</param>
            <returns>True if type validated, false otherwise.</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.GetValueFromDataTable``1(System.Data.DataTable,System.String,System.String,System.String,``0)">
            <summary>
            Get a value from a table.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <param name="table">Table to select from.</param>
            <param name="columnName">Name of column.</param>
            <param name="filter">Filter string.</param>
            <param name="sort">Sort String.</param>
            <param name="defaultValue">Default value to return if value in table is not found or is DBNull.Value</param>
            <returns>Value</returns>
            <remarks>If more than one row exists that matches the filter, the value will be taken from the first row.</remarks>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.GetValueFromDataRow``1(System.Data.DataRow,System.String,``0)">
            <summary>
            Get a value from a table row
            </summary>
            <typeparam name="T">Type of return parameter.</typeparam>
            <param name="tableRow">Table row.</param>
            <param name="columnName">Column name.</param>
            <param name="defaultValue">Default value to return for null value or column does not exist.</param>
            <returns>Value</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.GetValueFromDataReader``1(System.Data.IDataReader,System.String,``0)">
            <summary>
            Get a value from a data reader
            </summary>
            <typeparam name="T">Type of return parameter.</typeparam>
            <param name="reader">Data reader</param>
            <param name="columnName">Column name.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Value</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.ChangeType(System.Object,System.Type)">
            <summary>
            This is helper method, which handles nullable types additionally.
            </summary>
            <param name="value"></param>
            <param name="newType"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.ListDataColumnValues``1(System.Data.DataTable,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get a list of values from a specific column.
            </summary>
            <typeparam name="T">Type of items to return.</typeparam>
            <param name="table">Table to select from.</param>
            <param name="columnName">Name of the column to return values for.</param>
            <param name="filter">Filter string.</param>
            <param name="sort">Sort string.</param>
            <param name="uniqueOnly">Specify whether to return only unique values.</param>
            <returns>List of items from the specific column.</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.CountValues(System.Data.DataTable,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Count the number of distinct values for a column in a table.
            </summary>
            <param name="table">Table to count values in.</param>
            <param name="columnName">Column name to count distinct values of.</param>
            <param name="filterString">Filter for results.</param>
            <param name="includeNull">Include null values in the count.</param>
            <param name="uniqueOnly">Include only unique values.</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.ColumnValuesEqual(System.Object,System.Object)">
            <summary>
            Return a boolean indicating if two objects are equal.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.GetDataPage(System.Data.DataTable,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a a page of data from the input data table
            </summary>
            <param name="table"></param>
            <param name="pageNumber"></param>
            <param name="resultsPerPage"></param>
            <param name="totalRows"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.PageDataTableInMemory(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Handles the paging of a DataTable in memory.
            </summary>
            <param name="data">The superset of data.</param>
            <param name="pageNumber">The page number to display.</param>
            <param name="resultsPerPage">The number of results displayed per page.</param>
            <returns>A DataTable which contains the subset of rows needed to display a specific page of data.</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbUtility.EscapeValue(System.String,System.Boolean)">
            <summary>
            </summary>
            <param name="literal"></param>
            <param name="ignoreBoundingQuotes"></param>
            <returns></returns>
        </member>
        <member name="T:Prezza.Framework.Data.DbWrapper">
            <summary>
            	The DbWrapper encapsulates ADO.NET code for data access w/ an OleDb compliant data source.
            </summary>
            <example>
            This examples show the use the DbWrapper class static methods
            <code>
            DbWrapper.ExecuteNonQuery("stored_Proc_Name", DbWrapper.GetParameter(DbType.Int32, ParameterDirection.Input, 1000));
            
            IDataReader reader = DbWrapper.ExecuteDataReader("stored_Proc_Name", DbWrapper.GetParameter(DbType.Int32, ParameterDirection.Input, 1000));
            
            DataSet ds = DbWrapper.ExecuteExecute("stored_Proc_Name", DbWrapper.GetParameter(DbType.Int32, ParameterDirection.Input, 1000));
            </code>
            </example>
            <remarks>	
            	Date: 8.26.2003
            	Copyright 2003 Prezza Software, Inc.
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.#ctor">
            <summary>
            	The constructor of this class is private since all public functions are static
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.ExecuteDataReader(System.String)">
            <summary>
            	Executes a SQL command and returns a <see cref="T:System.Data.IDataReader"/>
            </summary>
            <remarks>
            	Date: 8.26.2003
            	Copyright 2003 Prezza Software, Inc.
            </remarks>
            <param name="selectQueryText">The SQL command to execute</param>
            <returns><see cref="T:System.Data.IDataReader"/> with results of query</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.ExecuteDataReader(System.String,System.String)">
            <summary>
            	Executes a SQL command and returns a <see cref="T:System.Data.IDataReader" />
            </summary>
            <param name="selectQueryText">The SQL command to execute</param>
            <param name="connectionString">Connection string for database connection</param>
            <returns><see cref="T:System.Data.IDataReader"/> with results of the query</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.ExecuteDataReader(System.String,System.String,System.Object[])">
            <summary>
            	Executes a SQL command and returns a <see cref="T:System.Data.IDataReader" />
            </summary>
            <param name="selectQueryText">The SQL command to execute</param>
            <param name="connectionString">Connection string for database connection</param>
            <param name="parameters">Query parameters</param>
            <returns><see cref="T:System.Data.IDataReader"/> with results of the query</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.ExecuteDataReader(System.String,System.Object[])">
            <summary>
            	Executes a SQL command and returns a <see cref="T:System.Data.IDataReader"/>.  
            	This version accepts parameters for a stored proc
            </summary>
            <remarks>
            	Date: 8.26.2003
            	Copyright 2003 Prezza Software, Inc.
            </remarks>
            <param name="storedProcedureName">The Stored Procedure to execute</param>
            <param name="parameterValues">An array containing the parameters passed to this SP</param>
            <returns><see cref="T:System.Data.IDataReader"/> with results of query</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.ExecuteDataReader(System.Data.CommandType,System.String,System.Data.OleDb.OleDbConnection,System.Object[])">
            <summary>
            	This is the private implementation of the public interfaces.  It executes the SQL
            	command and returns a <see cref="T:System.Data.IDataReader"/>
            </summary>
            <remarks>
            	Date: 8.26.2003
            	Copyright 2003 Prezza Software, Inc.
            </remarks>
            <param name="commandType">Specifies if this is a stored proc or plain SQL</param>
            <param name="commandText">The SQL command to execute</param>
            <param name="connection">The connection to the OleDb data source</param>
            <param name="parameterValues">An array containing the parameters passed to this SP</param>
            <returns><see cref="T:System.Data.IDataReader"/> with results of query</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.ExecuteDataSet(System.String)">
            <summary>
            	Executes a SQL command and returns a <see cref="T:System.Data.DataSet"/>
            </summary>
            <remarks>
            	Date: 8.26.2003
            	Copyright 2003 Prezza Software, Inc.
            </remarks>
            <param name="selectQueryText">The SQL command to execute</param>
            <returns><see cref="T:System.Data.DataSet"/> with results of query</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            	Executes a SQL command and returns a <see cref="T:System.Data.DataSet"/>.  
            	This version accepts parameters for a stored proc
            </summary>
            <remarks>
            	Date: 8.26.2003
            	Copyright 2003 Prezza Software, Inc.
            </remarks>
            <param name="storedProcedureName">The Stored Procedure to execute</param>
            <param name="parameterValues">An array containing the parameters passed to this SP</param>
            <returns><see cref="T:System.Data.DataSet"/> with results of query</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.ExecuteDataSet(System.String,System.Data.DataSet,System.Object[])">
            <summary>
            	Executes a SQL command and returns a <see cref="T:System.Data.DataSet"/>.  
            	This version accepts parameters for a stored proc
            </summary>
            <param name="storedProcedureName"></param>
            <param name="dataObject"></param>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.DataSet,System.Data.OleDb.OleDbConnection,System.Object[])">
            <summary>
            	This is the private implementation of the public interfaces.  It executes the SQL
            	command and returns a <see cref="T:System.Data.DataSet"/>
            </summary>
            <remarks>
            	Date: 8.26.2003
            	Copyright 2003 Prezza Software, Inc.
            </remarks>
            <param name="commandType">Specifies if this is a stored proc or plain SQL</param>
            <param name="commandText">The SQL command to execute</param>
            <param name="dataObject">A DataSet to fill</param>
            <param name="connection">The connection to the SQL server DB</param>
            <param name="parameterValues">An array containing the parameters passed to this SP</param>
            <returns><see cref="T:System.Data.DataSet"/> with results of query</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.ExecuteNonQuery(System.String)">
            <summary>
            	Executes a SQL command that returns no data (e.g. Insert)
            </summary>
            <remarks>
            	Date: 8.26.2003
            	Copyright 2003 Prezza Software, Inc.
            </remarks>
            <param name="commandText">The SQL command to execute</param>
            <returns>The number of rows affected by the query</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.ExecuteNonQuery(System.String,System.Data.IDbConnection)">
            <summary>
            This method allows the user to pass in a <see cref="T:System.Data.IDbConnection"/> object
            </summary>
            <param name="commandText">An sql command to execute</param>
            <param name="connection"><see cref="T:System.Data.IDbConnection"/></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            	Executes a SQL command that returns no data (e.g. Insert)
            	This version can handle parameters (both input and output)
            	If you use input/output params, default values 
            	will be ignored.
            </summary>
            <remarks>
            	Date: 8.26.2003
            	Copyright 2003 Prezza Software, Inc.
            </remarks>
            <param name="storedProcedureName">The name of the stored procedure to execute</param>
            <param name="commandParameters">The parameters to pass to/from the stored proc</param>
            <returns>The number of rows affected by the query</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.ExecuteNonQuery(Prezza.Framework.Data.DbNonQueryTransactionWrapper)">
            <summary>
            Execute a non-query using the passed transaction wrapper.
            </summary>
            <param name="nonQueryTransaction">Wrapper for transaction consisting of non-query statements.</param>
            <returns>Rows affected by query.</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.ExecuteNonQuery(System.Data.CommandType,System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            	This is the private implementation of the public interfaces.  It executes the SQL
            	command and returns the number of rows affected
            </summary>
            <remarks>
            	Date: 8.26.2003
            	Copyright 2003 Prezza Software, Inc.
            </remarks>
            <param name="commandType">Indicates whether to execute a stored proc or raw TSQL</param>
            <param name="connection">The connection to use</param>
            <param name="commandText">The SQL or SP name to execute</param>
            <param name="commandParameters">The parameters to pass to the stored proc</param>
            <returns>The number of rows affected by the query</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.AttachParameters(System.String,System.Data.OleDb.OleDbCommand,System.String,System.Boolean,System.Object[])">
            <summary>
            	This method attaches any parameters needed to a stored procedure being executed
            	It derives the params needed by an SP from the DB, then caches the results for
            	future calls
            </summary>
            <remarks>
            	Date: 8.26.2003
            	Copyright 2003 Prezza Software, Inc.
            </remarks>
            <param name="connectionString">Connection string to the database</param>
            <param name="command">The command object the parameters are being attached to</param>
            <param name="storedProcedureName">Name of the SP we will discover params for</param>
            <param name="includeReturnValueParameter">Indicates if there are output params</param>
            <param name="parameterValues">Array of parameter values</param>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.CloneParameters(System.Data.OleDb.OleDbParameter[])">
            <summary>
            	Clones the parameter object so we don't get the "parameter already
            	exists" error
            </summary>
            <remarks>
            	Date: 8.26.2003
            	Copyright 2003 Prezza Software, Inc.
            </remarks>
            <param name="originalParameters">Array of OleDbParameter objects to be cloned</param>
            <returns>Copy of array of OleDbParameter objects</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.GetConnectionString">
            <summary>
            	Gets the default connection string stored in the .config file
            </summary>
            <remarks>
            	Date: 8.26.2003
            	Copyright 2003 Prezza Software, Inc.
            </remarks>
            <returns>Connection string</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.GetConnectionString(System.String)">
            <summary>
            	Gets a connection string stored in the .config file
            </summary>
            <remarks>
            	Date: 8.26.2003
            	Copyright 2003 Prezza Software, Inc.
            </remarks>
            <param name="connectionAlias">Alias of the connection string in the .config file</param>
            <returns>Connection string</returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.GetParameter">
            <summary>
            Gets an object of type <see cref="T:System.Data.IDataParameter"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.GetParameter(System.Object)">
            <summary>
            Gets an object of type <see cref="T:System.Data.IDataParameter"/> with its Value propery
            set to the argument
            </summary>
            <param name="parameterValue">The value of the parameter</param>
            <returns><see cref="T:System.Data.IDataParameter"/></returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.GetParameter(System.Data.DbType,System.Object)">
            <summary>
            Creates an IDataParameter object with the given arguments as properties
            </summary>
            <param name="dbtype">The DbType for the parameter</param>
            <param name="parameterValue">The object to assign as the parameter.Value</param>
            <returns>An <see cref="T:System.Data.IDataParameter"/></returns>
        </member>
        <member name="M:Prezza.Framework.Data.DbWrapper.GetParameter(System.Data.DbType,System.Data.ParameterDirection,System.Object)">
            <summary>
            Gets an object of type <see cref="T:System.Data.IDataParameter"/> with its Value, Direction and DbType
            properties set
            </summary>
            <param name="dbtype"><see cref="T:System.Data.DbType"/></param>
            <param name="direction"><see cref="T:System.Data.ParameterDirection"/></param>
            <param name="parameterValue">A value for the parameter</param>
            <returns><see cref="T:System.Data.IDataParameter"/></returns>
        </member>
        <member name="T:Prezza.Framework.Data.ExpectedDataNotFoundException">
            <summary>
            Describes an exception related to missing data when performing a query on a datasource
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.ExpectedDataNotFoundException.#ctor">
            <summary>
            Describes an exception related to missing data when performing a query on a datasource
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.ExpectedDataNotFoundException.#ctor(System.String)">
            <summary>
            Describes an exception related to missing data when performing a query on a datasource
            </summary>
            <param name="message">Message for exception.</param>
        </member>
        <member name="T:Prezza.Framework.Data.GenericDbParameter">
            <summary>
            Generic db agnostic db parameter for internal use in checkbox
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.GenericDbParameter.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.GenericDbParameter.#ctor(System.String,System.Data.DbType,System.Object)">
            <summary>
            </summary>
            <param name="parameterName"></param>
            <param name="dbType"></param>
            <param name="value"></param>
        </member>
        <member name="T:Prezza.Framework.Data.IDataContextProvider">
            <summary>
            Definition of interface for object that provides contextual data for database access.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.IDataContextProvider.ApplicationContext">
            <summary>
            Get the name of the application context to use.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.IDataContextProvider.Secured">
            <summary>
            Get whether context is secure or not.  It is up to consumers of the 
            context provider and the context provider itself to agree upon what this means
            exactly.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Data.ParameterCache">
            <summary>
            <para>
            Provides parameter caching services for dynamic parameter discovery of stored procedures.
            Eliminates the round-trip to the database to derive the parameters and types when a command
            is executed more than once.
            </para>
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.ParameterCache.FillParameters(Prezza.Framework.Data.DBCommandWrapper,System.Char)">
            <summary>
            <para>
            Populates the parameter collection for a command wrapper from the cache 
            or performs a round-trip to the database to query the parameters
            </para>
            </summary>
            <param name="command">
            <para>The command to add the parameters.</para>
            </param>
            <param name="parameterToken">
            <para>The token used to delimit parameters.</para>
            </param>
        </member>
        <member name="M:Prezza.Framework.Data.ParameterCache.Clear">
            <summary>
            <para>Empty the parameter cache</para>
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.ParameterCache.AlreadyCached(Prezza.Framework.Data.DBCommandWrapper)">
            <summary>
            <para>Checks to see if a cache entry exists for a specific command on a specific connection</para>
            </summary>
            <param name="command">
            <para>The command to check.</para>
            </param>
            <returns>True if the parameters are already cached for the provided command, false otherwise</returns>
        </member>
        <member name="M:Prezza.Framework.Data.ParameterCache.AddParametersFromCache(Prezza.Framework.Data.DBCommandWrapper)">
            <summary>
            <para>Adds parameters to a command using the cache</para>
            </summary>
            <param name="command">
            <para>The command to add the parameters.</para>
            </param>
        </member>
        <member name="T:Prezza.Framework.Data.Sprocs.DeleteParameter">
            <summary>
            Paramter for delete sprocs
            </summary>
        </member>
        <member name="T:Prezza.Framework.Data.Sprocs.DeleteProcedure">
            <summary>
            Stored procedure for fetching data
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.DeleteProcedure.#ctor(System.String)">
            <summary>
            Constructor that accepts the name of the procedure
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Prezza.Framework.Data.Sprocs.InsertProcedure">
            <summary>
            Stored procedure for fetching data
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.InsertProcedure.#ctor(System.String)">
            <summary>
            Constructor that accepts the name of the procedure
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Prezza.Framework.Data.Sprocs.UpdateProcedure">
            <summary>
            Stored procedure for fetching data
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.UpdateProcedure.#ctor(System.String)">
            <summary>
            Constructor that accepts the name of the procedure
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Prezza.Framework.Data.Sprocs.ProcedureReflectionInfo">
            <summary>
            Store for procedure information gleaned through reflection
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.ProcedureReflectionInfo.#ctor">
            <summary>
            Constructor -- Intializes parameter dictionary
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.ProcedureReflectionInfo.Name">
            <summary>
            Get/set the procedure name
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.ProcedureReflectionInfo.Parameters">
            <summary>
            Get the parameters
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.ProcedureReflectionInfo.AddParameter(System.String,Prezza.Framework.Data.Sprocs.ParameterReflectionInfo)">
            <summary>
            Add a parameter to the collection
            </summary>
            <param name="parameterName"></param>
            <param name="info"></param>
        </member>
        <member name="T:Prezza.Framework.Data.Sprocs.ParameterReflectionInfo">
            <summary>
            Container
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.ParameterReflectionInfo.#ctor(System.Int32,System.String,System.Data.DbType,System.Data.ParameterDirection,System.Boolean,System.Boolean,System.Reflection.PropertyInfo)">
            <summary>
            Construct a new parameter info
            </summary>
            <param name="size">Size of the parameter's data.</param>
            <param name="name">Name of the parameter.</param>
            <param name="dbType">DBType of the parameter.</param>
            <param name="direction">Parameter direction.</param>
            <param name="convertDBNullToNull">Specify DBNull should be converted to null for output.</param>
            <param name="allowNull">Specify whether a null value is allowed for the parameter.</param>
            <param name="property">Associated property.</param>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.ParameterReflectionInfo.AllowNull">
            <summary>
            Get/set whether null allowed
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.ParameterReflectionInfo.Size">
            <summary>
            Get parameter data size
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.ParameterReflectionInfo.Name">
            <summary>
            Get parameter name
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.ParameterReflectionInfo.Direction">
            <summary>
            Get the parameter direction
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.ParameterReflectionInfo.DbType">
            <summary>
            Get the DB Type
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.ParameterReflectionInfo.Property">
            <summary>
            Get the field info
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.ParameterReflectionInfo.ConvertDBNullToNull">
            <summary>
            Get/set whether to convert DBNull to null for out parameters or return values.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Data.Sprocs.StoredProcedureExtractionFailure">
            <summary>
            Exception when extracting stored procedure parameters
            </summary>
        </member>
        <member name="T:Prezza.Framework.Data.Sprocs.FetchParameter">
            <summary>
            Parameter for fetch procedures
            </summary>
        </member>
        <member name="T:Prezza.Framework.Data.Sprocs.FetchProcedure">
            <summary>
            Stored procedure for fetching data
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.FetchProcedure.#ctor(System.String)">
            <summary>
            Constructor that accepts the name of the procedure
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Prezza.Framework.Data.Sprocs.FetchResult">
            <summary>
            Mark a field as accepting a value from a fetch operation
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.FetchResult.#ctor(System.String)">
            <summary>
            Construct a new fetch result with the source field
            </summary>
            <param name="sourceFieldName"></param>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.FetchResult.SourceField">
            <summary>
            Get the name of the source field
            </summary>
        </member>
        <member name="T:Prezza.Framework.Data.Sprocs.InsertParameter">
            <summary>
            Parameter for insert sprocs
            </summary>
        </member>
        <member name="T:Prezza.Framework.Data.Sprocs.SprocParameter">
            <summary>
            Stored procedure parameter
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.SprocParameter.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.SprocParameter.Size">
            <summary>
            Get set parameter size
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.SprocParameter.AllowNull">
            <summary>
            Get/set whether null should be set
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.SprocParameter.Name">
            <summary>
            Get/set parameter name
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.SprocParameter.DbType">
            <summary>
            Get/set db type
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.SprocParameter.Direction">
            <summary>
            Parameter direction
            </summary>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.SprocParameter.ConvertDBNullToNull">
            <summary>
            Get/set whether to convert DBNullToNull for output parameters.  Default is true.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Data.Sprocs.StoredProcedure">
            <summary>
            Stored procedure attribute
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.StoredProcedure.#ctor(System.String)">
            <summary>
            Constructor that accepts the name
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Prezza.Framework.Data.Sprocs.StoredProcedure.Name">
            <summary>
            Get the stored procedure name
            </summary>
        </member>
        <member name="T:Prezza.Framework.Data.Sprocs.ProcedureType">
            <summary>
            Procecure type
            </summary>
        </member>
        <member name="F:Prezza.Framework.Data.Sprocs.ProcedureType.Select">
            <summary>
            Select/Fetch Procedure
            </summary>
        </member>
        <member name="F:Prezza.Framework.Data.Sprocs.ProcedureType.Insert">
            <summary>
            Insert/Create procedure
            </summary>
        </member>
        <member name="F:Prezza.Framework.Data.Sprocs.ProcedureType.Update">
            <summary>
            Update procedure
            </summary>
        </member>
        <member name="F:Prezza.Framework.Data.Sprocs.ProcedureType.Delete">
            <summary>
            Delete procedure
            </summary>
        </member>
        <member name="T:Prezza.Framework.Data.Sprocs.StoredProcedureCommandExtractor">
            <summary>
            Static extractor to create a db command wrapper to extract
            stored procedure command objects from objects by reflection
            and use of attributes.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.StoredProcedureCommandExtractor.ExecuteProcedure(Prezza.Framework.Data.Sprocs.ProcedureType,System.Object)">
            <summary>
            Execute a procedure on the object.  Throws an error if the procedure can't be determined or an
            error occurs while running it.
            </summary>
            <param name="procedureType">Procedure type</param>
            <param name="theObject">Object value.</param>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.StoredProcedureCommandExtractor.ExecuteProcedure(System.String,Prezza.Framework.Data.Sprocs.ProcedureType,System.Object)">
            <summary>
            Execute a procedure on the object.  Throws an error if the procedure can't be determined or an
            error occurs while running it.
            </summary>
            <param name="databaseName">Name of the database.</param>
            <param name="procedureType">Procedure type</param>
            <param name="theObject">Object value.</param>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.StoredProcedureCommandExtractor.PopulateObjectFromReaderReturnValues(System.Data.IDataReader,System.Object)">
            <summary>
            Populate object properties with values from a data reader.
            </summary>
            <param name="reader"></param>
            <param name="theObject"></param>
            <remarks>This method does not handle any exceptions, it is up to the caller to 
            handle exceptions and properly dispose the reaer.</remarks>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.StoredProcedureCommandExtractor.ExecuteProcedure(System.String,System.String,Prezza.Framework.Data.Sprocs.ProcedureType,System.Object)">
            <summary>
            Execute a procedure on the object.  Throws an error if the procedure can't be determined or an
            error occurs while running it.
            </summary>
            <param name="instanceName">Name of application instance.</param>
            <param name="databaseName">Name of the database.</param>
            <param name="procedureType">Procedure type</param>
            <param name="theObject">Object value.</param>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.StoredProcedureCommandExtractor.PopulateObjectFromReaderReturnValues(System.Data.IDataReader,System.Object,Prezza.Framework.Data.Sprocs.ProcedureReflectionInfo)">
            <summary>
            Populate an objects properties using values from the specified reader and by reading
            fetch parameter attributes with a ReturnValue direction.
            </summary>
            <param name="reader"></param>
            <param name="theObject"></param>
            <param name="procedureInfo"></param>
            <remarks>This method does not handle any exceptions, it is up to the caller to 
            handle exceptions and properly dispose the reaer.</remarks>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.StoredProcedureCommandExtractor.GetCommandWrapper(Prezza.Framework.Data.Sprocs.ProcedureType,System.Object,System.Boolean)">
            <summary>
            Extract a command wrapper for the object.  Null is returned if the wrapper
            could not be extracted.  An exception will be thrown if errorOnFailure is true
            and a command could not be extracted.  The command will be created using
            the default database object.
            </summary>
            <param name="procedureType">Type of procedure to get</param>
            <param name="theObject">Object to extract command from.</param>
            <param name="errorOnFailure">Throw an error on failure or not.</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.StoredProcedureCommandExtractor.GetCommandWrapper(System.String,System.String,Prezza.Framework.Data.Sprocs.ProcedureType,System.Object,System.Boolean)">
            <summary>
            Extract a command wrapper for the object.  Null is returned if the wrapper
            could not be extracted.  An exception will be thrown if errorOnFailure is true
            and a command could not be extracted.  The command will be 
            </summary>
            <param name="instanceName">Name of application instance.</param>
            <param name="databaseName">Name of the database to use.</param>
            <param name="procedureType">Type of procedure to get</param>
            <param name="theObject">Object to extract command from.</param>
            <param name="errorOnFailure">Throw an error on failure or not.</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.StoredProcedureCommandExtractor.GetCommandWrapper(System.String,System.String,Prezza.Framework.Data.Sprocs.ProcedureReflectionInfo,System.Object)">
            <summary>
            Get a command wrapper based on the provided procedure reflection information and
            the object.
            </summary>
            <param name="instanceName">Application instance name</param>
            <param name="databaseName">Name of database config to use.</param>
            <param name="procedureInfo">Procedure information.</param>
            <param name="theObject">Object</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.StoredProcedureCommandExtractor.GetProcedureInformation(Prezza.Framework.Data.Sprocs.ProcedureType,System.Object)">
            <summary>
            Get procedure information for the object
            </summary>
            <param name="procedureType">Procedure type</param>
            <param name="theObject">Object</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Prezza.Framework.Data.Sprocs.StoredProcedureCommandExtractor.ExtractInformation(System.Type,System.Type,System.Object)">
            <summary>
            Extract query 
            </summary>
            <param name="queryAttributeType">Type of query attribute to check.</param>
            <param name="parameterType">Type of parameter to check for query params</param>
            <param name="theObject">Object to extract parameters from.</param>
        </member>
        <member name="T:Prezza.Framework.Data.Sprocs.UpdateParameter">
            <summary>
            Parameter for update sprocs
            </summary>
        </member>
        <member name="T:Prezza.Framework.Data.Sql.SqlCommandWrapper">
            <summary>
            <para>Represents a SQL statement or stored procedure to execute against a Sql Server database.</para>
            </summary>   
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.#ctor(System.String,System.Data.CommandType,System.Char)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Prezza.Framework.Data.Sql.SqlCommandWrapper"/> class with the text of a query and the _command type.</para>
            </summary>
            <param name="commandText"><para>The stored procedure name or SQL sting the _command represents.</para></param>
            <param name="commandType"><para>One of the <see crer="CommandType"/> values.</para></param>
            <param name="parameterToken"><para>The parameter delimeter for database commands.</para></param>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.#ctor(System.String,System.Data.CommandType,System.Char,System.Object[])">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Prezza.Framework.Data.Sql.SqlCommandWrapper"/> class with the text of a query the _command type, and the parameter values.</para>
            </summary>        
            <param name="commandText"><para>The stored procedure name or SQL sting the _command represents.</para></param>
            <param name="commandType"><para>One of the <see crer="CommandType"/> values.</para></param>
            <param name="parameterToken"><para>The parameter delimeter for database commands.</para></param>
            <param name="parameterValues"><para>The parameter values to assign in positional order.</para></param>
        </member>
        <member name="P:Prezza.Framework.Data.Sql.SqlCommandWrapper.Command">
            <summary>
            <para>Gets the underlying <see cref="T:System.Data.IDbCommand"/>.</para>
            </summary>
            <value>
            <para>The underlying <see cref="T:System.Data.IDbCommand"/>. The default is <see langword="null"/>.</para>
            </value>
            <remarks>
            <para>This _command is a <see cref="T:System.Data.SqlClient.SqlCommand"/></para>        
            </remarks>        
            <seealso cref="T:System.Data.SqlClient.SqlCommand"/>
        </member>
        <member name="P:Prezza.Framework.Data.Sql.SqlCommandWrapper.RowsAffected">
            <summary>
            <para>Gets or sets the rows affected by this _command.</para>
            </summary>
            <value>
            <para>The rows affected by this _command.</para>
            </value>
        </member>
        <member name="P:Prezza.Framework.Data.Sql.SqlCommandWrapper.CommandTimeout">
            <summary>
            <para>Gets or sets the wait time before terminating the attempt to execute a _command and generating an error.</para>
            </summary>
            <value>
            <para>The wait time before terminating the attempt to execute a _command and generating an error.</para>
            </value>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.SqlClient.SqlParameter"/> object to the _command.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>Avalue indicating whether the parameter accepts null values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>       
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.AddParameter(System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.SqlClient.SqlParameter"/> object to the _command.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="sqlType"><para>One of the <see cref="T:System.Data.SqlDbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>Avalue indicating whether the parameter accepts null values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.SqlClient.SqlParameter"/> object to the _command.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>                
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>    
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.AddParameter(System.String,System.Data.DbType,System.Data.ParameterDirection,System.Int32,System.Object)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.SqlClient.SqlParameter"/> object to the _command.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>       
            <param name="size"><para>The maximum size of the data within the column.</para></param>        
            <param name="value"><para>The value of the parameter.</para></param>    
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.SqlClient.SqlParameter"/> object to the _command set as <see cref="T:System.Data.ParameterDirection"/> value of Output.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>        
            <param name="size"><para>The maximum size of the data within the column.</para></param>        
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.AddInParameter(System.String,System.Data.DbType)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.SqlClient.SqlParameter"/> object to the _command set as <see cref="T:System.Data.ParameterDirection"/> value of Input.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <remarks>
            <para>This version of the method is used when you can have the same parameter object multiple times with different values.</para>
            </remarks>        
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.SqlClient.SqlParameter"/> object to the _command set as <see cref="T:System.Data.ParameterDirection"/> value of Input.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            <para>Adds a new instance of an <see cref="T:System.Data.SqlClient.SqlParameter"/> object to the _command set as <see cref="T:System.Data.ParameterDirection"/> value of Input.</para>
            </summary>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>                
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the value.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.GetParameterValue(System.String)">
            <summary>
            <para>Returns the value of the parameter for the given <paramref name="name"/>.</para>
            </summary>
            <param name="name"><para>The name of the parameter to get the value.</para></param>
            <returns><para>The value of the parameter.</para></returns>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.SetParameterValue(System.String,System.Object)">
            <summary>
            <para>Sets the value of a parameter for the given <paramref name="name"/>.</para>
            </summary>
            <param name="name"><para>The name of the parameter to set the value.</para></param>
            <param name="value"><para>The new value of the parameter.</para></param>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.Dispose">
            <summary>
            <para>Clean up resources.</para>
            </summary>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.DoDiscoverParameters(System.Char)">
            <summary>
            <para>Dicover the parameters for a stored procedure using a separate connection and _command.</para>
            </summary>
            <param name="parameterToken"><para>The parameter delimeter for database commands.</para></param>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.DoAssignParameterValues">
            <summary>
            <para>Assign the values provided by a user to the _command parameters discovered in positional order.</para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <para>The number of parameters does not match number of values for stored procedure.</para>
            </exception>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.DoIsFurtherPreparationNeeded">
            <summary>
            <para>Determine if a stored procedure is using parameter discovery.</para>
            </summary>
            <returns>
            <para><see langword="true"/> if further preparation is needed.</para>
            </returns>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <devdoc>
            Create a parameter.
            </devdoc>        
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlCommandWrapper.CreateNewCommandAndConnectionForDiscovery">
            <devdoc>
            Discovery has to be done on its own connection to allow for the case of the
            connection being used being enrolled in a transaction. The SqlCommandBuilder.DeriveParameters
            method creates a new SqlCommand internally to communicate to the database, and it
            reuses the same connection that is passed in on the _command object. If this _command
            object has a connection that is enrolled in a transaction, the DeriveParameters method does not
            honor that transaction, and the call fails. To avoid this, create your own connection and
            _command, and use them. 
            
            You then have to clone each of the IDataParameter objects before it can be transferred to 
            the original _command, or another exception is thrown.
            </devdoc>
        </member>
        <member name="T:Prezza.Framework.Data.Sql.SqlDatabase">
            <summary>
            <para>Represents a Sql Server Database.</para>
            </summary>
            <remarks> 
            <para>
            Internally uses Sql Server .NET Managed Provider from Microsoft (System.Data.SqlClient) to connect to the database.
            </para>  
            </remarks>
        </member>
        <member name="P:Prezza.Framework.Data.Sql.SqlDatabase.ParameterToken">
            <summary>
            <para>Gets the parameter token used to delimit parameters for the Sql Database.</para>
            </summary>
            <value>
            <para>The '@' symbol.</para>
            </value>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlDatabase.GetConnection">
            <summary>
            <para>Get the connection for this database.</para>
            <seealso cref="T:System.Data.IDbConnection"/>
            <seealso cref="T:System.Data.SqlClient.SqlConnection"/>
            </summary>
            <returns>
            <para>The <see cref="T:System.Data.SqlClient.SqlConnection"/> for this database.</para>
            </returns>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlDatabase.GetStoredProcCommandWrapper(System.String)">
            <summary>
            <para>Create a <see cref="T:Prezza.Framework.Data.Sql.SqlCommandWrapper"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <returns><para>The <see cref="T:Prezza.Framework.Data.Sql.SqlCommandWrapper"/> for the stored procedure.</para></returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="storedProcedureName"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="storedProcedureName"/> hast not been initialized.</para>
            </exception>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlDatabase.GetStoredProcCommandWrapper(System.String,System.Object[])">
            <summary>
            <para>Create an <see cref="T:Prezza.Framework.Data.Sql.SqlCommandWrapper"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <param name="parameterValues"><para>The list of parameters for the procedure.</para></param>
            <returns><para>The <see cref="T:Prezza.Framework.Data.Sql.SqlCommandWrapper"/> for the stored procedure.</para></returns>
            <remarks>
            <para>The parameters for the stored procedure will be discovered and the values are assigned in positional order.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="storedProcedureName"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><paramref name="parameterValues"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="storedProcedureName"/> hast not been initialized.</para>
            </exception>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlDatabase.GetSqlStringCommandWrapper(System.String)">
            <summary>
            <para>Create an <see cref="T:Prezza.Framework.Data.Sql.SqlCommandWrapper"/> for a SQL query.</para>
            </summary>
            <param name="query"><para>The text of the query.</para></param>        
            <returns><para>The <see cref="T:Prezza.Framework.Data.Sql.SqlCommandWrapper"/> for the SQL query.</para></returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="query"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="query"/> hast not been initialized.</para>
            </exception>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlDatabase.GetDataAdapter(Prezza.Framework.Data.UpdateBehavior,System.Data.IDbConnection)">
            <summary>
            <para>Create a <see cref="T:System.Data.SqlClient.SqlDataAdapter"/> with the given update behavior and connection.</para>
            </summary>
            <param name="updateBehavior">
            <para>One of the <see cref="T:Prezza.Framework.Data.UpdateBehavior"/> values.</para>
            </param>
            <param name="connection">
            <para>The open connection to the database.</para>
            </param>
            <returns>An <see cref="T:System.Data.SqlClient.SqlDataAdapter"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="connection"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlDatabase.ExecuteXmlReader(Prezza.Framework.Data.Sql.SqlCommandWrapper)">
            <summary>
            <para>Executes the <see cref="T:Prezza.Framework.Data.Sql.SqlCommandWrapper"/> and returns an <see cref="T:System.Xml.XmlReader"/>.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:Prezza.Framework.Data.Sql.SqlCommandWrapper"/> to execute.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Xml.XmlReader"/> object.</para>
            </returns>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlDatabase.ExecuteXmlReader(Prezza.Framework.Data.Sql.SqlCommandWrapper,System.Data.IDbTransaction)">
            <summary>
            <para>Executes the <see cref="T:Prezza.Framework.Data.Sql.SqlCommandWrapper"/> in a transaction and returns an <see cref="T:System.Xml.XmlReader"/>.</para>
            </summary>
            <param name="command">
            <para>The <see cref="T:Prezza.Framework.Data.Sql.SqlCommandWrapper"/> to execute.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command within.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Xml.XmlReader"/> object.</para>
            </returns>
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlDatabase.DoExecuteXmlReader(System.Data.SqlClient.SqlCommand)">
            <devdoc>
            Execute the actual Xml Reader call.
            </devdoc>        
        </member>
        <member name="M:Prezza.Framework.Data.Sql.SqlDatabase.OnSqlRowUpdated(System.Object,System.Data.SqlClient.SqlRowUpdatedEventArgs)">
            <devdoc>
            Listens for the RowUpdate event on a dataadapter to support UpdateBehavior.Continue
            </devdoc>
        </member>
        <member name="T:Prezza.Framework.Data.UpdateBehavior">
            <summary>
            Used with the Database.UpdateDataSet method.  Provides control over behavior when the Data
            Adapter's update command encounters an error.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Data.UpdateBehavior.Standard">
            <summary>
            No interference with the DataAdapter's Update command.  If Update encounters
            an error, the update stops.  Additional rows in the Datatable are uneffected.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Data.UpdateBehavior.Continue">
            <summary>
            If the DataAdapter's Update command encounters an error, the update will
            continue.  The Update command will try to update the remaining rows. 
            </summary>
        </member>
        <member name="F:Prezza.Framework.Data.UpdateBehavior.Transactional">
            <summary>
            If the DataAdapter encounters an error, all updated rows will be rolled back
            </summary>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.BaseException">
            <summary>
            Base exception class for frameworks and applications
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.BaseException.exceptionId">
            <summary>
            Unique identifier for an instance of an exception.  This identifier should be shared among
            all related exceptions, such as for replacement and wrapper exceptions
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.BaseException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.BaseException.#ctor(System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="exceptionId"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.BaseException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.BaseException.#ctor(System.String,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
            <param name="exceptionId"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.BaseException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.BaseException.#ctor(System.String,System.Exception,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="exceptionID"></param>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.BaseException.ExceptionId">
            <summary>
            Get the exception Id.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.BaseExceptionHandler.DefaultLogCategory">
            <summary>
            Get/Set the default category for entries written by the handler.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.BaseExceptionHandler.DefaultEventId">
            <summary>
            Get/Set the default event Id for entries written by the handler.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.BaseExceptionHandler.DefaultSeverity">
            <summary>
            Get/Set the default severity for entries written by the handler.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.BaseExceptionHandler.DefaultTitle">
            <summary>
            Get/Set the default title for entries written by the handler.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.BaseExceptionHandler.FormatterTypeName">
            <summary>
            Get/Set the TypeName of the log formatter to use when writing entries.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.BaseExceptionHandler.MinimumPriority">
            <summary>
            The minimum priority to set when writing entries.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.BaseExceptionHandler._constructor">
            <summary>
             ConstructorInfo used to instantiate the formatter.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.BaseExceptionHandler.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the exception handler with its configuration information.
            </summary>
            <param name="config">Configuration information for the logging exception handler.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.BaseExceptionHandler.HandleException(System.Exception,System.String,System.Guid)">
            <summary>
            Handle the specified exception.
            </summary>
            <param name="exception">Exception to handle.</param>
            <param name="policyName">Exception policy used.</param>
            <param name="handlingInstanceId">Exception instance Id.</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.BaseExceptionHandler.EnsureEnvironment">
            <summary>
            Setup the the configuration and items for the exception handler.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.BaseExceptionHandler.CreateMessage(System.Exception,System.Guid)">
            <summary>
            Create the message to log for the specified exception.
            </summary>
            <param name="exception">Exception to generate the message for.</param>
            <param name="handlingInstanceId">Instace Id of the exception.</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.BaseExceptionHandler.CreateFormatter(System.IO.StringWriter,System.Exception,System.String)">
            <summary>
            Create the message formatter.
            </summary>
            <param name="writer">StringWriter for the formatter to use.</param>
            <param name="exception">Exceptin to format the message for.</param>
            <param name="handlingInstanceIdString">Exception instance Id in string format.</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.BaseExceptionHandler.CreateStringWriter">
            <summary>
            Create a string writer to use to format the exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.BaseExceptionHandler.WriteToLog(System.String,System.String)">
            <summary>
            Write a message to the log.
            </summary>
            <param name="title"></param>
            <param name="logMessage">Message to write.</param>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.Configuration.ConfigurationFileException">
            <summary>
            Simple wrapper of Exception to provide some additional content.  The 
            System.Configuration.ConfigurationErrorsException is handled in such
            a way that handling it properly can be precluded by the System.Configuration
            handlers.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ConfigurationFileException.#ctor(System.String)">
            <summary>
            Default construtor that accepts a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ConfigurationFileException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor that accepts a message and inner exception
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ConfigurationFileException.FileName">
            <summary>
            Get/set the file name
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ConfigurationFileException.LineNumber">
            <summary>
            Get/set the line number in the file
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ConfigurationFileException.LinePosition">
            <summary>
            Get/set the line position for the error
            </summary>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.Configuration.DatabaseLoggingExceptionHandlerData">
            <summary>
            Exception handler that logs the exception information to a file.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.DatabaseLoggingExceptionHandlerData.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.DatabaseLoggingExceptionHandlerData.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the exception handler.</param>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.DatabaseLoggingExceptionHandlerData.TypeName">
            <summary>
            Get the TypeName of the exception handler.
            </summary>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlerData">
            <summary>
            Base class for exception handling configuration information.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlerData.DefaultLogCategory">
            <summary>
            Get/Set the default category for entries written by the handler.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlerData.DefaultEventId">
            <summary>
            Get/Set the default event Id for entries written by the handler.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlerData.DefaultSeverity">
            <summary>
            Get/Set the default severity for entries written by the handler.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlerData.DefaultTitle">
            <summary>
            Get/Set the default title for entries written by the handler.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlerData.FormatterTypeName">
            <summary>
            Get/Set the TypeName of the log formatter to use when writing entries.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlerData.MinimumPriority">
            <summary>
            The minimum priority to set when writing entries.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlerData.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlerData.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the exception handler.</param>
            <param name="typeName">TypeName of the exception handler class.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlerData.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load configuration for the logging exception handler from the specified Xml node.
            </summary>
            <param name="node">Xml node containing configuration information for the exception handler.</param>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlerDataCollection">
            <summary>
            Collection of exception handler configuration information.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlerDataCollection.Item(System.Int32)">
            <summary>
            Get/Set the configuration information with the specified index.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlerDataCollection.Item(System.String)">
            <summary>
            Get/Set the configuration information information with the specified name.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlerDataCollection.Add(Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlerData)">
            <summary>
            Add an exception handling configuration to the collection. 
            </summary>
            <param name="exceptionHandlerData">Configuration object to add to the collection.</param>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlingConfiguration">
            <summary>
            Configuration information for framework exception handling.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlingConfiguration.exceptionPolicies">
            <summary>
            Collection of exception policies, which define how to handle an exception in a given context.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlingConfiguration.#ctor">
            <summary>
            Default constructor.  Sets the configuration name to be an empty string and
            initializes the exception policy collection.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlingConfiguration.#ctor(System.String)">
            <summary>
            Constructor.  Initializes the exception policy configuration.
            </summary>
            <param name="name">Name of the exception handling configuration.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlingConfiguration.GetExceptionPolicyData(System.String)">
            <summary>
            Get the configuration information for the exception policy with the specified name.
            </summary>
            <param name="policyName">Name of the exception policy to get the configuration for.</param>
            <returns>An <see cref="T:Prezza.Framework.ExceptionHandling.Configuration.ExceptionPolicyData"/> object containing the configuration for the specified exception policy.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlingConfiguration.GetExceptionHandlerData(System.String,System.String,System.String)">
            <summary>
            Get the configuration information for a given Exception handler, which is defined by the context consisting
            of the exception policy, exception type, and handler name.
            </summary>
            <param name="policyName">Name of the exception policy the handler exists in.</param>
            <param name="exceptionTypeName">Type of exception the handler is configured to handler.</param>
            <param name="handlerName">Name of the handler.</param>
            <returns>Configuration object for the exception handler.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlingConfiguration.GetExceptionHandlerDataCollection(System.String,System.String)">
            <summary>
            Get the collection of exception handler configuration objects for a given exception policy and exception type.
            </summary>
            <param name="policyName">Name of the exception policy.</param>
            <param name="exceptionTypeName">Type of exception.</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlingConfiguration.GetExceptionTypeDataCollection(System.String)">
            <summary>
            Get a collection of exception type configurations that a specified exception policy handles.
            </summary>
            <param name="policyName"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlingConfiguration.GetExceptionTypeData(System.String,System.String)">
            <summary>
            Get configuration of an exception type with the specified policy name and exception type name.
            </summary>
            <param name="policyName">Name of the exception policy.</param>
            <param name="exceptionTypeName">Exception type name.</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlingConfiguration.ValidatePolicyName(System.String)">
            <summary>
            Verify that the policy name is valid.
            </summary>
            <param name="policyName">Name of policy to validate.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlingConfiguration.ValidateHandlerName(System.String)">
            <summary>
            Verify that the exception handler name is valid.
            </summary>
            <param name="handlerName">Handler name to validate.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlingConfiguration.ValidateExceptionTypeName(System.String)">
            <summary>
            Verify that the specified exception type name is valid.
            </summary>
            <param name="exceptionTypeName">Exception type name to validate.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlingConfiguration.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load the exception handling configuration from the specified Xml node.
            </summary>
            <param name="node">Xml node containing exception handling configuration.</param>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.Configuration.ExceptionPolicyData">
            <summary>
            Configuration information for an exception policy.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.Configuration.ExceptionPolicyData.exceptionTypes">
            <summary>
            Collection of exception types that the exception policy defines handlers for.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionPolicyData.#ctor">
            <summary>
            Constructor.  Sets the policy name to an empty string and initializes the exception type
            configuration collection.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionPolicyData.#ctor(System.String)">
            <summary>
            Constructor.  Initializes the exception type collection.
            </summary>
            <param name="name">Name of the exception policy.</param>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionPolicyData.ExceptionTypes">
            <summary>
            Get the collection of exception type configurations for exception types handled by the policy.
            </summary>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.Configuration.ExceptionPolicyDataCollection">
            <summary>
            Collectoin of exception policy configuration objects.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionPolicyDataCollection.Item(System.Int32)">
            <summary>
            Get/Set the collection policy configuration object with the specified index.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionPolicyDataCollection.Item(System.String)">
            <summary>
            Get/Set the exception policy configuration object with the specified name.fs
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionPolicyDataCollection.Add(Prezza.Framework.ExceptionHandling.Configuration.ExceptionPolicyData)">
            <summary>
            Add an exception policy configuration object to the collection.
            </summary>
            <param name="providerData"></param>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeData">
            <summary>
            Configuration for exception type handling
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeData.exceptionHandlers">
            <summary>
            Collection of exception handlers for this exception type.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeData.name">
            <summary>
            Name of this exception type.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeData.type">
            <summary>
            TypeName of this exception type.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeData.postHandlingAction">
            <summary>
            Action to take after an exception of this type has been handled.  Default to notify and rethrow.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeData.#ctor">
            <summary>
            Constructor.  Initializes the collection of exception handlers and sets the name and type to empty strings.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeData.#ctor(System.String,System.String)">
            <summary>
            Constructor.  Initializes the collection of exception handlers.
            </summary>
            <param name="name">Name of the exception type.</param>
            <param name="type">TypeName of the exception the handlers will handle.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeData.#ctor(System.String,System.String,Prezza.Framework.ExceptionHandling.PostHandlingAction)">
            <summary>
            Constructor.  Initializes the collection of exception handlers.
            </summary>
            <param name="name">Name of the exception type.</param>
            <param name="type">TypeName of the exception the handlers will handle.</param>
            <param name="postHandlingAction">Action to take after handling the exception.</param>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeData.Name">
            <summary>
            Get/Set name of the exception type.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeData.TypeName">
            <summary>
            Get/Set typeName the exception type's handlers will handle.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeData.PostHandlingAction">
            <summary>
            Get/Set action to take after exception has been handled.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeData.ExceptionHandlers">
            <summary>
            Get the collection of exception handlers for this type.
            </summary>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeDataCollection">
            <summary>
            Collection of exception type configuration objects.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeDataCollection.Item(System.Int32)">
            <summary>
            Get/Set the exception type configuration object with the specified index.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeDataCollection.Item(System.String)">
            <summary>
            Get/Set the exception type configuration object with the specified name.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeDataCollection.Add(Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeData)">
            <summary>
            Add an exception type configuration object to the collection.
            </summary>
            <param name="exceptionTypeData">Exception type configuration object to add to the collection.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeDataCollection.Add(System.Object)">
            <summary>
            Add an object to the collection.  An exception will be thrown if the object can not be cast to 
            an <see cref="T:Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeData" /> object.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.Configuration.LoggingExceptionHandlerData">
            <summary>
            Exception handler that logs the exception information to a file.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.LoggingExceptionHandlerData.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.LoggingExceptionHandlerData.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the exception handler.</param>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.LoggingExceptionHandlerData.TypeName">
            <summary>
            Get the TypeName of the exception handler.
            </summary>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.Configuration.ReplaceHandlerData">
            <summary>
            Configuration information for the replace handler, which replaces one exception with another.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ReplaceHandlerData.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the replace handler.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ReplaceHandlerData.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the replace handler.</param>
            <param name="replaceExceptionTypeName">TypeName of the new exception to create.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ReplaceHandlerData.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the replace handler.</param>
            <param name="exceptionMessage">Message for the new exception.</param>
            <param name="replaceExceptionTypeName">TypeName of the new exception to create.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ReplaceHandlerData.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the replace handler.</param>
            <param name="exceptionMessage">Message for the new exception.</param>
            <param name="replaceExceptionTypeName">TypeName of the exception to create.</param>
            <param name="replaceHandlerTypeName">TypeName of the replace handler.</param>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ReplaceHandlerData.ExceptionMessage">
            <summary>
            Message for the created exception.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.ReplaceHandlerData.ReplaceExceptionTypeName">
            <summary>
            TypeName [CLASS],[ASSEMBLY] of the exception to create.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.ReplaceHandlerData.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load replace handler configuration from the specified Xml node.
            </summary>
            <param name="node">Xml node containing configuration information for the replace handler.</param>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.Configuration.WrapHandlerData">
            <summary>
            Configuration information for the wrap exception handler, which wraps an exception inside
            a new exception.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.WrapHandlerData.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the wrap handler.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.WrapHandlerData.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the wrap handler.</param>
            <param name="wrapExceptionTypeName">TypeName of the exception to create.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.WrapHandlerData.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the wrap handler.</param>
            <param name="exceptionMessage">Message for the exception to create.</param>
            <param name="wrapExceptionTypeName">TypeName of the exception to create to wrap the thrown exception.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.WrapHandlerData.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the wrap handler.</param>
            <param name="exceptionMessage">Message for the exception to create.</param>
            <param name="wrapExceptionTypeName">TypeName of the exception to create to wrap the thrown exception.</param>
            <param name="wrapHandlerTypeName">TypeName of the exception to create.</param>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.WrapHandlerData.ExceptionMessage">
            <summary>
            Get/Set message for the exception to create.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.Configuration.WrapHandlerData.WrapExceptionTypeName">
            <summary>
            Get/Set the TypeName of the wrapper exception to create.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.Configuration.WrapHandlerData.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load wrap exception handler configuration from the specified Xml node.
            </summary>
            <param name="node">Xml node containing wrap handler configuration.</param>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.DatabaseLoggingExceptionHandler">
            <summary>
            Special exception handler that logs exception information to a log sink.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.DatabaseLoggingExceptionHandler.Initialize(Prezza.Framework.Data.IDataContextProvider)">
            <summary>
            Initialize the provider with a data context provider
            </summary>
            <param name="dataContextProvider"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.DatabaseLoggingExceptionHandler.WriteToLog(System.String,System.String)">
            <summary>
            Write a message to the log.
            </summary>
            <param name="title"></param>
            <param name="logMessage">Message to write.</param>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.FrameworkErrorMessage">
            <summary>
            Encapsulates an error code and string parameters used to lookup the text of errors
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.FrameworkErrorMessage._errorCode">
            <summary>
            The error code
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.FrameworkErrorMessage._parameters">
            <summary>
            string parameters used with tokenized string
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.FrameworkErrorMessage.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="errorCode">the integer code for this error</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.FrameworkErrorMessage.#ctor(System.Int32,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="errorCode">the integer code for this error</param>
            <param name="args">a list of parameters used for replace within the error message's tokenized string</param>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.FrameworkErrorMessage.ErrorCode">
            <summary>
            The Int32 code for this ErrorMessage
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.FrameworkErrorMessage.ToString">
            <summary>
            Overridden.  
            </summary>
            <remarks>
            When called, retrieves the Error Code text from the database for language code en-US.
            Then parses the string for any tokens, replacing those as found with the ErrorMessage parameters.
            </remarks> 
            <returns>a string description for this error, localized to en-US</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.FrameworkErrorMessage.ToString(System.String)">
            <summary>
            Overridden.  
            </summary>
            <remarks>
            When called, retrieves the Error Code text from the database for the given language code.
            Then parses the string for any tokens, replacing those as found with the ErrorMessage parameters.
            </remarks> 
            <param name="languageCode">the language code to retrieve in the ISO format, e.g., en-US</param>
            <returns>a string description for this error, localized to the language code</returns>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.ExceptionFormatter">
            <summary>
            Base class for exception formatters.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.ExceptionFormatter.ignoredProperties">
            <summary>
            Properties to ignore when formatting error messages.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.ExceptionFormatter.exception">
            <summary>
            Exception to format.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.ExceptionFormatter.additionalInfo">
            <summary>
            Additional information to write as part of handling the exception.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.#ctor(System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="exception">Exception to format.</param>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.ExceptionFormatter.Exception">
            <summary>
            Get the exception to format.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.ExceptionFormatter.AdditionalInfo">
            <summary>
            Get the additional properties to format the exception.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.Format">
            <summary>
            Format the exception message.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.WriteException(System.Exception,System.Exception)">
            <summary>
            Write the exception message.
            </summary>
            <param name="e">Exception to write.</param>
            <param name="outerException">Outer exception.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.WriteReflectionInfo(System.Exception)">
            <summary>
            Write information gleaned from reflection about the exception.
            </summary>
            <param name="e">Exception to write information about.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.WriteDescription">
            <summary>
            Write the exception description.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.WriteDateTime(System.DateTime)">
            <summary>
            Write the time of the exception.
            </summary>
            <param name="utcNow">Time exception occurred.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.WriteExceptionType(System.Type)">
            <summary>
            Write the type of the exception.
            </summary>
            <param name="exceptionType"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.WriteMessage(System.String)">
            <summary>
            Write the exception message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.WriteSource(System.String)">
            <summary>
            Write the exception source.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.WriteHelpLink(System.String)">
            <summary>
            Write the exception help link.
            </summary>
            <param name="helpLink"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.WriteStackTrace(System.String)">
            <summary>
            Write the stack trace.
            </summary>
            <param name="stackTrace"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.WritePropertyInfo(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Write out a property name and value.
            </summary>
            <param name="propertyInfo"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.WriteFieldInfo(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Write out a field name and value.
            </summary>
            <param name="field"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.WriteAdditionalInfo(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Write a collection of properties and values.
            </summary>
            <param name="additionalInfo"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.GetMachineName">
            <summary>
            Get the machine name for the exception.
            </summary>
            <returns>Name of the machine.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.GetThreadIdentity">
            <summary>
            Get the thread identity.
            </summary>
            <returns>Name of the thread.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.GetWindowsIdentity">
            <summary>
            Get windows identity.
            </summary>
            <returns>ASPNET User name</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionFormatter.GetExecutingAssembly">
            <summary>
            Get the name of the executing assembly.
            </summary>
            <returns>Name of the executing assembly.</returns>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.ExceptionHandler">
            <summary>
            Base class for exception handler classes.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionHandler.#ctor">
            <summary>
            Default constructor.  Initializes the currentPolicyName and currentExceptionTypeName to empty strings.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.ExceptionHandler.CurrentPolicyName">
            <summary>
            Get/Set the name of the current exception policy.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.ExceptionHandler.CurrentExceptionTypeName">
            <summary>
            Get/Set the name of the current exception typename.f
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionHandler.HandleException(System.Exception,System.String,System.Guid)">
            <summary>
            Handle the specified exception according to the specified policy.
            </summary>
            <param name="exception">Exception to handle.</param>
            <param name="policyName">Name of exception policy.</param>
            <param name="handlingInstanceId">Event handling instance Id, which can be used to link exceptions together.</param>
            <returns>Exception (possibly modified)</returns>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.ExceptionHandlerFactory">
            <summary>
            Factory to create instances of <see cref="T:Prezza.Framework.ExceptionHandling.ExceptionHandler"/> objects.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.ExceptionHandlerFactory.policyName">
            <summary>
            Policy the exception handler is part of.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.ExceptionHandlerFactory.exceptionTypeName">
            <summary>
            TypeName of the exception the handler is configured to handle.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionHandlerFactory.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionHandlerFactory.#ctor(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Constructor.
            </summary>
            <param name="config">Exception Handler configuration information.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionHandlerFactory.CreateExceptionHandlers(System.String,System.String)">
            <summary>
            Create all exception handler instances for the specified policy and exception TypeName.
            </summary>
            <param name="policyName">Policy name for the handlers.</param>
            <param name="exceptionTypeName">Exception type the handlers are configured to handle.</param>
            <returns>Array of exception handler objects.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionHandlerFactory.CreateExceptionHandler(System.String,System.String,System.String)">
            <summary>
            Create an instance of a specific exception handler.
            </summary>
            <param name="policyName">Policy the handler is defined for.</param>
            <param name="exceptionTypeName">TypeName of the exception the handler is configured to handle.</param>
            <param name="handlerName">Name of the exception handler to instantiate.</param>
            <returns>Instance of the specified exception handler.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionHandlerFactory.PublishFailureEvent(System.String,System.Exception)">
            <summary>
            Log an exception handling exception.
            </summary>
            <param name="configurationName">Name of the configuration object where the exception occurred.</param>
            <param name="e">Exception to handle.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionHandlerFactory.GetConfigurationObject(System.String)">
            <summary>
            Get the configuration object for the specified exception handler.
            </summary>
            <param name="providerName">Name of the exception handler to get the configuration of.</param>
            <returns><see cref="T:Prezza.Framework.ExceptionHandling.Configuration.ExceptionHandlingConfiguration"/> object for the specified handler.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionHandlerFactory.GetConfigurationType(System.String)">
            <summary>
            Get the typeName of the specified exception handler.
            </summary>
            <param name="configurationName">Exception handler to get the TypeName of.</param>
            <returns>TypeName [CLASS],[ASSEMBLY] of the specified exception handler.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionHandlerFactory.InitializeConfigurationProvider(System.String,Prezza.Framework.Configuration.IConfigurationProvider)">
            <summary>
            Initialize the specified exception handler with its configuration object.
            </summary>
            <param name="providerName">Name of exception handler to initialize.</param>
            <param name="provider">Exception handler to initialize.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionHandlerFactory.GetExceptionHandlerData(System.String)">
            <summary>
            Get the configuration information for the specified exception handler.
            </summary>
            <param name="handlerName">Name of the exception handler to get the configuration of.</param>
            <returns>Configuration object for the specified exception handler.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionHandlerFactory.ValidatePolicyAndExceptionType(System.String,System.String)">
            <summary>
            Verify that the provided policy name and exception typeName are valid.
            </summary>
            <param name="policyName">Policy name to validate.</param>
            <param name="exceptionTypeName">Exception typeName to validate.</param>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.ExceptionHandlingException">
            <summary>
            Exception class for exceptions that occur during the exception handling process.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionHandlingException.#ctor">
            <summary>
            Construtor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionHandlingException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionHandlingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception handling message.</param>
            <param name="innerException">Inner exception for the handling exception.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionHandlingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.ExceptionPolicy">
            <summary>
            Provide methods to handle exceptions according to specified policies.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.ExceptionPolicy.policyEntries">
            <summary>
            Collection of exception handling policy configurations.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionPolicy.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionPolicy.HandleException(System.Exception,System.String)">
            <summary>
            Handle the specified exception according to the configuration of the specified exception handling policy.
            </summary>
            <param name="ex">Exception to handle.</param>
            <param name="policyName">Policy to use.</param>
            <returns>Boolean indicating if the exception should be rethrown by the calling method.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionPolicy.HandleException(System.Exception@,System.String)">
            <summary>
            Handle the specified exception according to the configuration of the specified exception handling policy.  Since the 
            exception is passed by reference, it may be modified according by the configured exception handlers.
            </summary>
            <param name="ex">Exception to handle.</param>
            <param name="policyName">Policy to use.</param>
            <returns>Boolean indicating if the exception should be rethrown by the calling method.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionPolicy.HandleException(System.Exception,System.String,Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Handle the specified exception according to the configuration of the specified exception handling policy, which is stored
            in the supplied configuration object.
            </summary>
            <param name="ex">Exception to handle.</param>
            <param name="policyName">Policy to use.</param>
            <param name="config">Configuration object containing exception handling configuration information.</param>
            <returns>Boolean indicating if the exception should be rethrown by the calling method.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionPolicy.HandleException(System.Exception@,System.String,Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Handle the specified exception according to the configuration of the specified exception handling policy, which is
            stored in the supplied configuration object.  The exception is passed by reference, so it may be modified by
            an exception handler.
            </summary>
            <param name="ex">Exception to handle.</param>
            <param name="policyName">Policy to use.</param>
            <param name="config">Configuration object containing exception handling information.</param>
            <returns>Boolean indicating if the exception should be rethrown by the calling method.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionPolicy.HandleException(System.Exception@)">
            <summary>
            Handle the specified exception.
            </summary>
            <param name="ex">Exception to handle.</param>
            <returns>True if the exception should be rethrown.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionPolicy.GetExceptionPolicy(System.Exception,System.String,Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Get an instance of the specified exception policy.
            </summary>
            <param name="exception">Exception to get the exception policy for.</param>
            <param name="policyName">Name of exception policy.</param>
            <param name="config">Object containing security configuration information.</param>
            <returns>Exception policy instance.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionPolicy.Initialize(Prezza.Framework.Configuration.ConfigurationBase,System.String)">
            <summary>
            Initialize the exception policy instance with the specified configuration and policy name.
            </summary>
            <param name="config">Configuration information for exception handling.</param>
            <param name="policyName">Name of the policy.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionPolicy.AddPoliciesToCache(Prezza.Framework.ExceptionHandling.Configuration.ExceptionPolicyData,Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Add policy entries to a class cache.
            </summary>
            <param name="policyData">Policy configuration information.</param>
            <param name="config">Exception handling configuration information.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionPolicy.GetExceptionType(Prezza.Framework.ExceptionHandling.Configuration.ExceptionTypeData,System.String)">
            <summary>
            Get the TypeName of an exception type.
            </summary>
            <param name="typeData">Exception type configuration information.</param>
            <param name="policyName">Name of the policy containing the exception type information.</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionPolicy.GetPolicyEntry(System.Type)">
            <summary>
            Get the configuration information for the specified exception type handled by the policy.
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <returns>Configuration information for specified exception type.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionPolicy.FindExceptionPolicyEntry(System.Type)">
            <summary>
            Iterate up the class hierarchy to find a matching exception type.  Should work as long as all exceptions
            have <see cref="T:System.Exception"/> as the ultimate base class and the policy is configured to handle
            that type.
            </summary>
            <param name="exceptionType">Exception type to find a policy entry for.</param>
            <returns>Configuration information for the specified exception type.</returns>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.ExceptionUtility">
            <summary>
            Utility routines for exception handling.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.ExceptionUtility.EventLogSource">
            <summary>
            Source string for event log entries (NOT CURRENTLY USED)
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.ExceptionUtility.HandlingInstanceToken">
            <summary>
            Token to replace with the handling instance Id.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionUtility.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionUtility.FormatExceptionMessage(System.String,System.Guid)">
            <summary>
            Add the handling instance id to the message.
            </summary>
            <param name="message">Message to format.</param>
            <param name="handlingInstanceId">Handling instance Id for the exception message.</param>
            <returns>Formatted message.</returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionUtility.LogHandlingException(System.String,System.Exception,System.Exception,System.Exception)">
            <summary>
            Log an error that occurs when handling an exception.
            </summary>
            <param name="policyName">Name of the exception policy in use when the error occurred.</param>
            <param name="offendingException">Exception that occurred during handling.</param>
            <param name="chainException">Chain exception that was being processed when the exception occurred.</param>
            <param name="originalException">Exception that was being handled when the exception occurred.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ExceptionUtility.FormatHandlingException(System.IO.StringWriter,System.String,System.Exception)">
            <summary>
            Format the exception handling exception method.
            </summary>
            <param name="writer">Writer to write the message to.</param>
            <param name="header">Header for message.</param>
            <param name="ex">Exception handling exception.</param>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.IExceptionHandler">
            <summary>
            Interface that exception handlers must implement.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.IExceptionHandler.CurrentPolicyName">
            <summary>
            Get/Set the current exception policy name.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.IExceptionHandler.CurrentExceptionTypeName">
            <summary>
            Get/Set the typeName of the current exception.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.IExceptionHandler.HandleException(System.Exception,System.String,System.Guid)">
            <summary>
            Handle an exception with the specified policy and instance id.
            </summary>
            <param name="exception">Exception to handle.</param>
            <param name="policyName">Exception policy in use.</param>
            <param name="handlingInstanceId">Exception instance id.</param>
            <returns>New exception generated by a handler as specified in the configuration.</returns>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler">
            <summary>
            Special exception handler that logs exception information to a log sink.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler._defaultLogCategory">
            <summary>
            Default log category for the generated log entry.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler._defaultEventId">
            <summary>
            Default event id for the generated log entry.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler._defaultSeverity">
            <summary>
            Default severity for the generated log entry.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler._defaultTitle">
            <summary>
            Default title for the generated log entry.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler._formatterTypeName">
            <summary>
            TypeName of the formatter to use for the generated entry.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler._minimumPriority">
            <summary>
            Minimum priority to set for the generated entry.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler._constructor">
            <summary>
             ConstructorInfo used to instantiate the formatter.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler._exceptionHandlerData">
            <summary>
            Configuration information for the handler.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the exception handler with its configuration information.
            </summary>
            <param name="config">Configuration information for the logging exception handler.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler.HandleException(System.Exception,System.String,System.Guid)">
            <summary>
            Handle the specified exception.
            </summary>
            <param name="exception">Exception to handle.</param>
            <param name="policyName">Exception policy used.</param>
            <param name="handlingInstanceId">Exception instance Id.</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler.WriteToLog(System.String)">
            <summary>
            Write a message to the log.
            </summary>
            <param name="logMessage">Message to write.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler.CreateStringWriter">
            <summary>
            Create a string writer to use to format the exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler.CreateFormatter(System.IO.StringWriter,System.Exception,System.String)">
            <summary>
            Create the message formatter.
            </summary>
            <param name="writer">StringWriter for the formatter to use.</param>
            <param name="exception">Exceptin to format the message for.</param>
            <param name="handlingInstanceIdString">Exception instance Id in string format.</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler.SetupEnvironment">
            <summary>
            Setup the the configuration and items for the exception handler.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler.InitProperties(Prezza.Framework.ExceptionHandling.Configuration.LoggingExceptionHandlerData)">
            <summary>
            Initialize the defaults for the exception handler based on the passed in configuration information.
            </summary>
            <param name="data">Logging exception handler configuration information.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.LoggingExceptionHandler.CreateMessage(System.Exception,System.Guid)">
            <summary>
            Create the message to log for the specified exception.
            </summary>
            <param name="exception">Exception to generate the message for.</param>
            <param name="handlingInstanceId">Instace Id of the exception.</param>
            <returns></returns>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.PostHandlingAction">
            <summary>
            Specify which action to take after handling an exception.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.PostHandlingAction.None">
            <summary>
            Do nothing after handling.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.PostHandlingAction.NotifyRethrow">
            <summary>
            Log the exception and rethrow it.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.PostHandlingAction.ThrowNewException">
            <summary>
            Generate a new exception and throw it.
            </summary>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.ReplaceHandler">
            <summary>
            Handle an exception by replacing it with another exception.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.ReplaceHandler._replaceHandlerData">
            <summary>
            Configuration for the exception handler.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ReplaceHandler.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the replace exception handler with its configuration.
            </summary>
            <param name="config">Configuration for the replace exception handler.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ReplaceHandler.HandleException(System.Exception,System.String,System.Guid)">
            <summary>
            Return an instance of a new exception as determined by the configuration.
            </summary>
            <param name="exception">Exception to handle.</param>
            <param name="policyName">Name of the exception policy.</param>
            <param name="handlingInstanceId">Exception handling instance Id.</param>
            <returns></returns>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.ReplaceHandler.ReplaceExceptionType">
            <summary>
            Get the Type of the replacment exception to generate.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.ReplaceHandler.ExceptionMessage">
            <summary>
            Get the message to set in the generated replacement exception.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.ReplaceHandler.ReplaceException(System.Exception,System.Type,System.String,System.Guid)">
            <summary>
            Replace the specified exception with one of the specified type.
            </summary>
            <param name="originalException">Exception to replace.</param>
            <param name="replaceExceptionType">Type of exception to create.</param>
            <param name="replaceExceptionMessage">Exception message for the created exception.</param>
            <param name="handlingInstanceId">Exception handling instance id.</param>
            <returns>Created exception to replace the original exception.</returns>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.TextExceptionFormatter">
            <summary>
            Format exception messages in text format.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.writer">
            <summary>
            Text writer to format messages.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.innerDepth">
            <summary>
            Current inner depth to use when calculating the indent of a particular line.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.handlingInstanceIdString">
            <summary>
            String representation of the handling instance Id.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.#ctor(System.IO.TextWriter,System.Exception,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="writer">Text writer to write the string to.</param>
            <param name="exception">Exception to format the message for.</param>
            <param name="handlingInstanceIdString">Exception handling instance Id.</param>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.Writer">
            <summary>
            Get the formatter writer.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.InnerDepth">
            <summary>
            Get/Set the current inner depth.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.WriteDescription">
            <summary>
            Write the exception description.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.WriteException(System.Exception,System.Exception)">
            <summary>
            Write the exception information.  Recurse as necessary to walk up the exception chain.
            </summary>
            <param name="e">Exception to write.</param>
            <param name="outerException">Outer exception for the exception to write.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.WriteDateTime(System.DateTime)">
            <summary>
            Write the exception time.
            </summary>
            <param name="utcNow"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.WriteExceptionType(System.Type)">
            <summary>
            Write the exception type.
            </summary>
            <param name="exceptionType"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.WriteMessage(System.String)">
            <summary>
            Write the exception message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.WriteSource(System.String)">
            <summary>
            Write the exception source.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.WriteHelpLink(System.String)">
            <summary>
            Write the excetpion help link.
            </summary>
            <param name="helpLink"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.WritePropertyInfo(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Write the property name and value.
            </summary>
            <param name="propertyInfo"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.WriteFieldInfo(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Write the field name and value.
            </summary>
            <param name="field"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.WriteStackTrace(System.String)">
            <summary>
            Write the stack trace.
            </summary>
            <param name="stackTrace"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.WriteAdditionalInfo(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Write any name/value pairs stored in the additional info collection.
            </summary>
            <param name="additionalInfo"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.Indent">
            <summary>
            Write an indent according to the inner depth.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.TextExceptionFormatter.IndentAndWriteLine(System.String,System.Object[])">
            <summary>
            Write an indent and line according to the inner depth.
            </summary>
            <param name="format">Line to write.</param>
            <param name="arg">Arguments to write line call.</param>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.WrapHandler">
            <summary>
            Exception handler to wrap an exception in another exception.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.WrapHandler._wrapHandlerData">
            <summary>
            Configuration information for the wrap exception handler.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.WrapHandler.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the exception handler with its configuration.
            </summary>
            <param name="config">Wrap exception handler configuration.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.WrapHandler.HandleException(System.Exception,System.String,System.Guid)">
            <summary>
            Handle an exception.
            </summary>
            <param name="exception">Exception to handle.</param>
            <param name="policyName">Exception handling policy.</param>
            <param name="handlingInstanceId">Exception handling instance id.</param>
            <returns>Excpetion with the exception to be handled as its inner exception.</returns>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.WrapHandler.WrapExceptionType">
            <summary>
            Get the Type of the exception to create to wrap the handled exception with.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.WrapHandler.WrapExceptionMessage">
            <summary>
            Get the message for the exception to create to wrap the handled exception with.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.WrapHandler.WrapException(System.Exception,System.Type,System.String,System.Guid)">
            <summary>
            Create an exception with the exception to handle as its inner exception.
            </summary>
            <param name="originalException">Exception to handle.</param>
            <param name="wrapExceptionType">Type of exception to create for the wrapper exception.</param>
            <param name="wrapExceptionMessage">Exception message for the wrapper exception.</param>
            <param name="handlingInstanceId">Exception handling instance Id.</param>
            <returns>Wrapper exception with the original exception set as its inner exception.</returns>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter">
            <summary>
            Formatter for Xml-formatted log messages.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.xmlWriter">
            <summary>
            Writer to generate Xml string.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.handlingInstanceIdString">
            <summary>
            Exception handling instance Id.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.#ctor(System.Xml.XmlWriter,System.Exception,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="xmlWriter">Writer used to generate Xml string.</param>
            <param name="exception">Exception to handle.</param>
            <param name="handlingInstanceIdString">Exception handling instance Id as a string.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.#ctor(System.IO.TextWriter,System.Exception,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="writer">Writer used to generate Xml string.</param>
            <param name="exception">Exception to handle.</param>
            <param name="handlingInstanceIdString">Exception handling instance ID in string format.</param>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.Writer">
            <summary>
            Get the Xml writer.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.Format">
            <summary>
            Format the xml exception message.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.WriteDateTime(System.DateTime)">
            <summary>
            Write the exception date and time.
            </summary>
            <param name="utcNow"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.WriteMessage(System.String)">
            <summary>
            Write the exception message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.WriteDescription">
            <summary>
            Write the exception description.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.WriteHelpLink(System.String)">
            <summary>
            Write the exception help link.
            </summary>
            <param name="helpLink"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.WriteStackTrace(System.String)">
            <summary>
            Write the exception stack trace.
            </summary>
            <param name="stackTrace"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.WriteSource(System.String)">
            <summary>
            Write the exception source.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.WriteExceptionType(System.Type)">
            <summary>
            Write the exception type.
            </summary>
            <param name="exceptionType"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.WriteException(System.Exception,System.Exception)">
            <summary>
            Write the exception information.  Recurses as necessary.
            </summary>
            <param name="e">Exception to write.</param>
            <param name="outerException">Exception's outer exception.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.WritePropertyInfo(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Write the property name and value.
            </summary>
            <param name="propertyInfo"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.WriteFieldInfo(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Write the field name and value.
            </summary>
            <param name="field"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.WriteAdditionalInfo(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Write the name/value pairs stored in the additional info collection.
            </summary>
            <param name="additionalInfo"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.XmlExceptionFormatter.WriteSingleElement(System.String,System.String)">
            <summary>
            Write a single Xml element, consisting of start tag, element text, and end tag.
            </summary>
            <param name="elementName"></param>
            <param name="elementText"></param>
        </member>
        <member name="T:Prezza.Framework.ExceptionHandling.DatabaseExceptionFormatter">
            <summary>
            Formatter for Xml-formatted log messages.
            </summary>
        </member>
        <member name="F:Prezza.Framework.ExceptionHandling.DatabaseExceptionFormatter._handlingInstanceIdString">
            <summary>
            Exception handling instance Id.
            </summary>
        </member>
        <member name="P:Prezza.Framework.ExceptionHandling.DatabaseExceptionFormatter.Writer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.DatabaseExceptionFormatter.#ctor(System.IO.TextWriter,System.Exception,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="writer">Writer used to generate Xml string.</param>
            <param name="exception">Exception to handle.</param>
            <param name="handlingInstanceIdString">Exception handling instance ID in string format.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.DatabaseExceptionFormatter.WriteDateTime(System.DateTime)">
            <summary>
            Write the exception date and time.
            </summary>
            <param name="utcNow"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.DatabaseExceptionFormatter.WriteMessage(System.String)">
            <summary>
            Write the exception message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.DatabaseExceptionFormatter.WriteDescription">
            <summary>
            Write the exception description.
            </summary>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.DatabaseExceptionFormatter.WriteHelpLink(System.String)">
            <summary>
            Write the exception help link.
            </summary>
            <param name="helpLink"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.DatabaseExceptionFormatter.WriteStackTrace(System.String)">
            <summary>
            Write the exception stack trace.
            </summary>
            <param name="stackTrace"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.DatabaseExceptionFormatter.WriteSource(System.String)">
            <summary>
            Write the exception source.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.DatabaseExceptionFormatter.WriteExceptionType(System.Type)">
            <summary>
            Write the exception type.
            </summary>
            <param name="exceptionType"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.DatabaseExceptionFormatter.WriteException(System.Exception,System.Exception)">
            <summary>
            Write the exception information.  Recurses as necessary.
            </summary>
            <param name="e">Exception to write.</param>
            <param name="outerException">Exception's outer exception.</param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.DatabaseExceptionFormatter.WritePropertyInfo(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Write the property name and value.
            </summary>
            <param name="propertyInfo"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.DatabaseExceptionFormatter.WriteFieldInfo(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Write the field name and value.
            </summary>
            <param name="field"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.DatabaseExceptionFormatter.WriteAdditionalInfo(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Write the name/value pairs stored in the additional info collection.
            </summary>
            <param name="additionalInfo"></param>
        </member>
        <member name="M:Prezza.Framework.ExceptionHandling.DatabaseExceptionFormatter.WriteSingleElement(System.String,System.String)">
            <summary>
            Write a single Xml element, consisting of start tag, element text, and end tag.
            </summary>
            <param name="elementName"></param>
            <param name="elementText"></param>
        </member>
        <member name="T:Prezza.Framework.Logging.CategoryFilterMode">
            <summary>
            Specify how log messages will be filtered by category.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.CategoryFilterMode.AllowAllExceptDenied">
            <summary>
            Allow all categories except those listed in the configuration.  Listed categories will be denied.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.CategoryFilterMode.DenyAllExceptAllowed">
            <summary>
            Deny all categories except those listed in the configuration.  Listed categories will be denied.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Logging.Configuration.CategoryFilterData">
            <summary>
            Configuration for logging category filters.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Configuration.CategoryFilterData.name">
            <summary>
            Name of the filter.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.CategoryFilterData.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.CategoryFilterData.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the filter.</param>
        </member>
        <member name="P:Prezza.Framework.Logging.Configuration.CategoryFilterData.Name">
            <summary>
            Name of the category filter.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Logging.Configuration.CategoryFilterDataCollection">
            <summary>
            Strongly typed collection of <see cref="T:Prezza.Framework.Logging.Configuration.CategoryFilterData"/> objects.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Configuration.CategoryFilterDataCollection.Item(System.Int32)">
            <summary>
            Get/Set the <see cref="T:Prezza.Framework.Logging.Configuration.CategoryFilterData" /> object with the specified index.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Configuration.CategoryFilterDataCollection.Item(System.String)">
            <summary>
            Get/Set the <see cref="T:Prezza.Framework.Logging.Configuration.CategoryFilterData"/> object with the specified name.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.CategoryFilterDataCollection.Add(Prezza.Framework.Logging.Configuration.CategoryFilterData)">
            <summary>
            Add a new <see cref="T:Prezza.Framework.Logging.Configuration.CategoryFilterData"/> object to the collection.
            </summary>
            <param name="exceptionTypeData"></param>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.CategoryFilterDataCollection.Add(System.Object)">
            <summary>
            Add a new object to the collection.  An error will result if the object can not
            be cast to type <see cref="T:Prezza.Framework.Logging.Configuration.CategoryFilterData"/>
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Prezza.Framework.Logging.Configuration.DistributionStrategyData">
            <summary>
            Abstract base class for <see cref="T:Prezza.Framework.Logging.Distributor.ILogDistributionStrategy" /> configuration data.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.DistributionStrategyData.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the distribution strategy.</param>
            <param name="typeName">Type name of the implmentation of <see cref="T:Prezza.Framework.Logging.Distributor.ILogDistributionStrategy"/>.</param>
        </member>
        <member name="P:Prezza.Framework.Logging.Configuration.DistributionStrategyData.LoggingConfiguration">
            <summary>
            Get/Set the configuration object for the distribution strategy data.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Logging.Configuration.DistributionStrategyDataCollection">
            <summary>
            STrongly Typed collection of <see cref="T:Prezza.Framework.Logging.Configuration.DistributionStrategyData"/> objects.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Configuration.DistributionStrategyDataCollection.Item(System.Int32)">
            <summary>
            Get/Set the <see cref="T:Prezza.Framework.Logging.Configuration.DistributionStrategyData"/> object with the specified index.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Configuration.DistributionStrategyDataCollection.Item(System.String)">
            <summary>
            Get/Set the <see cref="T:Prezza.Framework.Logging.Configuration.DistributionStrategyData" /> object with the specified name.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.DistributionStrategyDataCollection.Add(Prezza.Framework.Logging.Configuration.DistributionStrategyData)">
            <summary>
            Add a new <see cref="T:Prezza.Framework.Logging.Configuration.DistributionStrategyData"/> object to the collection.
            </summary>
            <param name="providerData"></param>
        </member>
        <member name="T:Prezza.Framework.Logging.Configuration.InProcDistributionStrategyData">
            <summary>
            Configuration information for InProcDistributionStrategy.
            
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.InProcDistributionStrategyData.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.InProcDistributionStrategyData.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the log distribution strategy this configuration represents.</param>
        </member>
        <member name="T:Prezza.Framework.Logging.Configuration.LoggingConfiguration">
            <summary>
            Container for all logging configuration information.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Configuration.LoggingConfiguration.categoryFilters">
            <summary>
            Collection of logging category filters.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Configuration.LoggingConfiguration.distributionStrategies">
            <summary>
            Collection of logging distribution strategies.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Configuration.LoggingConfiguration.formatters">
            <summary>
            Collection of log formatters.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Configuration.LoggingConfiguration.sinks">
            <summary>
            Collection of logging sinks.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Configuration.LoggingConfiguration.categories">
            <summary>
            Collection of logging categories.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Configuration.LoggingConfiguration.tracingEnabled">
            <summary>
            Indicates whether trace-level information will be logged in addition to normal log messages.  Note that trace logging
            is currently not supported.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Configuration.LoggingConfiguration.loggingEnabled">
            <summary>
            Indicates whether log messages will be distributed according to the specified distribution strategies.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Configuration.LoggingConfiguration.distributionStrategy">
            <summary>
            The name of log distribution strategy.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Configuration.LoggingConfiguration.minimumPriority">
            <summary>
            Indicates the minimum priority a log entry must have before it is distributed.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Configuration.LoggingConfiguration.categoryFilterMode">
            <summary>
            Active category filter mode.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Configuration.LoggingConfiguration.defaultFormatter">
            <summary>
            Default formatter for log entries.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Configuration.LoggingConfiguration.defaultCategory">
            <summary>
            Default category for log entries.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.LoggingConfiguration.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.LoggingConfiguration.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the logging configuration.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.LoggingConfiguration.GetCategoryData(System.String)">
            <summary>
            Get the <see cref="T:Prezza.Framework.Logging.Distributor.Configuration.CategoryData"/> object for the specified category.
            </summary>
            <param name="category">Name of the category.</param>
            <returns>Specified <see cref="T:Prezza.Framework.Logging.Distributor.Configuration.CategoryData"/> object.</returns>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.LoggingConfiguration.GetDefaultCategoryData">
            <summary>
            Get the default <see cref="T:Prezza.Framework.Logging.Distributor.Configuration.CategoryData"/> object.
            </summary>
            <returns>Default <see cref="T:Prezza.Framework.Logging.Distributor.Configuration.CategoryData"/> object.</returns>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.LoggingConfiguration.GetFormatterData(System.String)">
            <summary>
            Get the <see cref="T:Prezza.Framework.Logging.Distributor.Configuration.FormatterData"/> object for the specified formatter.
            </summary>
            <param name="formatter">Name of the formatter.</param>
            <returns>Specified <see cref="T:Prezza.Framework.Logging.Distributor.Configuration.CategoryData"/> object.</returns>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.LoggingConfiguration.GetDefaultFormatterData">
            <summary>
            Get the default <see cref="T:Prezza.Framework.Logging.Distributor.Configuration.FormatterData"/> object.
            </summary>
            <returns>Default <see cref="T:Prezza.Framework.Logging.Distributor.Configuration.FormatterData"/> object.</returns>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.LoggingConfiguration.GetDistributionStrategyData(System.String)">
            <summary>
            Get the <see cref="T:Prezza.Framework.Logging.Configuration.DistributionStrategyData"/> object for the specified distribution strategy.
            </summary>
            <param name="distributionStrategy">Name of the distribution strategy.</param>
            <returns>Specified <see cref="T:Prezza.Framework.Logging.Configuration.DistributionStrategyData"/> object.</returns>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.LoggingConfiguration.GetSinkData(System.String)">
            <summary>
            Get the <see cref="T:Prezza.Framework.Logging.Distributor.Configuration.SinkData"/> object for the specified log sink.
            </summary>
            <param name="sink">Name of the log sink.</param>
            <returns>Specified <see cref="T:Prezza.Framework.Logging.Distributor.Configuration.SinkData"/> object.</returns>
        </member>
        <member name="M:Prezza.Framework.Logging.Configuration.LoggingConfiguration.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load the logging configuration from the specified Xml node.
            </summary>
            <param name="node"><see cref="T:System.Xml.XmlNode"/> containing the logging configuration.</param>
        </member>
        <member name="P:Prezza.Framework.Logging.Configuration.LoggingConfiguration.LoggingEnabled">
            <summary>
            Indicates whether log entries will be distributed or not.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Configuration.LoggingConfiguration.TracingEnabled">
            <summary>
            Indicates whether tracing entries will be distributed.  NOTE:  This feature is currently not supported
            by the framework.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Configuration.LoggingConfiguration.CategoryFilterMode">
            <summary>
            Get/Set the <see cref="P:Prezza.Framework.Logging.Configuration.LoggingConfiguration.CategoryFilterMode"/>.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Configuration.LoggingConfiguration.DistributionStrategy">
            <summary>
            Get/Set the name of the <see cref="T:Prezza.Framework.Logging.Distributor.ILogDistributionStrategy"/>.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Configuration.LoggingConfiguration.MinimumPriority">
            <summary>
            Get/Set the minimum priority for items to log.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Configuration.LoggingConfiguration.CategoryFilters">
            <summary>
            Get/Set the <see cref="T:Prezza.Framework.Logging.Configuration.CategoryFilterDataCollection"/> of <see cref="T:Prezza.Framework.Logging.Configuration.CategoryFilterData"/> objects.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Configuration.LoggingConfiguration.DistributionStrategies">
            <summary>
            Get/Set the <see cref="T:Prezza.Framework.Logging.Configuration.DistributionStrategyDataCollection"/> of <see cref="T:Prezza.Framework.Logging.Configuration.DistributionStrategyData"/> objects.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Configuration.LoggingConfiguration.DefaultFormatter">
            <summary>
            Get/Set the name of the default log entry formatter.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Configuration.LoggingConfiguration.DefaultCategory">
            <summary>
            Get/Set the name of the default log entry category.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.Configuration.CategoryData">
            <summary>
            Container for information about a logging category.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Distributor.Configuration.CategoryData.name">
            <summary>
            Name of the logging category
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Distributor.Configuration.CategoryData.destinationDataCollection">
            <summary>
            Collection <see cref="T:Prezza.Framework.Logging.Distributor.Configuration.DestinationData"/> objects that describe how to handle specific
            log entries depending on their categories.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.CategoryData.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.CategoryData.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the category.</param>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.CategoryData.Name">
            <summary>
            Get/Set the name of the category.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.CategoryData.DestinationDataCollection">
            <summary>
            Get the <see cref="P:Prezza.Framework.Logging.Distributor.Configuration.CategoryData.DestinationDataCollection"/> of <see cref="T:Prezza.Framework.Logging.Distributor.Configuration.DestinationData"/> objects that define
            how log entries for this category will be handled.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.Configuration.CategoryDataCollection">
            <summary>
            Collection of log category information.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.CategoryDataCollection.Item(System.Int32)">
            <summary>
            Get/Set the category information with the specified index.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.CategoryDataCollection.Item(System.String)">
            <summary>
            Get/Set the category information with the specified name.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.CategoryDataCollection.Add(Prezza.Framework.Logging.Distributor.Configuration.CategoryData)">
            <summary>
            Add the specified category data to the collection.
            </summary>
            <param name="categoryData">Category data to add to the collection.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.CategoryDataCollection.Add(System.Object)">
            <summary>
            Add the specified object to the collection. 
            </summary>
            <param name="parameter">Object to add to the collection.  An exception will be thrown if it cannot be cast to type <see cref="T:Prezza.Framework.Logging.Distributor.Configuration.CategoryData"/>.</param>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.Configuration.DatabaseSinkData">
            <summary>
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.DatabaseSinkData.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.DatabaseSinkData.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the log sink.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.DatabaseSinkData.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the log sink.</param>
            <param name="typeName">Type name of the log sink.</param>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.DatabaseSinkData.DbInstanceName">
            <summary>
            Get name of database instance to use for logging data
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.DatabaseSinkData.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load configuration from xml
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.Configuration.DestinationData">
            <summary>
            Destination information for log categories.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Distributor.Configuration.DestinationData.name">
            <summary>
            Name of the destination.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Distributor.Configuration.DestinationData.sink">
            <summary>
            Log Sink to route messages to.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Distributor.Configuration.DestinationData.format">
            <summary>
            Format of messages.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.DestinationData.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.DestinationData.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the destination.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.DestinationData.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the destination.</param>
            <param name="sink">Name of the sink for the destination.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.DestinationData.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the destination.</param>
            <param name="sink">Name of the sink for the destination.</param>
            <param name="format">Format of messages for this destination.</param>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.DestinationData.Name">
            <summary>
            Name of the destination.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.DestinationData.Sink">
            <summary>
            Name of the Log Sink for the destination.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.DestinationData.Format">
            <summary>
            Format of the messages for the destination.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.Configuration.DestinationDataCollection">
            <summary>
            Collection of destination information for log messages.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.DestinationDataCollection.Item(System.Int32)">
            <summary>
            Get/Set the destination data with the specified index.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.DestinationDataCollection.Item(System.String)">
            <summary>
            Get/Set the destination data with the specified name.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.DestinationDataCollection.Add(Prezza.Framework.Logging.Distributor.Configuration.DestinationData)">
            <summary>
            Add the specified destination data to the collection.
            </summary>
            <param name="destinationData">Destination data to add to the collection.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.DestinationDataCollection.Add(System.Object)">
            <summary>
            Add the specified object to the collection.
            </summary>
            <param name="parameter">Object to add to the collection.  An exception will be thrown if the object cannot be cast to a <see cref="T:Prezza.Framework.Logging.Distributor.Configuration.DestinationData"/>.</param>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.Configuration.FlatFileSinkData">
            <summary>
            Configuration for the flat file log sink.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Distributor.Configuration.FlatFileSinkData.fileName">
            <summary>
            Log file path.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Distributor.Configuration.FlatFileSinkData.header">
            <summary>
            Header for messages written to the log.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Distributor.Configuration.FlatFileSinkData.footer">
            <summary>
            Footer for messages written to the log.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.FlatFileSinkData.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.FlatFileSinkData.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the configuration instance.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.FlatFileSinkData.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the configuration instance.</param>
            <param name="fileName">Log file path.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.FlatFileSinkData.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the configuration instance.</param>
            <param name="fileName">Log file path.</param>
            <param name="header">Log message header.</param>
            <param name="footer">Log message footer.</param>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.FlatFileSinkData.FileName">
            <summary>
            Log file path.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.FlatFileSinkData.Header">
            <summary>
            Log message header.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.FlatFileSinkData.Footer">
            <summary>
            Log message footer.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.FlatFileSinkData.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load the sink configuration from the specified Xml node.
            </summary>
            <param name="node">XmlNode containing flat file sink configuration information.</param>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.Configuration.FormatterData">
            <summary>
            Base class for log formatter configuration.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.FormatterData.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the formatter.</param>
            <param name="typeName">Type name of the formatter.</param>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.Configuration.FormatterDataCollection">
            <summary>
            Collection of log formatter configuration objects.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.FormatterDataCollection.Item(System.Int32)">
            <summary>
            Get/Set the formatter data object with the specified index.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.FormatterDataCollection.Item(System.String)">
            <summary>
            Get/Set the formatter data object with the specified name.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.FormatterDataCollection.Add(Prezza.Framework.Logging.Distributor.Configuration.FormatterData)">
            <summary>
            Add a formatter data object to the collection.
            </summary>
            <param name="formatterData">Formatter data object to add to the collection.</param>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.Configuration.NullFormatterData">
            <summary>
            Container for the <see cref="T:Prezza.Framework.Logging.Formatters.TextFormatter"/>'s configuration information.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.NullFormatterData.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.NullFormatterData.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the formatter.</param>
            <param name="dummy">Not used, but required for proper operation.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.NullFormatterData.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Do nothing
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.Configuration.SinkData">
            <summary>
            Base class for log sink configuration information.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.SinkData.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.SinkData.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the log sink.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.SinkData.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the log sink.</param>
            <param name="typeName">Type name of the log sink.</param>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.Configuration.SinkDataCollection">
            <summary>
            Collection of log sink configuration objects.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.SinkDataCollection.Item(System.Int32)">
            <summary>
            Get/Set the configuration object with the specified index.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.SinkDataCollection.Item(System.String)">
            <summary>
            Get/Set the configuration object with the specified name.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.SinkDataCollection.Add(Prezza.Framework.Logging.Distributor.Configuration.SinkData)">
            <summary>
            Add the specified log sink configuration object to the collection.
            </summary>
            <param name="providerData">Log sink configuration object to add to the collection.</param>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.Configuration.SystemEventLogSinkData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.SystemEventLogSinkData.Source">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.SystemEventLogSinkData.Log">
            <summary>
            
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.SystemEventLogSinkData.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.SystemEventLogSinkData.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the log sink.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.SystemEventLogSinkData.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the log sink.</param>
            <param name="typeName">Type name of the log sink.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.SystemEventLogSinkData.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load configuration from xml
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.Configuration.TextFormatterData">
            <summary>
            Container for the <see cref="T:Prezza.Framework.Logging.Formatters.TextFormatter"/>'s configuration information.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Distributor.Configuration.TextFormatterData.templateData">
            <summary>
            Template for text log entries
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.TextFormatterData.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.TextFormatterData.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the formatter.</param>
            <param name="templateData">Template for text-formatted log entries.</param>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.TextFormatterData.Template">
            <summary>
            Get/Set the text format template.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.TextFormatterData.TypeName">
            <summary>
            Type name of the log formatter.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.TextFormatterData.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load the configuration for the <see cref="T:Prezza.Framework.Logging.Formatters.TextFormatter"/>.
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.Configuration.XmlFormatterData">
            <summary>
            Configuration information for the Xml log formatter.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Distributor.Configuration.XmlFormatterData.templateData">
            <summary>
            Template for text log entries
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.XmlFormatterData.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.XmlFormatterData.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the log formatter configuration.</param>
            <param name="templateData">Template for log entries.</param>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.Configuration.XmlFormatterData.Template">
            <summary>
            Get/Set the template for log entries.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.Configuration.XmlFormatterData.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load the configuration of the formatter from the specified Xml node.
            </summary>
            <param name="node">XmlNode containing Xml log formatter configuration information.</param>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.ILogDistributionStrategy">
            <summary>
            Interface for log distribution strategies.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.ILogDistributionStrategy.SendLog(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Send a log entry to the appropriate destination.
            </summary>
            <param name="log">Log entry to distribute.</param>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.InProcLogDistributionStrategy">
            <summary>
            Log distribution strategy that supports sending logging messages to in process components.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Distributor.InProcLogDistributionStrategy.logDistributor">
            <summary>
            Log distributor to process the log and send the messages to the appropriate destinations.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.InProcLogDistributionStrategy.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.InProcLogDistributionStrategy.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the log strategy with the specified InProcDistributionStrategyData object.
            </summary>
            <param name="config">Configuration information for the InProcDistributionStrategy.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.InProcLogDistributionStrategy.SendLog(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Distribute the log to configured receivers.
            </summary>
            <param name="logEntry">Log entry to distribute.</param>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.LogDistributionStrategyFactory">
            <summary>
            Factory object for creating and initialized implementations of <see cref="T:Prezza.Framework.Logging.Distributor.ILogDistributionStrategy"/>.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.LogDistributionStrategyFactory.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.LogDistributionStrategyFactory.#ctor(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Constructor.
            </summary>
            <param name="config">Log distribution strategy configuration file containing information about the <see cref="T:Prezza.Framework.Logging.Distributor.ILogDistributionStrategy"/> implementing objects that the factory can create.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.LogDistributionStrategyFactory.CreateDistributionStrategy(System.String)">
            <summary>
            Create the distribution strategy object with the specified name.
            </summary>
            <param name="distributionName">Name of the distribution strategy object to create.</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.LogDistributionStrategyFactory.GetConfigurationObject(System.String)">
            <summary>
            Get the DistributionStrategyData object with the specified name.
            </summary>
            <param name="providerName">Name of the distribution strategy data object to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.LogDistributionStrategyFactory.GetConfigurationType(System.String)">
            <summary>
            For the specified distribution strategy name, get the <see cref="T:System.Type"/> of the corresponding
            <see cref="T:Prezza.Framework.Logging.Distributor.ILogDistributionStrategy"/> configuration.
            </summary>
            <param name="configurationName"></param>
            <returns></returns>
        </member>
        <member name="T:Prezza.Framework.Logging.Distributor.LogDistributor">
            <summary>
            Distribute log entries to designated (by configuration) log sinks.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Distributor.LogDistributor.loggingConfig">
            <summary>
            Logging configuration information.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.LogDistributor.#ctor(Prezza.Framework.Logging.Configuration.LoggingConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="loggingConfig">Logging configuration information.</param>
        </member>
        <member name="P:Prezza.Framework.Logging.Distributor.LogDistributor.ConfigurationObject">
            <summary>
            Get the configuration object for the LogDistributor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.LogDistributor.ProcessLog(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Process the specified log entry but verifying that filter constraints are met, creating the 
            appropriate log sink and log formatter, and sending the message to the log sink.
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.LogDistributor.DistributeLogEntry(Prezza.Framework.Logging.LogEntry,Prezza.Framework.Logging.Distributor.Configuration.CategoryData)">
            <summary>
            Distribute the log entry to each destination of the specified category.
            </summary>
            <param name="log">Log entry to distribute.</param>
            <param name="category">Category of log entry.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.LogDistributor.GetCategory(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Get the category of the log entry.  If the log entry category is not set, attempt to set the category
            to the default category specified in the configuration.
            </summary>
            <param name="log">Log entry to get the category of.</param>
            <returns>Category data.</returns>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.LogDistributor.CreateFormatter(System.String)">
            <summary>
            Create an instance of the specified log formatter.
            </summary>
            <param name="formatterName">Name of the log formatter to create.</param>
            <returns>Instance of specified log formatter.</returns>
        </member>
        <member name="M:Prezza.Framework.Logging.Distributor.LogDistributor.CreateSink(System.String)">
            <summary>
            Create an instance of the specified log sink.
            </summary>
            <param name="sinkName">Name of the log sink to create.</param>
            <returns>Instance of the specified log sink.</returns>
        </member>
        <member name="T:Prezza.Framework.Logging.Filters.ILogFilter">
            <summary>
            Interface definition for log filter objects.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Filters.ILogFilter.Filter(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Evaluate a filter on the specified log entry.
            </summary>
            <param name="log">Log entry to base filter evaluation on.</param>
            <returns>True if the log entry satisfies the constraints of the filter.</returns>
        </member>
        <member name="T:Prezza.Framework.Logging.Formatters.DictionaryToken">
            <summary>
            Formatter for dictionary containing one or more name/value pairs.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.DictionaryToken.DictionaryKeyToken">
            <summary>
            Token to identify the position of dictionary key in the log message.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.DictionaryToken.DictionaryValueToken">
            <summary>
            Token to identify the position of the dictionary value in the log message.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.DictionaryToken.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.DictionaryToken.FormatToken(System.String,Prezza.Framework.Logging.LogEntry)">
            <summary>
            Replace any dictionary item tokens found in the log entry with their values.  The items are stored in the 
            Extended properties property of the log entry.
            </summary>
            <param name="tokenTemplate">Template for the token replacement, e.g. "{key} {value}" or "{datetime}"</param>
            <param name="log">Log entry containing the message to replace any tokens in.</param>
            <returns>String containing result of token formatting.</returns>
        </member>
        <member name="T:Prezza.Framework.Logging.Formatters.ILogFormatter">
            <summary>
            Log formatter interface.  Any custom formatter used by the logging framework
            must implement this interface.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.ILogFormatter.Format(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Return a string containing a formatted log entry.
            </summary>
            <param name="log">Log entry containing message to format and other information about a particular log entry.</param>
            <returns>String containing the formatted log entry.</returns>
        </member>
        <member name="T:Prezza.Framework.Logging.Formatters.KeyValueToken">
            <summary>
            Special token function that supports a name/value pair.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.KeyValueToken.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.KeyValueToken.FormatToken(System.String,Prezza.Framework.Logging.LogEntry)">
            <summary>
            Get the value of a token to replace, where the vakue is contained in a dictionary-type structure with
            the token template as the key.
            </summary>
            <param name="tokenTemplate">Template for the token.</param>
            <param name="log">Log entry containing context about the log entry.</param>
            <returns>Value of the token.</returns>
        </member>
        <member name="T:Prezza.Framework.Logging.Formatters.NullLogFormatter">
            <summary>
            Log formatter that does nothing.  Required for logging situations (such as database) where a formatter is not necessary.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.NullLogFormatter.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Do nothing
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.NullLogFormatter.Format(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Do nothing
            </summary>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="T:Prezza.Framework.Logging.Formatters.TextFormatter">
            <summary>
            Formatter for text log entries.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.textFormatterData">
            <summary>
            Configuration information for the text formatter.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.templateBuilder">
            <summary>
            Builder for the text format template.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.tokenFunctions">
            <summary>
            List of token functions used by the text formatter.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.timeStampToken">
            <summary>
            System time the log entry was created.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.messageToken">
            <summary>
            Message to log.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.categoryToken">
            <summary>
            Category of message.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.priorityToken">
            <summary>
            Priority of message.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.eventIdToken">
            <summary>
            Event Id associated with the log entry.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.severityToken">
            <summary>
            Severity of the log entry.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.titleToken">
            <summary>
            Title to write for the log entry.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.machineToken">
            <summary>
            Machine name the log entry was created on.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.appDomainToken">
            <summary>
            Application domain.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.processIdToken">
            <summary>
            Process Id.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.processNameToken">
            <summary>
            Process Name.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.threadNameToken">
            <summary>
            Thread Name.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.win32ThreadIdToken">
            <summary>
            Win32 Thread Id
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.NewLineToken">
            <summary>
            New line.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TextFormatter.TabToken">
            <summary>
            Tab.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.TextFormatter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.TextFormatter.#ctor(Prezza.Framework.Logging.Distributor.Configuration.TextFormatterData)">
            <summary>
            Constructor.
            </summary>
            <param name="textFormatterData">Text log configuration information.</param>
        </member>
        <member name="P:Prezza.Framework.Logging.Formatters.TextFormatter.TemplateBuilder">
            <summary>
            Get the builder to use for formatting the message.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.TextFormatter.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the text formatter with its configuration.
            </summary>
            <param name="config">Configuration object for the text formatter.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.TextFormatter.RegisterTemplate">
            <summary>
            Create a new builder based on the text formatter's template and register the token functions.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Formatters.TextFormatter.FormatterData">
            <summary>
            Get the configuration of the text formatter.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.TextFormatter.Format(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Format the log entry based on the formatter configuration.
            </summary>
            <param name="log">Log entry to format.</param>
            <returns>String containing the formatted log entry.</returns>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.TextFormatter.FormatTokenFunctions(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Run each of the token functions.
            </summary>
            <param name="log">Log entry to format.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.TextFormatter.RegisterTokenFunctions">
            <summary>
            Set the token functions for the formatter. Currently, these are <see cref="T:Prezza.Framework.Logging.Formatters.DictionaryToken"/>,
            <see cref="T:Prezza.Framework.Logging.Formatters.KeyValueToken"/>, and <see cref="T:Prezza.Framework.Logging.Formatters.TimeStampToken"/>.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Logging.Formatters.TimeStampToken">
            <summary>
            Token for inserting a timestamp in a string.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.TimeStampToken.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.TimeStampToken.FormatToken(System.String,Prezza.Framework.Logging.LogEntry)">
            <summary>
            Replace the token template with the timestamp in the log entry.
            </summary>
            <param name="tokenTemplate">Template to replace.</param>
            <param name="log">Log entry containing message to replace the token in.</param>
            <returns>String containing formatted text.</returns>
        </member>
        <member name="T:Prezza.Framework.Logging.Formatters.TokenFunction">
            <summary>
            Base class for token formatting/replacement functionality for loggging.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TokenFunction.startDelimiter">
            <summary>
            Start delimiter of a token.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.TokenFunction.endDelimiter">
            <summary>
            End delimiter of a token.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.TokenFunction.#ctor(System.String)">
            <summary>
            Constructor.  Assumes the token end delimiter will be a default value.
            </summary>
            <param name="tokenStartDelimiter">Token start delimiter.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.TokenFunction.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="tokenStartDelimiter">Start delimiter for the token.</param>
            <param name="tokenEndDelimiter">End delimiter for the token.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.TokenFunction.Format(System.Text.StringBuilder,Prezza.Framework.Logging.LogEntry)">
            <summary>
            Update a string to replace tokens with their values.
            </summary>
            <param name="messageBuilder"><see cref="T:System.Text.StringBuilder"/> containing string with tokens.</param>
            <param name="log">Log entry that will contain the formatted message.  The information in the object may be used by
            the formatting functions.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.TokenFunction.FormatToken(System.String,Prezza.Framework.Logging.LogEntry)">
            <summary>
            Format the token string.
            </summary>
            <param name="tokenTemplate">Token to replace.</param>
            <param name="log">Log entry that will contain the message.  Passed in case the method
            requires an information about the log entry.</param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.TokenFunction.GetInnerTemplate(System.Int32,System.String)">
            <summary>
            Get the next token string without its start and end delimiters.
            </summary>
            <param name="startPos">Position to start searching for the token from.</param>
            <param name="message">String containing the tokens.</param>
            <returns>Token string without the start and end delimiters.</returns>
        </member>
        <member name="T:Prezza.Framework.Logging.Formatters.XmlFormatter">
             <summary>
            Put log entries in Xml format.
             </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.xmlFormatterData">
            <summary>
            Configuration information for the Xml formatter.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.templateBuilder">
            <summary>
            Builder for formatting the messages.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.tokenFunctions">
            <summary>
            List of token functions to run when formatting the message.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.timeStampToken">
            <summary>
            Timestamp.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.messageToken">
            <summary>
            Message.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.categoryToken">
            <summary>
            Category of the message.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.priorityToken">
            <summary>
            Priority of the message.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.eventIdToken">
            <summary>
            Event Id associated with the log entry.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.severityToken">
            <summary>
            Severity of the entry.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.titleToken">
            <summary>
            Title to write before the log entry.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.machineToken">
            <summary>
            Machine Name.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.appDomainToken">
            <summary>
            Application domain.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.processIdToken">
            <summary>
            Process Id.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.processNameToken">
            <summary>
            Process Name.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.threadNameToken">
            <summary>
            Thread Name.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.win32ThreadIdToken">
            <summary>
            Thread Id.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.NewLineToken">
            <summary>
            New line.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Formatters.XmlFormatter.TabToken">
            <summary>
            Tab.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.XmlFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.XmlFormatter.#ctor(Prezza.Framework.Logging.Distributor.Configuration.XmlFormatterData)">
            <summary>
            Constructor.
            </summary>
            <param name="xmlFormatterData">Xml formatter configuration information.</param>
        </member>
        <member name="P:Prezza.Framework.Logging.Formatters.XmlFormatter.TemplateBuilder">
            <summary>
            Get/Set the builder used to format the message.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.XmlFormatter.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the xml formatter with its configuration information.
            </summary>
            <param name="config">Xml formatter configuration object.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.XmlFormatter.RegisterTemplate">
            <summary>
            Create the builder based on the template specified in the configuration and register
            the token functions.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Formatters.XmlFormatter.FormatterData">
            <summary>
            Get the formatter configuration.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.XmlFormatter.Format(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Format the log entry according to the configuration of the formatter.
            </summary>
            <param name="log">Log entry to format.</param>
            <returns>Formatted log message.</returns>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.XmlFormatter.FormatTokenFunctions(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Run the token format functions on the log entry.
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:Prezza.Framework.Logging.Formatters.XmlFormatter.RegisterTokenFunctions">
            <summary>
            Create the list of token functions to run.  Includes <see cref="T:Prezza.Framework.Logging.Formatters.DictionaryToken"/>, <see cref="T:Prezza.Framework.Logging.Formatters.KeyValueToken"/>, 
            and <see cref="T:Prezza.Framework.Logging.Formatters.TimeStampToken"/>.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Logging.LogEntry">
            <summary>
            Container for log items to send/distribute.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.LogEntry.category">
            <summary>
            Category of the entry.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.LogEntry.errorMessages">
            <summary>
            Builder for generating error messages.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.LogEntry.#ctor">
            <summary>
            Constructor.  Initializes properties that can be determine automatically, such as thread name, process name, etc.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.LogEntry.#ctor(System.Object,System.String,System.Int32,System.Int32,Prezza.Framework.Logging.Severity,System.String,System.Collections.IDictionary)">
            <summary>
            Constructor.  Initializes properties that can be determine automatically, such as thread name, process name, etc.
            </summary>
            <param name="message">Message to send.</param>
            <param name="category">Category of the _message.</param>
            <param name="priority">Priority of the _message.</param>
            <param name="eventId">Event Id associated with the entry.</param>
            <param name="severity">Severity of the event.</param>
            <param name="title">Title of the entry.</param>
            <param name="properties">Additional properties to log.</param>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.ApplicationContext">
            <summary>
            Get/set application context, if any, associated with the entry
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.Message">
            <summary>
            Get/Set the log _message.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.Category">
            <summary>
            Get/Set the entry's category.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.Priority">
            <summary>
            Get/Set the entry's priority.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.EventId">
            <summary>
            Get/Set the event Id associated with the entry.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.Severity">
            <summary>
            Get/Set the severity of the event.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.LoggedSeverity">
            <summary>
            Get the int that will be logged as the severity.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.Title">
            <summary>
            Get/Set the title of the entry.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.TimeStamp">
            <summary>
            Get/Set the timestamp of the entry.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.MachineName">
            <summary>
            Get/Set the machine name.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.AppDomainName">
            <summary>
            Get/Set the application domain name.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.ProcessId">
            <summary>
            Get/Set the id of the process.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.ProcessName">
            <summary>
            Get/Set the name of the process.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.ManagedThreadName">
            <summary>
            Get/Set the name of the thread.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.Win32ThreadId">
            <summary>
            Get/Set the id of the thread.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.ExtendedProperties">
            <summary>
            Get/Set the extended properties associated with the log entry.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.TimeStampString">
            <summary>
            Get the timestamp as a string
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.LogEntry.Clone">
            <summary>
            Clone the log entry.
            </summary>
            <returns>A LogEntry object that is a clone of the original.</returns>
        </member>
        <member name="M:Prezza.Framework.Logging.LogEntry.AddErrorMessage(System.String)">
            <summary>
            Add an error _message to the error _message builder.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Prezza.Framework.Logging.LogEntry.ErrorMessages">
            <summary>
            Get the error messages builder object.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.LogEntry.CollectIntrinsicProperties">
            <summary>
            Get the values of properties that are not set by calling methods.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Logging.Logger">
            <summary>
            Logger of messages for the framework.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Logger.sync">
            <summary>
            Sync object to ensure only one thread creates a writer object.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Logger.writer">
            <summary>
            Writer to use to write log messages.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Logger.DefaultPriority">
            <summary>
            Default priority for log messages.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Logger.DefaultSeverity">
            <summary>
            Default severity for log messages.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Logger.DefaultEventId">
            <summary>
            Default event id to associate with log messages.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Logger.DefaultTitle">
            <summary>
            Default title for log messages.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Logger.#ctor">
            <summary>
            Constructor.  Since all methods are static, this is private.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Logger.Write(System.Object)">
            <summary>
            Write a message using default parameters.
            </summary>
            <param name="message">Message to write.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Logger.Write(System.Object,System.String)">
            <summary>
            Write a log message.
            </summary>
            <param name="message">Message to write.</param>
            <param name="category">Category of the message.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Logger.Write(System.Object,System.String,System.Int32)">
            <summary>
            Write a log message.
            </summary>
            <param name="message">Message to write.</param>
            <param name="category">Category of the message.</param>
            <param name="priority">Priority of the message.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Logger.Write(System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            Write a log message.
            </summary>
            <param name="message">Message to write.</param>
            <param name="category">Category of the message.</param>
            <param name="priority">Priority of the message.</param>
            <param name="eventId">Event Id associated with the message.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Logger.Write(System.Object,System.String,System.Int32,System.Int32,Prezza.Framework.Logging.Severity)">
            <summary>
            Write a log message.
            </summary>
            <param name="message">Message to write.</param>
            <param name="category">Category of the message.</param>
            <param name="priority">Priority of the message.</param>
            <param name="eventId">Event Id associated with the message.</param>
            <param name="severity">Severity of the message.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Logger.Write(System.Object,System.String,System.Int32,System.Int32,Prezza.Framework.Logging.Severity,System.String)">
            <summary>
            Write a log message.
            </summary>
            <param name="message">Message to write.</param>
            <param name="category">Category of the message.</param>
            <param name="priority">Priority of the messgae.</param>
            <param name="eventId">Event Id associated with the message.</param>
            <param name="severity">Severity of the message.</param>
            <param name="title">Title of the message.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Logger.Write(System.Object,System.Collections.IDictionary)">
            <summary>
            Write a log message.
            </summary>
            <param name="message">Message to write.</param>
            <param name="properties">Properties dictionary to containing properties and values to write.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Logger.Write(System.Object,System.String,System.Int32,System.Collections.IDictionary)">
            <summary>
            Write a log message.
            </summary>
            <param name="message">Message to write.</param>
            <param name="category">Category of the message.</param>
            <param name="priority">Priority of the message.</param>
            <param name="properties">Additional properties to write with the message.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Logger.Write(System.Object,System.String,System.Int32,System.Int32,Prezza.Framework.Logging.Severity,System.String,System.Collections.IDictionary)">
            <summary>
            Write a log message.
            </summary>
            <param name="message">Message to write.</param>
            <param name="category">Category of the message.</param>
            <param name="priority">Priority of the message.</param>
            <param name="eventId">Event Id associated with the message.</param>
            <param name="severity">Severity of the message.</param>
            <param name="title">Title of the message.</param>
            <param name="properties">Additional properties associated with the message.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Logger.Write(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Write a log entry.
            </summary>
            <param name="log">Log entry to write.</param>
        </member>
        <member name="P:Prezza.Framework.Logging.Logger.Writer">
            <summary>
            Get a log writer instance.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Logging.LogWriter">
            <summary>
            Instantiate the configured log distribution strategy and cause it to send the log entry
            to configured sinks and destinations.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.LogWriter.loggingConfiguration">
            <summary>
            Framework logging configuration object.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.LogWriter.#ctor(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Constructor.
            </summary>
            <param name="config">Object containing the framework logging configuration.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.LogWriter.Write(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Write the log entry by using a distribution strategy to send it to configured log sinks, but only if the logging configuration specifies that logging is enabled.
            </summary>
            <param name="log">Log entry to write.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.LogWriter.SendMessage(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Use a distribution strategy to send a log entry to configured log sinks.
            </summary>
            <param name="logEntry">Log entry to send.</param>
        </member>
        <member name="T:Prezza.Framework.Logging.Severity">
            <summary>
            Severity of a log entry.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Severity.Unspecified">
            <summary>
            No severity was specified.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Severity.Information">
            <summary>
            The entry contains informational content only.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Severity.Warning">
            <summary>
            The entry contains a warning of a condition that may result in an error.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Severity.Error">
            <summary>
            The entry contains a description of an error condition.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Logging.SeverityMap">
            <summary>
            (NOT IMPLEMENTED) Map log severity levels to EventLogEntryType
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.SeverityMap.#ctor">
            <summary>
            (NOT IMPLEMENTED)
            </summary>
        </member>
        <member name="T:Prezza.Framework.Logging.Sinks.DatabaseLogSink">
            <summary>
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Sinks.DatabaseLogSink.DbInstanceName">
            <summary>
            Get/set name of database instance to log messages to
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.DatabaseLogSink.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the log sink with its configuration
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.DatabaseLogSink.SendMessageCore(Prezza.Framework.Logging.LogEntry)">
            <summary>
            "Send" the message to the database.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.DatabaseLogSink.WriteMessageToDatabase(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Write the log message to the database
            </summary>
            <param name="entry"></param>
        </member>
        <member name="T:Prezza.Framework.Logging.Sinks.FlatFileSink">
            <summary>
            Log sink for writing log messages to a flat file.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Sinks.FlatFileSink.syncObject">
            <summary>
            Sync object to control writing to the log file.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Sinks.FlatFileSink.config">
            <summary>
            Configuration information for the sink.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.FlatFileSink.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.FlatFileSink.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            Initialize the file sink with it's configuration.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.FlatFileSink.SendMessageCore(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Core send message routine which validates log entry parameters and writes the message to the file.
            </summary>
            <param name="logEntry">Log entry to write.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.FlatFileSink.ValidateParameters(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Validate log entry by setting some default values and ensuring that sink configuration
            information exists.
            </summary>
            <param name="logEntry">Log entry to write.</param>
            <returns>True if the parameters were sucessfully validated.</returns>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.FlatFileSink.GetFlatFileSinkDataFromCursor">
            <summary>
            Get the configuration for the log sink.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.FlatFileSink.WriteMessageToFile(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Write the log message to the file.  If the file or directory containing the file
            does not exist, this method will create it/them.
            </summary>
            <param name="logEntry">Log entry to write.</param>
        </member>
        <member name="T:Prezza.Framework.Logging.Sinks.ILogSink">
            <summary>
            All log sinks used by the logging framework implement this interface.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.ILogSink.SendMessage(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Send the log entry to the sink.
            </summary>
            <param name="log">Log entry to send.</param>
        </member>
        <member name="P:Prezza.Framework.Logging.Sinks.ILogSink.Formatter">
            <summary>
            Get/Set the log formatter for the sink.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Logging.Sinks.LogSink">
            <summary>
            Base class for log sinks.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Logging.Sinks.LogSink.formatter">
            <summary>
            Formatter for the log sink.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.LogSink.SendMessage(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Prepare and send a log message to the configured destinations.
            </summary>
            <param name="entry">Log entry to send</param>
        </member>
        <member name="P:Prezza.Framework.Logging.Sinks.LogSink.Formatter">
            <summary>
            Get the log formatter for the sink.  It it does not exist (is null), create it.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.LogSink.FormatEntry(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Format the log entry according to the sink configuration.
            </summary>
            <param name="entry">Log entry to format.</param>
            <returns>Formatted log message.</returns>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.LogSink.PrepareMessage(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Prepare the message.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.LogSink.SendMessageCore(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Send/Write the message.
            </summary>
            <param name="entry">Log entry to send/write.</param>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.LogSink.AddActivityIdToLogEntry(Prezza.Framework.Logging.LogEntry)">
            <summary>
            Add an activity Id to the log message.
            </summary>
            <param name="entry">Log entry to add an activity Id to</param>
        </member>
        <member name="T:Prezza.Framework.Logging.Sinks.SystemEventLogSink">
            <summary>
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Sinks.SystemEventLogSink.Source">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Logging.Sinks.SystemEventLogSink.Log">
            <summary>
            
            </summary>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.SystemEventLogSink.Initialize(Prezza.Framework.Configuration.ConfigurationBase)">
            <summary>
            
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.SystemEventLogSink.SendMessageCore(Prezza.Framework.Logging.LogEntry)">
            <summary>
            "Send" the message to the database.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Prezza.Framework.Logging.Sinks.SystemEventLogSink.WriteMessageToEventLog(Prezza.Framework.Logging.LogEntry,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="entry"></param>
            <param name="source"></param>
            <param name="log"></param>
        </member>
        <member name="T:Prezza.Framework.Security.AbstractAccessControlList">
            <summary>
            Abstract base class
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.AbstractAccessControlList._entries">
            <summary>
            In-memory store for loaded ACL Entries.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.AbstractAccessControlList._entriesToAdd">
            <summary>
            New entries to add to the acl
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.AbstractAccessControlList._entriesToDelete">
            <summary>
            Entries to delete from the acl
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.AbstractAccessControlList.ID">
            <summary>
            The unique ID of this AccessControlList
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.#ctor(System.Int32)">
            <summary>
            Abstract control list with acl id
            </summary>
            <param name="aclId"></param>
        </member>
        <member name="P:Prezza.Framework.Security.AbstractAccessControlList.Entries">
            <summary>
            Get a reference to the entries dictionary
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.AbstractAccessControlList.EntriesToAdd">
            <summary>
            Get a reference to the dictionary of entries to add
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.AbstractAccessControlList.EntriesToDelete">
            <summary>
            Get a reference to the dictionary of entries to delete
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.GetEntriesToDelete">
            <summary>
            Get a list of all acl entries to delete
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.GetEntriesToAdd">
            <summary>
            Get a list of all acl entries to add.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.Save">
            <summary>
            Commit changes to the acl
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.CreateAclIdentifier(Prezza.Framework.Security.IAccessControlEntry)">
            <summary>
            Creates a string identifier for use in AccessControlLists
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.CreateAclIdentifier(Prezza.Framework.Security.IAccessPermissible)">
            <summary>
            Creates a string identifier for use in AccessControlLists
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.CreateAclIdentifier(System.String,System.String)">
            <summary>
            Create a string identifier for use in Access Control List
            </summary>
            <param name="aclTypeIdentifier"></param>
            <param name="aclEntryIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.LoadEntries">
            <summary>
            Load entries for the access control list
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.Add(Prezza.Framework.Security.IAccessControlEntry)">
            <summary>
            Add an entry to the list
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.GetPolicyEntry(System.Int32)">
            <summary>
            
            </summary>
            <param name="policyId"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.Add(Prezza.Framework.Security.IAccessPermissible,Prezza.Framework.Security.Policy)">
            <summary>
            Add an entry to an acess control list
            </summary>
            <param name="entry"></param>
            <param name="policy"></param>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.Delete(Prezza.Framework.Security.IAccessPermissible)">
            <summary>
            Remove an entry from an access control list
            </summary>
            <param name="entry"></param>
            <remarks>Entries aren't persisted until the ACL is committed.</remarks>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.Delete(Prezza.Framework.Security.IAccessControlEntry)">
            <summary>
            Delete an entry from the access list
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.GetPolicy(Prezza.Framework.Security.IAccessPermissible)">
            <summary>
            Gets the Policy stored for a given entry in this AccessControlList
            </summary>
            <param name="permissibleEntity">an <see cref="T:Prezza.Framework.Security.IAccessPermissible"/> entity, e.g., IPrincipal, Group, Role</param>
            <returns>the <see cref="T:Prezza.Framework.Security.Policy"/> for this entry, if exists; otherwise null</returns>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.IsInList(Prezza.Framework.Security.IAccessPermissible)">
            <summary>
            Gets whether a given entity has an entry in this AccessControlList
            </summary>
            <param name="permissibleEntity">an <see cref="T:Prezza.Framework.Security.IAccessPermissible"/> entity, e.g., IPrincipal, Group, Role</param>
            <returns>true, if exists in AccessControlList; otherwise false</returns>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.IsInList(System.String)">
            <summary>
            Gets whether a given entity has an entry in this AccessControlList
            </summary>
            <param name="entryIdentifier">an <see cref="T:Prezza.Framework.Security.IAccessPermissible"/>Entry id generated by CreateAclIdentifier</param>
            <returns>true, if exists in AccessControlList; otherwise false</returns>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.SelectAll">
            <summary>
            Select all entries on the access list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.SelectAnd(System.String[])">
            <summary>
            Select all entries on the access list that have all specified permissions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.AbstractAccessControlList.SelectOr(System.String[])">
            <summary>
            Select all entries on the access list where policy has at least one permission.
            </summary>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="T:Prezza.Framework.Security.AccessControlEntry">
            <summary>
            Represents an entry in and <see cref="T:Prezza.Framework.Security.AccessControlList"/>
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.AccessControlEntry.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initialze access control entry with entry identifier and policy id for
            lazy loading.
            </summary>
            <param name="aclEntryTypeIdentifier">ACL Entry type id.</param>
            <param name="aclEntryIdentifier">Entry identifier unique to the entry type.</param>
            <param name="policyId">Entry policy id.</param>
        </member>
        <member name="M:Prezza.Framework.Security.AccessControlEntry.#ctor(Prezza.Framework.Security.IAccessPermissible,Prezza.Framework.Security.Policy)">
            <summary>
            Constructor.
            </summary>
            <param name="permissible">Permissible object to create _policy entry for.</param>
            <param name="policy">Policy for entry.</param>
        </member>
        <member name="P:Prezza.Framework.Security.AccessControlEntry.Policy">
            <summary>
            Get the entry _policy.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.AccessControlEntry.PolicyId">
            <summary>
            Get/set id of acl entry policy
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.AccessControlEntry.AclEntryTypeIdentifier">
            <summary>
            Get/set acl entry type identifier
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.AccessControlEntry.AclEntryIdentifier">
            <summary>
            Get/set entry identifier
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.AccessControlEntry.IsInList">
            <summary>
            Uses to check entry availability
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.AccessControlEntry.Equals(Prezza.Framework.Security.IAccessControlEntry)">
            <summary>
            Equality comparer
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Prezza.Framework.Security.AccessControlList">
            <summary>
            A collection of IAccessControlEntry objects associated with IAccessControllable resources.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.AccessControlList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.AccessControlList.#ctor(System.Int32)">
            <summary>
            Construct acl with id
            </summary>
            <param name="aclId"></param>
        </member>
        <member name="T:Prezza.Framework.Security.AclMapper">
            <summary>
            Internal class for handling persistant storage and retrieval of acl information.  
            </summary>
            <remarks>
            Since this 
            storage is specific to an application, this class will eventually move to the Checkbox 
            namespace.
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Security.AclMapper.Insert">
            <summary>
            Create an ACL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.AclMapper.Find(System.Int32)">
            <summary>
            Find an ACL in the database
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.AclMapper.Update(Prezza.Framework.Security.AbstractAccessControlList)">
            <summary>
            Update an access control list
            </summary>
            <param name="acl"></param>
        </member>
        <member name="M:Prezza.Framework.Security.AclMapper.DeleteAclEntries(System.Int32,System.Collections.Generic.List{Prezza.Framework.Security.IAccessControlEntry},System.Data.IDbTransaction)">
            <summary>
            Delete acl entries as part of a database transaction.
            </summary>
            <param name="aclId"></param>
            <param name="entriesToDelete"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:Prezza.Framework.Security.AclMapper.AddAclEntries(System.Int32,System.Collections.Generic.List{Prezza.Framework.Security.IAccessControlEntry},System.Data.IDbTransaction)">
            <summary>
            Add acl entries to database.
            </summary>
            <param name="aclId"></param>
            <param name="entriesToAdd"></param>
            <param name="transaction"></param>
        </member>
        <member name="F:Prezza.Framework.Security.AclMapper._cache">
            <summary>
            Cache
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.AclMapper.#cctor">
            <summary>
            Static contructor
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.AclMapper.ListEntries(System.Int32)">
            <summary>
            ist
            </summary>
            <param name="aclId"></param>
            <returns></returns>
        </member>
        <member name="T:Prezza.Framework.Security.AuthorizationException">
            <summary>
            Summary description for AuthorizationException.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.AuthorizationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Security.AuthorizationFactory">
            <summary>
            Creates and initializes authorization provider objects.
            </summary>
            <remarks>
            The authentication factory creates authorization provider objects that
            implement the <see cref="T:Prezza.Framework.Security.IAuthorizationProvider" /> interface.
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Security.AuthorizationFactory.#cctor">
            <summary>
            Constructor.  Since this class only exposes static methods, there
            should be no need to call the constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.AuthorizationFactory.GetAuthorizationProvider">
            <summary>
            Create and initialize an instance of the default authorization 
            provider. 
            </summary>
            <returns>Initialized instance of an authorization provider.</returns>
            <remarks>
            The returned authorization provider implements the 
            <see cref="T:Prezza.Framework.Security.IAuthorizationProvider" /> interface.</remarks>
            <exception cref="T:System.Exception">Unable to create default IAuthorizationProvider</exception>
        </member>
        <member name="M:Prezza.Framework.Security.AuthorizationFactory.GetAuthorizationProvider(System.String)">
            <summary>
            Create and initialize an instance of the specified authorization 
            provider. 
            </summary>
            <param name="authorizationProvider">Name of the authorization provider to instantiate and initialize.</param>
            <returns>Initialized instance of an authorization provider.</returns>
            <remarks>
            The returned authorization provider implements the 
            <see cref="T:Prezza.Framework.Security.IAuthorizationProvider" /> interface.</remarks>
            <exception cref="T:System.ArgumentNullException">authorizationProvider is null</exception>
            <exception cref="T:System.ArgumentException">authorizationProvider is empty</exception>
            <exception cref="T:System.Exception">Could not find instance specified in authorizationProvider</exception>
            <exception cref="T:System.InvalidOperationException">Error processing configuration information defined in application configuration file.</exception>
        </member>
        <member name="M:Prezza.Framework.Security.AuthorizationFactory.ConfigurationManager_ConfigurationChanged(System.Object,Prezza.Framework.Configuration.ConfigurationChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Prezza.Framework.Security.AuthorizationProviderFactory">
            <summary>
            Handles creation and initialization of instances of authorization provider objects.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.AuthorizationProviderFactory.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="factoryName">Name of the provider factory.</param>
        </member>
        <member name="M:Prezza.Framework.Security.AuthorizationProviderFactory.#ctor(System.String,Prezza.Framework.Security.Configuration.SecurityConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="factoryName">Name of the provider factory.</param>
            <param name="config">Security configuration information.</param>
        </member>
        <member name="M:Prezza.Framework.Security.AuthorizationProviderFactory.GetAuthorizationProvider">
            <summary>
            Get an instance of an authorization provider.
            </summary>
            <returns>Instance of the default <see cref="T:Prezza.Framework.Security.IAuthorizationProvider" />.</returns>
        </member>
        <member name="M:Prezza.Framework.Security.AuthorizationProviderFactory.GetAuthorizationProvider(System.String)">
            <summary>
            Get an instance of an authorization provider with the specified name.
            </summary>
            <param name="providerName">Name of the provider to get an instance of.</param>
            <returns>Instance of the specified <see cref="T:Prezza.Framework.Security.IAuthorizationProvider" />.</returns>
        </member>
        <member name="M:Prezza.Framework.Security.AuthorizationProviderFactory.GetConfigurationObject(System.String)">
            <summary>
            Get the configuration object for the specified provider.
            </summary>
            <param name="providerName">Name of the provider to get configuration for.</param>
            <returns><see cref="T:Prezza.Framework.Configuration.ProviderData" /> object for the specified provider.</returns>
        </member>
        <member name="M:Prezza.Framework.Security.AuthorizationProviderFactory.GetConfigurationType(System.String)">
            <summary>
            Get the <see cref="T:System.Type" /> of the specified authorization provider.
            </summary>
            <param name="authorizationProviderName">Name of the authorization provider.</param>
            <returns><see cref="T:System.Type" /> of the specified authorization provider.</returns>
        </member>
        <member name="M:Prezza.Framework.Security.AuthorizationProviderFactory.GetDefaultInstanceName">
            <summary>
            Get the name of the default authorization provider (if specified in the configuration).
            </summary>
            <returns>Name of the default authorization provider.</returns>
        </member>
        <member name="T:Prezza.Framework.Security.Configuration.SecurityConfiguration">
            <summary>
            Configuration object for framework security configuration information, including configuration information
            for the various security providers.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.Configuration.SecurityConfiguration.authenticationProviders">
            <summary>
            Collection of authentication provider configuration objects.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.Configuration.SecurityConfiguration.authorizationProviders">
            <summary>
            Collection of authorization provider configuration objects.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.Configuration.SecurityConfiguration.profileProviders">
            <summary>
            Collection of profile provider configuration objects
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.Configuration.SecurityConfiguration.sessionTokenProviders">
            <summary>
            Collection of sessionToken provider configuration objects
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.Configuration.SecurityConfiguration.defaultAuthenticationProvider">
            <summary>
            Name of the default authentication provider.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.Configuration.SecurityConfiguration.defaultAuthorizationProvider">
            <summary>
            Name of the default authorization provider.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.Configuration.SecurityConfiguration.defaultProfileProvider">
            <summary>
            Name of the default profile provider.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.Configuration.SecurityConfiguration.defaultSessionTokenProvider">
            <summary>
            Name of the default session token provider
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.Configuration.SecurityConfiguration.cacheConfiguration">
            <summary>
            Configuration for the security cache
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.Configuration.SecurityConfiguration.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.Configuration.SecurityConfiguration.#ctor(System.String)">
            <summary>
            Class constructor.
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="M:Prezza.Framework.Security.Configuration.SecurityConfiguration.GetAuthenticationProviderConfig(System.String)">
            <summary>
            Get the custom configuration object for the specified authentication provider.
            </summary>
            <param name="providerName">Name of the authentication provider.</param>
            <returns>Custom configuration object that extends the <see cref="T:Prezza.Framework.Configuration.ProviderData" /> class.</returns>
        </member>
        <member name="M:Prezza.Framework.Security.Configuration.SecurityConfiguration.GetAuthorizationProviderConfig(System.String)">
            <summary>
            Get the custom configuration object for the specified authorization provider.
            </summary>
            <param name="providerName">Name of the authorization provider.</param>
            <returns>Custom configuration object that extends the <see cref="T:Prezza.Framework.Configuration.ProviderData" /> class.</returns>
        </member>
        <member name="M:Prezza.Framework.Security.Configuration.SecurityConfiguration.GetProfileProviderConfig(System.String)">
            <summary>
            Get the custom configuration object for the specified profile provider.
            </summary>
            <param name="providerName">Name of the profile provider.</param>
            <returns>Custom configuration object that extends the <see cref="T:Prezza.Framework.Configuration.ProviderData" /> class.</returns>
        </member>
        <member name="M:Prezza.Framework.Security.Configuration.SecurityConfiguration.GetSessionTokenProviderConfig(System.String)">
            <summary>
            Get the configuration for the specified session security token provider
            </summary>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.Configuration.SecurityConfiguration.GetCacheProviderConfig">
            <summary>
            Get the configuration object for the security cache provider.
            </summary>
            <returns><see cref="T:Prezza.Framework.Configuration.ProviderData"/> configuration for security cache provider.</returns>
        </member>
        <member name="M:Prezza.Framework.Security.Configuration.SecurityConfiguration.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Load framework security configuration from Xml.
            </summary>
            <param name="node">Xml node containing framework security information.</param>
            <remarks>
            In addition to loading framework level security information, this method will cause the configurations
            for custom providers to be loaded through calls to ConfigurationManager.GetConfiguration (<see cref="T:Prezza.Framework.Configuration.ConfigurationManager"/>).  The GetConfiguration
            method will be called for each child node in the providers sub groups.
            </remarks>
        </member>
        <member name="P:Prezza.Framework.Security.Configuration.SecurityConfiguration.AvailableProfileProviders">
            <summary>
            Get a collection of available profile providers
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.Configuration.SecurityConfiguration.AvailableAuthorizationProviders">
            <summary>
            Get a collection of available authorization providers
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.Configuration.SecurityConfiguration.AvailableAuthenticationProviders">
            <summary>
            Get a collection of available authentication providers
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.Configuration.SecurityConfiguration.DefaultAuthenticationProvider">
            <summary>
            Name of the default authentication provider (if specified in the configuration file)
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.Configuration.SecurityConfiguration.DefaultAuthorizationProvider">
            <summary>
            Name of the default authorization provider (if specified in the configuration file)
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.Configuration.SecurityConfiguration.DefaultProfileProvider">
            <summary>
            Name of the default profile provider (if specified in the configuration file)
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.Configuration.SecurityConfiguration.DefaultSessionTokenProvider">
            <summary>
            Get the name of the default session security token provider
            </summary>
        </member>
        <member name="T:Prezza.Framework.Security.IAccessControlEntry">
            <summary>
            Interface for container objects for access control entriers.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.IAccessControlEntry.Policy">
            <summary>
            Get the entry _policy.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.IAccessControlEntry.PolicyId">
            <summary>
            Get/set id of acl entry policy
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.IAccessControlEntry.AclEntryTypeIdentifier">
            <summary>
            Get/set acl entry type identifier
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.IAccessControlEntry.AclEntryIdentifier">
            <summary>
            Get/set entry identifier
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.IAccessControlEntry.IsInList">
            <summary>
            Uses to check entry availability
            </summary>
        </member>
        <member name="T:Prezza.Framework.Security.IAccessControllable">
            <summary>
            Defines the interface that Access Controllable resources must support.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.IAccessControllable.DefaultPolicy">
            <summary>
            The default <see cref="T:Prezza.Framework.Security.Policy"/> for this resource
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.IAccessControllable.ACL">
            <summary>
            The <see cref="T:Prezza.Framework.Security.AccessControlList"/> for this resource
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.IAccessControllable.CreatePolicy(System.String[])">
            <summary>
            Factory method creates <see cref="T:Prezza.Framework.Security.Policy"/> of Type appropriate to IAccessControllable implementation
            </summary>
            <param name="permissions">the permissions for the <see cref="T:Prezza.Framework.Security.Policy"/></param>
            <returns></returns>
        </member>
        <member name="P:Prezza.Framework.Security.IAccessControllable.SupportedPermissions">
            <summary>
            Gets a list of supported permissions
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.IAccessControllable.SupportedPermissionMasks">
            <summary>
            Get a list of supported permission masks
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.IAccessControllable.GetEditor">
            <summary>
            Get the <see cref="T:Prezza.Framework.Security.SecurityEditor"/> for the IAccessControllable entity.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Prezza.Framework.Security.IAccessControllable.Name">
            <summary>
            Get controllable entity name
            </summary>
        </member>
        <member name="T:Prezza.Framework.Security.IAccessControlList">
            <summary>
            Interface definition for security access control list.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.IAccessControlList.ID">
            <summary>
            The unique ID of this AccessControlList
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.IAccessControlList.IsInList(Prezza.Framework.Security.IAccessPermissible)">
            <summary>
            Gets whether a given entity has an entry in this AccessControlList
            </summary>
            <param name="permissibleEntity">an <see cref="T:Prezza.Framework.Security.IAccessPermissible"/> entity, e.g., IPrincipal, Group, Role</param>
            <returns>true, if exists in AccessControlList; otherwise false</returns>
        </member>
        <member name="M:Prezza.Framework.Security.IAccessControlList.IsInList(System.String)">
            <summary>
            Gets whether a given entity has an entry in this AccessControlList
            </summary>
            <param name="aclIdentifier">an ACL identifier specific to type of access control list. Should be created
             by CreateAclIdentifier method.  </param>   
            <returns>true, if exists in AccessControlList; otherwise false</returns>
        </member>
        <member name="M:Prezza.Framework.Security.IAccessControlList.CreateAclIdentifier(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="aclTypeIdentifier"></param>
            <param name="aclEntryIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.IAccessControlList.GetPolicy(Prezza.Framework.Security.IAccessPermissible)">
            <summary>
            Gets the Policy stored for a given entry in this AccessControlList
            </summary>
            <param name="permissibleEntity">an <see cref="T:Prezza.Framework.Security.IAccessPermissible"/> entity, e.g., IPrincipal, Group, Role</param>
            <returns>the <see cref="T:Prezza.Framework.Security.Policy"/> for this entry, if exists; otherwise null</returns>
        </member>
        <member name="M:Prezza.Framework.Security.IAccessControlList.GetPolicyEntry(System.Int32)">
            <summary>
            Gets IAccessControlEntry associated with a policy ID.
            </summary>
            <param name="policyId"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.IAccessControlList.SelectAnd(System.String[])">
            <summary>
            Get a datatable with ACL entries having all of the specified permissions.
            </summary>
            <param name="permissions">Permissions to check.</param>
            <returns><see cref="T:System.Data.DataTable"/> containing ACL entry information.</returns>
        </member>
        <member name="M:Prezza.Framework.Security.IAccessControlList.SelectOr(System.String[])">
            <summary>
            Get a datatable with ACL entries having any of the specified permissions.
            </summary>
            <param name="permissions">Permissions to check.</param>
            <returns><see cref="T:System.Data.DataTable"/>Table containing ACL entries.</returns>
        </member>
        <member name="M:Prezza.Framework.Security.IAccessControlList.SelectAll">
            <summary>
            Get a list of all entries in the ACL, regardless of whether any permissions exist.
            </summary>
            <returns>DataTable with ACL entry information.</returns>
        </member>
        <member name="M:Prezza.Framework.Security.IAccessControlList.Delete(Prezza.Framework.Security.IAccessPermissible)">
            <summary>
            Deletes an entry from the AccessControlList
            </summary>
            <param name="entry">the <see cref="T:Prezza.Framework.Security.IAccessPermissible"/> entry to delete</param>
        </member>
        <member name="M:Prezza.Framework.Security.IAccessControlList.Add(Prezza.Framework.Security.IAccessPermissible,Prezza.Framework.Security.Policy)">
            <summary>
            Adds an entry to the AccessControlList
            </summary>
            <param name="entry">the <see cref="T:Prezza.Framework.Security.IAccessPermissible"/> entitiy to add</param>
            <param name="policy">the policy to associate with this entry</param>
        </member>
        <member name="M:Prezza.Framework.Security.IAccessControlList.Delete(Prezza.Framework.Security.IAccessControlEntry)">
            <summary>
            Deletes an entry from the AccessControlList
            </summary>
            <param name="entry">the <see cref="T:Prezza.Framework.Security.IAccessPermissible"/> entry to delete</param>
        </member>
        <member name="M:Prezza.Framework.Security.IAccessControlList.Add(Prezza.Framework.Security.IAccessControlEntry)">
            <summary>
            Adds an entry to the AccessControlList
            </summary>
            <param name="entry">the <see cref="T:Prezza.Framework.Security.IAccessPermissible"/> entitiy to add</param>
        </member>
        <member name="M:Prezza.Framework.Security.IAccessControlList.Save">
            <summary>
            Commit any pending changes to the ACL to the database.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Security.IAccessPermissible">
            <summary>
            Describes the interface implemented by objects which can be granted permissions in the system
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.IAccessPermissible.AclTypeIdentifier">
            <summary>
            A string identifier of type for this 
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.IAccessPermissible.AclEntryIdentifier">
            <summary>
            A string identifier of an instance
            </summary>
        </member>
        <member name="T:Prezza.Framework.Security.IAuthorizationProvider">
            <summary>
             Defines the interface that authorization providers must support.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.IAuthorizationProvider.Authorize(Prezza.Framework.Security.Principal.ExtendedPrincipal,System.String)">
            <summary>
            Authorize the specified principal against the specified
            context.
            </summary>
            <param name="principal">the <see cref="T:Prezza.Framework.Security.Principal.ExtendedPrincipal"/> to authorize.</param>
            <param name="context">Context to authorize the principal against.</param>
            <returns>True if authorization is given, false otherwise.</returns>
        </member>
        <member name="M:Prezza.Framework.Security.IAuthorizationProvider.Authorize(Prezza.Framework.Security.Principal.ExtendedPrincipal,Prezza.Framework.Security.IAccessControllable,System.String)">
            <summary>
            Authorize the specified principal to access a given resource against the specified context.
            </summary>
            <param name="principal">the <see cref="T:Prezza.Framework.Security.Principal.ExtendedPrincipal"/> to authorize.</param>
            <param name="resource">the <see cref="T:Prezza.Framework.Security.IAccessControllable"/> resource to authorize against</param>
            <param name="context">Context to authorize the principal against.</param>
            <returns>True if authorization is given, false otherwise.</returns>
        </member>
        <member name="M:Prezza.Framework.Security.IAuthorizationProvider.GetAuthorizationErrorType">
            <summary>
            Get a string identifying an auth failure type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Prezza.Framework.Security.ISessionTokenProvider">
            <summary>
            Provider for getting and setting security tokens for user sessions in the product.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.ISessionTokenProvider.GetSessionToken">
            <summary>
            Get the current session token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.ISessionTokenProvider.SetSessionToken(Prezza.Framework.Security.IToken)">
            <summary>
            Set the token for the current session.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Prezza.Framework.Security.ISessionTokenProvider.ClearSessionToken">
            <summary>
            Clear the session token.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Security.IToken">
            <summary>
            Security token interface.  A token supports retrieving its value as a string and is used to access
            items in a security cache.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.IToken.Value">
            <summary>
            Get the token contents as a string
            </summary>
        </member>
        <member name="T:Prezza.Framework.Security.LightweightAccessControllable">
            <summary>
            Lightweight access controllable object that can be used for authentication purposes only. It does
            not support any access editing functionality, but is suitable as a base for other access controllable
            resources.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.LightweightAccessControllable.AclID">
            <summary>
            Get/set the acl id
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.LightweightAccessControllable.DefaultPolicyID">
            <summary>
            Get/set default policy id
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.LightweightAccessControllable.ID">
            <summary>
            Get/set id of access controllable entity
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.LightweightAccessControllable.Name">
            <summary>
            Get/set name of access controllable entity
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.LightweightAccessControllable.EntityType">
            <summary>
            Get/set type of access controllable entity
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.LightweightAccessControllable.Owner">
            <summary>
            Get/set "Owner" of entity.  Depending on security mode, owner may have
            different meaning.
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.LightweightAccessControllable.ChildrenCount">
            <summary>
            Get/set count of children entities. For the folder it's a count of surveys stored in this folder.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.LightweightAccessControllable.ToString">
            <summary>
            Get string version of the item
            </summary>
            <returns></returns>
        </member>
        <member name="P:Prezza.Framework.Security.LightweightAccessControllable.DefaultPolicy">
            <summary>
            Get the default <see cref="T:Prezza.Framework.Security.Policy"/> for this resource
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.LightweightAccessControllable.ACL">
            <summary>
            Get the <see cref="T:Prezza.Framework.Security.AccessControlList"/> for this resource
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.LightweightAccessControllable.CreatePolicy(System.String[])">
            <summary>
            Not implemented
            </summary>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="P:Prezza.Framework.Security.LightweightAccessControllable.SupportedPermissions">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.LightweightAccessControllable.SupportedPermissionMasks">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.LightweightAccessControllable.GetEditor">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="T:Prezza.Framework.Security.Policy">
            <summary>
            A type of <see cref="T:Prezza.Framework.Security.Role"/> that includes additional constraints or rules governing the set of permissions.
            </summary>
            <remarks>
            A Policy is used to define access rules within the context of a given implementer of <see cref="T:Prezza.Framework.Security.IAccessControllable"/> 
            </remarks>
        </member>
        <member name="M:Prezza.Framework.Security.Policy.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.Policy.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="permissions">permissions belonging to this Policy</param>
        </member>
        <member name="P:Prezza.Framework.Security.Policy.SupportedPermissions">
            <summary>
            Property defines the permissions supported by a given Policy subclass
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.Policy.Persist">
            <summary>
            Persist the policy, should only be used when creating policies that are not part
            of access control lists...i.e. default policies, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.Policy.VerifyPolicy">
            <summary>
            Checks if the rules of this Policy have been met
            </summary>
            <returns>true, if Policy met; otherwise false</returns>
        </member>
        <member name="M:Prezza.Framework.Security.Policy.GetPolicy(System.Int32)">
            <summary>
            Gets a Policy given its ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.Policy.UpdatePolicy(System.Int32)">
            <summary>
            Remove policy from cache
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Prezza.Framework.Security.PolicyMapper">
            <summary>
            Internal class for maintaining policy data.
            </summary>
            <remarks>Since policy data storage is application specific, this should eventually move to
            Checkbox namespace.</remarks>
        </member>
        <member name="F:Prezza.Framework.Security.PolicyMapper._cache">
            <summary>
            Cache
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.PolicyMapper.#cctor">
            <summary>
            Static contructor
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.PolicyMapper.Find(System.Int32)">
            <summary>
            Find and load a policy with the given id.
            </summary>
            <param name="policyID"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.PolicyMapper.CleanupPolicyCaches(System.Int32)">
            <summary>
            Remove policy from cache
            </summary>
            <param name="policyID"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.PolicyMapper.Insert(Prezza.Framework.Security.Policy)">
            <summary>
            Create the specified access policy in the database.
            </summary>
            <param name="policy"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.PolicyMapper.Insert(Prezza.Framework.Security.Policy,System.Data.IDbTransaction)">
            <summary>
            Create the specified policy in the database.  If a transaction is provided, the database write will
            occur in the context of that transaction and any rollback and commit logic must be implemented by the
            caller.
            </summary>
            <param name="policy"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.PolicyMapper.Load(System.Data.DataSet)">
            <summary>
            Load a policy from a dataset.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Prezza.Framework.Security.Principal.ExtendedPrincipal">
            <summary>
            Extended principal class that implements the <see cref="T:System.Security.Principal.IPrincipal"/> and <see cref="T:Prezza.Framework.Security.IAccessPermissible" /> interfaces.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.Principal.ExtendedPrincipal.#ctor(System.Security.Principal.IIdentity,System.String[])">
            <summary>
            Constructor.
            </summary>
            <param name="identity">Identity that identifies this principal.</param>
            <param name="roles">Roles this principal is a member of.</param>
        </member>
        <member name="M:Prezza.Framework.Security.Principal.ExtendedPrincipal.InitializePrincipal(System.Security.Principal.IIdentity,System.String[])">
            <summary>
            Initialize a principal with the specified identity and _roles
            </summary>
            <param name="identity"></param>
            <param name="roles"></param>
        </member>
        <member name="P:Prezza.Framework.Security.Principal.ExtendedPrincipal.Identity">
            <summary>
            Get the identity that identifies this principal.
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.Principal.ExtendedPrincipal.IsInRole(System.String)">
            <summary>
            Determine if this principal is in the given role.
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.Principal.ExtendedPrincipal.IsRoleContains(System.String)">
            <summary>
            Determines whether [is role contains] [the specified substring].
            </summary>
            <param name="substring">The substring.</param>
            <returns>
              <c>true</c> if [is role contains] [the specified substring]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Prezza.Framework.Security.Principal.ExtendedPrincipal.GetRoles">
            <summary>
            Get the _roles list
            </summary>
            <returns></returns>
        </member>
        <member name="F:Prezza.Framework.Security.Principal.ExtendedPrincipal.ExtendedPrincipalAclTypeIdentifier">
            <summary>
            Get the string representation of the ACL type for this principal
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.Principal.ExtendedPrincipal.AclTypeIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.Principal.ExtendedPrincipal.AclEntryIdentifier">
            <summary>
            Get the string representation of the ACL entry for this item.
            </summary>
        </member>
        <member name="T:Prezza.Framework.Security.Role">
            <summary>
            Defines a set of _permissions
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.Role._permissions">
            <summary>
            A container for the _permissions associated with this Role
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.Role.#ctor(System.String[])">
            <summary>
            Constructor.
            </summary>
            <param _name="_permissions">a string array of Permissions to initialize this Role with</param>
        </member>
        <member name="P:Prezza.Framework.Security.Role.Permissions">
            <summary>
            Get the permissions of the role
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.Role.Id">
            <summary>
            Get/set id of the role
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.Role.Name">
            <summary>
            Gets or sets the string Name of this Role
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.Role.Description">
            <summary>
            Gets or sets the string Description of this Role
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.Role.AclEntryIdentifier">
            <summary>
            Gets the AccessControl Entry Identifier 
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.Role.AclTypeIdentifier">
            <summary>
            Gets the string type idenifier for use in Access Control Entries
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.Role.HasPermission(System.String)">
            <summary>
            Checks whether this Role contains a given Permission
            </summary>
            <param _name="permission">the permission to check for</param>
            <returns>true, if found; otherwise false</returns>
        </member>
        <member name="M:Prezza.Framework.Security.Role.HasAllPermissions(System.String[])">
            <summary>
            Return a boolean indicating if the role object contains all permissions.
            </summary>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.Role.HasAtLeastOnePermission(System.String[])">
            <summary>
            Return a boolean indicating if the role object contains at least
            one of the specified permissions.
            </summary>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="T:Prezza.Framework.Security.PermissibleResourceDelegate">
            <summary>
            Delegate for retrieving a list of access permissible objects that may be added to an ACL
            </summary>
            <param name="entryData"></param>
        </member>
        <member name="T:Prezza.Framework.Security.SecurityEditor">
            <summary>
            Summary description for SharingController.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.SecurityEditor.GetPermissible">
            <summary>
            Callback for retrieving entities that can be added to the ACL.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.SecurityEditor._authProvider">
            <summary>
            Authorization provider for the resource being edited.
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.SecurityEditor._resource">
            <summary>
            The IAccessControllable resource controlled by this SecurityEditor
            </summary>
        </member>
        <member name="F:Prezza.Framework.Security.SecurityEditor._currentPrincipal">
            <summary>
            Current principal
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.SecurityEditor.#ctor(Prezza.Framework.Security.IAccessControllable)">
            <summary>
            Constructor
            </summary>
            <param name="resource">an <see cref="T:Prezza.Framework.Security.IAccessControllable"/> object to edit security on</param>
        </member>
        <member name="M:Prezza.Framework.Security.SecurityEditor.GetAccessPermissible(System.String[])">
            <summary>
            Gets a list of permissible entities for selection into the resource ACL
            </summary>
            <returns>a table of available entities</returns>
        </member>
        <member name="M:Prezza.Framework.Security.SecurityEditor.GetAccessPermissible(System.String,System.Int32,System.Int32,System.String,System.String[])">
            <summary>
             Gets a list of permissible entities for selection into the resource ACL
            </summary>
            <param name="provider"></param>
            <param name="currentPage"></param>
            <param name="pageSize"></param>
            <param name="filterValue"></param>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.SecurityEditor.Initialize(Prezza.Framework.Security.Principal.ExtendedPrincipal)">
            <summary>
            Initialize the editor with the current principal
            </summary>
            <param name="currentPrincipal"></param>
        </member>
        <member name="P:Prezza.Framework.Security.SecurityEditor.CurrentPrincipal">
            <summary>
            Get the current principal
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.SecurityEditor.ControllableResource">
            <summary>
            Get the controllable resource
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.SecurityEditor.AuthorizationProvider">
            <summary>
            Get the authorization provider
            </summary>
        </member>
        <member name="P:Prezza.Framework.Security.SecurityEditor.RequiredEditorPermission">
            <summary>
            Get the permission required to edit this object
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.SecurityEditor.SaveAcl">
            <summary>
            Save the resource's ACL
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.SecurityEditor.SetDefaultPolicy(Prezza.Framework.Security.Policy)">
            <summary>
            Set the resource's Default Policy
            </summary>
        </member>
        <member name="M:Prezza.Framework.Security.SecurityEditor.List(System.String[])">
            <summary>
            Lists the Entries in the AccessControlList
            </summary>
            <returns>A DataTable of entry information</returns>
        </member>
        <member name="M:Prezza.Framework.Security.SecurityEditor.Validate(Prezza.Framework.Security.IAccessControlEntry[])">
            <summary>
            Performs validation operations on the pending additions to the AccessControlList.
            </summary>
            <remarks>Validation is implemented by inheritors of SecurityEditor and will differ depending on the 
            requirements of the implementation. 
            </remarks>
            <param name="pendingEntries">a list of new <see cref="T:Prezza.Framework.Security.IAccessControlEntry"/> to validate</param>
            <returns>true if valid; otherwise false</returns>
        </member>
        <member name="M:Prezza.Framework.Security.SecurityEditor.ReplaceAccess(Prezza.Framework.Security.IAccessControlEntry[],System.String[])">
            <summary>
            Replace access for specified entries with permissions
            </summary>
            <param name="pendingEntries"></param>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.SecurityEditor.ReplaceAccess(Prezza.Framework.Security.IAccessPermissible,System.String[])">
            <summary>
            Replace access for specified entries with permissions
            </summary>
            <param name="permissibleEntity"></param>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.SecurityEditor.GrantAccess(Prezza.Framework.Security.IAccessControlEntry[],System.String[])">
            <summary>
            Grants selected entries permissions on the resource object
            </summary>
            <param name="pendingEntries"></param>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.SecurityEditor.GrantAccess(Prezza.Framework.Security.IAccessPermissible,System.String[])">
            <summary>
            Grants selected entries permissions on the resource object
            </summary>
            <param name="permissibleEntity"></param>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.SecurityEditor.RemoveAccess(Prezza.Framework.Security.IAccessControlEntry[])">
            <summary>
            Remove selected entries permissions on the resource object
            </summary>
            <param name="pendingEntries"></param>
            <returns></returns>
        </member>
        <member name="M:Prezza.Framework.Security.SecurityEditor.RemoveAccess(Prezza.Framework.Security.IAccessPermissible)">
            <summary>
            Remove selected entries permissions on the resource object
            </summary>
            <param name="permissibleEntity"></param>
            <returns></returns>
        </member>
    </members>
</doc>
