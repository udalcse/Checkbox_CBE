//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Xheo.Licensing.ExternalLicenseServer {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Xheo.Licensing ServerSoap", Namespace="http://www.xheo.com/licensing/")]
    public partial class XheoLicensingServer : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private LicenseCultureSoapHeader licenseCultureSoapHeaderValueField;
        
        private System.Threading.SendOrPostCallback RenewLeaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrialLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterExOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnregisterOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public XheoLicensingServer() {
            this.Url = "http://www.xheo.local/licensingserver.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public LicenseCultureSoapHeader LicenseCultureSoapHeaderValue {
            get {
                return this.licenseCultureSoapHeaderValueField;
            }
            set {
                this.licenseCultureSoapHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RenewLeaseCompletedEventHandler RenewLeaseCompleted;
        
        /// <remarks/>
        public event GetTrialLicenseCompletedEventHandler GetTrialLicenseCompleted;
        
        /// <remarks/>
        public event ValidateExCompletedEventHandler ValidateExCompleted;
        
        /// <remarks/>
        public event ValidateCompletedEventHandler ValidateCompleted;
        
        /// <remarks/>
        public event RegisterExCompletedEventHandler RegisterExCompleted;
        
        /// <remarks/>
        public event RegisterCompletedEventHandler RegisterCompleted;
        
        /// <remarks/>
        public event UnregisterCompletedEventHandler UnregisterCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("LicenseCultureSoapHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xheo.com/licensing/RenewLease", RequestNamespace="http://www.xheo.com/licensing/", ResponseNamespace="http://www.xheo.com/licensing/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RenewLease(string originalLicenseXml, string profileHash, string keys) {
            object[] results = this.Invoke("RenewLease", new object[] {
                        originalLicenseXml,
                        profileHash,
                        keys});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRenewLease(string originalLicenseXml, string profileHash, string keys, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RenewLease", new object[] {
                        originalLicenseXml,
                        profileHash,
                        keys}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRenewLease(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RenewLeaseAsync(string originalLicenseXml, string profileHash, string keys) {
            this.RenewLeaseAsync(originalLicenseXml, profileHash, keys, null);
        }
        
        /// <remarks/>
        public void RenewLeaseAsync(string originalLicenseXml, string profileHash, string keys, object userState) {
            if ((this.RenewLeaseOperationCompleted == null)) {
                this.RenewLeaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenewLeaseOperationCompleted);
            }
            this.InvokeAsync("RenewLease", new object[] {
                        originalLicenseXml,
                        profileHash,
                        keys}, this.RenewLeaseOperationCompleted, userState);
        }
        
        private void OnRenewLeaseOperationCompleted(object arg) {
            if ((this.RenewLeaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenewLeaseCompleted(this, new RenewLeaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xheo.com/licensing/GetTrialLicense", RequestNamespace="http://www.xheo.com/licensing/", ResponseNamespace="http://www.xheo.com/licensing/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTrialLicense(string extra, string assemblyName, string profileHash) {
            object[] results = this.Invoke("GetTrialLicense", new object[] {
                        extra,
                        assemblyName,
                        profileHash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTrialLicense(string extra, string assemblyName, string profileHash, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTrialLicense", new object[] {
                        extra,
                        assemblyName,
                        profileHash}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetTrialLicense(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTrialLicenseAsync(string extra, string assemblyName, string profileHash) {
            this.GetTrialLicenseAsync(extra, assemblyName, profileHash, null);
        }
        
        /// <remarks/>
        public void GetTrialLicenseAsync(string extra, string assemblyName, string profileHash, object userState) {
            if ((this.GetTrialLicenseOperationCompleted == null)) {
                this.GetTrialLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrialLicenseOperationCompleted);
            }
            this.InvokeAsync("GetTrialLicense", new object[] {
                        extra,
                        assemblyName,
                        profileHash}, this.GetTrialLicenseOperationCompleted, userState);
        }
        
        private void OnGetTrialLicenseOperationCompleted(object arg) {
            if ((this.GetTrialLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrialLicenseCompleted(this, new GetTrialLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("LicenseCultureSoapHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xheo.com/licensing/ValidateEx", RequestNamespace="http://www.xheo.com/licensing/", ResponseNamespace="http://www.xheo.com/licensing/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateEx(string licenseXml, string keys, string salt, string profileHash, string valuesXml) {
            object[] results = this.Invoke("ValidateEx", new object[] {
                        licenseXml,
                        keys,
                        salt,
                        profileHash,
                        valuesXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidateEx(string licenseXml, string keys, string salt, string profileHash, string valuesXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateEx", new object[] {
                        licenseXml,
                        keys,
                        salt,
                        profileHash,
                        valuesXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndValidateEx(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateExAsync(string licenseXml, string keys, string salt, string profileHash, string valuesXml) {
            this.ValidateExAsync(licenseXml, keys, salt, profileHash, valuesXml, null);
        }
        
        /// <remarks/>
        public void ValidateExAsync(string licenseXml, string keys, string salt, string profileHash, string valuesXml, object userState) {
            if ((this.ValidateExOperationCompleted == null)) {
                this.ValidateExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateExOperationCompleted);
            }
            this.InvokeAsync("ValidateEx", new object[] {
                        licenseXml,
                        keys,
                        salt,
                        profileHash,
                        valuesXml}, this.ValidateExOperationCompleted, userState);
        }
        
        private void OnValidateExOperationCompleted(object arg) {
            if ((this.ValidateExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateExCompleted(this, new ValidateExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xheo.com/licensing/Validate", RequestNamespace="http://www.xheo.com/licensing/", ResponseNamespace="http://www.xheo.com/licensing/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Validate(string licenseXml, string keys, string salt) {
            object[] results = this.Invoke("Validate", new object[] {
                        licenseXml,
                        keys,
                        salt});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidate(string licenseXml, string keys, string salt, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Validate", new object[] {
                        licenseXml,
                        keys,
                        salt}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndValidate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateAsync(string licenseXml, string keys, string salt) {
            this.ValidateAsync(licenseXml, keys, salt, null);
        }
        
        /// <remarks/>
        public void ValidateAsync(string licenseXml, string keys, string salt, object userState) {
            if ((this.ValidateOperationCompleted == null)) {
                this.ValidateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateOperationCompleted);
            }
            this.InvokeAsync("Validate", new object[] {
                        licenseXml,
                        keys,
                        salt}, this.ValidateOperationCompleted, userState);
        }
        
        private void OnValidateOperationCompleted(object arg) {
            if ((this.ValidateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateCompleted(this, new ValidateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xheo.com/licensing/RegisterEx", RequestNamespace="http://www.xheo.com/licensing/", ResponseNamespace="http://www.xheo.com/licensing/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RegisterEx(string licenseXml, string keys, string serialNumber, bool generateLicense, string valuesXml) {
            object[] results = this.Invoke("RegisterEx", new object[] {
                        licenseXml,
                        keys,
                        serialNumber,
                        generateLicense,
                        valuesXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegisterEx(string licenseXml, string keys, string serialNumber, bool generateLicense, string valuesXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegisterEx", new object[] {
                        licenseXml,
                        keys,
                        serialNumber,
                        generateLicense,
                        valuesXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRegisterEx(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterExAsync(string licenseXml, string keys, string serialNumber, bool generateLicense, string valuesXml) {
            this.RegisterExAsync(licenseXml, keys, serialNumber, generateLicense, valuesXml, null);
        }
        
        /// <remarks/>
        public void RegisterExAsync(string licenseXml, string keys, string serialNumber, bool generateLicense, string valuesXml, object userState) {
            if ((this.RegisterExOperationCompleted == null)) {
                this.RegisterExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterExOperationCompleted);
            }
            this.InvokeAsync("RegisterEx", new object[] {
                        licenseXml,
                        keys,
                        serialNumber,
                        generateLicense,
                        valuesXml}, this.RegisterExOperationCompleted, userState);
        }
        
        private void OnRegisterExOperationCompleted(object arg) {
            if ((this.RegisterExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterExCompleted(this, new RegisterExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xheo.com/licensing/Register", RequestNamespace="http://www.xheo.com/licensing/", ResponseNamespace="http://www.xheo.com/licensing/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Register(string licenseXml, string keys) {
            this.Invoke("Register", new object[] {
                        licenseXml,
                        keys});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegister(string licenseXml, string keys, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Register", new object[] {
                        licenseXml,
                        keys}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRegister(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RegisterAsync(string licenseXml, string keys) {
            this.RegisterAsync(licenseXml, keys, null);
        }
        
        /// <remarks/>
        public void RegisterAsync(string licenseXml, string keys, object userState) {
            if ((this.RegisterOperationCompleted == null)) {
                this.RegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterOperationCompleted);
            }
            this.InvokeAsync("Register", new object[] {
                        licenseXml,
                        keys}, this.RegisterOperationCompleted, userState);
        }
        
        private void OnRegisterOperationCompleted(object arg) {
            if ((this.RegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xheo.com/licensing/Unregister", RequestNamespace="http://www.xheo.com/licensing/", ResponseNamespace="http://www.xheo.com/licensing/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Unregister(string licenseXml, string keys) {
            this.Invoke("Unregister", new object[] {
                        licenseXml,
                        keys});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnregister(string licenseXml, string keys, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Unregister", new object[] {
                        licenseXml,
                        keys}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUnregister(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UnregisterAsync(string licenseXml, string keys) {
            this.UnregisterAsync(licenseXml, keys, null);
        }
        
        /// <remarks/>
        public void UnregisterAsync(string licenseXml, string keys, object userState) {
            if ((this.UnregisterOperationCompleted == null)) {
                this.UnregisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnregisterOperationCompleted);
            }
            this.InvokeAsync("Unregister", new object[] {
                        licenseXml,
                        keys}, this.UnregisterOperationCompleted, userState);
        }
        
        private void OnUnregisterOperationCompleted(object arg) {
            if ((this.UnregisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnregisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xheo.com/licensing/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.xheo.com/licensing/", IsNullable=false)]
    public partial class LicenseCultureSoapHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string cultureNameField;
        
        /// <remarks/>
        public string CultureName {
            get {
                return this.cultureNameField;
            }
            set {
                this.cultureNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RenewLeaseCompletedEventHandler(object sender, RenewLeaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenewLeaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenewLeaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTrialLicenseCompletedEventHandler(object sender, GetTrialLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTrialLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrialLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ValidateExCompletedEventHandler(object sender, ValidateExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ValidateCompletedEventHandler(object sender, ValidateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RegisterExCompletedEventHandler(object sender, RegisterExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RegisterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnregisterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591